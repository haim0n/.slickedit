<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="440" Comment="" Date="2012/03/22" Time="11:23:5000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2010, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
* DESCRIPTION:
*       
* 
*******************************************************************************/
#include &lt;linux/kernel.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/version.h&gt;

#ifndef MV_CPU_LE
  #define MV_CPU_LE
#endif

#include &lt;gbe/mvNeta.h&gt;
#include &lt;gbe/mvNetaRegs.h&gt;

#include &lt;gbe/mvEthRegs.h&gt;
#include &lt;mv_neta/net_dev/mv_netdev.h&gt;

#include "eth_if.h"
#include &lt;log.h&gt;

//#define ETH_DEBUG

#define ETH_IF_ERROR(format, args...) MMP_LOG(3,format, ##args)
#define ETH_IF_INFO(format, args...) MMP_LOG(6,format, ##args)

#ifdef ETH_DEBUG
  #define ETH_IF_DBG(format, args...) MMP_LOG(7,format, ##args)
#else
  #define ETH_IF_DBG(format, args...) 
#endif


#define ETH_HLEN 14

/* Maximum number of ethernet interfaces */
#define ETH_IF_MAX 3

/* Number of Tx descriptors */
#define ETH_IF_TX_DESC_NUM   512

/* Number of Rx descriptors */
#define ETH_IF_RX_DESC_NUM   128

/* Number of buffers in Rx pool */
#define ETH_IF_RX_POOL_SIZE  ETH_IF_RX_DESC_NUM 

/* Default MTU */
#define ETH_IF_MTU 1500

/* Rx buffer size: MTU + 2(Marvell Header) + 4(VLAN) + 14(MAC hdr) + 4(CRC) */
#define ETH_IF_RX_PKT_SIZE(mtu) \
    MV_ALIGN_UP((mtu) + 2 + 4 + ETH_HLEN + 4, CPU_D_CACHE_LINE_SIZE)

/* Buffer headroom size */
#define ETH_IF_PKT_PAD 64

/* Size of Rx buffer */
#define ETH_IF_RX_BUF_SIZE(pkt_size)  ((pkt_size) + ETH_IF_PKT_PAD)

/* Maximum time to wait for tramission complete on shutdown, mseconds */
#define ETH_TX_COMPLETE_TIMEOUT 100

/* first n bytes of packet, to be put in HDR pool*/
#define HDR_DATA_SPLIT_BYTES 64

#define PKT_HDR_PART 0
#define PKT_DATA_PART 1
/* Packet buffer */
typedef struct {
  MV_U8*   buf[2]; 	/* [0]: pointer to [0 .. HDR_DATA_SPLIT_BYTES -1], 
			   [1]: [HDR_DATA_SPLIT_BYTES ... end] packet bytes*/
  MV_ULONG phys_addr[2]; /* see buf for description */
  MV_U32   data_size; 	/* buf_size - HDR_DATA_SPLIT_BYTES */
  MV_U32   buf_size; 	/* complete packet size (hdr + data) */
} eth_if_pkt_t;

/* Packet buffer pool */
typedef struct {
  eth_if_pkt_t* pkt; /* Points to array of packets */
  int           size; /* Pool size */
  char *hdr_pool; /* points to array of packet headers */
} eth_if_pkt_pool_t;


/* Eth interface state */
typedef struct
{
  bool              init; /* true if initialized */
  eth_if_config_t   cfg; /* Configuration and status */
  MV_NETA_TXQ_CTRL* txq_ctrl; /* Tx queue state */
  MV_NETA_RXQ_CTRL* rxq_ctrl; /* Rx queue state */
  eth_if_pkt_pool_t rx_pkt_pool; /* Rx buffers */
  eth_if_stats_t    stats;
} eth_if_t;

/* Interface state. TODO Make array when needed */
static eth_if_t eth_if_list[ETH_IF_MAX];

/******************************* TODO: Ask Dima to move to mvNeta.h ************************/

MV_STATUS mvNetaRxqBufSizeSet(int port, int rxq, int bufSize)
{
  MV_U32 regVal;

  regVal = MV_REG_READ(NETA_RXQ_SIZE_REG(port, rxq));

  regVal &amp;= ~NETA_RXQ_BUF_SIZE_MASK;
  regVal |= ((bufSize &gt;&gt; 3) &lt;&lt; NETA_RXQ_BUF_SIZE_OFFS);

  MV_REG_WRITE(NETA_RXQ_SIZE_REG(port, rxq), regVal);

  return MV_OK;
}

MV_STATUS mvNetaRxqBmDisable(int port, int rxq)
{
  MV_U32 regVal;

  regVal = MV_REG_READ(NETA_RXQ_CONFIG_REG(port, rxq));

  regVal &amp;= ~NETA_RXQ_HW_BUF_ALLOC_MASK;

  MV_REG_WRITE(NETA_RXQ_CONFIG_REG(port, rxq), regVal);

  return MV_OK;
}

MV_STATUS mvNetaRxqOffsetSet(int port, int rxq, int offset)
{
  MV_U32 regVal;

  regVal = MV_REG_READ(NETA_RXQ_CONFIG_REG(port, rxq));
  regVal &amp;= ~NETA_RXQ_PACKET_OFFSET_ALL_MASK;

  /* Offset is in */
  regVal |= NETA_RXQ_PACKET_OFFSET_MASK(offset &gt;&gt; 3);

  MV_REG_WRITE(NETA_RXQ_CONFIG_REG(port, rxq), regVal);

  return MV_OK;
}

static void mvNetaDescrMemoryFree(MV_NETA_PORT_CTRL *pPortCtrl, MV_BUF_INFO *pDescBuf)
{
  if ((pDescBuf == NULL) || (pDescBuf-&gt;bufVirtPtr == NULL))
    return;

#ifdef ETH_DESCR_UNCACHED
  mvOsIoUncachedFree(pPortCtrl-&gt;osHandle, pDescBuf-&gt;bufSize, pDescBuf-&gt;bufPhysAddr,
         pDescBuf-&gt;bufVirtPtr, pDescBuf-&gt;memHandle);
#else
  mvOsIoCachedFree(pPortCtrl-&gt;osHandle, pDescBuf-&gt;bufSize, pDescBuf-&gt;bufPhysAddr,
       pDescBuf-&gt;bufVirtPtr, pDescBuf-&gt;memHandle);
#endif /* ETH_DESCR_UNCACHED */
}

static MV_U8 *mvNetaDescrMemoryAlloc(MV_NETA_PORT_CTRL *pPortCtrl, int descSize,
           MV_ULONG *pPhysAddr, MV_U32 *memHandle)
{
  MV_U8 *pVirt;

#ifdef ETH_DESCR_UNCACHED
  pVirt = (MV_U8 *)mvOsIoUncachedMalloc(pPortCtrl-&gt;osHandle, descSize, pPhysAddr, memHandle);
#else
  pVirt = (MV_U8 *)mvOsIoCachedMalloc(pPortCtrl-&gt;osHandle, descSize, pPhysAddr, memHandle);
#endif /* ETH_DESCR_UNCACHED */

  if (pVirt)
    memset(pVirt, 0, descSize);

  return pVirt;
}

static void mvNetaDescRingReset(MV_NETA_QUEUE_CTRL *pQueueCtrl)
{
  int   descrNum = (pQueueCtrl-&gt;lastDesc + 1);
  char  *pDesc = pQueueCtrl-&gt;pFirst;

  if (pDesc == NULL)
    return;

  /* reset ring of descriptors */
  memset(pDesc, 0, (descrNum * NETA_DESC_ALIGNED_SIZE));
#ifndef ETH_DESCR_UNCACHED
  mvOsCacheFlush(NULL, pDesc, (descrNum * NETA_DESC_ALIGNED_SIZE));
#endif
  pQueueCtrl-&gt;nextToProc = 0;
}
/******************************* TODO: Ask Dima to move to mvNeta.h ************************/

/*** Misc routines ***/

/* Flush Tx descriptors from cache to ram */
static void eth_if_tx_desc_flush(struct neta_tx_desc *tx_desc)
{
#ifndef ETH_DESCR_UNCACHED
#if defined(MV_CPU_BE)
  mvNetaTxqDescSwap(tx_desc);
#endif /* MV_CPU_BE */
  mvOsCacheLineFlush(NULL, tx_desc);
#endif /* ETH_DESCR_UNCACHED */
}

static void eth_if_destroy_pkt(eth_if_pkt_t *pkt)
{
	if (pkt-&gt;data_size) {
		mvOsFree(pkt-&gt;buf[PKT_DATA_PART]);
		pkt-&gt;buf[PKT_HDR_PART] = NULL;
		pkt-&gt;buf[PKT_DATA_PART] = NULL;
	}
}

/* Destroy packet pool */
static void eth_if_destroy_pkt_pool(eth_if_pkt_pool_t* pool) {
	eth_if_pkt_t *pkt;
	int i;

	if (pool) {
		for (i = 0; i &lt; pool-&gt;size; i++) {
			pkt = &amp;pool-&gt;pkt[i];
			eth_if_destroy_pkt(pkt);
		}

		mvOsFree(pool-&gt;pkt);
		printk(KERN_ERR "(%s:%d) HAIM: freeing hdr_pool %p\n", __func__, __LINE__, 
		       pool-&gt;hdr_pool);
		mvOsFree(pool-&gt;hdr_pool);
		pool-&gt;pkt = NULL;
		pool-&gt;hdr_pool = NULL;
		pool-&gt;size = 0;
	}
}

/* Create packet pool */
static int eth_if_create_pkt_pool(eth_if_pkt_pool_t* pool, int pool_size, int buf_size) {
  eth_if_pkt_t *pkt;
  int i;
  u32 data_size = buf_size - HDR_DATA_SPLIT_BYTES;
  char *hdr_pool;

  if (pool == NULL) {
      return -1;
  }
    
  pool-&gt;size = 0;
  
  pool-&gt;pkt = (eth_if_pkt_t *) mvOsMalloc(pool_size * sizeof(eth_if_pkt_t));
  if (pool-&gt;pkt == NULL) {
      ETH_IF_ERROR("Can't alloc Rx pool, %d bytes", pool_size * sizeof(eth_if_pkt_t));

      return -1;
  }
  pool-&gt;size = pool_size;
  memset(pool-&gt;pkt, 0, sizeof(pool_size * sizeof(eth_if_pkt_t)));
  
  hdr_pool = (char *)mvOsMalloc(pool_size * HDR_DATA_SPLIT_BYTES);
  if (hdr_pool == NULL) {
	  ETH_IF_ERROR("Can't alloc header pool, %d bytes", pool_size * HDR_DATA_SPLIT_BYTES);
	  return -2;
  }
  memset(hdr_pool, 0, pool_size * HDR_DATA_SPLIT_BYTES);

  printk(KERN_ERR "(%s:%d) HAIM: allocated hdr_pool %p size %d\n", __func__, __LINE__, 
	 hdr_pool, pool_size * HDR_DATA_SPLIT_BYTES);

  if (!IS_ALIGNED((unsigned long)hdr_pool, 32)) {
	  printk(KERN_ERR "(%s:%d) HAIM: hdr_pool unaligned !!!\n", __func__, __LINE__);
  }

  for (i = 0; i &lt; pool_size; i++) {
       pkt = &amp;pool-&gt;pkt[i];
       pkt-&gt;buf[PKT_HDR_PART] = &amp;hdr_pool[i * HDR_DATA_SPLIT_BYTES];
       pkt-&gt;buf[PKT_DATA_PART] = mvOsMalloc(data_size); /* TODO DO we need it aligned? */
       if (pkt-&gt;buf[PKT_DATA_PART] == NULL) {
           ETH_IF_ERROR("Can't allocate packet data buffer for pool, %d bytes.", data_size);
           eth_if_destroy_pkt_pool(pool);

           return -1;
       }

       if (!IS_ALIGNED((unsigned long)pkt-&gt;buf[PKT_DATA_PART], 32)) {
	       printk(KERN_ERR "(%s:%d) HAIM: pkt_data unaligned !!! [%p]\n", __func__, __LINE__,
		      pkt-&gt;buf[PKT_DATA_PART]);
       }
       memset(pkt-&gt;buf,0,buf_size);
       pkt-&gt;buf_size = buf_size;
       pkt-&gt;data_size = data_size;
       pkt-&gt;phys_addr[PKT_HDR_PART] = mvOsCacheInvalidate(NULL, pkt-&gt;buf[PKT_HDR_PART], HDR_DATA_SPLIT_BYTES);
       pkt-&gt;phys_addr[PKT_DATA_PART] = mvOsCacheInvalidate(NULL, pkt-&gt;buf[PKT_DATA_PART], data_size);
       pool-&gt;hdr_pool = hdr_pool;
       printk(KERN_ERR "(%s:%d) HAIM: pkt %i, buf[hdr] %p %p, buf[data] %p %p, "
		       "pkt_data_size %d, pkt_size %d\n",
	      __func__, __LINE__,i, 
	      pkt-&gt;buf[PKT_HDR_PART],  (void *)pkt-&gt;phys_addr[PKT_HDR_PART],
	      pkt-&gt;buf[PKT_DATA_PART], (void *)pkt-&gt;phys_addr[PKT_DATA_PART],
	      pkt-&gt;data_size, pkt-&gt;buf_size);
  }

  return 0;
}

static void eth_if_reset_stats(eth_if_t *eth_if) {
  if (eth_if) {
      memset(&amp;eth_if-&gt;stats, 0, sizeof(eth_if_stats_t));
  }
}

/*** Queue management routines ***/

/* Allocate and init Tx Queue */
static MV_NETA_TXQ_CTRL* eth_if_txq_init(int port, int txp, int queue, int descr_num)
{
  MV_NETA_TXQ_CTRL *txq;
  MV_NETA_QUEUE_CTRL *q;
  int desc_size;
  MV_NETA_PORT_CTRL dummy; 

  memset(&amp;dummy, 0, sizeof(dummy));
  
  /* Allocate TxQ */
  txq = mvOsMalloc(sizeof(MV_NETA_TXQ_CTRL));
  if (txq == NULL) {
      ETH_IF_ERROR("Failed to alloc %d bytes for Tx Queue!! ", sizeof(MV_NETA_TXQ_CTRL));
      return NULL;
  }
  memset(txq, 0, sizeof(MV_NETA_TXQ_CTRL));
  q = &amp;txq-&gt;queueCtrl;

  /* Allocate memory for TX descriptors */
  desc_size = ((descr_num * NETA_DESC_ALIGNED_SIZE) + CPU_D_CACHE_LINE_SIZE);
  /* TODO Allow passing excplicitly osHandle as 1-st argument to mvNetaDescrMemoryAlloc
     instead of MV_NETA_PORT_CTRL */ 
  q-&gt;descBuf.bufVirtPtr =
      mvNetaDescrMemoryAlloc(&amp;dummy, desc_size, &amp;q-&gt;descBuf.bufPhysAddr, &amp;q-&gt;descBuf.memHandle);
  q-&gt;descBuf.bufSize = desc_size;

  if (q-&gt;descBuf.bufVirtPtr == NULL) {
      ETH_IF_ERROR("txQ=%d: Can't allocate %d bytes for %d TX descr", queue, desc_size, descr_num);
      mvOsFree(txq);
      return NULL;
  }

  /* Make sure descriptor address is cache line size aligned  */
  q-&gt;pFirst = (char *)MV_ALIGN_UP((MV_ULONG) q-&gt;descBuf.bufVirtPtr, CPU_D_CACHE_LINE_SIZE);
  q-&gt;lastDesc = (descr_num - 1);

  mvNetaDescRingReset(q);
  
  /* Sync next descriptor with the one in HW */
  q-&gt;nextToProc = MV_REG_READ(NETA_TXQ_INDEX_REG(port, txp, queue));

  /* Set maximum bandwidth for enabled TXQs */
#ifdef MV_ETH_WRR_NEW
  MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, txp, queue), NETA_TXQ_TOKEN_CNTR_MAX);
#else
  MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, txp, queue), 0x03ffffff);
  MV_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(port, txp, queue), 0x3fffffff);
#endif /* MV_ETH_WRR_NEW */

  /* Set Tx descriptors queue starting address */
  MV_REG_WRITE(NETA_TXQ_BASE_ADDR_REG(port, txp, queue), netaDescVirtToPhys(q, q-&gt;pFirst));
  MV_REG_WRITE(NETA_TXQ_SIZE_REG(port, txp, queue), NETA_TXQ_DESC_NUM_MASK(descr_num));

  return txq;
}

/* Enable Tx queue */
static int eth_if_enable_tx_queue(int port, int txp, int queue, bool enable)
{
  MV_U32 qMap = (1 &lt;&lt; queue);
  
  if (!enable) {
      qMap = qMap &lt;&lt; ETH_TXQ_DISABLE_OFFSET;
  }

  MV_REG_WRITE(ETH_TX_QUEUE_COMMAND_REG(port, txp), qMap);

  return 0;
}


/* Enable Rx queue */
static int eth_if_enable_rx_queue(int port, int queue, bool enable)
{
  MV_U32 qMap = (1 &lt;&lt; queue);
  
  if (!enable) {
      qMap = qMap &lt;&lt; ETH_RXQ_DISABLE_OFFSET;
  }

  MV_REG_WRITE(ETH_RX_QUEUE_COMMAND_REG(port), qMap);

  return 0;
}


static int eth_if_txq_shutdown(MV_NETA_TXQ_CTRL *txq_ctrl, int port, int txp, int queue)
{
  MV_NETA_QUEUE_CTRL *q;
  MV_NETA_PORT_CTRL  dummy;
  MV_U32             pending, elapsed;
  
  if (txq_ctrl == NULL) {
      return -1;
  }
  
  memset(&amp;dummy, 0, sizeof(dummy));
  q = &amp;txq_ctrl-&gt;queueCtrl;
  
  /* Wait for Tx complete */
  elapsed = 0;
  while (elapsed &lt; ETH_TX_COMPLETE_TIMEOUT &amp;&amp; 
         (pending = mvNetaTxqPendDescNumGet(port, txp, queue))) {
    elapsed += 1;
    msleep(1);
  }
  
  if (pending) {
      ETH_IF_ERROR("Exceeded Tx complete timeout, %d decsriptors pending.",
                   pending);
  }
      
   /* Reset descriptors */
  mvNetaDescRingReset(q);

  /* Zero out sent decsriptors */
  mvNetaTxqSentDescProc(port, txp, queue); 

  /* Release descriptors memory */
  mvNetaDescrMemoryFree(&amp;dummy, &amp;q-&gt;descBuf);
  memset(q, 0, sizeof(*q));

  /* Set minimum bandwidth for disabled TXQs */
#ifdef MV_ETH_WRR_NEW
  MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, txp, queue), 0);
#else
  MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, txp, queue), 0);
  MV_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(port, txp, queue), 0);
#endif /* MV_ETH_WRR_NEW */

  /* Reset Tx descriptors queue starting address and size */
  MV_REG_WRITE(NETA_TXQ_BASE_ADDR_REG(port, txp, queue), 0);
  MV_REG_WRITE(NETA_TXQ_SIZE_REG(port, txp, queue), 0);

  /* Free TxQ memory */
  mvOsFree(txq_ctrl);

  return 0;
}


/* Alloc and init Rx Q */
static MV_NETA_RXQ_CTRL* eth_if_rxq_init(int port, int queue, eth_if_pkt_pool_t* pkt_pool)
{
  MV_NETA_RXQ_CTRL *rxq_ctrl;
  MV_NETA_QUEUE_CTRL *q;
  int descr_size, descr_num, i;
  MV_NETA_PORT_CTRL dummy; 
  eth_if_pkt_t *pkt;  
  struct neta_rx_desc *rx_desc;

  if (pkt_pool == NULL) {
      ETH_IF_ERROR("Packet pool NULL.");
      return NULL;
  }
  
  memset(&amp;dummy, 0, sizeof(dummy));
  descr_num = pkt_pool-&gt;size * 2; /* we need 2 descriptors for the split parts */

  /* Allocate RxQ */
  rxq_ctrl = mvOsMalloc(sizeof(MV_NETA_RXQ_CTRL));
  if (rxq_ctrl == NULL) {
      ETH_IF_ERROR("Can't alloc %d bytes for Rx queue control.", sizeof(MV_NETA_RXQ_CTRL));
      return NULL;
  }
  memset(rxq_ctrl, 0, sizeof(MV_NETA_RXQ_CTRL));
  q = &amp;rxq_ctrl-&gt;queueCtrl;

  /* Allocate memory for RX descriptors */
  descr_size = ((descr_num * NETA_DESC_ALIGNED_SIZE) + CPU_D_CACHE_LINE_SIZE);
  q-&gt;descBuf.bufVirtPtr =
      mvNetaDescrMemoryAlloc(&amp;dummy, descr_size, &amp;q-&gt;descBuf.bufPhysAddr, &amp;q-&gt;descBuf.memHandle);
  q-&gt;descBuf.bufSize = descr_size;

  if (q-&gt;descBuf.bufVirtPtr == NULL) {
     ETH_IF_ERROR("Can't allocate %d bytes for %d RX descr for Rx Q %d", descr_size, descr_num, queue);
     mvOsFree(rxq_ctrl);
     return NULL;
  }

  /* Make sure descriptor address is cache line size aligned  */
  q-&gt;pFirst = (char *)MV_ALIGN_UP((MV_ULONG) q-&gt;descBuf.bufVirtPtr, CPU_D_CACHE_LINE_SIZE);
  q-&gt;lastDesc = (descr_num - 1);
  
  mvNetaDescRingReset(q);
  
  /* Sync next descriptor with the one in HW */
  q-&gt;nextToProc = MV_REG_READ(NETA_RXQ_INDEX_REG(port, queue));
  
  printk(KERN_DEBUG "eth_if_rxq_init: Curr rx descr index is %d", q-&gt;nextToProc);

  /* Set Rx descriptors queue starting address */
  MV_REG_WRITE(NETA_RXQ_BASE_ADDR_REG(port, queue),
         netaDescVirtToPhys(q, q-&gt;pFirst));
  MV_REG_WRITE(NETA_RXQ_SIZE_REG(port, queue), descr_num);

  /* Set Offset */
  mvNetaRxqOffsetSet(port, queue, 0 /* TODO change to some headroom? */);

  /* Fill RXQ with buffers from RX pool HAIM: ????? */
  mvNetaRxqBufSizeSet(port, queue, pkt_pool-&gt;pkt[0].buf_size);
  mvNetaRxqBmDisable(port, queue);
  for (i = 0; i &lt; descr_num; i++) {
      rx_desc = (struct neta_rx_desc *)MV_NETA_QUEUE_DESC_PTR(q, i);
      memset(rx_desc, 0, sizeof(*rx_desc));
      pkt = &amp;pkt_pool-&gt;pkt[i / 2];
      mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr[i%2], (MV_U32)pkt);
      rx_desc-&gt;dataSize = ((i%2) ? HDR_DATA_SPLIT_BYTES : pkt-&gt;data_size);
  }
  mvNetaRxqNonOccupDescAdd(port, queue, descr_num);

  return rxq_ctrl; 
}

/* SHutdown RX Q */
static int eth_if_rxq_shutdown(MV_NETA_RXQ_CTRL *rxq_ctrl, int port, int queue)
{
  MV_NETA_QUEUE_CTRL *q;
  MV_NETA_PORT_CTRL dummy;
  struct neta_rx_desc *rx_desc;
  int rx_pending, i;

  if (rxq_ctrl == NULL) {
      return -1;
  }
  
  /* Flush pending Rx descriptors */
  eth_if_enable_rx_queue(port, queue, false);
  rx_pending = mvNetaRxqBusyDescNumGet(port, queue);

  for (i = 0; i &lt; rx_pending; i++) {
    rx_desc = mvNetaRxqNextDescGet(rxq_ctrl);
  }
  mvNetaRxqDescNumUpdate(port, queue, rx_pending, 0);


  /* Reset descriptors and release descriptors memory */
  memset(&amp;dummy, 0, sizeof(dummy));
  q = &amp;rxq_ctrl-&gt;queueCtrl;
  mvNetaDescRingReset(q);
  mvNetaDescrMemoryFree(&amp;dummy, &amp;q-&gt;descBuf);
  memset(q, 0, sizeof(*q));
  
  /* Clear Rx descriptors queue starting address and size */
  MV_REG_WRITE(NETA_RXQ_BASE_ADDR_REG(port, queue), 0);
  MV_REG_WRITE(NETA_RXQ_SIZE_REG(port, queue), 0);

  /* Free TxQ memory */
  mvOsFree(rxq_ctrl);

  return 0;
}


/*** ETH IF state change routines ***/

/* Terminate eth interface */
int eth_if_shutdown(int port) {
  eth_if_t *eth_if = &amp;eth_if_list[port];

  /* Initialized? */
  if (!eth_if-&gt;init) {
     ETH_IF_DBG("Not init.");
     return -1;
  } 

  /* Destroy descriptors for TXQ */
  if (eth_if-&gt;txq_ctrl) {
      eth_if_txq_shutdown(eth_if-&gt;txq_ctrl, eth_if-&gt;cfg.port, eth_if-&gt;cfg.txp, eth_if-&gt;cfg.txq);
      eth_if-&gt;txq_ctrl = NULL;
  }

  /* Destroy descriptors for RXQ */
  if (eth_if-&gt;rxq_ctrl) {
      eth_if_rxq_shutdown(eth_if-&gt;rxq_ctrl, eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq);
      eth_if-&gt;rxq_ctrl = NULL;
  }

  /* Free Rx packet pool */  
  eth_if_destroy_pkt_pool(&amp;eth_if-&gt;rx_pkt_pool);

  ETH_IF_INFO("Eth port %d terminated.", eth_if-&gt;cfg.port);

  eth_if-&gt;init = false;

  return 0;
}


/* Initialize eth interface */
int eth_if_init(eth_if_config_t* cfg) {
   eth_if_t *eth_if;

   if (cfg-&gt;port &gt;= ETH_IF_MAX) {
       ETH_IF_ERROR("Network interface config: Port (%d) out of range [%d].", cfg-&gt;port, ETH_IF_MAX);
       goto eth_if_init_fail;
   }
   eth_if = &amp;eth_if_list[cfg-&gt;port];

  /* Already initialized? */
  if (eth_if-&gt;init) {
     ETH_IF_DBG("Already init.");
     return 0;
  } 

  /* Validate parameters */
  if (cfg == NULL) {
      ETH_IF_ERROR("Network interface config: NULL argument passed.");
      goto eth_if_init_fail;
  }

  if (cfg-&gt;state == ETH_IF_STATE_NONE) {
      ETH_IF_ERROR("Network interface config: Status is none.");
      goto eth_if_init_fail;
  }


  if (cfg-&gt;rxq &lt; CONFIG_MV_ETH_RXQ || cfg-&gt;rxq &gt; 8 /* TODO add const */) {
      ETH_IF_ERROR("Network interface config: Rx queue out of range (%d), CONFIG_MV_ETH_RXQ %d.", cfg-&gt;rxq, CONFIG_MV_ETH_RXQ);
      goto eth_if_init_fail;
  }

  if (cfg-&gt;txq &lt; CONFIG_MV_ETH_TXQ || cfg-&gt;txq &gt; 8 /* TODO add const */) {
      ETH_IF_ERROR("Network interface config: Tx queue out of range (%d), CONFIG_MV_ETH_TXQ %d", cfg-&gt;txq, CONFIG_MV_ETH_TXQ);
      goto eth_if_init_fail;
  }

  memcpy(&amp;eth_if-&gt;cfg, cfg, sizeof(*cfg));

  /* Create descriptors for TXQ */
  eth_if-&gt;txq_ctrl = eth_if_txq_init(cfg-&gt;port, eth_if-&gt;cfg.txp, cfg-&gt;txq, ETH_IF_TX_DESC_NUM);
  if (eth_if-&gt;txq_ctrl == NULL) {
      goto eth_if_init_fail;
  }

  /* Create Rx packet pool */  
  if (eth_if_create_pkt_pool(&amp;eth_if-&gt;rx_pkt_pool, ETH_IF_RX_DESC_NUM, 
                             ETH_IF_RX_PKT_SIZE(ETH_IF_MTU))) {
      goto eth_if_init_fail;
  }

  /* Create descriptors for RXQ */
  eth_if-&gt;rxq_ctrl = eth_if_rxq_init(cfg-&gt;port, cfg-&gt;rxq, &amp;eth_if-&gt;rx_pkt_pool);
  if (eth_if-&gt;rxq_ctrl == NULL) {
      goto eth_if_init_fail;
  }

  /* Enable traffic on Rx and Tx queues */
  if (cfg-&gt;state == ETH_IF_STATE_UP) {
      eth_if_enable_rx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq, true);
      eth_if_enable_tx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txp, eth_if-&gt;cfg.txq, true);
  }

  eth_if_reset_stats(eth_if);

  eth_if-&gt;init = true;

  ETH_IF_INFO("Eth port %d initialized.", eth_if-&gt;cfg.port);

  return 0;

eth_if_init_fail:
  eth_if_shutdown(cfg-&gt;port);

  return -1;
}

/* Interface up */
int eth_if_up(int port) {
    eth_if_t *eth_if;

   /* TODO replace by lookup when supporting multiple ports */
   eth_if = &amp;eth_if_list[0];
   if (port != eth_if-&gt;cfg.port) {
       ETH_IF_ERROR("Can't bring up the port, port invalid %d.", port);
       return -1;
   }

   if (eth_if-&gt;txq_ctrl == NULL || eth_if-&gt;rxq_ctrl == NULL) {
       ETH_IF_ERROR("Can't bring up the port, state invalid.");
       return -1;
   }

   if (eth_if-&gt;cfg.state == ETH_IF_STATE_UP) {
       return 0;
   }

  /* Enable traffic */
  eth_if-&gt;txq_ctrl-&gt;queueCtrl.nextToProc = MV_REG_READ(NETA_TXQ_INDEX_REG(port, 0, eth_if-&gt;cfg.txq));
  eth_if-&gt;rxq_ctrl-&gt;queueCtrl.nextToProc = MV_REG_READ(NETA_RXQ_INDEX_REG(port, eth_if-&gt;cfg.rxq));
  
  eth_if_enable_rx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq, true);
  eth_if_enable_tx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txp, eth_if-&gt;cfg.txq, true);

  eth_if-&gt;cfg.state = ETH_IF_STATE_UP;

  ETH_IF_INFO("Eth port %d up.", eth_if-&gt;cfg.port);

  return 0;
}

/* Interface down */
int eth_if_down(int port) {
  eth_if_t      *eth_if;

  /* TODO replace by lookup when supporting multiple ports */
  eth_if = &amp;eth_if_list[0];
  if (port != eth_if-&gt;cfg.port) {
      ETH_IF_ERROR("Can't bring down the port, port invalid %d.", port);
      return -1;
  }

  if (eth_if-&gt;txq_ctrl == NULL || eth_if-&gt;rxq_ctrl == NULL) {
      ETH_IF_ERROR("Can't bring down the port, state invalid.");
      return -1;
  }

  if (eth_if-&gt;cfg.state == ETH_IF_STATE_DOWN) {
      return 0;
  }
  
  /* Disable traffic */
  eth_if_enable_rx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq, false);
  eth_if_enable_tx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txp, eth_if-&gt;cfg.txq, false);
  
  /* Reset descriptors */
  mvNetaDescRingReset(&amp;eth_if-&gt;rxq_ctrl-&gt;queueCtrl);
  mvNetaDescRingReset(&amp;eth_if-&gt;txq_ctrl-&gt;queueCtrl);
  
  /* Reset stats */
  eth_if_reset_stats(eth_if);

  eth_if-&gt;cfg.state = ETH_IF_STATE_DOWN;

  ETH_IF_INFO("Eth port %d down.", eth_if-&gt;cfg.port);

  return 0;
}
 
 
/* Transmit packet */
int eth_if_tx(int port, void* data, int size)
{
  NETA_TX_DESC* tx_desc = NULL;
  u32           command;
  eth_if_t      *eth_if;

  /* TODO replace by lookup when supporting multiple ports */
#if 0
  eth_if = &amp;eth_if_list[0];
  if (port != eth_if-&gt;cfg.port) {
      ETH_IF_DBG("Can't transmit a packet, specified port invalid %d.", port);
      return -1;
  }

#else
  eth_if = &amp;eth_if_list[port];
#endif 
  if (eth_if-&gt;txq_ctrl == NULL || 
      eth_if-&gt;cfg.state == ETH_IF_STATE_DOWN) {
      return -1;
  }

  /* Descriptor to use */
  tx_desc = mvNetaTxqNextDescGet(eth_if-&gt;txq_ctrl);
  if (NULL == tx_desc) {
      ETH_IF_DBG("Can't get descriptor for Tx");
      eth_if-&gt;stats.tx_errors++;

      return -1;
  }

  /* Calculate IPv4 checksum and L4 checksum */
  /* TODO Specify correct flags */
  command = 0; 
  command |= NETA_TX_F_DESC_MASK | NETA_TX_L_DESC_MASK | NETA_TX_IP_CSUM_MASK;
  //command |= (ip4h-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS) | NETA_TX_L3_IP4;
  //command |= (NETA_TX_L4_UDP | NETA_TX_L4_CSUM_FULL);

  tx_desc-&gt;dataSize = size;
  tx_desc-&gt;bufPhysAddr = mvOsCacheFlush(NULL, data, size);
  tx_desc-&gt;command = command;
  tx_desc-&gt;hw_cmd = 0;

  /* Flush cache to RAM */
  eth_if_tx_desc_flush(tx_desc);

  /* Enable transmit */
  mvNetaTxqPendDescAdd(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txp, eth_if-&gt;cfg.txq, 1 /* num of descriptors */);

  eth_if-&gt;stats.tx_pkts++;
  eth_if-&gt;stats.tx_bytes += size;

#ifdef ETH_IF_DEBUG  
  if (((eth_if-&gt;stats.tx_pkts) % 100) == 0) {
     ETH_IF_DBG(" eth_if pkts sent %d", eth_if-&gt;stats.tx_pkts);
  }
#endif

  /* Decrement the sent descriptors */
  mvNetaTxqSentDescProc(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txp, eth_if-&gt;cfg.txq);
   
  return 0;
}

#if 0
/* Recv packets up to a budget */
int eth_if_rx(int port, int rx_todo) {  
  eth_if_t           *eth_if;
  int                 rx_done, rx_filled, rx_bytes;
  struct neta_rx_desc *rx_desc;
  eth_if_pkt_t        *pkt;
  char                *data;
  uint32_t            rx_status;

  /* TODO replace by lookup when supporting multiple ports */
  eth_if = &amp;eth_if_list[0];
  if (port != eth_if-&gt;cfg.port) {
      ETH_IF_DBG("Can't recv, specified port invalid %d.", port);
      return -1;
  }

  if (eth_if-&gt;txq_ctrl == NULL || 
      eth_if-&gt;cfg.state == ETH_IF_STATE_DOWN) {
      return -1;
  }

  /* Get number of received packets */
  rx_done = mvNetaRxqBusyDescNumGet(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq);
  if (rx_done == 0) {
      return 0;
  }

  ETH_IF_DBG("&lt;&lt;&lt;&lt;============= mmp_eth_rx: %d pkts RX pending", rx_done);
//mvOsCacheIoSync();

  if (rx_todo &gt; rx_done)
      rx_todo = rx_done;

  rx_done = 0;
  rx_filled = 0;

  /* Fairness NAPI loop */
  while (rx_done &lt; rx_todo) {

    /* TODO consider more sophisticated prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_DESC_PREFETCH */
    rx_desc = mvNetaRxqNextDescGet(eth_if-&gt;rxq_ctrl);
    mvOsCacheLineInv(NULL, rx_desc);
    prefetch(rx_desc);

    rx_done++;
    rx_filled++;
    rx_status = rx_desc-&gt;status;
    pkt = (eth_if_pkt_t *)rx_desc-&gt;bufCookie;
      
    /* Speculative ICache prefetch WA: should be replaced with dma_unmap_single (invalidate l2) */
    mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, rx_desc-&gt;dataSize);
    /* TODO consider prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_PKT_PREFETCH */

    printk(KERN_DEBUG "Pkt %d [0x%x], status 0x%x, dataSize %d", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize);

    if (((rx_status &amp; NETA_RX_FL_DESC_MASK) != NETA_RX_FL_DESC_MASK) ||
        (rx_status &amp; NETA_RX_ES_MASK)) {

        ETH_IF_DBG("Rx error");

        eth_if-&gt;stats.rx_errors++;
        
        mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
        continue;
    }

    rx_bytes = rx_desc-&gt;dataSize - (MV_ETH_CRC_SIZE + MV_ETH_MH_SIZE);
    data = pkt-&gt;buf + MV_ETH_MH_SIZE;

    eth_if-&gt;stats.rx_pkts++;
    eth_if-&gt;stats.rx_bytes += rx_bytes;

    /* Process recved data */
    if (eth_if-&gt;cfg.rx_callback != NULL) {
        eth_if-&gt;cfg.rx_callback(eth_if-&gt;cfg.port, data, rx_bytes);
    }

    /* Refill pkt */
    mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
  }

  /* Update RxQ management counters */
  mvOsCacheIoSync();
  mvNetaRxqDescNumUpdate(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq, rx_done, rx_filled);

  ETH_IF_DBG("============= mmp_eth_rx: rx_done %d, rx_filled %d =========================&gt;&gt;&gt;&gt;", rx_done, rx_filled);

  return rx_done;
}
#endif /* eth_if_rx */

void __tx_test(void)
{
	struct ethhdr *eth_hdr;
	void* pkt = NULL;

	pkt = kmalloc(200, GFP_ATOMIC);
	eth_hdr = (struct ethhdr *) ((char *)pkt + MV_ETH_MH_SIZE);

	memset(pkt, 0, 200);
	eth_hdr-&gt;h_source[0] = 0x66;
	eth_hdr-&gt;h_source[1] = 0x66;
	eth_hdr-&gt;h_source[2] = 0x66;
	eth_hdr-&gt;h_source[3] = 0x66;
	eth_hdr-&gt;h_source[4] = 0x66;
	eth_hdr-&gt;h_source[5] = 0x66;

	eth_hdr-&gt;h_dest[0] = 00;
	eth_hdr-&gt;h_dest[1] = 10;
	eth_hdr-&gt;h_dest[2] = 94;
	eth_hdr-&gt;h_dest[3] = 00;
	eth_hdr-&gt;h_dest[4] = 00;
	eth_hdr-&gt;h_dest[5] = 04;

	eth_hdr-&gt;h_proto = 0x0800;

	eth_if_tx(ETH_TX_PORT, pkt, 200);

	kfree(pkt);
}

static INLINE void eth_if_modify_hdr(struct ethhdr *eth)
{
      	memset(eth-&gt;h_source,0x66,6);
      	eth-&gt;h_dest[0] = 00;
      	eth-&gt;h_dest[1] = 10;
      	eth-&gt;h_dest[2] = 94;
      	eth-&gt;h_dest[3] = 00;
      	eth-&gt;h_dest[4] = 00;
      	eth-&gt;h_dest[5] = 04;
}

static INLINE void __mvNetaRxDescFill(NETA_RX_DESC *pRxDesc, MV_U32 physAddr, MV_U32 cookie)
{
	pRxDesc-&gt;bufCookie = (MV_U32)cookie;

#if defined(CONFIG_MV_ETH_BE_WA)
	pRxDesc-&gt;bufPhysAddr = MV_32BIT_LE(physAddr);
#else
	pRxDesc-&gt;bufPhysAddr = physAddr;
#endif /* CONFIG_MV_ETH_BE_WA */

#ifndef ETH_DESCR_UNCACHED
	mvOsCacheLineFlush(NULL, pRxDesc);
#endif
}

unsigned int 
eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int rx_todo)
{
	eth_if_t *eth_if_rx;
	uint32_t rx_done, rx_filled, rx_bytes;
	struct neta_rx_desc *rx_desc;
	eth_if_pkt_t        *pkt;
	u_char              *data;
	uint32_t            rx_status;
//      struct ethhdr *eth;
	/* TODO replace by lookup when supporting multiple ports */
	eth_if_rx = &amp;eth_if_list[rx_port];

	if (eth_if_rx-&gt;txq_ctrl == NULL || 
	    eth_if_rx-&gt;cfg.state == ETH_IF_STATE_DOWN) {
		return 0;
	}

	/* Get number of received packets */
	rx_done = mvNetaRxqBusyDescNumGet(eth_if_rx-&gt;cfg.port, eth_if_rx-&gt;cfg.rxq);
	if (rx_done == 0) {
		return 0;
	}
	if (rx_todo &gt; rx_done)
		rx_todo = rx_done;

	rx_done = 0;
	rx_filled = 0;

	/* Fairness NAPI loop */
	while (rx_done &lt; rx_todo) {

		/* TODO consider more sophisticated prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_DESC_PREFETCH */
		rx_desc = mvNetaRxqNextDescGet(eth_if_rx-&gt;rxq_ctrl);

		mvOsCacheLineInv(NULL, rx_desc);
		prefetch(rx_desc);						

		rx_done++;
		rx_filled++;
		rx_status = rx_desc-&gt;status;
		pkt = (eth_if_pkt_t *)rx_desc-&gt;bufCookie;

		/* Speculative ICache prefetch WA: should be replaced with dma_unmap_single (invalidate l2) */
		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, rx_desc-&gt;dataSize);
		/* TODO consider prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_PKT_PREFETCH */
		printk(KERN_DEBUG "Pkt %d [0x%x], status 0x%x, dataSize %d rx", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize, rx_desc-&gt;status);
		

		if (((rx_status &amp; NETA_RX_FL_DESC_MASK) != NETA_RX_FL_DESC_MASK) ||
		    (rx_status &amp; NETA_RX_ES_MASK)) {

			ETH_IF_DBG("Rx error");

			eth_if_rx-&gt;stats.rx_errors++;

			mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
			continue;
		}

		rx_bytes = rx_desc-&gt;dataSize - (MV_ETH_CRC_SIZE + MV_ETH_MH_SIZE);
//      	data = pkt-&gt;buf + MV_ETH_MH_SIZE;
		data = pkt-&gt;buf;
		eth_if_rx-&gt;stats.rx_pkts++;
		eth_if_rx-&gt;stats.rx_bytes += rx_bytes;
		/**** dummy modify *****/
// 		eth = (struct eth_hdr *) ((char *)data + MV_ETH_MH_SIZE);
//      	eth_if_modify_hdr(eth);
		/**** dummy modify end ****/

		eth_if_tx(ETH_TX_PORT, data, rx_bytes);
		/* Refill pkt */
		__mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
	}
	/* Update RxQ management counters */
//      mvOsCacheIoSync();
	mvNetaRxqDescNumUpdate(eth_if_rx-&gt;cfg.port, eth_if_rx-&gt;cfg.rxq, rx_done, rx_filled);

	ETH_IF_DBG("============= mmp_eth_rx: rx_done %d, rx_filled %d =========================&gt;&gt;&gt;&gt;", rx_done, rx_filled);

	return rx_done;
}

/* Get stats */
int eth_if_get_stats(int port, eth_if_stats_t *stats) {
  eth_if_t *eth_if;

  /* TODO replace by lookup when supporting multiple ports */
  eth_if = &amp;eth_if_list[0];
  if (port != eth_if-&gt;cfg.port) {
      ETH_IF_ERROR("Can't get stats, specified port invalid %d.", port);
      return -1;
  }

  if (stats == NULL) {
      ETH_IF_ERROR("Can't get stats, argumet is NULL.");
      return -1;
  }

  memcpy(stats, &amp;eth_if-&gt;stats, sizeof(eth_if_stats_t));

  return 0;
}

//void eth_rx_callback(int port, void* skb, int size)
//{
//        struct iphdr *iph;
//
//        if (((struct ethhdr *)skb)-&gt;h_proto == htons(ETH_P_IP)) {
//                iph = (struct iphdr *)((char *)skb + sizeof(struct ethhdr));
//                pr_debug("%pI4 -&gt; %pI4 [ip.proto %u]\n", &amp;iph-&gt;saddr, &amp;iph-&gt;daddr, iph-&gt;protocol);
//
//        }
//}
</Insert>
</MostRecent>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/03/08" Time="10:58:2000">
<Copy StartSeek="0" EndSeek="25196"/>
<Insert>	((char *)(&amp;iph-&gt;daddr))[1] = 0; /* toggle the net address */
</Insert>
<Copy StartSeek="25258" EndSeek="25791"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/03/08" Time="10:58:17000">
<Copy StartSeek="0" EndSeek="25196"/>
<Insert>	((char *)(&amp;iph-&gt;daddr))[3] = 0; /* toggle the net address */
</Insert>
<Copy StartSeek="25258" EndSeek="25791"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/03/08" Time="10:59:42000">
<Copy StartSeek="0" EndSeek="20527"/>
<Copy StartSeek="20562" EndSeek="25826"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/03/08" Time="11:02:50000">
<Copy StartSeek="0" EndSeek="20527"/>
<Insert>  command |= NETA_TX_IP_CSUM_MASK;
</Insert>
<Copy StartSeek="20573" EndSeek="25837"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/03/08" Time="11:02:56000">
<Copy StartSeek="0" EndSeek="20527"/>
<Insert>  command |= NETA_TX_IP_CSUM_MASK; /* haim */
</Insert>
<Copy StartSeek="20527" EndSeek="25791"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/03/08" Time="12:17:22000">
<Copy StartSeek="0" EndSeek="21353"/>
<Insert>int eth_if_rx(int port, int rx_todo) {
</Insert>
<Copy StartSeek="21394" EndSeek="25793"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="15:38:9000">
<Copy StartSeek="0" EndSeek="6879"/>
<Insert>static MV_NETA_TXQ_CTRL* eth_if_txq_init(int port, int queue, int descr_num)
</Insert>
<Copy StartSeek="6965" EndSeek="8228"/>
<Insert>  q-&gt;nextToProc = MV_REG_READ(NETA_TXQ_INDEX_REG(port, 0, queue));
</Insert>
<Copy StartSeek="8297" EndSeek="8367"/>
<Insert>  MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, 0 /* txp */, queue), NETA_TXQ_TOKEN_CNTR_MAX);
</Insert>
<Copy StartSeek="8451" EndSeek="8457"/>
<Insert>  MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, 0 /* txp */, queue), 0x03ffffff);
  MV_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(port, 0 /* txp */, queue), 0x3fffffff);
</Insert>
<Copy StartSeek="8597" EndSeek="8676"/>
<Insert>  MV_REG_WRITE(NETA_TXQ_BASE_ADDR_REG(port, 0 /* txp */, queue), netaDescVirtToPhys(q, q-&gt;pFirst));
  MV_REG_WRITE(NETA_TXQ_SIZE_REG(port, 0 /* txp */, queue), NETA_TXQ_DESC_NUM_MASK(descr_num));
</Insert>
<Copy StartSeek="8856" EndSeek="8896"/>
<Insert>static int eth_if_enable_tx_queue(int port, int queue, bool enable)
</Insert>
<Copy StartSeek="8973" EndSeek="9075"/>
<Insert>  MV_REG_WRITE(ETH_TX_QUEUE_COMMAND_REG(port, 0), qMap);
</Insert>
<Copy StartSeek="9134" EndSeek="9414"/>
<Insert>static int eth_if_txq_shutdown(MV_NETA_TXQ_CTRL *txq_ctrl, int port, int queue)
</Insert>
<Copy StartSeek="9503" EndSeek="9808"/>
<Insert>         (pending = mvNetaTxqPendDescNumGet(port, 0 /* txp */, queue))) {
</Insert>
<Copy StartSeek="9874" EndSeek="10135"/>
<Insert>  mvNetaTxqSentDescProc(port, 0 /* txp */, queue); 
</Insert>
<Copy StartSeek="10179" EndSeek="10360"/>
<Insert>  MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, 0 /* txp */, queue), 0);
</Insert>
<Copy StartSeek="10422" EndSeek="10428"/>
<Insert>  MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, 0 /* txp */, queue), 0);
  MV_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(port, 0 /* txp */, queue), 0);
</Insert>
<Copy StartSeek="10550" EndSeek="10640"/>
<Insert>  MV_REG_WRITE(NETA_TXQ_BASE_ADDR_REG(port, 0 /* txp */, queue), 0);
  MV_REG_WRITE(NETA_TXQ_SIZE_REG(port, 0 /* txp */, queue), 0);
</Insert>
<Copy StartSeek="10757" EndSeek="14955"/>
<Insert>      eth_if_txq_shutdown(eth_if-&gt;txq_ctrl, eth_if-&gt;cfg.port, eth_if-&gt;cfg.txq);
</Insert>
<Copy StartSeek="15052" EndSeek="16682"/>
<Insert>  eth_if-&gt;txq_ctrl = eth_if_txq_init(cfg-&gt;port, cfg-&gt;txq, ETH_IF_TX_DESC_NUM);
</Insert>
<Copy StartSeek="16778" EndSeek="17405"/>
<Insert>      eth_if_enable_tx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txq, true);
</Insert>
<Copy StartSeek="17493" EndSeek="18490"/>
<Insert>  eth_if_enable_tx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txq, true);
</Insert>
<Copy StartSeek="18574" EndSeek="19289"/>
<Insert>  eth_if_enable_tx_queue(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txq, false);
</Insert>
<Copy StartSeek="19374" EndSeek="20899"/>
<Insert>  mvNetaTxqPendDescAdd(eth_if-&gt;cfg.port, 0 /* txp */, eth_if-&gt;cfg.txq, 1 /* num of descriptors */);
</Insert>
<Copy StartSeek="21003" EndSeek="21066"/>
<Insert>  ////////////// DEBUG ///////
</Insert>
<Copy StartSeek="21088" EndSeek="21202"/>
<Insert>
</Insert>
<Copy StartSeek="21210" EndSeek="21249"/>
<Insert>  mvNetaTxqSentDescProc(eth_if-&gt;cfg.port, 0 /* txp */, eth_if-&gt;cfg.txq);
</Insert>
<Copy StartSeek="21326" EndSeek="25819"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="16:16:3000">
<Copy StartSeek="0" EndSeek="10820"/>
<Insert>int eth_if_txq_reinit(void)
{
  eth_if_t *eth_if = &amp;eth_if_list[0];

  /* Initialized? */
  if (!eth_if-&gt;init) {
     ETH_IF_DBG("Not init.");
     return -1;
  } 
  
  /* Destroy descriptors for TXQ */
  if (eth_if-&gt;txq_ctrl) {
      eth_if_txq_shutdown(eth_if-&gt;txq_ctrl, eth_if-&gt;cfg.port, eth_if-&gt;cfg.txq);
      eth_if-&gt;txq_ctrl = NULL;
  }

  eth_if-&gt;txq_ctrl = eth_if_txq_init(eth_if-&gt;cfg.port, eth_if-&gt;cfg.txq, ETH_IF_TX_DESC_NUM);
  
  return 0;
}

</Insert>
<Copy StartSeek="10821" EndSeek="25364"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="16:17:50000">
<Copy StartSeek="0" EndSeek="24029"/>
<Insert>void tx_looback(int port, void* pkt, int size)
</Insert>
<Copy StartSeek="24076" EndSeek="25364"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="16:18:57000">
<Copy StartSeek="0" EndSeek="24132"/>
<Insert>//      size -= MV_ETH_MH_SIZE;

</Insert>
<Copy StartSeek="24132" EndSeek="24205"/>
<Insert>//      void* pkt = NULL;

//      pkt = kmalloc(1500, GFP_ATOMIC);
</Insert>
<Copy StartSeek="24205" EndSeek="24240"/>
<Insert>//      memset(pkt, 0, 1500);
</Insert>
<Copy StartSeek="24240" EndSeek="24701"/>
<Insert>//      eth_hdr-&gt;h_proto = 0x0800;

//      	eth_hdr-&gt;data[i] = i;
</Insert>
<Copy StartSeek="24701" EndSeek="24822"/>
<Insert>//      kfree(pkt);
}

</Insert>
<Copy StartSeek="24825" EndSeek="24900"/>
<Insert>//      size -= MV_ETH_MH_SIZE;

</Insert>
<Copy StartSeek="24900" EndSeek="25113"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="16:20:54000">
<Copy StartSeek="0" EndSeek="24475"/>
<Copy StartSeek="24476" EndSeek="25114"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="16:22:37000">
<Copy StartSeek="0" EndSeek="6518"/>
<Copy StartSeek="6657" EndSeek="25253"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:27:36000">
<Copy StartSeek="0" EndSeek="6518"/>
<Insert>       if (!IS_ALIGNED(pkt-&gt;buf,32)) {
</Insert>
<Copy StartSeek="6556" EndSeek="25252"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:28:31000">
<Copy StartSeek="0" EndSeek="6518"/>
<Insert>       if (!IS_ALIGNED(pkt-&gt;buf,4)) {
</Insert>
<Copy StartSeek="6573" EndSeek="25269"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:30:36000">
<Copy StartSeek="0" EndSeek="5794"/>
<Insert>  
</Insert>
<Copy StartSeek="5819" EndSeek="6540"/>
<Insert>       if (!IS_ALIGNED((unsigned char *)pkt-&gt;buf,4)) {
</Insert>
<Copy StartSeek="6613" EndSeek="25309"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:31:13000">
<Copy StartSeek="0" EndSeek="6563"/>
<Insert>       if (!IS_ALIGNED((unsigned char *)tmp,4)) {
</Insert>
<Copy StartSeek="6596" EndSeek="25292"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:31:34000">
<Copy StartSeek="0" EndSeek="5794"/>
<Insert>  unsigned char *tmp;
</Insert>
<Copy StartSeek="5797" EndSeek="6521"/>
<Insert>       tmp = pkt-&gt;buf;
       if (!IS_ALIGNED(tmp,4)) {
</Insert>
<Copy StartSeek="6582" EndSeek="25278"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:33:59000">
<Copy StartSeek="0" EndSeek="5797"/>
<Insert>  
</Insert>
<Copy StartSeek="5797" EndSeek="25275"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:34:36000">
<Copy StartSeek="0" EndSeek="6518"/>
<Insert>       
</Insert>
<Copy StartSeek="6591" EndSeek="25340"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:36:50000">
<Copy StartSeek="0" EndSeek="6518"/>
<Insert>       printk(KERN_ERR "(%s:%d) buf %p\n", __func__, __LINE__,pkt-&gt;buf);
</Insert>
<Copy StartSeek="6518" EndSeek="25267"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/03/14" Time="18:37:43000">
<Copy StartSeek="0" EndSeek="21413"/>
<Insert>  if (port != eth_if-&gt;cfg.port) {
      ETH_IF_DBG("Can't recv, specified port invalid %d.", port);
      return -1;
  }
</Insert>
<Copy StartSeek="21534" EndSeek="25267"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="10:59:37000">
<Copy StartSeek="0" EndSeek="21794"/>
<Insert>  ETH_IF_DBG("&lt;&lt;&lt;&lt;============= mmp_eth_rx: %d pkts RX pending", rx_done);
  mvOsCacheIoSync();
</Insert>
<Copy StartSeek="21890" EndSeek="25267"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="11:00:19000">
<Copy StartSeek="0" EndSeek="21413"/>
<Insert>//if (port != eth_if-&gt;cfg.port) {
//    ETH_IF_DBG("Can't recv, specified port invalid %d.", port);
//    return -1;
//}
</Insert>
<Copy StartSeek="21534" EndSeek="25267"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="11:02:52000">
<Copy StartSeek="0" EndSeek="21077"/>
<Insert>int eth_if_rx(int port, int rx_todo) {  
</Insert>
<Copy StartSeek="21116" EndSeek="25265"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="11:48:58000">
<Copy StartSeek="0" EndSeek="2547"/>
<Insert>static eth_if_t eth_if_list[1];
</Insert>
<Copy StartSeek="2579" EndSeek="25265"/>
</Delta>
<Delta Version="66" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:04:55000">
<Copy StartSeek="0" EndSeek="15177"/>
<Insert>int eth_if_init(eth_if_config_t* cfg) {
</Insert>
<Copy StartSeek="15235" EndSeek="25283"/>
</Delta>
<Delta Version="67" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:05:14000">
<Copy StartSeek="0" EndSeek="15235"/>
<Insert>   eth_if_t *eth_if = &amp;eth_if_list[0];
</Insert>
<Copy StartSeek="15276" EndSeek="25285"/>
</Delta>
<Delta Version="68" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:05:17000">
<Copy StartSeek="0" EndSeek="15177"/>
<Insert>int eth_if_init(eth_if_config_t* cfg, unsigned int idx) {
   eth_if_t *eth_if = &amp;eth_if_list[idx];
</Insert>
<Copy StartSeek="15264" EndSeek="25273"/>
</Delta>
<Delta Version="69" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:06:36000">
<Copy StartSeek="0" EndSeek="2547"/>
<Insert>static eth_if_t eth_if_list[2];
</Insert>
<Copy StartSeek="2579" EndSeek="25273"/>
</Delta>
<Delta Version="70" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:06:54000">
<Copy StartSeek="0" EndSeek="2547"/>
<Insert>static eth_if_t eth_if_list[6];

</Insert>
<Copy StartSeek="2614" EndSeek="25307"/>
</Delta>
<Delta Version="71" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:07:55000">
<Copy StartSeek="0" EndSeek="15251"/>
<Insert>   eth_if_t *eth_if = &amp;eth_if_list[cfg-&gt;port];

</Insert>
<Copy StartSeek="15527" EndSeek="25535"/>
</Delta>
<Delta Version="72" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:09:49000">
<Copy StartSeek="0" EndSeek="15417"/>
<Insert>			cfg-&gt;port, ETH_MAX_PORt);
</Insert>
<Copy StartSeek="15446" EndSeek="25535"/>
</Delta>
<Delta Version="73" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:09:50000">
<Copy StartSeek="0" EndSeek="23963"/>
<Copy StartSeek="26611" EndSeek="28183"/>
</Delta>
<Delta Version="74" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:12:20000">
<Copy StartSeek="0" EndSeek="24301"/>
<Insert>  eth_if = &amp;eth_if_list[0];
</Insert>
<Copy StartSeek="24335" EndSeek="28189"/>
</Delta>
<Delta Version="75" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:12:35000">
<Copy StartSeek="0" EndSeek="24301"/>
<Insert>  eth_if = &amp;eth_if_list[rx_port];
</Insert>
<Copy StartSeek="24338" EndSeek="28192"/>
</Delta>
<Delta Version="76" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:12:40000">
<Copy StartSeek="0" EndSeek="24338"/>
<Insert>  if (port != eth_if-&gt;cfg.port) {
      ETH_IF_DBG("Can't recv, specified port invalid %d.", port);
      return -1;
  }
</Insert>
<Copy StartSeek="24459" EndSeek="24460"/>
<Insert>  if (eth_if-&gt;txq_ctrl == NULL || 
      eth_if-&gt;cfg.state == ETH_IF_STATE_DOWN) {
</Insert>
<Copy StartSeek="24549" EndSeek="28198"/>
</Delta>
<Delta Version="77" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:13:5000">
<Copy StartSeek="0" EndSeek="24610"/>
<Insert>  rx_done = mvNetaRxqBusyDescNumGet(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq);
</Insert>
<Copy StartSeek="24685" EndSeek="28201"/>
</Delta>
<Delta Version="78" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:13:18000">
<Copy StartSeek="0" EndSeek="24610"/>
<Insert>  rx_done = mvNetaRxqBusyDescNumGet(eth_if_rx-&gt;cfg.port, eth_if-&gt;cfg.rxq);
</Insert>
<Copy StartSeek="24688" EndSeek="28204"/>
</Delta>
<Delta Version="79" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:13:22000">
<Copy StartSeek="0" EndSeek="23963"/>
<Insert>int eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int todo) {
</Insert>
<Copy StartSeek="24037" EndSeek="28207"/>
</Delta>
<Delta Version="80" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:13:41000">
<Copy StartSeek="0" EndSeek="23963"/>
<Insert>int eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int rx_todo) {
  eth_if_t           *eth_if;
  int                 rx_done, rx_filled, rx_bytes;
  struct neta_rx_desc *rx_desc;
  eth_if_pkt_t        *pkt;
  char                *data;
  uint32_t            rx_status;

  /* TODO replace by lookup when supporting multiple ports */
  eth_if_rx = &amp;eth_if_list[rx_port];
</Insert>
<Copy StartSeek="24333" EndSeek="24455"/>
<Insert>  if (eth_if_rx-&gt;txq_ctrl == NULL || 
      eth_if_rx-&gt;cfg.state == ETH_IF_STATE_DOWN) {
      return -1;
  }
</Insert>
<Copy StartSeek="24558" EndSeek="24559"/>
<Insert>  /* Get number of received packets */
  rx_done = mvNetaRxqBusyDescNumGet(eth_if_rx-&gt;cfg.port, eth_if_rx-&gt;cfg.rxq);
  if (rx_done == 0) {
      return 0;
  }
</Insert>
<Copy StartSeek="24710" EndSeek="24808"/>
<Insert>  if (rx_todo &gt; rx_done)
      rx_todo = rx_done;
</Insert>
<Copy StartSeek="24853" EndSeek="24854"/>
<Insert>  rx_done = 0;
  rx_filled = 0;
</Insert>
<Copy StartSeek="24884" EndSeek="24885"/>
<Insert>  /* Fairness NAPI loop */
  while (rx_done &lt; rx_todo) {
</Insert>
<Copy StartSeek="24940" EndSeek="24941"/>
<Insert>    /* TODO consider more sophisticated prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_DESC_PREFETCH */
    rx_desc = mvNetaRxqNextDescGet(eth_if-&gt;rxq_ctrl);
    mvOsCacheLineInv(NULL, rx_desc);
    prefetch(rx_desc);
</Insert>
<Copy StartSeek="25148" EndSeek="25149"/>
<Insert>    rx_done++;
    rx_filled++;
    rx_status = rx_desc-&gt;status;
    pkt = (eth_if_pkt_t *)rx_desc-&gt;bufCookie;
      
    /* Speculative ICache prefetch WA: should be replaced with dma_unmap_single (invalidate l2) */
    mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, rx_desc-&gt;dataSize);
    /* TODO consider prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_PKT_PREFETCH */
</Insert>
<Copy StartSeek="25489" EndSeek="25490"/>
<Insert>    ETH_IF_DBG("Pkt %d [0x%x], status 0x%x, dataSize %d", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize);
</Insert>
<Copy StartSeek="25597" EndSeek="25598"/>
<Insert>    if (((rx_status &amp; NETA_RX_FL_DESC_MASK) != NETA_RX_FL_DESC_MASK) ||
        (rx_status &amp; NETA_RX_ES_MASK)) {
</Insert>
<Copy StartSeek="25707" EndSeek="25708"/>
<Insert>        ETH_IF_DBG("Rx error");
</Insert>
<Copy StartSeek="25735" EndSeek="25736"/>
<Insert>        eth_if-&gt;stats.rx_errors++;
        
        mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
        continue;
    }
</Insert>
<Copy StartSeek="25843" EndSeek="25844"/>
<Insert>    rx_bytes = rx_desc-&gt;dataSize - (MV_ETH_CRC_SIZE + MV_ETH_MH_SIZE);
    data = pkt-&gt;buf + MV_ETH_MH_SIZE;
</Insert>
<Copy StartSeek="25949" EndSeek="25950"/>
<Insert>    eth_if-&gt;stats.rx_pkts++;
    eth_if-&gt;stats.rx_bytes += rx_bytes;
</Insert>
<Copy StartSeek="26015" EndSeek="26016"/>
<Insert>    /* Process recved data */
    if (eth_if-&gt;cfg.rx_callback != NULL) {
        eth_if-&gt;cfg.rx_callback(eth_if-&gt;cfg.port, data, rx_bytes);
    }

    /* Refill pkt */
    mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
  }

  /* Update RxQ management counters */
  mvOsCacheIoSync();
  mvNetaRxqDescNumUpdate(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq, rx_done, rx_filled);
</Insert>
<Copy StartSeek="26373" EndSeek="26374"/>
<Insert>  ETH_IF_DBG("============= mmp_eth_rx: rx_done %d, rx_filled %d =========================&gt;&gt;&gt;&gt;", rx_done, rx_filled);

  return rx_done;
}

</Insert>
<Copy StartSeek="26374" EndSeek="27946"/>
</Delta>
<Delta Version="81" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:15:26000">
<Copy StartSeek="0" EndSeek="24333"/>
<Insert>//if (port != eth_if-&gt;cfg.port) {
//    ETH_IF_DBG("Can't recv, specified port invalid %d.", port);
//    return -1;
//}

</Insert>
<Copy StartSeek="24334" EndSeek="27825"/>
</Delta>
<Delta Version="82" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:15:33000">
<Copy StartSeek="0" EndSeek="24333"/>
<Insert>
</Insert>
<Copy StartSeek="24370" EndSeek="27861"/>
</Delta>
<Delta Version="83" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:18:2000">
<Copy StartSeek="0" EndSeek="24333"/>
<Insert>	eth_if_rx = &amp;eth_if_list[tx_port];
</Insert>
<Copy StartSeek="24369" EndSeek="27861"/>
</Delta>
<Delta Version="84" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:18:7000">
<Copy StartSeek="0" EndSeek="24037"/>
<Insert>	eth_if_t           *eth_if;
</Insert>
<Copy StartSeek="24081" EndSeek="27876"/>
</Delta>
<Delta Version="85" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:18:21000">
<Copy StartSeek="0" EndSeek="24081"/>
<Insert>	int                 rx_done, rx_filled, rx_bytes;
</Insert>
<Copy StartSeek="24124" EndSeek="27868"/>
</Delta>
<Delta Version="86" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:18:38000">
<Copy StartSeek="0" EndSeek="24081"/>
<Insert>	uint32_t	   rx_done, rx_filled, rx_bytes;
</Insert>
<Copy StartSeek="24121" EndSeek="27865"/>
</Delta>
<Delta Version="87" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:18:44000">
<Copy StartSeek="0" EndSeek="24037"/>
<Insert>	eth_if_t           *eth_if_rx, *eth_if_tx;
	uint32_t	rx_done, rx_filled, rx_bytes;
</Insert>
<Copy StartSeek="24111" EndSeek="27855"/>
</Delta>
<Delta Version="88" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:19:9000">
<Copy StartSeek="0" EndSeek="24169"/>
<Insert>	char                *data;
</Insert>
<Copy StartSeek="24197" EndSeek="27855"/>
</Delta>
<Delta Version="89" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:19:49000">
<Copy StartSeek="0" EndSeek="26044"/>
<Insert>	mvOsCacheIoSync();
</Insert>
<Copy StartSeek="26071" EndSeek="27862"/>
</Delta>
<Delta Version="90" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:21:10000">
<Copy StartSeek="0" EndSeek="26002"/>
<Insert>	}

</Insert>
<Copy StartSeek="26773" EndSeek="28629"/>
</Delta>
<Delta Version="91" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:25:0000">
<Copy StartSeek="0" EndSeek="26497"/>
<Insert>		mvNetaTxqPendDescAdd(tx_port, 0 /* txp */, 7 /* Txq */, 1	/* num of descriptors */);
</Insert>
<Copy StartSeek="26584" EndSeek="28629"/>
</Delta>
<Delta Version="92" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:27:43000">
<Copy StartSeek="0" EndSeek="26624"/>
<Insert>		mvNetaTxqSentDescProc(port2, 0 /* txp */, 7);
</Insert>
<Copy StartSeek="26674" EndSeek="28631"/>
</Delta>
<Delta Version="93" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:27:52000">
<Copy StartSeek="0" EndSeek="26099"/>
<Insert>		if (NULL == tx_desc) {
</Insert>
<Copy StartSeek="26117" EndSeek="28624"/>
</Delta>
<Delta Version="94" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:29:1000">
<Copy StartSeek="0" EndSeek="26490"/>
<Insert>		mvNetaTxqPendDescAdd(tx_port, 0 /* txp */, 7 /* Txq */, 1 /* num of descriptors */);
</Insert>
<Copy StartSeek="26577" EndSeek="28624"/>
</Delta>
<Delta Version="95" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:31:0000">
<Copy StartSeek="0" EndSeek="26767"/>
<Insert>
</Insert>
<Copy StartSeek="26767" EndSeek="28623"/>
</Delta>
<Delta Version="96" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:31:3000">
<Copy StartSeek="0" EndSeek="26003"/>
<Insert>		/* Transmit */
</Insert>
<Copy StartSeek="26076" EndSeek="26723"/>
<Insert>		/* --------- */
</Insert>
<Copy StartSeek="26794" EndSeek="28732"/>
</Delta>
<Delta Version="97" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:31:36000">
<Copy StartSeek="0" EndSeek="15251"/>
<Insert>   eth_if_t *eth_if; = &amp;eth_if_list[cfg-&gt;port];
</Insert>
<Copy StartSeek="15298" EndSeek="28731"/>
</Delta>
<Delta Version="98" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:42:54000">
<Copy StartSeek="0" EndSeek="15298"/>
<Copy StartSeek="15299" EndSeek="28732"/>
</Delta>
<Delta Version="99" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:42:57000">
<Copy StartSeek="0" EndSeek="15478"/>
<Insert>   eth_if_t *eth_if; = &amp;eth_if_list[cfg-&gt;port];

</Insert>
<Copy StartSeek="15479" EndSeek="28684"/>
</Delta>
<Delta Version="100" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:43:9000">
<Copy StartSeek="0" EndSeek="24901"/>
<Insert>		rx_desc = mvNetaRxqNextDescGet(eth_if-&gt;rxq_ctrl);
</Insert>
<Copy StartSeek="24956" EndSeek="28687"/>
</Delta>
<Delta Version="101" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:43:23000">
<Copy StartSeek="0" EndSeek="26057"/>
<Insert>		tx_desc = mvNetaTxqNextDescGet(eth_if2-&gt;txq_ctrl);
</Insert>
<Copy StartSeek="26112" EndSeek="28689"/>
</Delta>
<Delta Version="102" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:43:43000">
<Copy StartSeek="0" EndSeek="25880"/>
<Insert>		/* Refill pkt */
		mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);

</Insert>
<Copy StartSeek="25880" EndSeek="28611"/>
</Delta>
<Delta Version="103" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:44:13000">
<Copy StartSeek="0" EndSeek="24063"/>
<Insert>	struct neta_rx_desc *rx_desc;
</Insert>
<Copy StartSeek="24104" EndSeek="28621"/>
</Delta>
<Delta Version="104" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:44:29000">
<Copy StartSeek="0" EndSeek="25610"/>
<Insert>			eth_if-&gt;stats.rx_errors++;
</Insert>
<Copy StartSeek="25643" EndSeek="28624"/>
</Delta>
<Delta Version="105" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:44:40000">
<Copy StartSeek="0" EndSeek="25827"/>
<Insert>		eth_if-&gt;stats.rx_pkts++;
		eth_if-&gt;stats.rx_bytes += rx_bytes;
</Insert>
<Copy StartSeek="25898" EndSeek="28630"/>
</Delta>
<Delta Version="106" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:44:52000">
<Copy StartSeek="0" EndSeek="24159"/>
<Insert>	uint32_t            rx_status;
</Insert>
<Copy StartSeek="24200" EndSeek="28639"/>
</Delta>
<Delta Version="107" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:46:32000">
<Copy StartSeek="0" EndSeek="24063"/>
<Insert>	struct neta_rx_desc *rx_desc, *tx_desc;
</Insert>
<Copy StartSeek="24125" EndSeek="28660"/>
</Delta>
<Delta Version="108" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:48:16000">
<Copy StartSeek="0" EndSeek="24094"/>
<Insert>	NETA_TX_DESC* tx_desc = NULL;
</Insert>
<Copy StartSeek="24118" EndSeek="28653"/>
</Delta>
<Delta Version="109" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:48:34000">
<Copy StartSeek="0" EndSeek="26862"/>
<Insert>	mvNetaRxqDescNumUpdate(eth_if-&gt;cfg.port, eth_if-&gt;cfg.rxq, rx_done, rx_filled);
</Insert>
<Copy StartSeek="26945" EndSeek="28656"/>
</Delta>
<Delta Version="110" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:48:47000">
<Copy StartSeek="0" EndSeek="26862"/>
<Insert>	mvNetaRxqDescNumUpdate(eth_if_rx-&gt;cfg.port, eth_if-&gt;cfg.rxq, rx_done, rx_filled);
</Insert>
<Copy StartSeek="26948" EndSeek="28659"/>
</Delta>
<Delta Version="111" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:48:50000">
<Copy StartSeek="0" EndSeek="27574"/>
<Insert>void eth_tx_fwd(int port, void* pkt, int size)
{
	int n;
	struct ethhdr *eth_hdr;
	struct iphdr *iph;

	if (((struct ethhdr *)pkt)-&gt;h_proto != htons(ETH_P_IP)) {
		return;
	}

	eth_hdr = (struct ethhdr *) pkt;

	memcpy(eth_hdr-&gt;h_dest, eth_hdr-&gt;h_source, ETH_ALEN);
	eth_hdr-&gt;h_source[0] = 0x00;
	eth_hdr-&gt;h_source[1] = 0x50;
	eth_hdr-&gt;h_source[2] = 0x43;
	eth_hdr-&gt;h_source[3] = 0x12;
	eth_hdr-&gt;h_source[4] = 0x01;
	eth_hdr-&gt;h_source[5] = 0x81;

	iph = (struct iphdr *)((char *)pkt + sizeof(struct ethhdr));
	pr_debug("%pI4 -&gt; %pI4 [%#x][ip.proto %u]\n", &amp;iph-&gt;saddr, &amp;iph-&gt;daddr, iph-&gt;daddr ,iph-&gt;protocol);
	((char *)(&amp;iph-&gt;daddr))[2] = 0; /* toggle the net address */

	eth_if_tx(ETH_PORT, pkt, size);
	n = mvNetaTxqSentDescNumGet(ETH_PORT, 0, ETH_TXQ);
	printk("\nMMP ETH: sent %d\n", n);
}

void eth_rx_callback(int port, void* skb, int size)
{
	struct iphdr *iph;

	if (((struct ethhdr *)skb)-&gt;h_proto == htons(ETH_P_IP)) {
		iph = (struct iphdr *)((char *)skb + sizeof(struct ethhdr));
		pr_debug("%pI4 -&gt; %pI4 [ip.proto %u]\n", &amp;iph-&gt;saddr, &amp;iph-&gt;daddr, iph-&gt;protocol);

	}
}
</Insert>
</Delta>
<Delta Version="112" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="12:49:40000">
<Copy StartSeek="0" EndSeek="796"/>
<Copy StartSeek="818" EndSeek="28955"/>
</Delta>
<Delta Version="113" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:12:1000">
<Copy StartSeek="0" EndSeek="796"/>
<Insert>#include "perf_cnt.h"
</Insert>
<Copy StartSeek="796" EndSeek="28933"/>
</Delta>
<Delta Version="114" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:12:24000">
<Copy StartSeek="0" EndSeek="23915"/>
<Insert>int eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int rx_todo)
</Insert>
<Copy StartSeek="23996" EndSeek="28942"/>
</Delta>
<Delta Version="115" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:22:46000">
<Copy StartSeek="0" EndSeek="23915"/>
<Insert>unsigned int eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int rx_todo)
{
</Insert>
<Copy StartSeek="23999" EndSeek="28943"/>
</Delta>
<Delta Version="116" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:22:48000">
<Copy StartSeek="0" EndSeek="980"/>
<Copy StartSeek="1004" EndSeek="28967"/>
</Delta>
<Delta Version="117" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:27:10000">
<Copy StartSeek="0" EndSeek="980"/>
<Insert>#warning "ETH_DEBUG_ON"
</Insert>
<Copy StartSeek="980" EndSeek="28943"/>
</Delta>
<Delta Version="118" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:27:23000">
<Copy StartSeek="0" EndSeek="796"/>
<Insert>#include &lt;log.h&gt;
</Insert>
<Copy StartSeek="815" EndSeek="28945"/>
</Delta>
<Delta Version="119" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:27:34000">
<Copy StartSeek="0" EndSeek="796"/>
<Insert>//#include &lt;log.h&gt;
</Insert>
<Copy StartSeek="813" EndSeek="28943"/>
</Delta>
<Delta Version="120" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:27:45000">
<Copy StartSeek="0" EndSeek="27584"/>
<Copy StartSeek="27585" EndSeek="28944"/>
</Delta>
<Delta Version="121" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="15:43:35000">
<Copy StartSeek="0" EndSeek="26959"/>
<Insert>	ETH_IF_DBG("============= mmp_eth_rx: rx_done %d, rx_filled %d =========================&gt;&gt;&gt;&gt;", rx_done, rx_filled);
</Insert>
<Copy StartSeek="27083" EndSeek="28951"/>
</Delta>
<Delta Version="122" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="16:27:49000">
<Copy StartSeek="0" EndSeek="26959"/>
<Insert>	printk(KERN_DEBUG "============= mmp_eth_rx: rx_done %d, rx_filled %d =========================&gt;&gt;&gt;&gt;", rx_done, rx_filled);
</Insert>
<Copy StartSeek="27076" EndSeek="28944"/>
</Delta>
<Delta Version="123" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="16:30:18000">
<Copy StartSeek="0" EndSeek="24104"/>
<Insert>	NETA_TX_DESC* tx_desc;
</Insert>
<Copy StartSeek="24128" EndSeek="28944"/>
</Delta>
<Delta Version="124" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:40:50000">
<Copy StartSeek="0" EndSeek="26104"/>
<Copy StartSeek="26170" EndSeek="29010"/>
</Delta>
<Delta Version="125" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:43:51000">
<Copy StartSeek="0" EndSeek="15299"/>
<Copy StartSeek="15369" EndSeek="29080"/>
</Delta>
<Delta Version="126" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:51:52000">
<Copy StartSeek="0" EndSeek="15299"/>
<Insert>   printk(KERN_ERR "(%s:%d) eth_if %p\n", __func__, __LINE__,eth_if);
</Insert>
<Copy StartSeek="15393" EndSeek="29104"/>
</Delta>
<Delta Version="127" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:52:4000">
<Copy StartSeek="0" EndSeek="17567"/>
<Insert>  ETH_IF_INFO("Eth port %d initialized.", eth_if-&gt;cfg.port);
</Insert>
<Copy StartSeek="17634" EndSeek="29110"/>
</Delta>
<Delta Version="128" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:53:44000">
<Copy StartSeek="0" EndSeek="15299"/>
<Insert>   printk(KERN_ERR "(%s:%d) eth_if %p, cfg-&gt;port %d\n", __func__, __LINE__,eth_if,cfg-&gt;port);
</Insert>
<Copy StartSeek="15395" EndSeek="29112"/>
</Delta>
<Delta Version="129" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:53:50000">
<Copy StartSeek="0" EndSeek="17569"/>
<Insert>  printk(KERN_DEBUG "Eth port %d initialized.", eth_if-&gt;cfg.port);
</Insert>
<Copy StartSeek="17638" EndSeek="29114"/>
</Delta>
<Delta Version="130" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:54:48000">
<Copy StartSeek="0" EndSeek="15299"/>
<Insert>   printk(KERN_DEBUG "(%s:%d) eth_if %p, cfg-&gt;port %d\n", __func__, __LINE__,eth_if,cfg-&gt;port);
</Insert>
<Copy StartSeek="15299" EndSeek="29018"/>
</Delta>
<Delta Version="131" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:55:2000">
<Copy StartSeek="0" EndSeek="835"/>
<Insert>#define ETH_IF_ERROR(format, args...) MMP_LOG(3,format, ##args)
</Insert>
<Copy StartSeek="905" EndSeek="29024"/>
</Delta>
<Delta Version="132" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:55:23000">
<Copy StartSeek="0" EndSeek="835"/>
<Insert>#define ETH_IF_ERROR(format, args...) printk(KERN_ERR,format, ##args)
</Insert>
<Copy StartSeek="896" EndSeek="29015"/>
</Delta>
<Delta Version="133" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="17:55:43000">
<Copy StartSeek="0" EndSeek="23920"/>
<Copy StartSeek="27192" EndSeek="30068"/>
<Insert>
</Insert>
<Copy StartSeek="30082" EndSeek="30452"/>
<Insert>
</Insert>
<Copy StartSeek="30477" EndSeek="32324"/>
</Delta>
<Delta Version="134" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:07:23000">
<Copy StartSeek="0" EndSeek="27276"/>
<Insert>	eth_if_t *eth_if_rx, *eth_if_tx;
</Insert>
<Copy StartSeek="27314" EndSeek="27603"/>
<Insert>	eth_if_tx = &amp;eth_if_list[tx_port];
</Insert>
<Copy StartSeek="27646" EndSeek="32335"/>
</Delta>
<Delta Version="135" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:07:35000">
<Copy StartSeek="0" EndSeek="26802"/>
<Insert>		eth_if_tx()
</Insert>
<Copy StartSeek="26805" EndSeek="29209"/>
<Insert>		/* -------------------- Transmit start -----------------------------*/
		/* Descriptor to use */
		tx_desc = mvNetaTxqNextDescGet(eth_if_tx-&gt;txq_ctrl);
		if (!tx_desc) {
			printk(KERN_ERR "(%s:%d) no tx_desc!!\n", __func__, __LINE__);
			continue;
		}
		/* Calculate IPv4 checksum and L4 checksum */
		command = 0; 
		command |= NETA_TX_F_DESC_MASK | NETA_TX_L_DESC_MASK;

		tx_desc-&gt;dataSize = rx_bytes;
		tx_desc-&gt;bufPhysAddr = mvOsCacheFlush(NULL, data, rx_bytes);

		tx_desc-&gt;command = command;
		tx_desc-&gt;hw_cmd = 0;

		/* Flush cache to RAM */
		eth_if_tx_desc_flush(tx_desc);

		/* Enable transmit */
		mvNetaTxqPendDescAdd(tx_port, 0	/* txp */, 7 /* Txq */, 1 /* num of descriptors */);

		/* Decrement the sent descriptors */
		mvNetaTxqSentDescProc(tx_port, 0 /* txp */, 7);
</Insert>
<Copy StartSeek="29209" EndSeek="31536"/>
</Delta>
<Delta Version="136" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:07:57000">
<Copy StartSeek="0" EndSeek="29280"/>
<Insert>		eth_if_tx()
</Insert>
<Copy StartSeek="29321" EndSeek="31563"/>
</Delta>
<Delta Version="137" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:08:20000">
<Copy StartSeek="0" EndSeek="27265"/>
<Insert>	eth_if_t *eth_if_rx, /**eth_if_tx*/;
</Insert>
<Copy StartSeek="27304" EndSeek="31564"/>
</Delta>
<Delta Version="138" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:08:53000">
<Copy StartSeek="0" EndSeek="29281"/>
<Insert>		eth_if_tx(ETH_TX_PORT, data, rx_size);
</Insert>
<Copy StartSeek="29323" EndSeek="31565"/>
</Delta>
<Delta Version="139" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:09:17000">
<Copy StartSeek="0" EndSeek="1160"/>
<Insert>#define ETH_IF_MAX 3
</Insert>
<Copy StartSeek="1181" EndSeek="31565"/>
</Delta>
<Delta Version="140" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:14:38000">
<Copy StartSeek="0" EndSeek="15248"/>
<Insert>   eth_if_t *eth_if = &amp;eth_if_list[cfg-&gt;port];
</Insert>
<Copy StartSeek="15270" EndSeek="15450"/>
<Insert>
</Insert>
<Copy StartSeek="15488" EndSeek="31577"/>
</Delta>
<Delta Version="141" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:15:14000">
<Copy StartSeek="0" EndSeek="2544"/>
<Insert>#define ETH_MAX_PORT 6
</Insert>
<Copy StartSeek="2544" EndSeek="15248"/>
<Insert>   if (cfg-&gt;port &gt;= ETH_MAX_PORT) {
</Insert>
<Copy StartSeek="15295" EndSeek="31565"/>
</Delta>
<Delta Version="142" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:15:26000">
<Copy StartSeek="0" EndSeek="15248"/>
<Insert>   if (cfg-&gt;port &gt;= ETH_IF_MAX ETH_MAX_PORT) {
</Insert>
<Copy StartSeek="15282" EndSeek="31552"/>
</Delta>
<Delta Version="143" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:15:30000">
<Copy StartSeek="0" EndSeek="2544"/>
<Insert>static eth_if_t eth_if_list[ETH_MAX_PORT];
</Insert>
<Copy StartSeek="2585" EndSeek="31550"/>
</Delta>
<Delta Version="144" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:16:1000">
<Copy StartSeek="0" EndSeek="15362"/>
<Insert>			cfg-&gt;port, ETH_MAX_PORT);
</Insert>
<Copy StartSeek="15389" EndSeek="31548"/>
</Delta>
<Delta Version="145" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:16:14000">
<Copy StartSeek="0" EndSeek="15246"/>
<Insert>   if (cfg-&gt;port &gt;= ETH_IF_MAX) {
	   ETH_IF_ERROR("Network interface config: invalide port num passed (%u &gt; %u).",
			cfg-&gt;port, ETH_IF_MAx);
	   goto eth_if_init_fail;
   }
</Insert>
<Copy StartSeek="15420" EndSeek="15858"/>
<Insert>  if (cfg-&gt;port &gt; ETH_IF_MAX /* TODO add const */) {
      ETH_IF_ERROR("Network interface config: Port out of range (%d).", cfg-&gt;port);
      goto eth_if_init_fail;
  }

</Insert>
<Copy StartSeek="15859" EndSeek="31377"/>
</Delta>
<Delta Version="146" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:16:29000">
<Copy StartSeek="0" EndSeek="23732"/>
<Insert>#if 0
</Insert>
<Copy StartSeek="23732" EndSeek="26981"/>
<Insert>#else
unsigned int 
eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int rx_todo)
{
	eth_if_t *eth_if_rx /*, *eth_if_tx*/;
	uint32_t rx_done, rx_filled, rx_bytes;
	struct neta_rx_desc *rx_desc;
	NETA_TX_DESC *tx_desc;
	eth_if_pkt_t        *pkt;
	u_char              *data;
	uint32_t            rx_status, command;

	/* TODO replace by lookup when supporting multiple ports */
	eth_if_rx = &amp;eth_if_list[rx_port];
//      eth_if_tx = &amp;eth_if_list[tx_port];

	if (eth_if_rx-&gt;txq_ctrl == NULL || 
	    eth_if_rx-&gt;cfg.state == ETH_IF_STATE_DOWN) {
		return -1;
	}

	/* Get number of received packets */
	rx_done = mvNetaRxqBusyDescNumGet(eth_if_rx-&gt;cfg.port, eth_if_rx-&gt;cfg.rxq);
	if (rx_done == 0) {
		return 0;
	}

//ETH_IF_DBG("&lt;&lt;&lt;&lt;============= mmp_eth_rx: %d pkts RX pending", rx_done);
//mvOsCacheIoSync();

	if (rx_todo &gt; rx_done)
		rx_todo = rx_done;

	rx_done = 0;
	rx_filled = 0;

	/* Fairness NAPI loop */
	while (rx_done &lt; rx_todo) {

		/* TODO consider more sophisticated prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_DESC_PREFETCH */
		rx_desc = mvNetaRxqNextDescGet(eth_if_rx-&gt;rxq_ctrl);
		mvOsCacheLineInv(NULL, rx_desc);
		prefetch(rx_desc);

		rx_done++;
		rx_filled++;
		rx_status = rx_desc-&gt;status;
		pkt = (eth_if_pkt_t *)rx_desc-&gt;bufCookie;

		/* Speculative ICache prefetch WA: should be replaced with dma_unmap_single (invalidate l2) */
		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, rx_desc-&gt;dataSize);
		/* TODO consider prefetch: see mv_netdev.c, CONFIG_MV_ETH_RX_PKT_PREFETCH */

		ETH_IF_DBG("Pkt %d [0x%x], status 0x%x, dataSize %d", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize);

		if (((rx_status &amp; NETA_RX_FL_DESC_MASK) != NETA_RX_FL_DESC_MASK) ||
		    (rx_status &amp; NETA_RX_ES_MASK)) {

			ETH_IF_DBG("Rx error");

			eth_if_rx-&gt;stats.rx_errors++;

			mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
			continue;
		}

		rx_bytes = rx_desc-&gt;dataSize - (MV_ETH_CRC_SIZE + MV_ETH_MH_SIZE);
		data = pkt-&gt;buf + MV_ETH_MH_SIZE;

		eth_if_rx-&gt;stats.rx_pkts++;
		eth_if_rx-&gt;stats.rx_bytes += rx_bytes;

		/* -------------------- Transmit end -----------------------------*/
		eth_if_tx(ETH_TX_PORT, data, rx_bytes);
		/* Refill pkt */
		mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);

	}
	/* Update RxQ management counters */
//      mvOsCacheIoSync();
	mvNetaRxqDescNumUpdate(eth_if_rx-&gt;cfg.port, eth_if_rx-&gt;cfg.rxq, rx_done, rx_filled);

	ETH_IF_DBG("============= mmp_eth_rx: rx_done %d, rx_filled %d =========================&gt;&gt;&gt;&gt;", rx_done, rx_filled);

	return rx_done;
}
#endif /* eth_if_fwd */

</Insert>
<Copy StartSeek="26982" EndSeek="28829"/>
</Delta>
<Delta Version="147" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:20:0000">
<Copy StartSeek="0" EndSeek="26221"/>
<Copy StartSeek="26319" EndSeek="28927"/>
</Delta>
<Delta Version="148" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:27:43000">
<Copy StartSeek="0" EndSeek="25749"/>
<Copy StartSeek="25867" EndSeek="26339"/>
<Insert>		data[0] = 00;
		data[1] = 10;
		data[2] = 94;
		data[3] = 00;
		data[4] = 00;
		data[5] = 04;


</Insert>
<Copy StartSeek="26341" EndSeek="28949"/>
</Delta>
<Delta Version="149" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:29:0000">
<Copy StartSeek="0" EndSeek="25770"/>
<Insert>		data[0] = 00;
		data[1] = 10;
		data[2] = 94;
		data[3] = 00;
		data[4] = 00;
		data[5] = 04;
</Insert>
<Copy StartSeek="25908" EndSeek="25909"/>
<Copy StartSeek="26006" EndSeek="29088"/>
</Delta>
<Delta Version="150" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:30:41000">
<Copy StartSeek="0" EndSeek="24041"/>
<Insert>
</Insert>
<Copy StartSeek="24062" EndSeek="25928"/>
<Insert>
		data[0] = 66;
</Insert>
<Copy StartSeek="25991" EndSeek="29154"/>
</Delta>
<Delta Version="151" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:33:23000">
<Copy StartSeek="0" EndSeek="25928"/>
<Insert>		ethhdr = (struct eth_hdr *)data;
		ethhdr-&gt;
			data[0] = 66;
		data[1] = 66;
		data[2] = 66;
		data[3] = 66;
		data[4] = 66;
		data[5] = 66;

</Insert>
<Copy StartSeek="26001" EndSeek="29083"/>
</Delta>
<Delta Version="152" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:34:30000">
<Copy StartSeek="0" EndSeek="26001"/>
<Copy StartSeek="26026" EndSeek="29108"/>
</Delta>
<Delta Version="153" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:34:40000">
<Copy StartSeek="0" EndSeek="25960"/>
<Insert>		memset(eth-&gt;h_dest,0x66,ETH_ADDR_LEN);
</Insert>
<Copy StartSeek="25991" EndSeek="29098"/>
</Delta>
<Delta Version="154" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:34:58000">
<Copy StartSeek="0" EndSeek="25960"/>
<Insert>		memset(eth-&gt;h_dest,0x66, 6);
</Insert>
<Copy StartSeek="25993" EndSeek="29100"/>
</Delta>
<Delta Version="155" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:35:53000">
<Copy StartSeek="0" EndSeek="25928"/>
<Insert>		eth = (struct eth_hdr *)data;
		memset(eth-&gt;h_source,0x66, 6);
</Insert>
<Copy StartSeek="26132" EndSeek="29239"/>
</Delta>
<Delta Version="156" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:37:11000">
<Copy StartSeek="0" EndSeek="25790"/>
<Insert>//      	data[0] = 00;
//      	data[1] = 10;
//      	data[2] = 94;
//      	data[3] = 00;
//      	data[4] = 00;
//      	data[5] = 04;
</Insert>
<Copy StartSeek="25790" EndSeek="29101"/>
</Delta>
<Delta Version="157" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:38:7000">
<Copy StartSeek="0" EndSeek="25790"/>
<Insert>		eth = (struct eth_hdr *)data; /*00:50:43:11:11:11*/
</Insert>
<Copy StartSeek="25822" EndSeek="29079"/>
</Delta>
<Delta Version="158" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:38:16000">
<Copy StartSeek="0" EndSeek="25972"/>
<Copy StartSeek="26112" EndSeek="29219"/>
</Delta>
<Delta Version="159" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:39:18000">
<Copy StartSeek="0" EndSeek="25996"/>
<Insert>		eth-&gt;h_dest[1] = 50;
</Insert>
<Copy StartSeek="26019" EndSeek="29219"/>
</Delta>
<Delta Version="160" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:39:57000">
<Copy StartSeek="0" EndSeek="26019"/>
<Insert>		eth-&gt;h_dest[2] = 43;
</Insert>
<Copy StartSeek="26042" EndSeek="29219"/>
</Delta>
<Delta Version="161" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:40:2000">
<Copy StartSeek="0" EndSeek="26042"/>
<Insert>		eth-&gt;h_dest[3] = 11;
		eth-&gt;h_dest[4] = 11;
		eth-&gt;h_dest[5] = 11;
</Insert>
<Copy StartSeek="26111" EndSeek="29219"/>
</Delta>
<Delta Version="162" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:40:12000">
<Copy StartSeek="0" EndSeek="25822"/>
<Insert>		eth-&gt;h_source[0] = 00;
		eth-&gt;h_source[1] = 50;
		eth-&gt;h_source[2] = 43;
		eth-&gt;h_source[3] = 11;
		eth-&gt;h_source[4] = 11;
		eth-&gt;h_source[5] = 11;

</Insert>
<Copy StartSeek="26047" EndSeek="29293"/>
</Delta>
<Delta Version="163" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:44:50000">
<Copy StartSeek="0" EndSeek="26682"/>
<Insert>


</Insert>
<Copy StartSeek="26682" EndSeek="29290"/>
</Delta>
<Delta Version="164" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:59:46000">
<Copy StartSeek="0" EndSeek="26586"/>
<Insert>
		tx_desc-&gt;dataSize = rx_bytes;
		tx_desc-&gt;bufPhysAddr = mvOsCacheFlush(NULL, data, rx_bytes);
</Insert>
<Copy StartSeek="26586" EndSeek="26640"/>
<Copy StartSeek="26736" EndSeek="29290"/>
</Delta>
<Delta Version="165" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="18:59:57000">
<Copy StartSeek="0" EndSeek="26639"/>
<Insert>
</Insert>
<Copy StartSeek="26639" EndSeek="29289"/>
</Delta>
<Delta Version="166" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="19:00:9000">
<Copy StartSeek="0" EndSeek="26586"/>
<Copy StartSeek="26587" EndSeek="29290"/>
</Delta>
<Delta Version="167" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="19:00:11000">
<Copy StartSeek="0" EndSeek="23732"/>
<Insert>unsigned int 
eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int rx_todo)
{
</Insert>
<Copy StartSeek="23806" EndSeek="29280"/>
</Delta>
<Delta Version="168" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="19:05:58000">
<Copy StartSeek="0" EndSeek="23732"/>
<Insert>int eth_if_fwd(unsigned int rx_port, unsigned int tx_port, int rx_todo)
{
</Insert>
<Copy StartSeek="23816" EndSeek="24283"/>
<Insert>		return -1;
</Insert>
<Copy StartSeek="24295" EndSeek="29289"/>
</Delta>
<Delta Version="169" Comment="" NL="\10" Encoding="text" Date="2012/03/15" Time="19:06:14000">
<Copy StartSeek="0" EndSeek="25821"/>
<Copy StartSeek="25822" EndSeek="25854"/>
<Insert>//      	eth-&gt;h_source[0] = 00;
//      	eth-&gt;h_source[1] = 50;
//      	eth-&gt;h_source[2] = 43;
//      	eth-&gt;h_source[3] = 11;
//      	eth-&gt;h_source[4] = 11;
//      	eth-&gt;h_source[5] = 11;

</Insert>
<Copy StartSeek="25854" EndSeek="29097"/>
</Delta>
<Delta Version="170" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:04:28000">
<Copy StartSeek="0" EndSeek="26956"/>
<Insert>
	}
</Insert>
<Copy StartSeek="26959" EndSeek="29096"/>
</Delta>
<Delta Version="171" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:04:43000">
<Copy StartSeek="0" EndSeek="23816"/>
<Insert>	eth_if_t *eth_if_rx, *eth_if_tx;
</Insert>
<Copy StartSeek="23846" EndSeek="24155"/>
<Insert>	eth_if_tx = &amp;eth_if_list[tx_port];
</Insert>
<Copy StartSeek="24187" EndSeek="25985"/>
<Copy StartSeek="25986" EndSeek="26011"/>
<Copy StartSeek="26012" EndSeek="26111"/>
<Insert>		tx_desc = mvNetaTxqNextDescGet(eth_if_tx-&gt;txq_ctrl);
</Insert>
<Copy StartSeek="26162" EndSeek="29086"/>
</Delta>
<Delta Version="172" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:07:0000">
<Copy StartSeek="0" EndSeek="26012"/>
<Copy StartSeek="26018" EndSeek="26872"/>
<Insert>		
</Insert>
<Copy StartSeek="26881" EndSeek="29098"/>
</Delta>
<Delta Version="173" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:07:25000">
<Copy StartSeek="0" EndSeek="26872"/>
<Copy StartSeek="26920" EndSeek="29146"/>
</Delta>
<Delta Version="174" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:08:0000">
<Copy StartSeek="0" EndSeek="26012"/>
<Insert>#if 0
</Insert>
<Copy StartSeek="26018" EndSeek="29146"/>
</Delta>
<Delta Version="175" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:10:44000">
<Copy StartSeek="0" EndSeek="19630"/>
<Copy StartSeek="19636" EndSeek="19798"/>
<Insert>
</Insert>
<Copy StartSeek="19843" EndSeek="29196"/>
</Delta>
<Delta Version="176" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:13:19000">
<Copy StartSeek="0" EndSeek="26062"/>
<Insert>#if 1
</Insert>
<Copy StartSeek="26068" EndSeek="29196"/>
</Delta>
<Delta Version="177" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="10:14:14000">
<Copy StartSeek="0" EndSeek="14434"/>
<Insert>int eth_if_shutdown(void) {
  eth_if_t *eth_if = &amp;eth_if_list[0];
</Insert>
<Copy StartSeek="14507" EndSeek="29203"/>
</Delta>
<Delta Version="178" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="11:07:55000">
<Copy StartSeek="0" EndSeek="17390"/>
<Insert>  eth_if_shutdown();
</Insert>
<Copy StartSeek="17420" EndSeek="29212"/>
</Delta>
<Delta Version="179" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="11:09:59000">
<Copy StartSeek="0" EndSeek="25847"/>
<Insert>		eth = (struct eth_hdr *)data;

		memset(eth-&gt;h_source,0x66,6);
		eth-&gt;h_dest[0] = 00;
		eth-&gt;h_dest[1] = 10;
		eth-&gt;h_dest[2] = 94;
		eth-&gt;h_dest[3] = 00;
		eth-&gt;h_dest[4] = 00;
		eth-&gt;h_dest[5] = 04;
</Insert>
<Copy StartSeek="26108" EndSeek="29270"/>
</Delta>
<Delta Version="180" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="11:46:45000">
<Copy StartSeek="0" EndSeek="25847"/>
<Insert>//      	eth = (struct eth_hdr *)data;
//
//      	memset(eth-&gt;h_source,0x66,6);
</Insert>
<Copy StartSeek="25912" EndSeek="29254"/>
</Delta>
<Delta Version="181" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="11:49:19000">
<Copy StartSeek="0" EndSeek="25912"/>
<Insert>//      	eth-&gt;h_dest[0] = 00;
//      	eth-&gt;h_dest[1] = 10;
//      	eth-&gt;h_dest[2] = 94;
//      	eth-&gt;h_dest[3] = 00;
//      	eth-&gt;h_dest[4] = 00;
//      	eth-&gt;h_dest[5] = 04;
</Insert>
<Copy StartSeek="26050" EndSeek="29212"/>
</Delta>
<Delta Version="182" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="11:49:25000">
<Copy StartSeek="0" EndSeek="25847"/>
<Insert>		eth = (struct eth_hdr *)data;

		memset(eth-&gt;h_source,0x66,6);
		eth-&gt;h_dest[0] = 00;
		eth-&gt;h_dest[1] = 10;
		eth-&gt;h_dest[2] = 94;
		eth-&gt;h_dest[3] = 00;
		eth-&gt;h_dest[4] = 00;
		eth-&gt;h_dest[5] = 04;
</Insert>
<Copy StartSeek="26108" EndSeek="29270"/>
</Delta>
<Delta Version="183" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="11:49:31000">
<Copy StartSeek="0" EndSeek="25398"/>
<Insert>
</Insert>
<Copy StartSeek="25402" EndSeek="25757"/>
<Copy StartSeek="25871" EndSeek="29387"/>
</Delta>
<Delta Version="184" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="11:59:11000">
<Copy StartSeek="0" EndSeek="25757"/>
<Insert>		printk(KERN_DEBUG "Pkt %d [0x%x], status 0x%x, dataSize %d", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize);
</Insert>
<Copy StartSeek="25757" EndSeek="29273"/>
</Delta>
<Delta Version="185" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:01:44000">
<Copy StartSeek="0" EndSeek="25828"/>
<Insert>
</Insert>
<Copy StartSeek="26041" EndSeek="29485"/>
</Delta>
<Delta Version="186" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:05:42000">
<Copy StartSeek="0" EndSeek="25925"/>
<Insert>		       eth-&gt;h_dest[0], eth-&gt;h_dest[1], eth-&gt;h_dest[2],
		       eth-&gt;h_dest[3], eth-&gt;h_dest[4], eth-&gt;h_dest[5],);
</Insert>
<Copy StartSeek="26053" EndSeek="29497"/>
</Delta>
<Delta Version="187" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:05:58000">
<Copy StartSeek="0" EndSeek="25988"/>
<Insert>		       eth-&gt;h_source[3], eth-&gt;h_source[4], eth-&gt;h_source[5],);
</Insert>
<Copy StartSeek="26052" EndSeek="29496"/>
</Delta>
<Delta Version="188" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:06:0000">
<Copy StartSeek="0" EndSeek="25828"/>
<Insert>		printk(KERN_ERR "(%s:%d) size %u, %u:%u:%u:%u:%u:%u\n", __func__, __LINE__,
		       rx_bytes,
</Insert>
<Copy StartSeek="25969" EndSeek="26096"/>
<Insert>		/* dummy modify */
//      	eth = (struct eth_hdr *)data;
</Insert>
<Copy StartSeek="26097" EndSeek="29481"/>
</Delta>
<Delta Version="189" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:09:7000">
<Copy StartSeek="0" EndSeek="25881"/>
<Insert>		printk(KERN_ERR "(%s:%d) size %u, %u:%u:%u:%u:%u:%u\n", __func__, __LINE__, rx_bytes,
</Insert>
<Copy StartSeek="25969" EndSeek="29481"/>
</Delta>
<Delta Version="190" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:23:43000">
<Copy StartSeek="0" EndSeek="25881"/>
<Insert>		printk(KERN_ERR "(%s:%d) size %u, %x:%x:%x:%x:%x:%x\n", __func__, __LINE__, rx_bytes,
		       eth-&gt;h_source[0], eth-&gt;h_source[1], eth-&gt;h_source[2],
		       eth-&gt;h_source[3], eth-&gt;h_source[4], eth-&gt;h_source[5]);
</Insert>
<Copy StartSeek="25964" EndSeek="29349"/>
</Delta>
<Delta Version="191" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:27:36000">
<Copy StartSeek="0" EndSeek="25849"/>
<Insert>		eth = (struct eth_hdr *)data;
		if (!eth) {
			printk(KERN_ERR "(%s:%d) NULL ETH!!!\n", __func__, __LINE__);
		}

</Insert>
<Copy StartSeek="25889" EndSeek="29273"/>
</Delta>
<Delta Version="192" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:53:53000">
<Copy StartSeek="0" EndSeek="25888"/>
<Insert>
</Insert>
<Copy StartSeek="25888" EndSeek="29272"/>
</Delta>
<Delta Version="193" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="12:53:54000">
<Copy StartSeek="0" EndSeek="23798"/>
<Copy StartSeek="24543" EndSeek="30017"/>
</Delta>
<Delta Version="194" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:04:24000">
<Copy StartSeek="0" EndSeek="24386"/>
<Insert>		eth_if_tx(ETH_PORT, pkt, 1000);
</Insert>
<Copy StartSeek="24423" EndSeek="30020"/>
</Delta>
<Delta Version="195" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:04:58000">
<Copy StartSeek="0" EndSeek="23870"/>
<Insert>	pkt = kmalloc(1500, GFP_ATOMIC);
</Insert>
<Copy StartSeek="23903" EndSeek="30019"/>
</Delta>
<Delta Version="196" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:05:3000">
<Copy StartSeek="0" EndSeek="23931"/>
<Insert>	memset(pkt, 0, 1500);
</Insert>
<Copy StartSeek="23953" EndSeek="30018"/>
</Delta>
<Delta Version="197" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:05:7000">
<Copy StartSeek="0" EndSeek="23953"/>
<Insert>	eth_hdr-&gt;h_dest[0] = 0xF0;
	eth_hdr-&gt;h_dest[1] = 0xDE;
	eth_hdr-&gt;h_dest[2] = 0xF1;
	eth_hdr-&gt;h_dest[3] = 0x3C;
	eth_hdr-&gt;h_dest[4] = 0x5B;
	eth_hdr-&gt;h_dest[5] = 0x68;
</Insert>
<Copy StartSeek="24109" EndSeek="24409"/>
<Insert>		msleep(1);
</Insert>
<Copy StartSeek="24409" EndSeek="29993"/>
</Delta>
<Delta Version="198" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:06:18000">
<Copy StartSeek="0" EndSeek="24409"/>
<Insert>		n = mvNetaTxqSentDescNumGet(ETH_PORT, 0, ETH_TXQ);
</Insert>
<Copy StartSeek="24465" EndSeek="29996"/>
</Delta>
<Delta Version="199" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:06:27000">
<Copy StartSeek="0" EndSeek="24409"/>
<Insert>		n = mvNetaTxqSentDescNumGet(ETH_TX_PORt, 0, ETH_TXQ);
</Insert>
<Copy StartSeek="24465" EndSeek="29996"/>
</Delta>
<Delta Version="200" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:06:31000">
<Copy StartSeek="0" EndSeek="24465"/>
<Insert>		printk("\nMMP ETH: sent %d\n", n);
	}

</Insert>
<Copy StartSeek="24469" EndSeek="29959"/>
</Delta>
<Delta Version="201" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:06:36000">
<Copy StartSeek="0" EndSeek="27691"/>
<Insert>		eth_if_tx(ETH_TX_PORT, data, rx_bytes);
</Insert>
<Copy StartSeek="27755" EndSeek="29981"/>
</Delta>
<Delta Version="202" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:07:13000">
<Copy StartSeek="0" EndSeek="23832"/>
<Insert>	ethhdr *eth_hdr;
</Insert>
<Copy StartSeek="23857" EndSeek="29988"/>
</Delta>
<Delta Version="203" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:08:24000">
<Copy StartSeek="0" EndSeek="23910"/>
<Insert>	eth_hdr = (ethhdr *) pkt;
</Insert>
<Copy StartSeek="23944" EndSeek="29995"/>
</Delta>
<Delta Version="204" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:08:39000">
<Copy StartSeek="0" EndSeek="24362"/>
<Insert>		eth_hdr-&gt;data[i] = i;
</Insert>
<Copy StartSeek="24362" EndSeek="29971"/>
</Delta>
<Delta Version="205" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:08:55000">
<Copy StartSeek="0" EndSeek="24334"/>
<Insert>	for (i = 0; i &lt; 10; i++) {
		eth_if_tx(ETH_TX_PORT, pkt, 1000);
		n = mvNetaTxqSentDescNumGet(ETH_TX_PORT, 0, ETH_TXQ);
	}

</Insert>
<Copy StartSeek="24371" EndSeek="29883"/>
</Delta>
<Delta Version="206" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:09:22000">
<Copy StartSeek="0" EndSeek="23821"/>
<Insert>	int i, n;
</Insert>
<Copy StartSeek="23821" EndSeek="29872"/>
</Delta>
<Delta Version="207" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:09:46000">
<Copy StartSeek="0" EndSeek="23956"/>
<Insert>	eth_hdr-&gt;h_dest[0] = 00;
	eth_hdr-&gt;h_dest[1] = 10;
	eth_hdr-&gt;h_dest[2] = 94;
	eth_hdr-&gt;h_dest[3] = 00;
	eth_hdr-&gt;h_dest[4] = 00;
	eth_hdr-&gt;h_dest[5] = 04;

</Insert>
<Copy StartSeek="23956" EndSeek="24137"/>
<Copy StartSeek="24294" EndSeek="24323"/>
<Insert>	eth_if_tx(ETH_TX_PORT, pkt, 1000);
</Insert>
<Copy StartSeek="24358" EndSeek="29871"/>
</Delta>
<Delta Version="208" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:13:31000">
<Copy StartSeek="0" EndSeek="23956"/>
<Insert>	eth_hdr-&gt;h_source[0] = 0x00;
	eth_hdr-&gt;h_source[1] = 0x50;
	eth_hdr-&gt;h_source[2] = 0x43;
	eth_hdr-&gt;h_source[3] = 0x01;
	eth_hdr-&gt;h_source[4] = 0x0F;
	eth_hdr-&gt;h_source[5] = 0x0F;
</Insert>
<Copy StartSeek="24136" EndSeek="29871"/>
</Delta>
<Delta Version="209" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="13:13:49000">
<Copy StartSeek="0" EndSeek="23846"/>
<Insert>	void* pkt = NULL;
</Insert>
<Copy StartSeek="23865" EndSeek="29871"/>
</Delta>
<Delta Version="210" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:26:23000">
<Copy StartSeek="0" EndSeek="23846"/>
<Insert>	char* pkt = NULL;
</Insert>
<Copy StartSeek="23865" EndSeek="29871"/>
</Delta>
<Delta Version="211" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:26:30000">
<Copy StartSeek="0" EndSeek="23899"/>
<Insert>	eth_hdr = (struct ethhdr *) pkt;
</Insert>
<Copy StartSeek="23960" EndSeek="29898"/>
</Delta>
<Delta Version="212" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:27:4000">
<Copy StartSeek="0" EndSeek="23899"/>
<Insert>	eth_hdr = (struct ethhdr *) ((char *pkt) + MV_ETH_MH_SIZE);
</Insert>
<Copy StartSeek="23960" EndSeek="29898"/>
</Delta>
<Delta Version="213" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:27:32000">
<Copy StartSeek="0" EndSeek="26324"/>
<Copy StartSeek="26367" EndSeek="26403"/>
<Insert>
</Insert>
<Copy StartSeek="26403" EndSeek="29940"/>
</Delta>
<Delta Version="214" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:39:18000">
<Copy StartSeek="0" EndSeek="26367"/>
<Insert>		data = pkt-&gt;buf + MV_ETH_MH_SIZE;
</Insert>
<Copy StartSeek="26386" EndSeek="29923"/>
</Delta>
<Delta Version="215" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:40:0000">
<Copy StartSeek="0" EndSeek="27633"/>
<Insert>//      	eth_if_tx(ETH_TX_PORT, data, rx_bytes);
		__tx_test();
</Insert>
<Copy StartSeek="27697" EndSeek="29923"/>
</Delta>
<Delta Version="216" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:40:11000">
<Copy StartSeek="0" EndSeek="26517"/>
<Copy StartSeek="26580" EndSeek="29986"/>
</Delta>
<Delta Version="217" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:48:7000">
<Copy StartSeek="0" EndSeek="26478"/>
<Insert>//      	eth = (struct eth_hdr *)data;
</Insert>
<Copy StartSeek="26478" EndSeek="29947"/>
</Delta>
<Delta Version="218" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:48:12000">
<Copy StartSeek="0" EndSeek="26457"/>
<Insert>		/* dummy modify */
</Insert>
<Copy StartSeek="26485" EndSeek="26548"/>
<Insert>//
</Insert>
<Copy StartSeek="26548" EndSeek="26767"/>
<Insert>
</Insert>
<Copy StartSeek="26798" EndSeek="26799"/>
<Insert>		/* dummy modify end */

</Insert>
<Copy StartSeek="26799" EndSeek="29955"/>
</Delta>
<Delta Version="219" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:48:30000">
<Copy StartSeek="0" EndSeek="26799"/>
<Insert>#if 0
		/* -------------------- Transmit start -----------------------------*/
		/* Descriptor to use */
		tx_desc = mvNetaTxqNextDescGet(if_tx-&gt;txq_ctrl);
		if (!tx_desc) {
			printk(KERN_ERR "(%s:%d) no tx_desc!!\n", __func__, __LINE__);
			continue;
		}
		/* Calculate IPv4 checksum and L4 checksum */
		command = 0; 
		command |= NETA_TX_F_DESC_MASK | NETA_TX_L_DESC_MASK;

		tx_desc-&gt;command = command;
		tx_desc-&gt;hw_cmd = 0;
		tx_desc-&gt;dataSize = rx_bytes;
		tx_desc-&gt;bufPhysAddr = mvOsCacheFlush(NULL, data, rx_bytes);

		/* Flush cache to RAM */
		eth_if_tx_desc_flush(tx_desc);

		/* Enable transmit */
		mvNetaTxqPendDescAdd(tx_port, 0	/* txp */, 7 /* Txq */, 1 /* num of descriptors */);

		/* Decrement the sent descriptors */
		mvNetaTxqSentDescProc(tx_port, 0 /* txp */, 7);
		/* -------------------- Transmit end -----------------------------*/
#else
</Insert>
<Copy StartSeek="26799" EndSeek="26863"/>
<Insert>#endif		
</Insert>
<Copy StartSeek="26864" EndSeek="29081"/>
</Delta>
<Delta Version="220" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:49:31000">
<Copy StartSeek="0" EndSeek="27722"/>
<Insert>//void eth_tx_fwd(int port, void* pkt, int size)
//{
//        int n;
//        struct ethhdr *eth_hdr;
//        struct iphdr *iph;
//
//        if (((struct ethhdr *)pkt)-&gt;h_proto != htons(ETH_P_IP)) {
//                return;
//        }
//
//        eth_hdr = (struct ethhdr *) pkt;
//
//        memcpy(eth_hdr-&gt;h_dest, eth_hdr-&gt;h_source, ETH_ALEN);
//        eth_hdr-&gt;h_source[0] = 0x00;
//        eth_hdr-&gt;h_source[1] = 0x50;
//        eth_hdr-&gt;h_source[2] = 0x43;
//        eth_hdr-&gt;h_source[3] = 0x12;
//        eth_hdr-&gt;h_source[4] = 0x01;
//        eth_hdr-&gt;h_source[5] = 0x81;
//
//        iph = (struct iphdr *)((char *)pkt + sizeof(struct ethhdr));
//        pr_debug("%pI4 -&gt; %pI4 [%#x][ip.proto %u]\n", &amp;iph-&gt;saddr, &amp;iph-&gt;daddr, iph-&gt;daddr ,iph-&gt;protocol);
//        ((char *)(&amp;iph-&gt;daddr))[2] = 0; /* toggle the net address */
//
//        eth_if_tx(ETH_PORT, pkt, size);
//        n = mvNetaTxqSentDescNumGet(ETH_PORT, 0, ETH_TXQ);
//        printk("\nMMP ETH: sent %d\n", n);
//}
//
</Insert>
<Copy StartSeek="27722" EndSeek="28079"/>
</Delta>
<Delta Version="221" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:53:0000">
<Copy StartSeek="0" EndSeek="4340"/>
<Copy StartSeek="4372" EndSeek="28111"/>
</Delta>
<Delta Version="222" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:54:48000">
<Copy StartSeek="0" EndSeek="4240"/>
<Copy StartSeek="4274" EndSeek="28145"/>
</Delta>
<Delta Version="223" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:55:31000">
<Copy StartSeek="0" EndSeek="4240"/>
<Insert>  #warning "descriptors Uncached"
</Insert>
<Copy StartSeek="4278" EndSeek="28149"/>
</Delta>
<Delta Version="224" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:55:53000">
<Copy StartSeek="0" EndSeek="4378"/>
<Insert>  #warning "descriptors cached"
</Insert>
<Copy StartSeek="4378" EndSeek="28117"/>
</Delta>
<Delta Version="225" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:55:58000">
<Copy StartSeek="0" EndSeek="4063"/>
<Copy StartSeek="4090" EndSeek="28144"/>
</Delta>
<Delta Version="226" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:56:14000">
<Copy StartSeek="0" EndSeek="24772"/>
<Insert>	struct ethhdr *eth;
</Insert>
<Copy StartSeek="24800" EndSeek="28151"/>
</Delta>
<Delta Version="227" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:56:35000">
<Copy StartSeek="0" EndSeek="24731"/>
<Insert>	uint32_t            rx_status, command;
</Insert>
<Copy StartSeek="24763" EndSeek="28142"/>
</Delta>
<Delta Version="228" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:56:47000">
<Copy StartSeek="0" EndSeek="24652"/>
<Insert>	NETA_TX_DESC *tx_desc;
</Insert>
<Copy StartSeek="24683" EndSeek="28149"/>
</Delta>
<Delta Version="229" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:56:55000">
<Copy StartSeek="0" EndSeek="24652"/>
<Insert>//      NETA_TX_DESC *tx_desc;
</Insert>
<Copy StartSeek="24652" EndSeek="28118"/>
</Delta>
<Delta Version="230" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:58:0000">
<Copy StartSeek="0" EndSeek="24467"/>
<Copy StartSeek="24530" EndSeek="28181"/>
</Delta>
<Delta Version="231" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:58:58000">
<Copy StartSeek="0" EndSeek="24526"/>
<Insert>
}

</Insert>
<Copy StartSeek="24748" EndSeek="26868"/>
<Insert>//      	memset(eth-&gt;h_source,0x66,6);
//      	eth-&gt;h_dest[0] = 00;
//      	eth-&gt;h_dest[1] = 10;
//      	eth-&gt;h_dest[2] = 94;
//      	eth-&gt;h_dest[3] = 00;
//      	eth-&gt;h_dest[4] = 00;
//      	eth-&gt;h_dest[5] = 04;
</Insert>
<Copy StartSeek="26901" EndSeek="28213"/>
</Delta>
<Delta Version="232" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="14:59:49000">
<Copy StartSeek="0" EndSeek="4063"/>
<Insert>#define ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="4063" EndSeek="28186"/>
</Delta>
<Delta Version="233" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:01:22000">
<Copy StartSeek="0" EndSeek="1094"/>
<Insert>
</Insert>
<Copy StartSeek="1122" EndSeek="28213"/>
</Delta>
<Delta Version="234" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:01:30000">
<Copy StartSeek="0" EndSeek="4267"/>
<Insert>  #warning "UNCACHED descriptors !!!"
</Insert>
<Copy StartSeek="4267" EndSeek="28175"/>
</Delta>
<Delta Version="235" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:07:14000">
<Copy StartSeek="0" EndSeek="4776"/>
<Copy StartSeek="4859" EndSeek="28258"/>
</Delta>
<Delta Version="236" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:38:17000">
<Copy StartSeek="0" EndSeek="4916"/>
<Copy StartSeek="4987" EndSeek="28329"/>
</Delta>
<Delta Version="237" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:39:5000">
<Copy StartSeek="0" EndSeek="5055"/>
<Copy StartSeek="5127" EndSeek="28401"/>
</Delta>
<Delta Version="238" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:39:49000">
<Copy StartSeek="0" EndSeek="4776"/>
<Insert>  printk(KERN_ERR "(%s:%d) HAIM: about to access %p\n", __func__, __LINE__,pDesc);
</Insert>
<Copy StartSeek="4776" EndSeek="4833"/>
<Insert>  printk(KERN_ERR "(%s:%d) HAIM: flushing mm \n", __func__, __LINE__);
</Insert>
<Copy StartSeek="4833" EndSeek="4901"/>
<Insert>  printk(KERN_ERR "(%s:%d) HAIM: done flushing\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="4901" EndSeek="28175"/>
</Delta>
<Delta Version="239" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:41:45000">
<Copy StartSeek="0" EndSeek="4833"/>
<Copy StartSeek="4860" EndSeek="4928"/>
<Copy StartSeek="4935" EndSeek="28209"/>
</Delta>
<Delta Version="240" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:42:7000">
<Copy StartSeek="0" EndSeek="5273"/>
<Insert>
</Insert>
<Copy StartSeek="5300" EndSeek="5337"/>
<Insert>}

</Insert>
<Copy StartSeek="5347" EndSeek="28242"/>
</Delta>
<Delta Version="241" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:42:27000">
<Copy StartSeek="0" EndSeek="5273"/>
<Insert>#ifndev ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="5300" EndSeek="28242"/>
</Delta>
<Delta Version="242" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:42:31000">
<Copy StartSeek="0" EndSeek="835"/>
<Insert>#define ETH_IF_ERROR(format, args...) printk(format, ##args)
</Insert>
<Copy StartSeek="899" EndSeek="6621"/>
<Insert>       if (!IS_ALIGNED((unsigned long)pkt-&gt;buf,4)) {
	       printk(KERN_ERR "(%s:%d) HAIM: unaligned buf %p \n", __func__, __LINE__,pkt-&gt;buf);
       }
</Insert>
<Copy StartSeek="6621" EndSeek="15174"/>
<Insert>   eth_if_t *eth_if; 
</Insert>
<Copy StartSeek="15195" EndSeek="21125"/>
<Insert>int eth_if_rx(int port, int rx_todo) {
</Insert>
<Copy StartSeek="21166" EndSeek="28093"/>
</Delta>
<Delta Version="243" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:47:10000">
<Copy StartSeek="0" EndSeek="1097"/>
<Insert>#define ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="1126" EndSeek="28095"/>
</Delta>
<Delta Version="244" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:47:22000">
<Copy StartSeek="0" EndSeek="1097"/>
<Insert>//#define ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="1124" EndSeek="28093"/>
</Delta>
<Delta Version="245" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="15:56:12000">
<Copy StartSeek="0" EndSeek="1097"/>
<Insert>#define ETH_DESCR_UNCACHED

</Insert>
<Copy StartSeek="1097" EndSeek="28065"/>
</Delta>
<Delta Version="246" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:05:5000">
<Copy StartSeek="0" EndSeek="26827"/>
<Insert>//      	__tx_test();

</Insert>
<Copy StartSeek="26827" EndSeek="28042"/>
</Delta>
<Delta Version="247" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:07:6000">
<Copy StartSeek="0" EndSeek="26178"/>
<Insert>		if (((rx_status &amp; NETA_RX_FL_DESC_MASK) != NETA_RX_FL_DESC_MASK) ||
</Insert>
<Copy StartSeek="26252" EndSeek="28046"/>
</Delta>
<Delta Version="248" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:08:17000">
<Copy StartSeek="0" EndSeek="26178"/>
<Insert>		if (((rx_status &amp; NETA_RX_FL_DESC_MASK) != NETddddA_RX_FL_DESC_MASK) ||
</Insert>
<Copy StartSeek="26248" EndSeek="28042"/>
</Delta>
<Delta Version="249" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:25:45000">
<Copy StartSeek="0" EndSeek="24600"/>
<Copy StartSeek="24961" EndSeek="28403"/>
</Delta>
<Delta Version="250" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:34:53000">
<Copy StartSeek="0" EndSeek="27207"/>
<Insert>		mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
</Insert>
<Copy StartSeek="27267" EndSeek="28405"/>
</Delta>
<Delta Version="251" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:35:10000">
<Copy StartSeek="0" EndSeek="1097"/>
<Copy StartSeek="1126" EndSeek="28434"/>
</Delta>
<Delta Version="252" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:44:14000">
<Copy StartSeek="0" EndSeek="1097"/>
<Insert>//#define ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="1124" EndSeek="26057"/>
<Copy StartSeek="26074" EndSeek="28449"/>
</Delta>
<Delta Version="253" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:57:56000">
<Copy StartSeek="0" EndSeek="26057"/>
<Insert>#ifndef ETH_DESC
</Insert>
<Copy StartSeek="26084" EndSeek="26119"/>
<Copy StartSeek="26126" EndSeek="28466"/>
</Delta>
<Delta Version="254" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="16:58:9000">
<Copy StartSeek="0" EndSeek="25672"/>
<Insert>
//ETH_IF_DBG("&lt;&lt;&lt;&lt;============= mmp_eth_rx: %d pkts RX pending", rx_done);
//mvOsCacheIoSync();

</Insert>
<Copy StartSeek="25672" EndSeek="28368"/>
</Delta>
<Delta Version="255" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:16:15000">
<Copy StartSeek="0" EndSeek="1097"/>
<Insert>#define ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="1126" EndSeek="28370"/>
</Delta>
<Delta Version="256" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:19:8000">
<Copy StartSeek="0" EndSeek="26253"/>
<Copy StartSeek="26320" EndSeek="28437"/>
</Delta>
<Delta Version="257" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:45:20000">
<Copy StartSeek="0" EndSeek="26320"/>
<Insert>		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, rx_desc-&gt;dataSize);
</Insert>
<Copy StartSeek="26365" EndSeek="28422"/>
</Delta>
<Delta Version="258" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:45:49000">
<Copy StartSeek="0" EndSeek="26320"/>
<Insert>		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, 34);
</Insert>
<Copy StartSeek="26365" EndSeek="28422"/>
</Delta>
<Delta Version="259" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:47:32000">
<Copy StartSeek="0" EndSeek="26320"/>
<Insert>		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, 36);
</Insert>
<Copy StartSeek="26365" EndSeek="28422"/>
</Delta>
<Delta Version="260" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:47:43000">
<Copy StartSeek="0" EndSeek="26320"/>
<Insert>		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, 34);
</Insert>
<Copy StartSeek="26400" EndSeek="28457"/>
</Delta>
<Delta Version="261" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:49:13000">
<Copy StartSeek="0" EndSeek="26253"/>
<Insert>//      	mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, rx_desc-&gt;dataSize);
		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, 34); /* invalidate only ETH_HDR + IP */
</Insert>
<Copy StartSeek="26400" EndSeek="28457"/>
</Delta>
<Delta Version="262" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:53:57000">
<Copy StartSeek="0" EndSeek="26253"/>
<Copy StartSeek="26254" EndSeek="28458"/>
</Delta>
<Delta Version="263" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:53:59000">
<Copy StartSeek="0" EndSeek="26253"/>
<Insert>
</Insert>
<Copy StartSeek="26253" EndSeek="28457"/>
</Delta>
<Delta Version="264" Comment="" NL="\10" Encoding="text" Date="2012/03/18" Time="17:54:1000">
<Copy StartSeek="0" EndSeek="26155"/>
<Insert>
</Insert>
<Copy StartSeek="26182" EndSeek="26339"/>
<Copy StartSeek="26413" EndSeek="28557"/>
</Delta>
<Delta Version="265" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="11:58:47000">
<Copy StartSeek="0" EndSeek="26345"/>
<Insert>		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, RX_DESC_FLUSH_SIZe);
</Insert>
<Copy StartSeek="26406" EndSeek="28557"/>
</Delta>
<Delta Version="266" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="11:58:48000">
<Copy StartSeek="0" EndSeek="26155"/>
<Insert>#ifndef RX_DESC_FLUSH_SIZe
</Insert>
<Copy StartSeek="26179" EndSeek="28554"/>
</Delta>
<Delta Version="267" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="11:59:1000">
<Copy StartSeek="0" EndSeek="26342"/>
<Insert>		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, RX_DESC_FLUSH_SIZE);
</Insert>
<Copy StartSeek="26400" EndSeek="28551"/>
</Delta>
<Delta Version="268" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="11:59:4000">
<Copy StartSeek="0" EndSeek="26155"/>
<Insert>#ifndef DATA_FLUSH_SIZE
</Insert>
<Copy StartSeek="26183" EndSeek="26346"/>
<Insert>		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, DATA_FLUSH_SIZE);
</Insert>
<Copy StartSeek="26408" EndSeek="28559"/>
</Delta>
<Delta Version="269" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="11:59:30000">
<Copy StartSeek="0" EndSeek="20448"/>
<Copy StartSeek="20476" EndSeek="20535"/>
<Copy StartSeek="20622" EndSeek="28674"/>
</Delta>
<Delta Version="270" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="12:00:37000">
<Copy StartSeek="0" EndSeek="26138"/>
<Insert>#endif
</Insert>
<Copy StartSeek="26138" EndSeek="26159"/>
<Insert>
</Insert>
<Copy StartSeek="26167" EndSeek="28674"/>
</Delta>
<Delta Version="271" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="12:01:49000">
<Copy StartSeek="0" EndSeek="1126"/>
<Copy StartSeek="1157" EndSeek="28705"/>
</Delta>
<Delta Version="272" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="12:02:48000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>#define PKT_INVALIDATE_SIZE 34
</Insert>
<Copy StartSeek="1159" EndSeek="28707"/>
</Delta>
<Delta Version="273" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="15:34:51000">
<Copy StartSeek="0" EndSeek="25535"/>
<Insert>	if_tx = &amp;eth_if_list[tx_port];
</Insert>
<Copy StartSeek="25574" EndSeek="28714"/>
</Delta>
<Delta Version="274" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="16:08:24000">
<Copy StartSeek="0" EndSeek="25222"/>
<Insert>	eth_if_t *eth_if_rx, *if_tx;
</Insert>
<Copy StartSeek="25258" EndSeek="28720"/>
</Delta>
<Delta Version="275" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="16:08:34000">
<Copy StartSeek="0" EndSeek="25222"/>
<Insert>	eth_if_t *eth_if_rx, /* *if_tx */;
</Insert>
<Copy StartSeek="25258" EndSeek="28720"/>
</Delta>
<Delta Version="276" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="16:08:50000">
<Copy StartSeek="0" EndSeek="25222"/>
<Insert>	eth_if_t *eth_if_rx /*, *if_tx */;
</Insert>
<Copy StartSeek="25244" EndSeek="25527"/>
<Insert>//      if_tx = &amp;eth_if_list[tx_port];

</Insert>
<Copy StartSeek="25528" EndSeek="28667"/>
</Delta>
<Delta Version="277" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="16:10:45000">
<Copy StartSeek="0" EndSeek="26523"/>
<Insert>//      	mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, 34); /* invalidate only ETH_HDR + IP */
</Insert>
<Copy StartSeek="26523" EndSeek="26602"/>
<Insert>
</Insert>
<Copy StartSeek="26602" EndSeek="28579"/>
</Delta>
<Delta Version="278" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="16:11:0000">
<Copy StartSeek="0" EndSeek="26069"/>
<Insert>#ifndef ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="26070" EndSeek="26126"/>
<Insert>#endif

</Insert>
<Copy StartSeek="26127" EndSeek="28546"/>
</Delta>
<Delta Version="279" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="16:14:7000">
<Copy StartSeek="0" EndSeek="26230"/>
<Insert>#ifndef PKT_INVALIDATE_SIZE
</Insert>
<Copy StartSeek="26231" EndSeek="26388"/>
<Insert>#else
		mvOsCacheMultiLineInv(NULL, pkt-&gt;buf, PKT_INVALIDATE_SIZE);
#endif
</Insert>
<Copy StartSeek="26388" EndSeek="28444"/>
</Delta>
<Delta Version="280" Comment="" NL="\10" Encoding="text" Date="2012/03/19" Time="16:14:19000">
<Copy StartSeek="0" EndSeek="1097"/>
<Copy StartSeek="1098" EndSeek="1225"/>
<Insert>#define ETH_IF_MAX 4
</Insert>
<Copy StartSeek="1246" EndSeek="15231"/>
<Insert>   if (cfg-&gt;port &gt; ETH_IF_MAX /* TODO add const */) {
       ETH_IF_ERROR("Network interface config: Port out of range (%d).", cfg-&gt;port);
</Insert>
<Copy StartSeek="15388" EndSeek="28463"/>
</Delta>
<Delta Version="281" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="10:46:18000">
<Copy StartSeek="0" EndSeek="22010"/>
<Insert>//ETH_IF_DBG("&lt;&lt;&lt;&lt;============= mmp_eth_rx: %d pkts RX pending", rx_done);
</Insert>
<Copy StartSeek="22085" EndSeek="24574"/>
<Insert>//      	memset(eth-&gt;h_source,0x66,6);
//      	eth-&gt;h_dest[0] = 00;
//      	eth-&gt;h_dest[1] = 10;
//      	eth-&gt;h_dest[2] = 94;
//      	eth-&gt;h_dest[3] = 00;
//      	eth-&gt;h_dest[4] = 00;
//      	eth-&gt;h_dest[5] = 04;
</Insert>
<Copy StartSeek="24779" EndSeek="28449"/>
</Delta>
<Delta Version="282" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="11:02:51000">
<Copy StartSeek="0" EndSeek="1098"/>
<Insert>//#define ETH_DESCR_UNCACHED
//#define PKT_INVALIDATE_SIZE 34
</Insert>
<Copy StartSeek="1098" EndSeek="5173"/>
<Copy StartSeek="5200" EndSeek="5276"/>
<Insert>#ifndef ETH_DESCR_UNCACHED
</Insert>
<Copy StartSeek="5276" EndSeek="5313"/>
<Insert>#endif
</Insert>
<Copy StartSeek="5345" EndSeek="15194"/>
<Insert>   if (cfg-&gt;port &gt;= ETH_IF_MAX /* TODO add const */) {
</Insert>
<Copy StartSeek="15228" EndSeek="17227"/>
<Insert>  printk(KERN_DEBUG "Eth port %d initialized.\n", eth_if-&gt;cfg.port);
</Insert>
<Copy StartSeek="17288" EndSeek="19744"/>
<Copy StartSeek="19745" EndSeek="20435"/>
<Insert>#ifndef PKT_INVALIDATE_SIZE
</Insert>
<Copy StartSeek="20435" EndSeek="20494"/>
<Insert>#else
  tx_desc-&gt;bufPhysAddr = mvOsCacheFlush(NULL, data, PKT_INVALIDATE_SIZE);
#endif
</Insert>
<Copy StartSeek="20494" EndSeek="28269"/>
</Delta>
<Delta Version="283" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="11:10:28000">
<Copy StartSeek="0" EndSeek="27911"/>
<Insert>
</Insert>
<Copy StartSeek="27911" EndSeek="28268"/>
</Delta>
<Delta Version="284" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="11:11:58000">
<Copy StartSeek="0" EndSeek="1883"/>
<Copy StartSeek="1961" EndSeek="2020"/>
<Insert>  MV_U8*   buf;
  MV_U16   buf_size;
</Insert>
<Copy StartSeek="2133" EndSeek="28422"/>
</Delta>
<Delta Version="285" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="11:32:47000">
<Copy StartSeek="0" EndSeek="2020"/>
<Insert>  MV_U8*   buf[2]; /* [0]: pointer to [0 .. HDR_DATA_SPLIT -1], [1]: the rest of data */
  MV_U16   buf_size[2];
</Insert>
<Copy StartSeek="2150" EndSeek="28439"/>
</Delta>
<Delta Version="286" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="11:33:36000">
<Copy StartSeek="0" EndSeek="2110"/>
<Insert>  MV_U16   buf_size; 	/* total size  */
</Insert>
<Copy StartSeek="2149" EndSeek="28438"/>
</Delta>
<Delta Version="287" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="11:34:2000">
<Copy StartSeek="0" EndSeek="1961"/>
<Copy StartSeek="1962" EndSeek="28439"/>
</Delta>
<Delta Version="288" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="14:58:42000">
<Copy StartSeek="0" EndSeek="2021"/>
<Insert>  MV_U8*   buf[2]; 	/* [0]: pointer to [0 .. HDR_DATA_SPLIT -1], [1]: the rest of data */
</Insert>
<Copy StartSeek="2141" EndSeek="28469"/>
</Delta>
<Delta Version="289" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="14:59:40000">
<Copy StartSeek="0" EndSeek="2021"/>
<Insert>  MV_U8*   buf[2]; 	/* [0]: pointer to [0 .. HDR_DATA_SPLIT -1] bytes in packet, 
</Insert>
<Copy StartSeek="2099" EndSeek="28465"/>
</Delta>
<Delta Version="290" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="14:59:58000">
<Copy StartSeek="0" EndSeek="2021"/>
<Insert>  MV_U8*   buf[2]; 	/* [0]: pointer to [0 .. HDR_DATA_SPLIT -1] packet data, 
			   [1]: the rest of packet data */
  MV_U16   buf_size; 	/* total size */
</Insert>
<Copy StartSeek="2200" EndSeek="28489"/>
</Delta>
<Delta Version="291" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:01:28000">
<Copy StartSeek="0" EndSeek="2138"/>
<Insert>  MV_U16   buf_size; 	/* complete packet size (hdr + data) */
</Insert>
<Copy StartSeek="2200" EndSeek="28489"/>
</Delta>
<Delta Version="292" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:25:24000">
<Copy StartSeek="0" EndSeek="2138"/>
<Copy StartSeek="2182" EndSeek="28533"/>
</Delta>
<Delta Version="293" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:26:29000">
<Copy StartSeek="0" EndSeek="2138"/>
<Insert>  MV_U32   data_size; 	/* packet_size -  */
</Insert>
<Copy StartSeek="2193" EndSeek="28544"/>
</Delta>
<Delta Version="294" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:27:1000">
<Copy StartSeek="0" EndSeek="5624"/>
<Copy StartSeek="5819" EndSeek="28739"/>
</Delta>
<Delta Version="295" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:30:42000">
<Copy StartSeek="0" EndSeek="5676"/>
<Insert>	if (pkt-&gt;buf) {
</Insert>
<Copy StartSeek="5696" EndSeek="28742"/>
</Delta>
<Delta Version="296" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:30:51000">
<Copy StartSeek="0" EndSeek="5816"/>
<Insert> }
</Insert>
<Copy StartSeek="5818" EndSeek="5819"/>
<Insert>}
</Insert>
<Copy StartSeek="5819" EndSeek="28739"/>
</Delta>
<Delta Version="297" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:30:59000">
<Copy StartSeek="0" EndSeek="5624"/>
<Insert>static void destroy_pkt(struct eth_if_pkt_t *pkt)
</Insert>
<Copy StartSeek="5681" EndSeek="28746"/>
</Delta>
<Delta Version="298" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:32:16000">
<Copy StartSeek="0" EndSeek="6001"/>
<Insert>          pkt = &amp;pool-&gt;pkt[i];
          if (pkt-&gt;buf) {
              mvOsFree(pkt-&gt;buf);
              pkt-&gt;buf = NULL;
          }
      }
    
</Insert>
<Copy StartSeek="6046" EndSeek="28644"/>
</Delta>
<Delta Version="299" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:32:54000">
<Copy StartSeek="0" EndSeek="6001"/>
<Copy StartSeek="6029" EndSeek="28672"/>
</Delta>
<Delta Version="300" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:33:33000">
<Copy StartSeek="0" EndSeek="6750"/>
<Insert>       pkt-&gt;buf = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="7011" EndSeek="28852"/>
</Delta>
<Delta Version="301" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:36:43000">
<Copy StartSeek="0" EndSeek="6910"/>
<Copy StartSeek="7085" EndSeek="29027"/>
</Delta>
<Delta Version="302" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:38:22000">
<Copy StartSeek="0" EndSeek="6944"/>
<Insert>	   ETH_IF_ERROR("Can't allocate packet buffer for pool, %d bytes.", buf_size);
</Insert>
<Copy StartSeek="7034" EndSeek="29037"/>
</Delta>
<Delta Version="303" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:38:41000">
<Copy StartSeek="0" EndSeek="7095"/>
<Insert>       pkt-&gt;buf[1] = mvOsMalloc(buf_size - HDR_DATA_SPLIT); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="7374" EndSeek="29215"/>
</Delta>
<Delta Version="304" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:39:15000">
<Copy StartSeek="0" EndSeek="7349"/>
<Insert>	   return -1;
</Insert>
<Copy StartSeek="7364" EndSeek="29215"/>
</Delta>
<Delta Version="305" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:40:5000">
<Copy StartSeek="0" EndSeek="7373"/>
<Insert>
       if (pkt-&gt;buf == NULL) {
           ETH_IF_ERROR("Can't allocate packet buffer for pool, %d bytes.", buf_size);
           eth_if_destroy_pkt_pool(pool);

           return -1;
       }
</Insert>
<Copy StartSeek="7373" EndSeek="29022"/>
</Delta>
<Delta Version="306" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:40:35000">
<Copy StartSeek="0" EndSeek="7373"/>
<Insert>       memset(pkt-&gt;buf,0,buf_size);
</Insert>
<Copy StartSeek="7412" EndSeek="29025"/>
</Delta>
<Delta Version="307" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:41:25000">
<Copy StartSeek="0" EndSeek="7373"/>
<Insert>       memset(pkt-&gt;buf[0],0,buf_size);
</Insert>
<Copy StartSeek="7474" EndSeek="7507"/>
<Copy StartSeek="7558" EndSeek="29138"/>
</Delta>
<Delta Version="308" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:42:10000">
<Copy StartSeek="0" EndSeek="1999"/>
<Insert>  MV_ULONG phys_addr;
</Insert>
<Copy StartSeek="2024" EndSeek="29141"/>
</Delta>
<Delta Version="309" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:43:30000">
<Copy StartSeek="0" EndSeek="1935"/>
<Insert>#define HDR_DATA_SPLIT 64
</Insert>
<Copy StartSeek="1967" EndSeek="2030"/>
<Insert>  MV_U8*   buf[2]; 	/* [0]: pointer to [0 .. HDR_DATA_SPLIT -1], 
			   [1]: [HDR_DATA_SPLIT ... end] packet bytes*/
  MV_U32   data_size; 	/* buf_size - HDR_DATA_SPLIT */
</Insert>
<Copy StartSeek="2220" EndSeek="6854"/>
<Insert>       pkt-&gt;buf[0] = mvOsMalloc(HDR_DATA_SPLIT); /* TODO DO we need it aligned? */
</Insert>
<Copy StartSeek="6943" EndSeek="6977"/>
<Insert>	   ETH_IF_ERROR("Can't allocate packet buffer [0] for pool, %d bytes.", HDR_DATA_SPLIT);
</Insert>
<Copy StartSeek="7073" EndSeek="7134"/>
<Insert>       pkt-&gt;buf[1] = mvOsMalloc(buf_size - HDR_DATA_SPLIT); /* TODO DO we need it aligned? */
</Insert>
<Copy StartSeek="7234" EndSeek="7268"/>
<Insert>	   ETH_IF_ERROR("Can't allocate packet buffer [0] for pool, %d bytes.", HDR_DATA_SPLIT);
</Insert>
<Copy StartSeek="7364" EndSeek="7424"/>
<Insert>       memset(pkt-&gt;buf[0],0,HDR_DATA_SPLIT);
       memset(pkt-&gt;buf[1],0,buf_size - HDR_DATA_SPLIT);
</Insert>
<Copy StartSeek="7537" EndSeek="7570"/>
<Insert>       pkt-&gt;data_size = buf_size - HDR_DATA_SPLIT;
</Insert>
<Copy StartSeek="7627" EndSeek="29207"/>
</Delta>
<Delta Version="310" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:44:8000">
<Copy StartSeek="0" EndSeek="2005"/>
<Insert>  MV_ULONG phys_addr[2];
</Insert>
<Copy StartSeek="2005" EndSeek="2134"/>
<Copy StartSeek="2159" EndSeek="29207"/>
</Delta>
<Delta Version="311" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:44:32000">
<Copy StartSeek="0" EndSeek="2134"/>
<Insert>  MV_ULONG phys_addr[2];
</Insert>
<Copy StartSeek="2189" EndSeek="29237"/>
</Delta>
<Delta Version="312" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:44:57000">
<Copy StartSeek="0" EndSeek="7657"/>
<Insert>       pkt-&gt;phys_addr = mvOsCacheInvalidate(NULL, pkt-&gt;buf, buf_size);
</Insert>
<Copy StartSeek="7731" EndSeek="29240"/>
</Delta>
<Delta Version="313" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:45:43000">
<Copy StartSeek="0" EndSeek="1968"/>
<Copy StartSeek="2005" EndSeek="29277"/>
</Delta>
<Delta Version="314" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:46:24000">
<Copy StartSeek="0" EndSeek="1986"/>
<Insert>#define PKT_DATA 0
</Insert>
<Copy StartSeek="2005" EndSeek="29277"/>
</Delta>
<Delta Version="315" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:46:26000">
<Copy StartSeek="0" EndSeek="6921"/>
<Insert>       pkt-&gt;buf[0] = mvOsMalloc(HDR_DATA_SPLIT_BYTES); /* TODO DO we need it aligned? */
</Insert>
<Copy StartSeek="7016" EndSeek="29283"/>
</Delta>
<Delta Version="316" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:46:54000">
<Copy StartSeek="0" EndSeek="7016"/>
<Insert>       if (pkt-&gt;buf[0] == NULL) {
</Insert>
<Copy StartSeek="7056" EndSeek="29289"/>
</Delta>
<Delta Version="317" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:47:1000">
<Copy StartSeek="0" EndSeek="7213"/>
<Insert>       pkt-&gt;buf[1] = mvOsMalloc(buf_size - HDR_DATA_SPLIT_BYTES); /* TODO DO we need it aligned? */
       if (pkt-&gt;buf[1] == NULL) {
</Insert>
<Copy StartSeek="7361" EndSeek="29303"/>
</Delta>
<Delta Version="318" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:47:13000">
<Copy StartSeek="0" EndSeek="7517"/>
<Insert>       memset(pkt-&gt;buf[0],0,HDR_DATA_SPLIT_BYTES);
       memset(pkt-&gt;buf[1],0,buf_size - HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="7643" EndSeek="7733"/>
<Insert>       pkt-&gt;phys_addr[0] = mvOsCacheInvalidate(NULL, pkt-&gt;buf, buf_size);
</Insert>
<Copy StartSeek="7814" EndSeek="29323"/>
</Delta>
<Delta Version="319" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:47:54000">
<Copy StartSeek="0" EndSeek="7733"/>
<Insert>       pkt-&gt;phys_addr[PKT_DATA] = mvOsCacheInvalidate(NULL, pkt-&gt;buf, buf_size);
  }

</Insert>
<Copy StartSeek="7920" EndSeek="29424"/>
</Delta>
<Delta Version="320" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:48:49000">
<Copy StartSeek="0" EndSeek="1968"/>
<Insert>#define PKT_HDR 0
#define PKT_DATA 1
</Insert>
<Copy StartSeek="2015" EndSeek="6931"/>
<Insert>       pkt-&gt;buf[PKT_HDR] = mvOsMalloc(HDR_DATA_SPLIT_BYTES); /* TODO DO we need it aligned? */
       if (pkt-&gt;buf[PKT_HDR] == NULL) {
</Insert>
<Copy StartSeek="7076" EndSeek="7233"/>
<Insert>       pkt-&gt;buf[PKT_DATA] = mvOsMalloc(buf_size - HDR_DATA_SPLIT_BYTES); /* TODO DO we need it aligned? */
       if (pkt-&gt;buf[PKT_DATA] == NULL) {
</Insert>
<Copy StartSeek="7391" EndSeek="7547"/>
<Insert>       memset(pkt-&gt;buf[PKT_HDR],0,HDR_DATA_SPLIT_BYTES);
       memset(pkt-&gt;buf[PKT_DATA],0,buf_size - HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="7683" EndSeek="7773"/>
<Insert>       pkt-&gt;phys_addr[PKT_HDR] = mvOsCacheInvalidate(NULL, &amp;pkt-&gt;buf[PKT_HDR], buf_size);
       pkt-&gt;phys_addr[PKT_DATA] = mvOsCacheInvalidate(NULL, &amp;pkt-&gt;buf[PKT_DATA], buf_size);
</Insert>
<Copy StartSeek="7975" EndSeek="29484"/>
</Delta>
<Delta Version="321" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:49:53000">
<Copy StartSeek="0" EndSeek="5787"/>
<Insert>	if (pkt-&gt;buf[0]) {
</Insert>
<Copy StartSeek="5818" EndSeek="5891"/>
<Insert>		mvOsFree(pkt-&gt;buf[1]);
</Insert>
<Copy StartSeek="5928" EndSeek="29507"/>
</Delta>
<Delta Version="322" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:50:11000">
<Copy StartSeek="0" EndSeek="6877"/>
<Insert>//     pkt-&gt;buf[0] = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */
</Insert>
<Copy StartSeek="6951" EndSeek="29504"/>
</Delta>
<Delta Version="323" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:50:33000">
<Copy StartSeek="0" EndSeek="6281"/>
<Copy StartSeek="6383" EndSeek="29606"/>
</Delta>
<Delta Version="324" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:51:55000">
<Copy StartSeek="0" EndSeek="6346"/>
<Insert>static int eth_if_create_pkt()
</Insert>
<Copy StartSeek="6394" EndSeek="29623"/>
</Delta>
<Delta Version="325" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:52:11000">
<Copy StartSeek="0" EndSeek="6346"/>
<Insert>static int eth_if_create_pkt(eth_if_pkt_t *pkt)
</Insert>
<Copy StartSeek="6404" EndSeek="29633"/>
</Delta>
<Delta Version="326" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:52:17000">
<Copy StartSeek="0" EndSeek="6281"/>
<Insert>/* Create and initialiaze a single packet with hdr data split */
static int eth_if_create_pkt(eth_if_pkt_t *pkt, int part)
{

}

</Insert>
<Copy StartSeek="6281" EndSeek="29504"/>
</Delta>
<Delta Version="327" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="15:57:28000">
<Copy StartSeek="0" EndSeek="6877"/>
<Insert>//     pkt-&gt;buf = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */
       pkt-&gt;buf[PKT_HDR_PART] = mvOsMalloc(HDR_DATA_SPLIT_BYTES); /* TODO DO we need it aligned? */
       if (pkt-&gt;buf[PKT_HDR_PART] == NULL) {
	   ETH_IF_ERROR("Can't allocate packet buffer [0] for pool, %d bytes.", HDR_DATA_SPLIT_BYTES);
	   eth_if_destroy_pkt_pool(pool);

	   return -1;
       }

       pkt-&gt;buf[PKT_DATA_PART] = mvOsMalloc(buf_size - HDR_DATA_SPLIT_BYTES); /* TODO DO we need it aligned? */
       if (pkt-&gt;buf[PKT_DATA_PART] == NULL) {
	   ETH_IF_ERROR("Can't allocate packet buffer [0] for pool, %d bytes.", HDR_DATA_SPLIT_BYTES);
	   eth_if_destroy_pkt_pool(pool);

	   return -2;
       }
       memset(pkt-&gt;buf[PKT_HDR_PART],0,HDR_DATA_SPLIT_BYTES);
       memset(pkt-&gt;buf[PKT_DATA_PART],0,buf_size - HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="7186" EndSeek="7219"/>
<Insert>       pkt-&gt;data_size = buf_size - HDR_DATA_SPLIT_BYTES;
       pkt-&gt;phys_addr[PKT_HDR_PART] = mvOsCacheInvalidate(NULL, &amp;pkt-&gt;buf[PKT_HDR_PART], buf_size);
       pkt-&gt;phys_addr[PKT_DATA_PART] = mvOsCacheInvalidate(NULL, &amp;pkt-&gt;buf[PKT_DATA_PART], buf_size);
  }

</Insert>
<Copy StartSeek="7295" EndSeek="28799"/>
</Delta>
<Delta Version="328" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:00:20000">
<Copy StartSeek="0" EndSeek="2786"/>
<Insert>  eth_if_pkt_pool_t rx_pkt_pool; /* Rx buffers */
</Insert>
<Copy StartSeek="2839" EndSeek="28802"/>
</Delta>
<Delta Version="329" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:09:40000">
<Copy StartSeek="0" EndSeek="17086"/>
<Insert>  if (eth_if_create_pkt_pool(&amp;eth_if-&gt;rx_pkt_pool, ETH_IF_RX_DESC_NUM, 
</Insert>
<Copy StartSeek="17172" EndSeek="17289"/>
<Copy StartSeek="17472" EndSeek="17473"/>
<Copy StartSeek="17474" EndSeek="29000"/>
</Delta>
<Delta Version="330" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:11:18000">
<Copy StartSeek="0" EndSeek="17172"/>
<Insert>                             ETH_IF_RX_BUF_SIZE(ETH_IF_RX_PKT_SIZE(ETH_IF_MTU)))) {
</Insert>
<Copy StartSeek="17238" EndSeek="28982"/>
</Delta>
<Delta Version="331" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:17:21000">
<Copy StartSeek="0" EndSeek="17172"/>
<Insert>                             MV_ALIGN_UP(HDR_DATA_SPLIT_BYTES)) {
</Insert>
<Copy StartSeek="17261" EndSeek="29005"/>
</Delta>
<Delta Version="332" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:19:32000">
<Copy StartSeek="0" EndSeek="17054"/>
<Insert>  /* Create Rx packet pool */  
</Insert>
<Copy StartSeek="17094" EndSeek="29013"/>
</Delta>
<Delta Version="333" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:19:51000">
<Copy StartSeek="0" EndSeek="17302"/>
<Copy StartSeek="17341" EndSeek="29052"/>
</Delta>
<Delta Version="334" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:19:58000">
<Copy StartSeek="0" EndSeek="17341"/>
<Insert>  if (eth_if_create_pkt_pool(&amp;eth_if-&gt;rx_pkt_pool[PKT_DATA_PART], ETH_IF_RX_DESC_NUM, 
			     ETH_IF_RX_BUF_SIZE(ETH_IF_RX_PKT_SIZE(ETH_IF_MTU)))) {
</Insert>
<Copy StartSeek="17493" EndSeek="29054"/>
</Delta>
<Delta Version="335" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:21:14000">
<Copy StartSeek="0" EndSeek="17341"/>
<Insert>  if (eth_if_create_pkt_pool(&amp;eth_if-&gt;rx_pkt_pool[PKT_HDR_PART], ETH_IF_RX_DESC_NUM, 
</Insert>
<Copy StartSeek="17428" EndSeek="29055"/>
</Delta>
<Delta Version="336" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:21:27000">
<Copy StartSeek="0" EndSeek="17528"/>
<Insert>
</Insert>
<Copy StartSeek="17662" EndSeek="29188"/>
</Delta>
<Delta Version="337" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:26:12000">
<Copy StartSeek="0" EndSeek="17302"/>
<Copy StartSeek="17434" EndSeek="17659"/>
<Insert>
</Insert>
<Copy StartSeek="17659" EndSeek="17793"/>
<Copy StartSeek="17796" EndSeek="29322"/>
</Delta>
<Delta Version="338" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:26:37000">
<Copy StartSeek="0" EndSeek="17302"/>
<Insert>  printk(KERN_ERR "(%s:%d) HAIM: &amp;eth_if-&gt;rx_pkt_pool[PKT_HDR_PART] %p\n", __func__, __LINE__, &amp;eth_if-&gt;rx_pkt_pool[PKT_HDR_PART]);
</Insert>
<Copy StartSeek="17437" EndSeek="17662"/>
<Insert>  printk(KERN_ERR "(%s:%d) HAIM: &amp;eth_if-&gt;rx_pkt_pool[PKT_DATA_PART] %p\n", __func__, __LINE__, &amp;eth_if-&gt;rx_pkt_pool[PKT_DATA_PART]);
  
</Insert>
<Copy StartSeek="17802" EndSeek="29328"/>
</Delta>
<Delta Version="339" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:26:48000">
<Copy StartSeek="0" EndSeek="6284"/>
<Copy StartSeek="7293" EndSeek="30337"/>
</Delta>
<Delta Version="340" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:33:8000">
<Copy StartSeek="0" EndSeek="6284"/>
<Copy StartSeek="6325" EndSeek="30378"/>
</Delta>
<Delta Version="341" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:33:55000">
<Copy StartSeek="0" EndSeek="6325"/>
<Insert>static int eth_if_create_pkt_pool_cont(eth_if_pkt_pool_t* pool, int pool_size, int buf_size) {
</Insert>
<Copy StartSeek="6420" EndSeek="30378"/>
</Delta>
<Delta Version="342" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:33:59000">
<Copy StartSeek="0" EndSeek="6420"/>
<Insert>  eth_if_pkt_t *pkt;
  int i;
  
  if (pool == NULL) {
      return -1;
  }
    
  pool-&gt;size = 0;
  
  pool-&gt;pkt = (eth_if_pkt_t *) mvOsMalloc(pool_size * sizeof(eth_if_pkt_t));
  if (pool-&gt;pkt == NULL) {
      ETH_IF_ERROR("Can't alloc Rx pool, %d bytes", pool_size * sizeof(eth_if_pkt_t));
</Insert>
<Copy StartSeek="6690" EndSeek="6691"/>
<Insert>      return -1;
  }
  pool-&gt;size = pool_size;
  memset(pool-&gt;pkt, 0, sizeof(pool_size * sizeof(eth_if_pkt_t)));
  
  for (i = 0; i &lt; pool_size; i++) {
       pkt = &amp;pool-&gt;pkt[i];       
       pkt-&gt;buf = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */       
       if (pkt-&gt;buf == NULL) {
           ETH_IF_ERROR("Can't allocate packet buffer for pool, %d bytes.", buf_size);
           eth_if_destroy_pkt_pool(pool);

           return -1;
       }
       memset(pkt-&gt;buf,0,buf_size);
       pkt-&gt;buf_size = buf_size;
       pkt-&gt;phys_addr = mvOsCacheInvalidate(NULL, pkt-&gt;buf, buf_size);
  }

  return 0;
}

</Insert>
<Copy StartSeek="7321" EndSeek="30365"/>
</Delta>
<Delta Version="343" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:35:18000">
<Copy StartSeek="0" EndSeek="6797"/>
<Insert>	pool-&gt;pkt-&gt;buf = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="6890" EndSeek="30377"/>
</Delta>
<Delta Version="344" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="16:36:18000">
<Copy StartSeek="0" EndSeek="6325"/>
<Insert>static int eth_if_create_pkt_pool_cont(eth_if_pkt_pool_t* pool, int pool_size, int buf_size)
</Insert>
<Copy StartSeek="6417" EndSeek="30376"/>
</Delta>
<Delta Version="345" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:34:17000">
<Copy StartSeek="0" EndSeek="6706"/>
<Copy StartSeek="6732" EndSeek="6822"/>
<Copy StartSeek="6857" EndSeek="30437"/>
</Delta>
<Delta Version="346" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:35:21000">
<Copy StartSeek="0" EndSeek="6439"/>
<Copy StartSeek="6454" EndSeek="6872"/>
<Insert>	pool-&gt;pkt-&gt;buf = mvOsMalloc(pool_size * buf_size); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="6957" EndSeek="30444"/>
</Delta>
<Delta Version="347" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:36:28000">
<Copy StartSeek="0" EndSeek="6519"/>
<Copy StartSeek="6544" EndSeek="6746"/>
<Insert>
	/* allocate the ring */
</Insert>
<Copy StartSeek="6746" EndSeek="30443"/>
</Delta>
<Delta Version="348" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:37:6000">
<Copy StartSeek="0" EndSeek="7022"/>
<Insert>		pkt-&gt;buf = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="7057" EndSeek="30402"/>
</Delta>
<Delta Version="349" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:40:11000">
<Copy StartSeek="0" EndSeek="6871"/>
<Insert>	hdr_mm = mvOsMalloc(pool_size * buf_size); /* TODO DO we need it aligned? */       

</Insert>
<Copy StartSeek="7102" EndSeek="30547"/>
</Delta>
<Delta Version="350" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:40:41000">
<Copy StartSeek="0" EndSeek="6972"/>
<Insert>		ETH_IF_ERROR("Can't allocate packet buffer for pool, %d bytes.", buf_size);
</Insert>
<Copy StartSeek="7062" EndSeek="30559"/>
</Delta>
<Delta Version="351" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:41:45000">
<Copy StartSeek="0" EndSeek="6972"/>
<Insert>		ETH_IF_ERROR("Can't allocate packet buffer for pool, %d bytes.", pool_size * buf_size);
</Insert>
<Copy StartSeek="7053" EndSeek="30550"/>
</Delta>
<Delta Version="352" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:42:7000">
<Copy StartSeek="0" EndSeek="7104"/>
<Insert>
</Insert>
<Copy StartSeek="7144" EndSeek="30589"/>
</Delta>
<Delta Version="353" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:42:24000">
<Copy StartSeek="0" EndSeek="7144"/>
<Insert>	for (i = 0; i &lt; pool_size; i++) {
</Insert>
<Copy StartSeek="7211" EndSeek="30621"/>
</Delta>
<Delta Version="354" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:42:57000">
<Copy StartSeek="0" EndSeek="6439"/>
<Insert>	void *hdr_mm;
</Insert>
<Copy StartSeek="6454" EndSeek="6871"/>
<Insert>	hdr_mm = mvOsMalloc(pool_size * buf_size); /* TODO DO we need it aligned? */
</Insert>
<Copy StartSeek="6957" EndSeek="30629"/>
</Delta>
<Delta Version="355" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:43:26000">
<Copy StartSeek="0" EndSeek="7284"/>
<Insert>		if (pkt-&gt;buf == NULL) {
			ETH_IF_ERROR("Can't allocate packet buffer for pool, %d bytes.", buf_size);
			eth_if_destroy_pkt_pool(pool);

			return -1;
		}
		memset(pkt-&gt;buf,0,buf_size);
</Insert>
<Copy StartSeek="7329" EndSeek="30485"/>
</Delta>
<Delta Version="356" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:43:58000">
<Copy StartSeek="0" EndSeek="7152"/>
<Insert>	for (i = 0; i &lt; pool_size; i++, hdr_mm += HDR_DATA_SPLIT_BYTES) {
</Insert>
<Copy StartSeek="7207" EndSeek="30473"/>
</Delta>
<Delta Version="357" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:44:19000">
<Copy StartSeek="0" EndSeek="7317"/>
<Insert>		pkt-&gt;buf_size = buf_size;
</Insert>
<Copy StartSeek="7339" EndSeek="30467"/>
</Delta>
<Delta Version="358" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:44:49000">
<Copy StartSeek="0" EndSeek="7317"/>
<Insert>		pkt-&gt;buf_size = -1;
</Insert>
<Copy StartSeek="7409" EndSeek="30537"/>
</Delta>
<Delta Version="359" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:45:23000">
<Copy StartSeek="0" EndSeek="7409"/>
<Insert>		pkt-&gt;phys_addr = mvOsCacheInvalidate(NULL, pkt-&gt;buf, buf_size);
</Insert>
<Copy StartSeek="7489" EndSeek="30551"/>
</Delta>
<Delta Version="360" Comment="" NL="\10" Encoding="text" Date="2012/03/20" Time="18:47:12000">
<Copy StartSeek="0" EndSeek="18277"/>
<Insert>  /* Create Rx headers packet pool */  
  if (eth_if_create_pkt_pool(&amp;eth_if-&gt;rx_pkt_pool[PKT_HDR_PART], ETH_IF_RX_DESC_NUM, 
                             MV_ALIGN_UP(HDR_DATA_SPLIT_BYTES, CPU_D_CACHE_LINE_SIZE)) {
      goto eth_if_init_fail;
  }
  printk(KERN_ERR "(%s:%d) HAIM: &amp;eth_if-&gt;rx_pkt_pool[PKT_HDR_PART] %p\n",
	  __func__, __LINE__, &amp;eth_if-&gt;rx_pkt_pool[PKT_HDR_PART]);
    /* Create Rx data packet pool */  
  if (eth_if_create_pkt_pool(&amp;eth_if-&gt;rx_pkt_pool[PKT_DATA_PART], ETH_IF_RX_DESC_NUM, 
			     ETH_IF_RX_PKT_SIZE(ETH_IF_MTU - HDR_DATA_SPLIT_BYTES))) {
</Insert>
<Copy StartSeek="18465" EndSeek="18498"/>
<Insert>  printk(KERN_ERR "(%s:%d) HAIM: &amp;eth_if-&gt;rx_pkt_pool[PKT_DATA_PART] %p\n", 
	 __func__, __LINE__, &amp;eth_if-&gt;rx_pkt_pool[PKT_DATA_PART]);
  
</Insert>
<Copy StartSeek="18499" EndSeek="27687"/>
<Insert>		prefetch(rx_desc);
</Insert>
<Copy StartSeek="27714" EndSeek="30031"/>
</Delta>
<Delta Version="361" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:02:9000">
<Copy StartSeek="0" EndSeek="7643"/>
<Copy StartSeek="7661" EndSeek="30049"/>
</Delta>
<Delta Version="362" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:02:53000">
<Copy StartSeek="0" EndSeek="8050"/>
<Copy StartSeek="8116" EndSeek="30115"/>
</Delta>
<Delta Version="363" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:04:5000">
<Copy StartSeek="0" EndSeek="8050"/>
<Insert>  hdr_mm = (char *)mvOsMalloc(pool_size * HDR_DATA_SPLIT_BYTES);

</Insert>
<Copy StartSeek="8247" EndSeek="30246"/>
</Delta>
<Delta Version="364" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:04:45000">
<Copy StartSeek="0" EndSeek="8143"/>
<Insert>	  ETH_IF_ERROR("Can't alloc Rx pool, %d bytes", pool_size * sizeof(eth_if_pkt_t));
</Insert>
<Copy StartSeek="8231" EndSeek="30250"/>
</Delta>
<Delta Version="365" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:04:57000">
<Copy StartSeek="0" EndSeek="8231"/>
<Insert>
</Insert>
<Copy StartSeek="8231" EndSeek="30249"/>
</Delta>
<Delta Version="366" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:05:2000">
<Copy StartSeek="0" EndSeek="8249"/>
<Insert>
</Insert>
<Copy StartSeek="8307" EndSeek="30306"/>
</Delta>
<Delta Version="367" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:05:45000">
<Copy StartSeek="0" EndSeek="7661"/>
<Insert>  int i;
</Insert>
<Copy StartSeek="7715" EndSeek="8423"/>
<Insert>       pkt-&gt;buf = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="8519" EndSeek="30366"/>
</Delta>
<Delta Version="368" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:06:38000">
<Copy StartSeek="0" EndSeek="7661"/>
<Insert>  int i, data_size = buf_size - HDR_DATA_SPLIT_BYTES;
  
</Insert>
<Copy StartSeek="7724" EndSeek="30372"/>
</Delta>
<Delta Version="369" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:06:50000">
<Copy StartSeek="0" EndSeek="8429"/>
<Insert>       pkt-&gt;buf[PKT_DATA_PART] = mvOsMalloc(buf_size); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="8526" EndSeek="30373"/>
</Delta>
<Delta Version="370" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:06:58000">
<Copy StartSeek="0" EndSeek="8526"/>
<Insert>       if (pkt-&gt;buf == NULL) {
</Insert>
<Copy StartSeek="8572" EndSeek="30388"/>
</Delta>
<Delta Version="371" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:07:14000">
<Copy StartSeek="0" EndSeek="8572"/>
<Insert>           ETH_IF_ERROR("Can't allocate packet buffer for pool, %d bytes.", buf_size);
</Insert>
<Copy StartSeek="8665" EndSeek="30394"/>
</Delta>
<Delta Version="372" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:07:28000">
<Copy StartSeek="0" EndSeek="8394"/>
<Insert>       pkt = &amp;pool-&gt;pkt[i];       
</Insert>
<Copy StartSeek="8422" EndSeek="30387"/>
</Delta>
<Delta Version="373" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:08:39000">
<Copy StartSeek="0" EndSeek="8422"/>
<Insert>       pkt-&gt;buf[PKT_DATA_PART] = mvOsMalloc(data_size); /* TODO DO we need it aligned? */       
</Insert>
<Copy StartSeek="8512" EndSeek="30380"/>
</Delta>
<Delta Version="374" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:08:42000">
<Copy StartSeek="0" EndSeek="8422"/>
<Copy StartSeek="8491" EndSeek="30449"/>
</Delta>
<Delta Version="375" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:11:33000">
<Copy StartSeek="0" EndSeek="8422"/>
<Insert>       pkt-&gt;buf[PKT_HDR_PART] = hdr_pool + i * HDR_DATA_SPLIT_BYTES;
</Insert>
<Copy StartSeek="8490" EndSeek="30448"/>
</Delta>
<Delta Version="376" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:11:48000">
<Copy StartSeek="0" EndSeek="8862"/>
<Copy StartSeek="8896" EndSeek="30482"/>
</Delta>
<Delta Version="377" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:12:29000">
<Copy StartSeek="0" EndSeek="8862"/>
<Insert>       pkt-&gt;data_size= data_size;
</Insert>
<Copy StartSeek="8897" EndSeek="30483"/>
</Delta>
<Delta Version="378" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:12:32000">
<Copy StartSeek="0" EndSeek="8897"/>
<Insert>       pkt-&gt;phys_addr = mvOsCacheInvalidate(NULL, pkt-&gt;buf, buf_size);
</Insert>
<Copy StartSeek="8983" EndSeek="30498"/>
</Delta>
<Delta Version="379" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:12:56000">
<Copy StartSeek="0" EndSeek="8897"/>
<Insert>       pkt-&gt;phys_addr[PKT_DATA_PART] = mvOsCacheInvalidate(NULL, pkt-&gt;buf, buf_size);
</Insert>
<Copy StartSeek="8998" EndSeek="30513"/>
</Delta>
<Delta Version="380" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:14:3000">
<Copy StartSeek="0" EndSeek="8897"/>
<Insert>       pkt-&gt;phys_addr[PKT_DATA_PART] = mvOsCacheInvalidate(NULL, pkt-&gt;buf[PKT_DATA_PART], buf_size);
</Insert>
<Copy StartSeek="9010" EndSeek="30525"/>
</Delta>
<Delta Version="381" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:14:11000">
<Copy StartSeek="0" EndSeek="8897"/>
<Insert>       pkt-&gt;phys_addr[PKT_DATA_PART] = mvOsCacheInvalidate(NULL, pkt-&gt;buf[PKT_DATA_PART], HDR_DATA_SPLIT_BYTES);
  }

</Insert>
<Copy StartSeek="9115" EndSeek="30625"/>
</Delta>
<Delta Version="382" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:14:42000">
<Copy StartSeek="0" EndSeek="9110"/>
<Insert>  }

</Insert>
<Copy StartSeek="9347" EndSeek="30857"/>
</Delta>
<Delta Version="383" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:18:24000">
<Copy StartSeek="0" EndSeek="2510"/>
<Copy StartSeek="2568" EndSeek="30915"/>
</Delta>
<Delta Version="384" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:19:37000">
<Copy StartSeek="0" EndSeek="7701"/>
<Insert>  char *hdr_pool;
</Insert>
<Copy StartSeek="7701" EndSeek="8141"/>
<Insert>  hdr_pool = (char *)mvOsMalloc(pool_size * HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="8214" EndSeek="8346"/>
<Insert>  memset(hdr_pool, 0, pool_size * HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="8409" EndSeek="30909"/>
</Delta>
<Delta Version="385" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:20:14000">
<Copy StartSeek="0" EndSeek="8474"/>
<Insert>       pkt-&gt;buf[PKT_HDR_PART] = hdr_pool[i * HDR_DATA_SPLIT_BYTES];
</Insert>
<Copy StartSeek="8548" EndSeek="30915"/>
</Delta>
<Delta Version="386" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:20:23000">
<Copy StartSeek="0" EndSeek="8141"/>
<Insert>  pool-&gt;hdr_pool = (char *)mvOsMalloc(pool_size * HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="8208" EndSeek="8340"/>
<Insert>  memset(pool-&gt;hdr_pool, 0, pool_size * HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="8397" EndSeek="8462"/>
<Insert>       pkt-&gt;buf[PKT_HDR_PART] = pool-&gt;hdr_pool[i * HDR_DATA_SPLIT_BYTES];
</Insert>
<Copy StartSeek="8530" EndSeek="30897"/>
</Delta>
<Delta Version="387" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:20:41000">
<Copy StartSeek="0" EndSeek="7761"/>
<Insert>  
</Insert>
<Copy StartSeek="7780" EndSeek="8413"/>
<Insert>
</Insert>
<Copy StartSeek="8546" EndSeek="9298"/>
<Insert>
</Insert>
<Copy StartSeek="9332" EndSeek="31078"/>
</Delta>
<Delta Version="388" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:22:11000">
<Copy StartSeek="0" EndSeek="8413"/>
<Insert>  printk(KERN_ERR "(%s:%d) HAIM: allocated hdr_pool %p size %d\n", __func__, __LINE__, hdr_pool, pool_size * HDR_DATA_SPLIT_BYTES);

</Insert>
<Copy StartSeek="8549" EndSeek="31081"/>
</Delta>
<Delta Version="389" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:22:15000">
<Copy StartSeek="0" EndSeek="8413"/>
<Copy StartSeek="8414" EndSeek="31082"/>
</Delta>
<Delta Version="390" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:22:28000">
<Copy StartSeek="0" EndSeek="9336"/>
<Insert>       printk(KERN_ERR "(%s:%d) HAIM: pkt %i, buf[hdr] %p %p, buf[data] %p %p\n", 
</Insert>
<Copy StartSeek="9461" EndSeek="9545"/>
<Insert>	      pkt-&gt;buf[PKT_DATA_PART], pkt-&gt;phys_addr[PKT_DATA_PART]);
  }

</Insert>
<Copy StartSeek="9647" EndSeek="31157"/>
</Delta>
<Delta Version="391" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:24:2000">
<Copy StartSeek="0" EndSeek="19507"/>
<Insert>                             ETH_IF_RX_BUF_SIZE(ETH_IF_RX_PKT_SIZE(ETH_IF_MTU)))) {
</Insert>
<Copy StartSeek="19571" EndSeek="31137"/>
</Delta>
<Delta Version="392" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:25:8000">
<Copy StartSeek="0" EndSeek="8985"/>
<Copy StartSeek="9051" EndSeek="31203"/>
</Delta>
<Delta Version="393" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:28:51000">
<Copy StartSeek="0" EndSeek="9041"/>
<Insert>
       }
</Insert>
<Copy StartSeek="9138" EndSeek="31290"/>
</Delta>
<Delta Version="394" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:29:6000">
<Copy StartSeek="0" EndSeek="9128"/>
<Insert>
       }
</Insert>
<Copy StartSeek="9137" EndSeek="31289"/>
</Delta>
<Delta Version="395" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:29:10000">
<Copy StartSeek="0" EndSeek="8550"/>
<Copy StartSeek="8687" EndSeek="9178"/>
<Insert>	       printk(KERN_ERR "(%s:%d) HAIM: hdr_pool unaligned !!!\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="9179" EndSeek="31340"/>
</Delta>
<Delta Version="396" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:29:39000">
<Copy StartSeek="0" EndSeek="9123"/>
<Insert>       if (!IS_ALIGNED((unsigned long)hdr_pool, 32)) {
</Insert>
<Copy StartSeek="9193" EndSeek="31355"/>
</Delta>
<Delta Version="397" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:30:12000">
<Copy StartSeek="0" EndSeek="9193"/>
<Insert>
</Insert>
<Copy StartSeek="9280" EndSeek="31441"/>
</Delta>
<Delta Version="398" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:30:24000">
<Copy StartSeek="0" EndSeek="9193"/>
<Insert>	       printk(KERN_ERR "(%s:%d) HAIM: hdr_pool unaligned !!!\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="9280" EndSeek="31441"/>
</Delta>
<Delta Version="399" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:30:30000">
<Copy StartSeek="0" EndSeek="9193"/>
<Insert>	       printk(KERN_ERR "(%s:%d) HAIM: pkt_data unaligned !!!\n", __func__, __LINE__);
       }
</Insert>
<Copy StartSeek="9327" EndSeek="31479"/>
</Delta>
<Delta Version="400" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:30:50000">
<Copy StartSeek="0" EndSeek="6289"/>
<Copy StartSeek="6321" EndSeek="31511"/>
</Delta>
<Delta Version="401" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:32:2000">
<Copy StartSeek="0" EndSeek="6345"/>
<Copy StartSeek="6373" EndSeek="31539"/>
</Delta>
<Delta Version="402" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:32:26000">
<Copy StartSeek="0" EndSeek="6345"/>
<Insert>      pool-&gt;hdr_pool= NULL;
</Insert>
<Copy StartSeek="6374" EndSeek="31540"/>
</Delta>
<Delta Version="403" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:32:26000">
<Copy StartSeek="0" EndSeek="5848"/>
<Insert>	if (pkt-&gt;buf[PKT_HDR_PART]) {
	    mvOsFree(pkt-&gt;buf);
	    pkt-&gt;buf = NULL;
	}
</Insert>
<Copy StartSeek="5848" EndSeek="31459"/>
</Delta>
<Delta Version="404" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:33:44000">
<Copy StartSeek="0" EndSeek="6176"/>
<Insert>    
</Insert>
<Copy StartSeek="6299" EndSeek="31577"/>
</Delta>
<Delta Version="405" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:35:17000">
<Copy StartSeek="0" EndSeek="6239"/>
<Insert>	      mvOsFree(pkt-&gt;buf);
</Insert>
<Copy StartSeek="6280" EndSeek="31591"/>
</Delta>
<Delta Version="406" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:35:51000">
<Copy StartSeek="0" EndSeek="5908"/>
<Insert>		pkt-&gt;buf = NULL;
	}
}

</Insert>
<Copy StartSeek="5981" EndSeek="31639"/>
</Delta>
<Delta Version="407" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:37:2000">
<Copy StartSeek="0" EndSeek="6328"/>
<Insert>	      pkt-&gt;buf = NULL;
      }

</Insert>
<Copy StartSeek="6337" EndSeek="31615"/>
</Delta>
<Delta Version="408" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:37:15000">
<Copy StartSeek="0" EndSeek="6070"/>
<Insert>  eth_if_pkt_t *pkt;
  int i;
</Insert>
<Copy StartSeek="6098" EndSeek="6099"/>
<Insert>  if (pool) {
      for (i = 0; i &lt; pool-&gt;size; i++) {
	      pkt = &amp;pool-&gt;pkt[i];
	      eth_if_destroy_pkt(pkt);
      }
      pkt = &amp;pool-&gt;pkt[0];
      if (pkt-&gt;buf[PKT_HDR_PART]) {
	      mvOsFree(pkt-&gt;buf[PKT_HDR_PART]);
      }

      mvOsFree(pool-&gt;pkt);
      mvOsFree(pool-&gt;hdr_pool);
      pool-&gt;pkt = NULL;
      pool-&gt;hdr_pool = NULL;
      pool-&gt;size = 0;
  }
}

</Insert>
<Copy StartSeek="6423" EndSeek="31560"/>
</Delta>
<Delta Version="409" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:37:31000">
<Copy StartSeek="0" EndSeek="6112"/>
<Insert>		pkt = &amp;pool-&gt;pkt[0];
</Insert>
<Copy StartSeek="6112" EndSeek="31537"/>
</Delta>
<Delta Version="410" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:38:10000">
<Copy StartSeek="0" EndSeek="6112"/>
<Insert>		if (pkt-&gt;buf[PKT_HDR_PART]) {
			mvOsFree(pkt-&gt;buf[PKT_HDR_PART]);
		}

</Insert>
<Copy StartSeek="6112" EndSeek="31463"/>
</Delta>
<Delta Version="411" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:38:17000">
<Copy StartSeek="0" EndSeek="6205"/>
<Insert>
</Insert>
<Copy StartSeek="6205" EndSeek="31462"/>
</Delta>
<Delta Version="412" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:38:27000">
<Copy StartSeek="0" EndSeek="6205"/>
<Copy StartSeek="6206" EndSeek="31463"/>
</Delta>
<Delta Version="413" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:38:37000">
<Copy StartSeek="0" EndSeek="6229"/>
<Copy StartSeek="6323" EndSeek="31557"/>
</Delta>
<Delta Version="414" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:39:2000">
<Copy StartSeek="0" EndSeek="6229"/>
<Insert>		printk(KERN_ERR "(%s:%d) HAIM: freeing hdr_pool %p\n", __func__, __LINE__, pool-&gt;hdr_pool);
</Insert>
<Copy StartSeek="6333" EndSeek="31567"/>
</Delta>
<Delta Version="415" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:39:3000">
<Copy StartSeek="0" EndSeek="14654"/>
<Insert>  descr_num = pkt_pool-&gt;size;
</Insert>
<Copy StartSeek="14736" EndSeek="31619"/>
</Delta>
<Delta Version="416" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:45:35000">
<Copy StartSeek="0" EndSeek="15349"/>
<Insert>     ETH_IF_ERROR("Can't allocate %d bytes for %d TX descr for Rx Q %d", descr_size, descr_num, queue);
</Insert>
<Copy StartSeek="15453" EndSeek="31619"/>
</Delta>
<Delta Version="417" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:46:32000">
<Copy StartSeek="0" EndSeek="15349"/>
<Insert>     ETH_IF_ERROR("Can't allocate %d bytes for %d RX descr for Rx Q %d", descr_size, descr_num, queue);
</Insert>
<Copy StartSeek="15453" EndSeek="31619"/>
</Delta>
<Delta Version="418" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:46:49000">
<Copy StartSeek="0" EndSeek="15349"/>
<Insert>     ETH_IF_ERROR("Can't allocate %d bytes for %d TX descr for Rx Q %d", descr_size, descr_num, queue);
</Insert>
<Copy StartSeek="15453" EndSeek="31619"/>
</Delta>
<Delta Version="419" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:46:59000">
<Copy StartSeek="0" EndSeek="15838"/>
<Insert>  ETH_IF_DBG("eth_if_rxq_init: Curr rx descr index is %d", q-&gt;nextToProc);
</Insert>
<Copy StartSeek="15920" EndSeek="31626"/>
</Delta>
<Delta Version="420" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:48:36000">
<Copy StartSeek="0" EndSeek="6430"/>
<Insert>/* Create packet pool in contigues mm */
static int eth_if_create_hdr_pkt_pool(eth_if_pkt_pool_t* pool, int pool_size, int buf_size)
{
	eth_if_pkt_t *pkt;
	char *hdr_mm;
	int i;

	if (pool == NULL) {
		return -1;
	}

	pool-&gt;size = 0;

	/* allocate the ring */
	pool-&gt;pkt = (eth_if_pkt_t *) mvOsMalloc(pool_size * sizeof(eth_if_pkt_t));
	if (pool-&gt;pkt == NULL) {
		ETH_IF_ERROR("Can't alloc Rx pool, %d bytes", pool_size * sizeof(eth_if_pkt_t));

		return -1;
	}
	pool-&gt;size = pool_size;
	memset(pool-&gt;pkt, 0, sizeof(pool_size * sizeof(eth_if_pkt_t)));

	/* allocate the headers space */
	hdr_mm = (char *)mvOsMalloc(pool_size * buf_size); /* TODO DO we need it aligned? */
	if (hdr_mm == NULL) {
		ETH_IF_ERROR("Can't allocate header buffers %d bytes.", pool_size * buf_size);
		eth_if_destroy_pkt_pool(pool);

		return -1;
	}

	/* initialiaze each packet hdr part */
	for (i = 0; i &lt; pool_size; i++, hdr_mm += buf_size) {
		pkt = &amp;pool-&gt;pkt[i];       
		pkt-&gt;buf[PKT_HDR_PART] = hdr_mm;
		memset(pkt-&gt;buf[PKT_HDR_PART],0,buf_size);
		pkt-&gt;buf_size = 0xdeadbeef; /* initialize this part after whole packet alloc completed */
		pkt-&gt;phys_addr = mvOsCacheInvalidate(NULL, pkt-&gt;buf[PKT_HDR_PART], buf_size);
	}

	return 0;
}

</Insert>
<Copy StartSeek="6430" EndSeek="30403"/>
</Delta>
<Delta Version="421" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="10:54:25000">
<Copy StartSeek="0" EndSeek="15288"/>
<Insert>      pkt = &amp;pkt_pool-&gt;pkt[i];
</Insert>
<Copy StartSeek="15323" EndSeek="30407"/>
</Delta>
<Delta Version="422" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:21:15000">
<Copy StartSeek="0" EndSeek="15288"/>
<Insert>      pkt = &amp;pkt_pool-&gt;pkt[i / 2];
</Insert>
<Copy StartSeek="15319" EndSeek="30403"/>
</Delta>
<Delta Version="423" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:21:26000">
<Copy StartSeek="0" EndSeek="14998"/>
<Insert>  /* Fill RXQ with buffers from RX pool */
</Insert>
<Copy StartSeek="15053" EndSeek="30415"/>
</Delta>
<Delta Version="424" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:22:9000">
<Copy StartSeek="0" EndSeek="15300"/>
<Insert>      pkt = &amp;pkt_pool-&gt;pkt[i];
</Insert>
<Copy StartSeek="15335" EndSeek="30419"/>
</Delta>
<Delta Version="425" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:23:54000">
<Copy StartSeek="0" EndSeek="15335"/>
<Insert>      mvNetaRxDescFill(rx_desc, pkt-&gt;phys_addr, (MV_U32)pkt);
</Insert>
<Copy StartSeek="15402" EndSeek="30424"/>
</Delta>
<Delta Version="426" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:24:14000">
<Copy StartSeek="0" EndSeek="24796"/>
<Insert>    ETH_IF_DBG("Pkt %d [0x%x], status 0x%x, dataSize %d", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize);
</Insert>
<Copy StartSeek="24912" EndSeek="30431"/>
</Delta>
<Delta Version="427" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:25:39000">
<Copy StartSeek="0" EndSeek="15402"/>
<Insert>  }
</Insert>
<Copy StartSeek="15481" EndSeek="30506"/>
</Delta>
<Delta Version="428" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:30:22000">
<Copy StartSeek="0" EndSeek="15402"/>
<Insert>      rx_desc-&gt;dataSize = ((i%2) ? pkt-&gt;data_size : HDR_DATA_SPLIT_BYTES);
</Insert>
<Copy StartSeek="15477" EndSeek="30506"/>
</Delta>
<Delta Version="429" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:30:47000">
<Copy StartSeek="0" EndSeek="5789"/>
<Insert>static void eth_if_destroy_pkt(struct eth_if_pkt_t *pkt)
</Insert>
<Copy StartSeek="5839" EndSeek="30499"/>
</Delta>
<Delta Version="430" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:31:53000">
<Copy StartSeek="0" EndSeek="7609"/>
<Insert>       pkt-&gt;buf[PKT_HDR_PART] = hdr_pool[i * HDR_DATA_SPLIT_BYTES];
</Insert>
<Copy StartSeek="7678" EndSeek="30500"/>
</Delta>
<Delta Version="431" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:32:26000">
<Copy StartSeek="0" EndSeek="8809"/>
<Insert>	      pkt-&gt;data_size, pkt_size);
</Insert>
<Copy StartSeek="8848" EndSeek="30505"/>
</Delta>
<Delta Version="432" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:34:10000">
<Copy StartSeek="0" EndSeek="8746"/>
<Insert>	      pkt-&gt;buf[PKT_DATA_PART], pkt-&gt;phys_addr[PKT_DATA_PART],
</Insert>
<Copy StartSeek="8817" EndSeek="30513"/>
</Delta>
<Delta Version="433" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:37:6000">
<Copy StartSeek="0" EndSeek="8662"/>
<Insert>	      __func__, __LINE__, i, pkt-&gt;buf[PKT_HDR_PART], pkt-&gt;phys_addr[PKT_HDR_PART],
</Insert>
<Copy StartSeek="8755" EndSeek="30522"/>
</Delta>
<Delta Version="434" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:37:57000">
<Copy StartSeek="0" EndSeek="8662"/>
<Insert>	      __func__, __LINE__, i, pkt-&gt;buf[PKT_HDR_PART],  (void *)pkt-&gt;phys_addr[PKT_HDR_PART],
</Insert>
<Copy StartSeek="8762" EndSeek="30529"/>
</Delta>
<Delta Version="435" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:38:3000">
<Copy StartSeek="0" EndSeek="8662"/>
<Insert>	      __func__, __LINE__,
	      i, pkt-&gt;buf[PKT_HDR_PART],  (void *)pkt-&gt;phys_addr[PKT_HDR_PART],
</Insert>
<Copy StartSeek="8762" EndSeek="30529"/>
</Delta>
<Delta Version="436" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:38:8000">
<Copy StartSeek="0" EndSeek="2844"/>
<Insert>  eth_if_pkt_pool_t rx_pkt_pool[2]; /* Rx buffers */
</Insert>
<Copy StartSeek="2894" EndSeek="30526"/>
</Delta>
<Delta Version="437" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:38:46000">
<Copy StartSeek="0" EndSeek="23324"/>
<Copy StartSeek="23330" EndSeek="25988"/>
<Insert>
</Insert>
<Copy StartSeek="26012" EndSeek="30555"/>
</Delta>
<Delta Version="438" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:42:33000">
<Copy StartSeek="0" EndSeek="28579"/>
<Insert>		ETH_IF_DBG("Pkt %d [0x%x], status 0x%x, dataSize %d", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize);
</Insert>
<Copy StartSeek="28693" EndSeek="30562"/>
</Delta>
<Delta Version="439" Comment="" NL="\10" Encoding="text" Date="2012/03/21" Time="11:43:13000">
<Copy StartSeek="0" EndSeek="28579"/>
<Insert>		printk(KERN_DEBUG "Pkt %d [0x%x], status 0x%x, dataSize %d", rx_done, (u32) pkt, rx_status, rx_desc-&gt;dataSize);
</Insert>
<Copy StartSeek="28713" EndSeek="30582"/>
</Delta>
</DeltaFile>
