<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="38" Comment="" Date="2012/04/25" Time="12:03:39000" NL="\10" Encoding="text">
<Insert>/*
 *	Marvell Kernel Learning Agent
 * 
 *      Authors:
 *	Haim Daniel
 *
 *	This program is free software; you can redistribute it and/or
 *	modify it under the terms of the GNU General Public License
 *	as published by the Free Software Foundation; either version
 *	2 of the License, or (at your option) any later version.
 */

#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;net/sock.h&gt;

#undef pr_fmt
#define pr_fmt(fmt)	"ksym_steal: " fmt
DEFINE_SPINLOCK(klna_lock);

struct sock *__sk_alloc_org(int family, gfp_t priority,
		      struct proto *prot, int zero_it)
{
	struct sock *sk;
//      sk = org_sk_alloc(family, priority, prot,zero_it);
start:
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
end:
	return sk;
}

struct sock *stolen_sk_alloc(int family, gfp_t priority,
		      struct proto *prot, int zero_it)
{
	struct sock *sk;
//      sk = org_sk_alloc(family, priority, prot,zero_it);

	sk = __sk_alloc_org(family,priority,prot,zero_it);
	printk(KERN_ERR "(%s:%d) HAIM: I SHOT THE SHERIFF!\n", __func__, __LINE__);
	return sk;
}


//static void klna_restore_sk_alloc(void)
//{
//        spin_lock_irq(&amp;klna_lock);
//      flush_icache_range((unsigned long)&amp;sk_alloc,
//      		   (unsigned long)&amp;sk_alloc + sizeof(*org_sk_alloc));
//        spin_unlock_irq(&amp;klna_lock);
//}

static int klna_steal_sk_alloc(void)
{
	if (&amp;sk_alloc == NULL) {
		printk(KERN_ERR "(%s:%d) can't find sk_alloc\n", __func__, __LINE__);
		return -ENOENT;
	}
	spin_lock_irq(&amp;klna_lock);
	/* make a copy of the org sk_alloc */
	memcpy(&amp;__sk_alloc_org, &amp;sk_alloc, 300 /* FIXME: calculate start-end of __sk_alloc_org */);
	printk(KERN_ERR "(%s:%d) __sk_alloc_org %p, sk_alloc %p\n", __func__, __LINE__, __sk_alloc_org, sk_alloc);
	spin_unlock_irq(&amp;klna_lock);

	return 0;
}

static int __init ksym_steal(void)
{
	unsigned long addr;

	pr_info("init\n");

	return klna_steal_sk_alloc();
//      return 0;
}

static void __exit ksym_steal_exit(void)
{
	pr_info("exit\n");
}

module_init(ksym_steal)
module_exit(ksym_steal_exit)
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Haim Daniel &lt;haimd@marvell.com&gt;");
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/04/19" Time="13:04:18000">
<Copy StartSeek="0" EndSeek="384"/>
<Insert>#include &lt;linux/kallsyms.h&gt;
</Insert>
<Copy StartSeek="406" EndSeek="574"/>
<Copy StartSeek="1405" EndSeek="1791"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="10:53:4000">
<Copy StartSeek="0" EndSeek="421"/>
<Insert>#define pr_fmt(fmt)	"ksym_grep: " fmt
</Insert>
<Copy StartSeek="460" EndSeek="461"/>
<Insert>static char sym[64];
module_param_string(sym, sym, 64, 0600);
MODULE_PARM_DESC(sym, "sym=\"sym_to_lookup\"\n");


</Insert>
<Copy StartSeek="461" EndSeek="1292"/>
<Insert>static int __init ksym_grep(void)
</Insert>
<Copy StartSeek="1327" EndSeek="1490"/>
<Insert>static void __exit ksym_grep_exit(void)
</Insert>
<Copy StartSeek="1531" EndSeek="1556"/>
<Insert>module_init(ksym_grep)
module_exit(ksym_grep_exit)
</Insert>
<Copy StartSeek="1609" EndSeek="1682"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="10:53:24000">
<Copy StartSeek="0" EndSeek="1372"/>
<Insert>	addr = kallsyms_lookup_name(sym);
	if (addr) {
		pr_info("%s: %#lx\n", sym, addr);
	}
	return addr ? 0 : -EINVAL;
}

</Insert>
<Copy StartSeek="1386" EndSeek="1578"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="10:53:43000">
<Copy StartSeek="0" EndSeek="577"/>
<Insert>	if (family == PF_PPPOX) {
		printk(KERN_ERR "(%s:%d) request for pppox sock \n", __func__, __LINE__);
	}
	sk = org_sk_alloc(family, priority, prot,zero_it);
</Insert>
<Copy StartSeek="636" EndSeek="921"/>
<Insert>
</Insert>
<Copy StartSeek="934" EndSeek="1491"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:10:41000">
<Copy StartSeek="0" EndSeek="636"/>
<Copy StartSeek="668" EndSeek="1523"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:11:43000">
<Copy StartSeek="0" EndSeek="460"/>
<Insert>
</Insert>
<Copy StartSeek="489" EndSeek="1551"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:12:45000">
<Copy StartSeek="0" EndSeek="711"/>
<Insert>static void klna_restore_sk_alloc(void)
{
	spin_lock_irq(&amp;klna_lock);
	if (org_sk_alloc) {
		sk_alloc = org_sk_alloc;
	}
</Insert>
<Copy StartSeek="794" EndSeek="911"/>
<Insert>	spin_unlock_irq(&amp;klna_lock);
}
static void 
static int klna_steal_sk_alloc(void)
{
	spin_lock_irq(&amp;klna_lock);
	org_sk_alloc = &amp;sk_alloc;
	printk(KERN_ERR "(%s:%d) org_sk_alloc %p\n", __func__, __LINE__, org_sk_alloc);
	sk_alloc = klna_sk_alloc;
	spin_unlock_irq(&amp;klna_lock);
	return org_sk_alloc ? 0 : -ENOENT;
}
</Insert>
<Copy StartSeek="1285" EndSeek="1572"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:14:9000">
<Copy StartSeek="0" EndSeek="696"/>
<Copy StartSeek="1410" EndSeek="2286"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:15:25000">
<Copy StartSeek="0" EndSeek="1409"/>
<Copy StartSeek="3641" EndSeek="4518"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:22:7000">
<Copy StartSeek="0" EndSeek="3641"/>
<Insert>
</Insert>
<Copy StartSeek="3646" EndSeek="4522"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:22:33000">
<Copy StartSeek="0" EndSeek="3661"/>
<Copy StartSeek="6833" EndSeek="7694"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:23:37000">
<Copy StartSeek="0" EndSeek="665"/>
<Insert>	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
</Insert>
<Copy StartSeek="665" EndSeek="685"/>
<Insert>struct sock *_sk_alloc_org(int family, gfp_t priority,
</Insert>
<Copy StartSeek="741" EndSeek="4719"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:24:38000">
<Copy StartSeek="0" EndSeek="665"/>
<Insert>end:
</Insert>
<Copy StartSeek="712" EndSeek="4761"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:24:57000">
<Copy StartSeek="0" EndSeek="665"/>
<Insert>	__sk_alloc_org(family,priority,prot,zero_it);
</Insert>
<Copy StartSeek="717" EndSeek="4766"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:25:0000">
<Copy StartSeek="0" EndSeek="489"/>
<Insert>struct sock *klna_sk_alloc(int family, gfp_t priority,
</Insert>
<Copy StartSeek="546" EndSeek="4768"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:25:19000">
<Copy StartSeek="0" EndSeek="719"/>
<Copy StartSeek="795" EndSeek="4844"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:25:49000">
<Copy StartSeek="0" EndSeek="719"/>
<Insert>	printk(KERN_ERR "(%s:%d) HAIM: I SHOT THE SHERIFF\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="796" EndSeek="4845"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:25:50000">
<Copy StartSeek="0" EndSeek="4228"/>
<Insert>//static int klna_steal_sk_alloc(void)
//{
//        spin_lock_irq(&amp;klna_lock);
//        org_sk_alloc = &amp;sk_alloc;
//        printk(KERN_ERR "(%s:%d) org_sk_alloc %p\n", __func__, __LINE__, org_sk_alloc);
//        sk_alloc = klna_sk_alloc;
//        spin_unlock_irq(&amp;klna_lock);
//        return org_sk_alloc ? 0 : -ENOENT;
//}
</Insert>
<Copy StartSeek="4498" EndSeek="4785"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:26:29000">
<Copy StartSeek="0" EndSeek="987"/>
<Insert>
</Insert>
<Copy StartSeek="994" EndSeek="4791"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:27:48000">
<Copy StartSeek="0" EndSeek="4301"/>
<Insert>	org_sk_alloc = &amp;sk_alloc;
</Insert>
<Copy StartSeek="4343" EndSeek="4806"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:29:10000">
<Copy StartSeek="0" EndSeek="4301"/>
<Insert>	memcpy(&amp;__sk_alloc_org, &amp;sk_alloc, 300);
</Insert>
<Copy StartSeek="4375" EndSeek="4838"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:29:23000">
<Copy StartSeek="0" EndSeek="4375"/>
<Insert>	printk(KERN_ERR "(%s:%d) org_sk_alloc %p\n", __func__, __LINE__, org_sk_alloc);
</Insert>
<Copy StartSeek="4460" EndSeek="4842"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:40:16000">
<Copy StartSeek="0" EndSeek="4460"/>
<Insert>	sk_alloc = klna_sk_alloc;
</Insert>
<Copy StartSeek="4460" EndSeek="4815"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:40:29000">
<Copy StartSeek="0" EndSeek="4234"/>
<Insert>static int klna_steal_sk_alloc(void)
</Insert>
<Copy StartSeek="4272" EndSeek="4491"/>
<Insert>	return org_sk_alloc ? 0 : -ENOENT;
}

</Insert>
<Copy StartSeek="4494" EndSeek="4780"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:40:42000">
<Copy StartSeek="0" EndSeek="4234"/>
<Insert>static void klna_steal_sk_alloc(void)
</Insert>
<Copy StartSeek="4271" EndSeek="4490"/>
<Insert>}

</Insert>
<Copy StartSeek="4529" EndSeek="4815"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:40:58000">
<Copy StartSeek="0" EndSeek="4273"/>
<Copy StartSeek="4313" EndSeek="4855"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:41:19000">
<Copy StartSeek="0" EndSeek="4292"/>
<Copy StartSeek="4365" EndSeek="4928"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:41:38000">
<Copy StartSeek="0" EndSeek="4292"/>
<Insert>		printk(KERN_ERR "(%s:%d) can't find sk_alloc\n", __func__, __LINE__,);
</Insert>
<Copy StartSeek="4364" EndSeek="4927"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:41:38000">
<Copy StartSeek="0" EndSeek="4602"/>
<Insert>	return org_sk_alloc ? 0 : -ENOENT;
</Insert>
<Copy StartSeek="4613" EndSeek="4902"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:42:3000">
<Copy StartSeek="0" EndSeek="4602"/>
<Copy StartSeek="4603" EndSeek="4903"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:42:20000">
<Copy StartSeek="0" EndSeek="4273"/>
<Insert>	if (!&amp;sk_alloc) {
</Insert>
<Copy StartSeek="4299" EndSeek="4910"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:42:41000">
<Copy StartSeek="0" EndSeek="489"/>
<Insert>struct sock *stolen_sk_alloc(int family, gfp_t priority,
		      struct proto *prot, int zero_it)
{
	struct sock *sk;
//      sk = org_sk_alloc(family, priority, prot,zero_it);

	sk = __sk_alloc_org(family,priority,prot,zero_it);
	printk(KERN_ERR "(%s:%d) HAIM: I SHOT THE SHERIFF!\n", __func__, __LINE__);
	return sk;
}

</Insert>
<Copy StartSeek="489" EndSeek="3668"/>
<Copy StartSeek="3991" EndSeek="4911"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:43:27000">
<Copy StartSeek="0" EndSeek="3555"/>
<Insert>	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
</Insert>
<Copy StartSeek="3555" EndSeek="4818"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="11:48:23000">
<Copy StartSeek="0" EndSeek="4328"/>
<Copy StartSeek="4367" EndSeek="4857"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="12:00:37000">
<Copy StartSeek="0" EndSeek="4367"/>
<Insert>	memcpy(&amp;__sk_alloc_org, &amp;sk_alloc, 300 /* FIXME: calculate the size */);
</Insert>
<Copy StartSeek="4460" EndSeek="4876"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="12:01:35000">
<Copy StartSeek="0" EndSeek="4669"/>
<Insert>
	return 0;
</Insert>
<Copy StartSeek="4718" EndSeek="4913"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="12:02:43000">
<Copy StartSeek="0" EndSeek="4669"/>
<Copy StartSeek="4670" EndSeek="4914"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/04/25" Time="12:02:45000">
<Copy StartSeek="0" EndSeek="4460"/>
<Insert>	printk(KERN_ERR "(%s:%d) __sk_alloc_org %p\n", __func__, __LINE__, __sk_alloc_org);
</Insert>
<Copy StartSeek="4568" EndSeek="4937"/>
</Delta>
</DeltaFile>
