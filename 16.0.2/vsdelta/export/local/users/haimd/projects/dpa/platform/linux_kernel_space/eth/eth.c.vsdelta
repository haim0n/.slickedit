<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="168" Comment="" Date="2013/06/02" Time="18:18:13000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2012, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
*
* eth.c
*
* DESCRIPTION:
*     Ethernet device driver implementation.
*
*******************************************************************************/



#include &lt;linux/kernel.h&gt; /* FIXME Remove and fix types */
#include &lt;linux/interrupt.h&gt;

#include &lt;dpa_os.h&gt;
#include &lt;eth/eth.h&gt;
#include &lt;util/queue.h&gt;
#include &lt;util/string.h&gt;
#include &lt;util/mem.h&gt;
#include &lt;util/cache_ops.h&gt;
#include &lt;log/log.h&gt;
#include "eth_regs.h"

#include &lt;perf_cnt.h&gt;

//#define ETH_DEBUG

#define ETH_ERROR(format, args...)  DPA_ERROR(format, ##args)
#define ETH_INFO(format, args...) DPA_INFO(format, ##args)

#ifdef ETH_DEBUG
#define ETH_DBG(format, args...)  printk(format"\n", ##args)
#else
  #define ETH_DBG(format, args...) 
#endif

/* Maximum number of physical Rx queues per port */
#define ETH_MAX_RXQ_NUM     8

/* Maximum number of physical Rx queues per port */
#define ETH_MAX_TXQ_NUM     8

/* Maximum number of descriptors per Rx queue */
#define ETH_MAX_RX_DESC_NUM 1024

/* Maximum number of descriptors per Tx queue */
#define ETH_MAX_TX_DESC_NUM 1024

/* Maximum MTU */
#define ETH_MAX_MTU 1500

/* Rx fraem size: MTU + 2 (Marvell Header) + 4 (VLAN) + 14 (MAC hdr) + 4 (CRC) */
#define ETH_FRAME_SIZE(mtu) \
    MEM_ALIGN_UP((mtu) + 2 + 4 + 14 /* ETH header */ + 4, CPU_D_CACHE_LINE_SIZE)

/* Buffer headroom size */
#define ETH_FRAME_PAD 64

/* Total Rx packet buffer size */
#define ETH_PKT_SIZE(mtu) (ETH_FRAME_SIZE(mtu) + ETH_FRAME_PAD)

/* Maximum time to wait for Tx complete on shutdown, mseconds */
#define ETH_TX_COMPLETE_TIMEOUT 100

/* Maximum number of packets buffers in a pool per port */
#define ETH_MAX_PKT_POOL_SIZE (ETH_MAX_RXQ_NUM * (ETH_MAX_RX_DESC_NUM + 16))

/* Rx interrupt mask */
#define ETH_RX_INTR_MASK  (((1 &lt;&lt; ETH_MAX_RXQ_NUM) - 1) &lt;&lt; NETA_CAUSE_RXQ_OCCUP_DESC_OFFS)

/* Descriptors ring */
typedef struct {
  uint8_t port;
  uint8_t queue;
  void    *mem;
  uint32_t mem_size;
  uint32_t first;
  uint32_t last;
  uint32_t next;
  uint32_t num;
  uint32_t pending;
} eth_ring_t;


/* Ethernet port */

struct eth_port_t;

typedef struct eth_port eth_port_t;

struct eth_port {
  bool             init; /* true if initialized */
  uint8_t          port; /* Physical port number */
  uint8_t          rxq_num; /* Number of Rx queues */
  uint8_t          txq_num; /* Number of Tx queues */
  uint32_t         mtu; /* MTU */
  uint32_t         irq; /* Interrupt number */
  uint32_t         hw_cmd; /* HW command spec for Gunit */
  uint32_t         rx_desc_num; /* Number of Rx descriptors */
  uint32_t         tx_desc_num; /* Number of Tx descriptors */
  eth_ops_t        ops; /* Callbacks */
  eth_ring_t      *rxq[ETH_MAX_RXQ_NUM]; /* Rx packet buffer rings */
  eth_ring_t      *txq[ETH_MAX_TXQ_NUM]; /* Tx packet buffer rings */
  queue_t         *pkt_pool; /* Rx packet buffers */
  uint32_t         pkt_size; /* Size of packet buffers in pkt_pool */
  uint32_t         pkt_pool_size; /* Required size of the packet pool */
  dpa_eth_stats_t  stats; /* Port statistics */
  uint32_t         txq_pending; /* bit-mask per queue with any pending pkts */
  eth_port_t      *next; /* Linked list */
};


/* Available Ethernet ports. Not all can be active (initialized) */
/* FIXME Below assumes the number of ports are 4 */
static eth_port_t eth_ports[DPA_ETH_MAX_PORT_NUM];
static eth_port_t *eth0 = &amp;eth_ports[0];
static eth_port_t *eth1 = &amp;eth_ports[1];
static eth_port_t *eth2 = &amp;eth_ports[2];
static eth_port_t *eth3 = &amp;eth_ports[3];

extern void dump_data(uint8_t *data, int len);


/************************ Neta helpers ****************/

static inline void eth_neta_rxq_set_offset(int port, int queue, int offset) {
  uint32_t val;

  val = DPA_REG_READ(NETA_RXQ_CONFIG_REG(port, queue));
  val &amp;= ~NETA_RXQ_PACKET_OFFSET_ALL_MASK;

  val |= NETA_RXQ_PACKET_OFFSET_MASK(offset &gt;&gt; 3);

  DPA_REG_WRITE(NETA_RXQ_CONFIG_REG(port, queue), val);
}

/* Get number of sent descriptors */
static inline uint32_t eth_neta_txq_get_sent_desc_num(uint8_t port, uint8_t txp, uint8_t queue) {
  uint32_t val;
  int      sent;

  val = DPA_REG_READ(NETA_TXQ_STATUS_REG(port, txp, queue));
  sent = (val &amp; NETA_TXQ_SENT_DESC_MASK) &gt;&gt; NETA_TXQ_SENT_DESC_OFFS;

  return sent;
}


/* Decrement sent descriptors counter */
static inline void eth_neta_dec_sent_desc_num(uint8_t port, uint8_t txp, uint8_t queue, uint32_t sent) {
  uint32_t val;

  /* Only 255 TX descriptors can be updated at once */
  while (sent &gt; 0xFF) {
    val = (0xFF &lt;&lt; NETA_TXQ_DEC_SENT_OFFS);
    DPA_REG_WRITE(NETA_TXQ_UPDATE_REG(port, txp, queue), val);
    sent = sent - 0xFF;
  }

  val = (sent &lt;&lt; NETA_TXQ_DEC_SENT_OFFS);
  DPA_REG_WRITE(NETA_TXQ_UPDATE_REG(port, txp, queue), val);
}


/* Get number of pending Tx descriptors */
static inline uint32_t eth_neta_txq_get_pending_desc_num(uint8_t port, uint8_t txp, uint8_t queue)
{
  uint32_t val;

  val = DPA_REG_READ(NETA_TXQ_STATUS_REG(port, txp, queue));

  return (val &amp; NETA_TXQ_PENDING_DESC_MASK) &gt;&gt; NETA_TXQ_PENDING_DESC_OFFS;
}


/* Get number of sent descriptors and descrement. Number of sent descriptors is returned. */
static inline uint32_t eth_neta_txq_update_sent_desc(uint8_t port, uint8_t txp, uint8_t queue) {
  uint32_t sent;

  /* Get number of sent descriptors */
  sent = eth_neta_txq_get_sent_desc_num(port, txp, queue);
  
  /* Decrement sent descriptors counter */
  if (sent) {
      eth_neta_dec_sent_desc_num(port, txp, queue, sent);
  }
  
  return sent;
}

/* Update HW with number of TX descriptors to be sent */
static inline void eth_neta_txq_pendind_desc_add(uint8_t port, uint8_t txp, 
                                                 uint8_t queue, uint8_t pend_desc_num)
{
  uint32_t val;

  /* Only 255 descriptors can be added at once - we don't check it for performance */
  /* Assume caller process TX desriptors in quanta less than 256 */
  val = (pend_desc_num &lt;&lt; NETA_TXQ_ADD_PENDING_OFFS);
  DPA_REG_WRITE(NETA_TXQ_UPDATE_REG(port, txp, queue), val);
}


/* Enable/disable Rx queue */
static inline void eth_neta_rxq_enable(uint8_t port, uint8_t queue, bool enable) {
  uint32_t q_map = (1 &lt;&lt; queue);
  if (!enable) {
      q_map = q_map &lt;&lt; ETH_RXQ_DISABLE_OFFSET;
  }
  
  DPA_REG_WRITE(ETH_RX_QUEUE_COMMAND_REG(port), q_map);
}

/* Enable/disable Tx queue */
static inline void eth_neta_txq_enable(uint8_t port, uint8_t queue, bool enable) {
  uint32_t q_map = (1 &lt;&lt; queue);
  
  if (!enable) {
      q_map = q_map &lt;&lt; ETH_TXQ_DISABLE_OFFSET;
  }

  DPA_REG_WRITE(ETH_TX_QUEUE_COMMAND_REG(port, 0), q_map);
}

/* Get number of RX descriptors occupied by received packets */
static inline int32_t eth_neta_rxq_get_busy_desc_num(int port, int queue) {
  uint32_t val;

  val = DPA_REG_READ(NETA_RXQ_STATUS_REG(port, queue));

  return (val &amp; NETA_RXQ_OCCUPIED_DESC_ALL_MASK) &gt;&gt; NETA_RXQ_OCCUPIED_DESC_OFFS;
}


/* Decrement number of occupied descriptors, increment number of Non-occupied descriptors.
   Both are combined into simngle parameter rx_filled */
static inline void eth_neta_rxq_desc_num_update(uint32_t port, uint32_t queue, uint32_t rx_filled) {
  uint32_t val;

  if (rx_filled &lt;= 0xFF) {
      val = (rx_filled &lt;&lt; NETA_RXQ_DEC_OCCUPIED_OFFS) | (rx_filled &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
      DPA_REG_WRITE(NETA_RXQ_STATUS_UPDATE_REG(port, queue), val);
      return;
  }

  /* Only 255 descriptors can be added at once */
  while (rx_filled &gt; 0) {
    if (rx_filled &lt;= 0xFF) {
      val = (rx_filled &lt;&lt; NETA_RXQ_DEC_OCCUPIED_OFFS) | (rx_filled &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
      rx_filled = 0;
    } else {
      val = (0xFF &lt;&lt; NETA_RXQ_DEC_OCCUPIED_OFFS) | (0xFF &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
      rx_filled -= 0xFF;
    }
    DPA_REG_WRITE(NETA_RXQ_STATUS_UPDATE_REG(port, queue), val);
  }
}

static inline uint32_t eth_neta_get_next_tx_desc_num(uint8_t port, uint8_t txp,
                                                     uint8_t queue) {
   return DPA_REG_READ(NETA_TXQ_INDEX_REG(port, txp, queue));
}

static inline uint32_t eth_neta_get_next_rx_desc_num(uint8_t port, uint8_t queue) {
   return DPA_REG_READ(NETA_RXQ_INDEX_REG(port, queue));
}

/* Disabel HW Buffer Managament */
static inline uint32_t eth_neta_rxq_bm_disable(uint8_t port, uint8_t queue)
{
  uint32_t val;

  val = DPA_REG_READ(NETA_RXQ_CONFIG_REG(port, queue));
  val &amp;= ~NETA_RXQ_HW_BUF_ALLOC_MASK;
  DPA_REG_WRITE(NETA_RXQ_CONFIG_REG(port, queue), val);

  return DPA_OK;
}

/* Set buffer size for Rx descriptors */
static inline uint32_t eth_neta_rxq_set_buff_size(uint8_t port, uint8_t queue,
                                                  uint32_t buff_size) {
  uint32_t val;
  
  val = DPA_REG_READ(NETA_RXQ_SIZE_REG(port, queue));
  val &amp;= ~NETA_RXQ_BUF_SIZE_MASK;
  val |= ((buff_size &gt;&gt; 3) &lt;&lt; NETA_RXQ_BUF_SIZE_OFFS);
  DPA_REG_WRITE(NETA_RXQ_SIZE_REG(port, queue), val);

  return DPA_OK;
}

/* Add number of descriptors are ready to receive new packets */
static inline void eth_neta_rxq_add_non_occup_desc(uint8_t port, uint8_t queue,
                                                   uint32_t rx_desc_num) {
  uint32_t val;

  /* Only 255 descriptors can be added at once */
  while (rx_desc_num &gt; 0xFF) {
    val = (0xFF &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
    DPA_REG_WRITE(NETA_RXQ_STATUS_UPDATE_REG(port, queue), val);
    rx_desc_num = rx_desc_num - 0xFF;
  }
  val = (rx_desc_num &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
  DPA_REG_WRITE(NETA_RXQ_STATUS_UPDATE_REG(port, queue), val);
}


/* Get pointer to next Rx descriptor to be processed by SW */
/* TODO Optimize */
static inline eth_rx_desc_t *eth_rxq_next_desc(eth_ring_t *rxq)
{
  uint32_t curr = rxq-&gt;next;

  if ((rxq-&gt;next += NETA_DESC_ALIGNED_SIZE) &gt; rxq-&gt;last) {
      rxq-&gt;next = rxq-&gt;first;
  }

  return (eth_rx_desc_t *) curr;
}


/* Get pointer to next Tx descriptor to be processed by HW */
static inline eth_tx_desc_t *eth_txq_next_desc(eth_ring_t *txq)
{
  uint32_t curr = txq-&gt;next;
  
  if ((txq-&gt;next += NETA_DESC_ALIGNED_SIZE) &gt; txq-&gt;last) {
      txq-&gt;next = txq-&gt;first;
  }

  return (eth_tx_desc_t *) curr;
}


static inline bool eth_pkt_pool_is_empty(eth_port_t *p) {
  return queue_is_empty(p-&gt;pkt_pool);
}


/* Attach new packet buffer to rx descriptor */
static inline int32_t eth_rx_desc_refill(eth_port_t *p, eth_rx_desc_t *rx_desc) {
  register eth_pkt_t *pkt = (eth_pkt_t*) queue_get(p-&gt;pkt_pool);
  if (pkt == NULL) {
      return DPA_OUT_OF_MEMORY;
  }

  rx_desc-&gt;buf_cookie = (uint32_t) pkt;
  rx_desc-&gt;buf_phys_addr = pkt-&gt;buff_dma;
  pkt-&gt;rx_desc = rx_desc;

  return DPA_OK;
}


/* Invalidate pending Rx descriptors */
static inline void eth_rx_desc_invalidate(eth_ring_t *rxq, uint32_t rx_pending) {
  register uint32_t curr = rxq-&gt;next;
  register uint32_t top = curr + NETA_DESC_ALIGNED_SIZE * (rx_pending - 1);
 
  if (top &lt;= rxq-&gt;last) {
      /* FIXME Found to cause instability under high traffic 
        for (addr = curr; addr &lt;= top; addr += 32) {
          _PLD(addr);
      }*/
  } else {
      /* FIXME Found to cause instability under high traffic 
        for (addr = curr; addr &lt;= rxq-&gt;last; addr += 32) {
          _PLD(addr);
      }*/
      /* FIXME Found to cause instability under high traffic 
       for (addr = rxq-&gt;first; addr &lt;= top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num; addr += 32) {
          _PLD(addr);
      }*/
  }
}

/* Reset port statistics */
void eth_stats_reset(uint8_t port) {
 if (port &lt; DPA_ETH_MAX_PORT_NUM) {
     dpa_memset(&amp;eth_ports[port].stats, 0, sizeof(dpa_eth_stats_t));
 }
}

/* Suspend the Rx queue and deallocate */
static void eth_rxq_shutdown(eth_port_t *p, uint8_t queue) {

  eth_ring_t    *rxq;
  eth_rx_desc_t *rx_desc;
  uint32_t       rx_pending, i;

  if (queue &gt; (ETH_MAX_RXQ_NUM - 1)) {
      ETH_ERROR("Rx ring number out of range, q (%d), port (%d).", queue, p-&gt;port);
      return;
  }

  rxq = p-&gt;rxq[queue];

  /* Not initialized */
  if (rxq == NULL) {
      return;
  }

  if (rxq-&gt;mem != NULL) {
      /* Disable recv, flush pending Rx descriptors */
      eth_neta_rxq_enable(rxq-&gt;port, rxq-&gt;queue, false);
      rx_pending = eth_neta_rxq_get_busy_desc_num(rxq-&gt;port, rxq-&gt;queue);

      while (rx_pending--) {
        rx_desc = eth_rxq_next_desc(rxq);
      }
      eth_neta_rxq_desc_num_update(rxq-&gt;port, rxq-&gt;queue, rx_pending);

      /* Free associated packets */
      for (i = 0; i &lt; rxq-&gt;num; i++) {
          rx_desc = (eth_rx_desc_t*) (rxq-&gt;first + i * NETA_DESC_ALIGNED_SIZE);
          if (rx_desc-&gt;buf_cookie != 0) {
              p-&gt;ops.pkt_free((eth_pkt_t*) rx_desc-&gt;buf_cookie);
          }
      }

      /* Clear Rx descriptors queue starting address and size */
      DPA_REG_WRITE(NETA_RXQ_BASE_ADDR_REG(rxq-&gt;port, rxq-&gt;queue), 0);
      DPA_REG_WRITE(NETA_RXQ_SIZE_REG(rxq-&gt;port, rxq-&gt;queue), 0);

      /* Free the ring */
      DPA_FREE(rxq-&gt;mem);
  }

  DPA_FREE(rxq);
  p-&gt;rxq[queue] = NULL;
}


/* Init Rx ring for queue */
static int32_t eth_rxq_init(eth_port_t *p, uint8_t queue) {
  eth_ring_t    *rxq;
  eth_rx_desc_t *rx_desc;
  int32_t        err, i, next_rx_num;
  uint32_t       dma;

  if (queue &gt; (ETH_MAX_RXQ_NUM - 1)) {
      ETH_ERROR("Rx ring number out of range, q (%d), port (%d).", queue, p-&gt;port);
      return DPA_INTERNAL_ERROR;
  }

  if (p-&gt;rxq[queue] != NULL) {
      ETH_ERROR("Rx ring already allocated, q (%d), port (%d).", queue, p-&gt;port);
      return DPA_INTERNAL_ERROR;
  }

  /* Alloc queue meta-data */
  rxq = DPA_MALLOC(sizeof(eth_ring_t));
  if (rxq == NULL) {
      ETH_ERROR("Can't allocate Rx ring, q (%d), port (%d).", queue, p-&gt;port);
      err = DPA_OUT_OF_MEMORY;
      goto fail;
  }
  dpa_memset(rxq, 0, sizeof(eth_ring_t));

  p-&gt;rxq[queue] = rxq;
  rxq-&gt;port = p-&gt;port;
  rxq-&gt;queue = queue;

   /* Rx descriptors */
  rxq-&gt;mem_size = (p-&gt;rx_desc_num * NETA_DESC_ALIGNED_SIZE) + CPU_D_CACHE_LINE_SIZE;
  rxq-&gt;mem = DPA_MALLOC(rxq-&gt;mem_size);
  if (rxq-&gt;mem == NULL) {
      ETH_ERROR("Can't allocate Rx descriptors, q (%d), port (%d).", queue, p-&gt;port);
      err =  DPA_OUT_OF_MEMORY;
      goto fail;
  }

  /* Reset the ring */
  dpa_memset(rxq-&gt;mem, 0, rxq-&gt;mem_size);
  rxq-&gt;num = p-&gt;rx_desc_num;
  rxq-&gt;first = MEM_ALIGN_UP((uint32_t) rxq-&gt;mem, CPU_D_CACHE_LINE_SIZE);
  rxq-&gt;last = rxq-&gt;first + NETA_DESC_ALIGNED_SIZE * (rxq-&gt;num - 1);

  /* Fix of a glitch resulting in skipping non filled descriptors upon reinit */
  next_rx_num = eth_neta_get_next_rx_desc_num(p-&gt;port, queue);

  rxq-&gt;next = rxq-&gt;first + NETA_DESC_ALIGNED_SIZE * next_rx_num;

  ETH_DBG("Next to use Rx desc (%d), q (%d), port (%d)",
            next_rx_num, queue, p-&gt;port);

  /* Rx descriptors starting address */
  dma = dpa_os_virt_to_phys((uint8_t*)rxq-&gt;first, NETA_DESC_ALIGNED_SIZE * rxq-&gt;num);
  DPA_REG_WRITE(NETA_RXQ_BASE_ADDR_REG(p-&gt;port, queue), dma);
  DPA_REG_WRITE(NETA_RXQ_SIZE_REG(p-&gt;port, queue), rxq-&gt;num);

  eth_neta_rxq_set_offset(p-&gt;port, queue, 0 /* headroom */);

  /* Refill the Rx descriptors with buffers from the pool */
  eth_neta_rxq_bm_disable(p-&gt;port, queue);
  for (i = 0; i &lt; rxq-&gt;num; i++) {
      rx_desc = (eth_rx_desc_t*) (rxq-&gt;first + i * NETA_DESC_ALIGNED_SIZE);
      dpa_memset(rx_desc, 0, sizeof(eth_rx_desc_t));

      err = eth_rx_desc_refill(p, rx_desc);
      if (err) {
          goto fail;
      }
  }
  eth_neta_rxq_set_buff_size(p-&gt;port, queue, p-&gt;pkt_size);
  eth_neta_rxq_add_non_occup_desc(p-&gt;port, queue, rxq-&gt;num);

  /* TODO Move to open() */
  eth_neta_rxq_enable(rxq-&gt;port, rxq-&gt;queue, true);

  return DPA_OK;

fail:
  eth_rxq_shutdown(p, queue);

  return err;
}


/* Complete Tx pending packets and deallocate the queue */
static void eth_txq_shutdown(eth_port_t *p, uint8_t queue) {
  eth_ring_t *txq;
  uint32_t tx_pending, elapsed;

  if (queue &gt; (ETH_MAX_TXQ_NUM - 1)) {
      ETH_ERROR("Tx ring number out of range, q (%d), port (%d).", queue, p-&gt;port);
      return;
  }

  txq = p-&gt;txq[queue];
  
  /* Not init */
  if (txq == NULL) {
      return;
  }

  if (txq-&gt;mem != NULL) {
    /* Complete pending Tx */
    elapsed = 0;
    while (elapsed &lt; ETH_TX_COMPLETE_TIMEOUT &amp;&amp; 
           (tx_pending = eth_neta_txq_get_pending_desc_num(txq-&gt;port, 0 /* txp */, txq-&gt;queue))) {
      elapsed += 1;
      dpa_os_msleep(1);
    }

    if (tx_pending) {
        ETH_ERROR("Exceeded Tx complete timeout (%d) ms, (%d) decsriptors pending in port (%d), queue (%d)).", 
                  ETH_TX_COMPLETE_TIMEOUT, tx_pending, txq-&gt;port, txq-&gt;queue);
    }

    eth_neta_txq_enable(txq-&gt;port, txq-&gt;queue, false);
  
    /* Zero out sent descriptors */
    eth_neta_txq_update_sent_desc(txq-&gt;port, 0 /* txp */, txq-&gt;queue); 
  
    /* Set minimum bandwidth */
    DPA_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(txq-&gt;port, 0 /* txp */, txq-&gt;queue), 0);
  
    /* Reset Tx descriptors queue starting address and size */
    DPA_REG_WRITE(NETA_TXQ_BASE_ADDR_REG(txq-&gt;port, 0 /* txp */, txq-&gt;queue), 0);
    DPA_REG_WRITE(NETA_TXQ_SIZE_REG(txq-&gt;port, 0 /* txp */, txq-&gt;queue), 0);

    /* Free the ring memory */
    DPA_FREE(txq-&gt;mem);
  }

  DPA_FREE(txq);
  p-&gt;txq[queue] = NULL;
}


static uint32_t eth_txq_init(eth_port_t *p, uint8_t queue) {
  eth_ring_t    *txq;
  int32_t        err;
  uint32_t       dma, i;
  eth_tx_desc_t *tx_desc;

  if (queue &gt; (ETH_MAX_TXQ_NUM - 1)) {
      ETH_ERROR("Tx ring number out of range, q (%d), port (%d).", queue, p-&gt;port);
      return DPA_INTERNAL_ERROR;
  }

  if (p-&gt;txq[queue] != NULL) {
      ETH_ERROR("Tx ring already allocated, q (%d), port (%d).", queue, p-&gt;port);
      return DPA_INTERNAL_ERROR;
  }

  /* Alloc queue meta-data */
  txq = DPA_MALLOC(sizeof(eth_ring_t));
  if (txq == NULL) {
      ETH_ERROR("Can't allocate Tx ring, q (%d), port (%d).", queue, p-&gt;port);
      err = DPA_OUT_OF_MEMORY;
      goto fail;
  }

  dpa_memset(txq, 0, sizeof(eth_ring_t));

  p-&gt;txq[queue] = txq;
  txq-&gt;port = p-&gt;port;
  txq-&gt;queue = queue;

   /* Memory for Tx descriptors */
  txq-&gt;mem_size = (p-&gt;tx_desc_num * NETA_DESC_ALIGNED_SIZE) + CPU_D_CACHE_LINE_SIZE;
  txq-&gt;mem = DPA_MALLOC(txq-&gt;mem_size);
  if (txq-&gt;mem == NULL) {
      ETH_ERROR("Can't allocate Tx descriptors, q (%d), port (%d).", queue, p-&gt;port);
      err = DPA_OUT_OF_MEMORY;
      goto fail;
  }

  /* Reset the ring */
  dpa_memset(txq-&gt;mem, 0, txq-&gt;mem_size);
  txq-&gt;num = p-&gt;tx_desc_num;

  txq-&gt;first = MEM_ALIGN_UP((uint32_t) txq-&gt;mem, CPU_D_CACHE_LINE_SIZE);
  txq-&gt;last = txq-&gt;first + NETA_DESC_ALIGNED_SIZE * (txq-&gt;num - 1);
  txq-&gt;next = txq-&gt;first + NETA_DESC_ALIGNED_SIZE * eth_neta_get_next_tx_desc_num(p-&gt;port, 0, queue);

  for (i = 0; i &lt; txq-&gt;num; i++) {
      tx_desc = (eth_tx_desc_t*) (txq-&gt;first + i * NETA_DESC_ALIGNED_SIZE);
      tx_desc-&gt;hw_cmd = p-&gt;hw_cmd;
  }

  ETH_DBG("Next to use Tx desc (%d), q (%d), port (%d)", 
          eth_neta_get_next_tx_desc_num(p-&gt;port, 0, queue), queue, p-&gt;port);

  /* Maximum bandwidth */
  DPA_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(p-&gt;port, 0 /* txp */, queue), NETA_TXQ_TOKEN_CNTR_MAX);

  /* Tx descriptors ring starting address */
  dma = dpa_os_virt_to_phys((uint8_t*)txq-&gt;first, NETA_DESC_ALIGNED_SIZE * txq-&gt;num);
  DPA_REG_WRITE(NETA_TXQ_BASE_ADDR_REG(p-&gt;port, 0 /* txp */, queue), dma);
                
                
  DPA_REG_WRITE(NETA_TXQ_SIZE_REG(p-&gt;port, 0 /* txp */, queue), NETA_TXQ_DESC_NUM_MASK(p-&gt;tx_desc_num));
  
  /* TODO Move to open() */
  eth_neta_txq_enable(txq-&gt;port, txq-&gt;queue, true);

  return DPA_OK;

fail:
  eth_txq_shutdown(p, queue);

  return err;
}


/* Transmit pending packets on all queues */
static inline void eth_tx(eth_port_t *p) {
  register eth_ring_t *txq;
  register uint8_t     queue;
  register uint32_t    sent = 0;
  register uint8_t     port = p-&gt;port;
  register uint32_t    txq_pending = p-&gt;txq_pending;
 
  /* Transmit */
  while (txq_pending) {
    queue = dpa_fls(txq_pending) - 1;

    txq = p-&gt;txq[queue];

    eth_neta_txq_pendind_desc_add(p-&gt;port, 0 /* txp */, queue, txq-&gt;pending);
    txq_pending ^= (1 &lt;&lt; queue);
    txq-&gt;pending = 0;
    sent += eth_neta_txq_update_sent_desc(port, 0 /* txp */, queue);
  }

  p-&gt;txq_pending  = 0;
  
  if (sent) {
      p-&gt;ops.tx_done(port, sent);
  }
}


/* Return Rx descriptors back to HW  */
static inline void eth_rx_desc_return(eth_port_t *p, uint8_t queue) {
  register uint32_t *rx_pending = &amp;p-&gt;rxq[queue]-&gt;pending;

  /* Rx queue must be refilled by now */
  eth_neta_rxq_desc_num_update(p-&gt;port, queue, *rx_pending /* Processed &amp; newly added */);
  *rx_pending = 0;
}


/* Remove all pkts from all ports all queues and return rx decsriptors */
void eth_recv_all(void) {
   uint32_t rx_pending, i, q;
      
   for (i = 0; i &lt; DPA_ETH_MAX_PORT_NUM; i++) {
       for (q = 0; q &lt; ETH_MAX_RXQ_NUM; q++) {
            rx_pending = eth_neta_rxq_get_busy_desc_num(i, q);
            if (rx_pending) {
                printk("&lt;0&gt;ETH: recved %d pkts, port %d, q %d\n", rx_pending, i, q);
            }
            eth_neta_rxq_desc_num_update(i, q, rx_pending);
        }
   }
}


/* Recv packets from queue */
static inline void eth_rx(eth_port_t *p, uint8_t queue) {
  register eth_ring_t    *rxq;
  register eth_rx_desc_t *rx_desc;
  register eth_pkt_t     *pkt;
  register uint8_t       *phy_hdr;
  register uint8_t        port = p-&gt;port;
  uint32_t                rx_pending, rx_status;

  rxq = p-&gt;rxq[queue];

  if ((rxq-&gt;pending = (rx_pending = eth_neta_rxq_get_busy_desc_num(port, queue)))) {

    ETH_DBG("q = %d, rxq-&gt;pending = %d", queue, rxq-&gt;pending);
          
    do {
      /* Next Rx descriptor */
      rx_desc = eth_rxq_next_desc(rxq);
      
      ETH_DBG("rx_desc = 0x%x, status = 0x%x", (uint32_t)rx_desc, rx_desc-&gt;status);
      
      rx_status = rx_desc-&gt;status;

      if (((rx_status &amp; NETA_RX_FL_DESC_MASK) != NETA_RX_FL_DESC_MASK) ||
          (rx_status &amp; NETA_RX_ES_MASK)) {

          ETH_DBG("Error recving pkt, rx_status (0x%x), port (%d)",
                   rx_status, p-&gt;port);
          p-&gt;stats.rx_errors++;
          /* Descriptor stays with the same buffer, no need to refill */
          continue;
      }

      /* Recved pkt meta-data and body */
      pkt = (eth_pkt_t *) rx_desc-&gt;buf_cookie;
      phy_hdr = pkt-&gt;phy_hdr = pkt-&gt;buff;
      pkt-&gt;phy_hdr_dma = pkt-&gt;buff_dma;

      pkt-&gt;status = ETH_PKT_STATUS_NONE;
      pkt-&gt;port = port;
      pkt-&gt;queue = queue;
      pkt-&gt;size = (rx_desc-&gt;data_size - (ETH_CRC_SIZE + ETH_MH_SIZE));
      pkt-&gt;eth_hdr = (dpa_eth_hdr_t*)(phy_hdr + ETH_MH_SIZE);
      pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + NETA_RX_GET_IPHDR_OFFSET(rx_desc));

      ETH_DBG("Recvd pkt size port %d, %d bytes", port, pkt-&gt;size);

      /* Drop if in panic mode */
      if (eth_pkt_pool_is_empty(p)) {
          p-&gt;stats.rx_dropped++;
          continue;
      }

      /* Forward pkt for handling */
      p-&gt;ops.pkt_rx(pkt);
      switch (pkt-&gt;status) {
        case ETH_PKT_STATUS_FWD:
          eth_pkt_tx(pkt);
          break;
        case ETH_PKT_STATUS_LCL:
          /* Must succeed */
          eth_rx_desc_refill(p, rx_desc); 
          break;

        default:
          p-&gt;stats.rx_dropped++;
          continue;
      }

      p-&gt;stats.rx_pkts++;
      p-&gt;stats.rx_bytes += pkt-&gt;size;

    } while (--rx_pending);

    p-&gt;ops.rx_done(port);
  }
}


/* Transmit pending packets on all active ports */
inline void eth_tx_all(void) {

  /* FIXME Make optimized loop for eth0 ... eth3 */
  if (eth0-&gt;init) {
	eth_tx(eth0);
  }

  if (eth1-&gt;init) {
      eth_tx(eth1);
  }

  if (eth2-&gt;init) {
      eth_tx(eth2);
  }

  if (eth3-&gt;init) {
      eth_tx(eth3);
  }
}


/******************* TEMP ****************/

void eth_rx_port(uint8_t port, uint8_t rx_queue) {
  register eth_port_t *p = &amp;eth_ports[port];
  eth_rx(p, rx_queue);
}

void eth_rx_desc_return_all_ports(void) {
    eth_rx_desc_return(&amp;eth_ports[0], 7);
    eth_rx_desc_return(&amp;eth_ports[1], 7);
}

void eth_tx_all_ports(void) {
  eth_tx_all();
}
/***************************************/


/* Receive packets from port active queues */
dpa_irqreturn_t eth_poll(int32_t irq, void *dev) {
  register eth_port_t *p = (eth_port_t *) dev;
  register uint32_t cause, cause_save;

  eth_irq_disable(p-&gt;port);
  cause = DPA_REG_READ(NETA_INTR_NEW_CAUSE_REG(p-&gt;port)) &amp; MV_ETH_RX_INTR_MASK;
  cause_save = cause = (cause &gt;&gt; NETA_CAUSE_RXQ_OCCUP_DESC_OFFS) &amp; ((1 &lt;&lt; ETH_MAX_RXQ_NUM) - 1);
   
  /* TODO Handle link control &amp; tx events */
  /* TODO Add budget */
  
  /* Recv packets */
  while (cause) {
    register uint8_t rx_queue = fls(cause) - 1;
    eth_rx(p, rx_queue);
    cause ^= (1 &lt;&lt; rx_queue);
  }

  /* Transmit pending packets on this port */
  //eth_tx_all();
  eth_tx(p);

  /* Return rx decriptors to GUnit */
  cause = cause_save;
  while (cause) {
    register uint8_t rx_queue = fls(cause) - 1;
    eth_rx_desc_return(p, rx_queue);
    cause ^= (1 &lt;&lt; rx_queue);
  }

  eth_irq_enable(p-&gt;port);

  return DPA_IRQ_HANDLED;
}


/* Schedule packet for transmission */
int32_t eth_pkt_tx(eth_pkt_t* pkt) {
  register eth_port_t    *p = &amp;eth_ports[pkt-&gt;port];
  register uint8_t       queue = pkt-&gt;queue;
  register eth_ring_t    *txq = p-&gt;txq[queue];
  register eth_tx_desc_t *tx_desc;

  tx_desc = eth_txq_next_desc(txq);

  if (tx_desc == NULL) {
     p-&gt;stats.tx_dropped++;

     return DPA_OUT_OF_TXQ_DESC;
  }

  tx_desc-&gt;command = pkt-&gt;cmd;
  /* tx_desc-&gt;data_size does not include MH */
  p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
  tx_desc-&gt;buf_phys_addr = pkt-&gt;phy_hdr_dma;

  txq-&gt;pending++;
  p-&gt;txq_pending |= (1 &lt;&lt; queue);
  /* NOTE pkt need not be returned to the pkt_pool:
   Case A. Fast Path origin: it's already owned by Rx descriptor;
   Case B. Slow Path origin: the owner is DPA Slow Path bridge being responsible
           for pkt dealloc */

  p-&gt;stats.tx_pkts++;
  p-&gt;stats.tx_bytes += pkt-&gt;size;

  return DPA_OK;
}


/* Redeem buffer back to pool.
   Normally, called from a slow path context */
int32_t eth_pkt_put(eth_pkt_t* pkt) {
  eth_port_t *p;

  if (ETH_IS_PKT_FAST_PATH(pkt)) {
      p = &amp;eth_ports[pkt-&gt;pool_id];
      if (p-&gt;init &amp;&amp; p-&gt;pkt_size == pkt-&gt;alloc_size) {
          return queue_put(p-&gt;pkt_pool, pkt);
      }
  }

  ETH_ERROR("Invalid port (%d) state, size (%d) or pool id  (%d) for redeemed pkt.",
             pkt-&gt;pool_id, pkt-&gt;alloc_size, pkt-&gt;pool_id);

  return DPA_INVALID_PARAM;
}


/* Get port statistics */
int32_t eth_stats_get(uint8_t port, dpa_eth_stats_t *stats) {
  if (port &gt; (DPA_ETH_MAX_PORT_NUM - 1)) {
      ETH_DBG("Port (%d) out of range.", port);
      return DPA_INVALID_PARAM;
  }

  dpa_memcpy(stats, &amp;eth_ports[port].stats, sizeof(dpa_eth_stats_t));

  return DPA_OK;
}


/* Create packet buffers pool */
static inline int32_t eth_pkt_pool_create(eth_port_t *p) {
  uint32_t i;
  
  if (p-&gt;pkt_pool != NULL) {
      ETH_ERROR("Packet pool already created, port (%d).", p-&gt;port);
      return DPA_INTERNAL_ERROR;
  }

  p-&gt;pkt_pool = queue_create(p-&gt;pkt_pool_size);
  if (p-&gt;pkt_pool == NULL) {
      ETH_ERROR("Out of memory allocating packet pool, port (%d).", p-&gt;port);
      return DPA_OUT_OF_MEMORY;
  }
  
  for (i = 0; i &lt; p-&gt;pkt_pool_size; i++) {
  
       /* Custom alloc */
       eth_pkt_t *pkt = p-&gt;ops.pkt_alloc(p-&gt;pkt_size);
       if (pkt == NULL) {
           ETH_ERROR("Out of memory allocating packet pool buffers, port (%d).", p-&gt;port);
           return DPA_OUT_OF_MEMORY;
       }

       /* Consistency */
      if (pkt-&gt;buff_dma == 0 || pkt-&gt;buff == NULL || pkt-&gt;alloc_size &lt; p-&gt;pkt_size) {
          ETH_ERROR("Invalid allocated packet returned, port (%d).", p-&gt;port);
          p-&gt;ops.pkt_free(pkt);
          return DPA_INTERNAL_ERROR;
      }

      /* Add pkt to pool */
      pkt-&gt;port = pkt-&gt;pool_id = p-&gt;port;
      if (!queue_put(p-&gt;pkt_pool, pkt)) { /* Theoretical, can't fail */
          ETH_ERROR("Can't add buffer to packet pool, port (%d).", p-&gt;port);
          p-&gt;ops.pkt_free(pkt);
          return DPA_INTERNAL_ERROR;
      }
  }

  return DPA_OK;
}

/* Destroy packet buffers pool */
static inline int32_t eth_pkt_pool_destroy(eth_port_t *p) {
  eth_pkt_t *pkt;
  
  if (p-&gt;pkt_pool == NULL) {
      ETH_ERROR("Packet pool already NULL, port (%d).", p-&gt;port);
      return DPA_INTERNAL_ERROR;
  }

  while ((pkt = (eth_pkt_t *)queue_get(p-&gt;pkt_pool)) != NULL) {
      p-&gt;ops.pkt_free(pkt);
  }

  queue_destroy(p-&gt;pkt_pool);
  p-&gt;pkt_pool = NULL;

  return DPA_OK;
}

/* Status of a port packet pool */
bool eth_pkt_pool_is_full(uint8_t port) {
  bool rc = true;

  if (ETH_PORT_VALID(port)) {
      eth_port_t *p = &amp;eth_ports[port];
      if (p-&gt;init) {
          rc = queue_is_full(p-&gt;pkt_pool);
      }
  }

  return rc;
}

/* Init Ethernet port. Allocate Rx &amp; Tx rings and packet buffer pool */
int32_t eth_init(eth_config_t *cfg) {
  eth_port_t *p;
  uint32_t err, queue;

  ETH_DBG("Port (%d) init started.", cfg-&gt;port);
  
  /* Validate params */
  if (cfg-&gt;port &gt; (DPA_ETH_MAX_PORT_NUM - 1)) {
      ETH_ERROR("Port (%d) out of range.", cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }
  
  p = &amp;eth_ports[cfg-&gt;port];

  if (p-&gt;init) {
      ETH_DBG("Port (%d) already initialized.", cfg-&gt;port);
      goto ok;
  }

  if (cfg-&gt;rxq_num &gt; ETH_MAX_RXQ_NUM) {
      ETH_ERROR("Rx queue number invalid (%d), port (%d).", cfg-&gt;rxq_num, cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  if (cfg-&gt;txq_num &gt; ETH_MAX_TXQ_NUM) {
      ETH_ERROR("Tx queue number invalid (%d), port (%d).", cfg-&gt;txq_num, cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  if (cfg-&gt;rx_desc_num &gt; ETH_MAX_RX_DESC_NUM) {
      ETH_ERROR("Rx descriptors number invalid(%d), port (%d).",
                cfg-&gt;rx_desc_num, cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  if (cfg-&gt;tx_desc_num &gt; ETH_MAX_TX_DESC_NUM) {
      ETH_ERROR("Tx descriptors number invalid (%d), port (%d).",
                cfg-&gt;tx_desc_num, cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  if (cfg-&gt;pkt_pool_size &gt; ETH_MAX_PKT_POOL_SIZE ||
      cfg-&gt;pkt_pool_size &lt; cfg-&gt;rx_desc_num) {
      ETH_ERROR("Packet pool size invalid (%d), port (%d).",
                cfg-&gt;pkt_pool_size, cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  if (cfg-&gt;mtu &gt; ETH_MAX_MTU) {
      ETH_ERROR("MTU (%d) invalid, port (%d).", cfg-&gt;mtu, cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  if (cfg-&gt;ops.pkt_alloc == NULL || cfg-&gt;ops.pkt_free == NULL ||
      cfg-&gt;ops.pkt_rx == NULL || cfg-&gt;ops.rx_done == NULL ||
      cfg-&gt;ops.tx_done == NULL) {
      ETH_ERROR("NULL callback(s), port (%d).", cfg-&gt;port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  p-&gt;port = cfg-&gt;port;
  p-&gt;rxq_num = cfg-&gt;rxq_num;
  p-&gt;txq_num = cfg-&gt;txq_num;
  p-&gt;rx_desc_num = cfg-&gt;rx_desc_num;
  p-&gt;tx_desc_num = cfg-&gt;tx_desc_num;
  p-&gt;txq_pending = 0;
  p-&gt;mtu = cfg-&gt;mtu;
  p-&gt;pkt_size = ETH_PKT_SIZE(cfg-&gt;mtu);
  p-&gt;pkt_pool_size = cfg-&gt;pkt_pool_size;
  p-&gt;hw_cmd = 0;
  p-&gt;ops = cfg-&gt;ops;
  p-&gt;irq = NET_TH_RXTX_IRQ_NUM(cfg-&gt;port);
  
  ETH_DBG("Using IRQ %d for port %d", p-&gt;irq, cfg-&gt;port);

  /* Register IRQ handler */
  eth_irq_disable(cfg-&gt;port);
  err = dpa_os_irq_alloc(p-&gt;irq, eth_poll, "dpa_eth", p);
  if (err) {
      goto fail;
  }

  /* Create Rx packet pool */
  err = eth_pkt_pool_create(p);
  if (err) {
      goto fail;
  }

  /* Alloc Rx rings */
  for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {  
      err = eth_rxq_init(p, queue);
      if (err) {
          goto fail;
      }
  }

  /* Alloc Tx rings */
  for (queue = 0; queue &lt; p-&gt;txq_num; queue++) {
      err = eth_txq_init(p, queue);
      if (err) {
          goto fail;
      }
  }

  /* Stats */
  eth_stats_reset(p-&gt;port);

  p-&gt;init = true;

ok:
  ETH_DBG("Eth port %d init Ok.", cfg-&gt;port);

  return DPA_OK;

fail:
  eth_shutdown(cfg-&gt;port);

  return err;
}


/* Uninitialize port. Deallocate Rx &amp; Tx rings and packet buffer pool */
int32_t eth_shutdown(uint8_t port) {
  
  eth_port_t *p;
  uint32_t err, queue;
  bool is_init;
  
  if (port &gt; (DPA_ETH_MAX_PORT_NUM - 1)) {
      ETH_ERROR("Port (%d) out of range.", port);
      err = DPA_INVALID_PARAM;
      goto fail;
  }

  p = &amp;eth_ports[port];

  if (p-&gt;init) {
      eth_irq_disable(port);

      /* Release IRQ handler */
      dpa_os_irq_free(p-&gt;irq, p);

      ETH_DBG("Port (%d) shutdown started.", port);
  }

  /* Dealloc Tx rings. Must be done prior to Tx rings as some Tx still pending */
  for (queue = 0; queue &lt; p-&gt;txq_num; queue++) {
       eth_txq_shutdown(p, queue);
  }

  /* Dealloc Rx rings */
  for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
       eth_rxq_shutdown(p, queue);
  }


  /* Destroy Rx packet pool */
  if (p-&gt;pkt_pool != NULL) {
      eth_pkt_pool_destroy(p);
  }

  is_init = p-&gt;init;
  p-&gt;init = false;
  
  if (is_init) {
      ETH_DBG("Port (%d) shutdown Ok.", port);
  }

  return DPA_OK;

fail:
  return err;
}



/* Unmask Rx interrupts */
void eth_irq_enable(uint8_t port) {
  DPA_REG_WRITE(NETA_INTR_NEW_MASK_REG(port), MV_ETH_RX_INTR_MASK);

  ETH_DBG("Port (%d) interrupts enabled", port);
}

/* Mask Rx interrupts */
void eth_irq_disable(uint8_t port) {
  DPA_REG_WRITE(NETA_INTR_NEW_MASK_REG(port), 0);
    
  ETH_DBG("Port (%d) interrupts disabled", port);
}



</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/06/18" Time="07:58:36000">
<Copy StartSeek="0" EndSeek="22889"/>
<Insert>  for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
       eth_rx(p, queue);
  }
</Insert>
<Copy StartSeek="22963" EndSeek="31256"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/06/25" Time="11:06:37000">
<Copy StartSeek="0" EndSeek="22778"/>
<Insert>  uint8_t     queue;
</Insert>
<Copy StartSeek="22803" EndSeek="22942"/>
<Insert>       eth_rx(p, 7);
</Insert>
<Copy StartSeek="22967" EndSeek="31264"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/06/25" Time="11:07:16000">
<Copy StartSeek="0" EndSeek="3923"/>
<Copy StartSeek="3950" EndSeek="31291"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/06/25" Time="11:31:1000">
<Copy StartSeek="0" EndSeek="3923"/>
<Insert>#define ETH_MAX_PORT_NUM 1
</Insert>
<Copy StartSeek="3950" EndSeek="31291"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/06/25" Time="11:31:4000">
<Copy StartSeek="0" EndSeek="3923"/>
<Insert>#define ETH_MAX_PORT_NUM 2
</Insert>
<Copy StartSeek="3923" EndSeek="22778"/>
<Insert>  uint8_t     queue = 7;
</Insert>
<Copy StartSeek="22799" EndSeek="22889"/>
<Insert>//for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
</Insert>
<Copy StartSeek="22938" EndSeek="22963"/>
<Insert>//}
</Insert>
<Copy StartSeek="22967" EndSeek="31260"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/06/25" Time="11:32:52000">
<Copy StartSeek="0" EndSeek="1468"/>
<Insert>#define ETH_ERROR(format, args...) DPA_LOG_ERROR(format, ##args)
#define ETH_INFO(format, args...) DPA_LOG_INFO(format, ##args)
</Insert>
<Copy StartSeek="1654" EndSeek="1655"/>
<Insert>#define ETH_DEBUG
</Insert>
<Copy StartSeek="1675" EndSeek="1692"/>
<Insert>#define ETH_DBG(format, args...)  DPA_LOG_DBG(format, ##args)
</Insert>
<Copy StartSeek="1787" EndSeek="2052"/>
<Insert>#define ETH_MAX_RX_DESC_NUM 512
</Insert>
<Copy StartSeek="2085" EndSeek="2135"/>
<Insert>#define ETH_MAX_TX_DESC_NUM 512
</Insert>
<Copy StartSeek="2168" EndSeek="2709"/>
<Insert>#define ETH_MAX_PKT_POOL_SIZE (ETH_MAX_RX_DESC_NUM + 128)
</Insert>
<Copy StartSeek="2786" EndSeek="2787"/>
<Insert>
</Insert>
<Copy StartSeek="2904" EndSeek="3196"/>
<Insert>struct eth_port
{
</Insert>
<Copy StartSeek="3214" EndSeek="3449"/>
<Insert>  uint32_t       tx_cmd; /* Tx command spec for Gunit */
</Insert>
<Copy StartSeek="3551" EndSeek="4279"/>
<Copy StartSeek="4329" EndSeek="6761"/>
<Insert>
</Insert>
<Copy StartSeek="6761" EndSeek="6907"/>
<Insert>  
</Insert>
<Copy StartSeek="6907" EndSeek="6975"/>
<Insert>
</Insert>
<Copy StartSeek="6978" EndSeek="10558"/>
<Insert>  
</Insert>
<Copy StartSeek="10559" EndSeek="10980"/>
<Insert>
static inline int32_t eth_refill_rx_desc(eth_port_t *p, eth_rx_desc_t *rx_desc) {
</Insert>
<Copy StartSeek="11110" EndSeek="11187"/>
<Insert>      ETH_DBG("Can't refill Rx descritor, port's (%d) pool empty.", p-&gt;port);
</Insert>
<Copy StartSeek="11266" EndSeek="11386"/>
<Insert>  
</Insert>
<Copy StartSeek="11413" EndSeek="11927"/>
<Insert>  if (queue != 7) {
      //ETH_ERROR("Skipping ring (%d), port (%d).", queue, p-&gt;port);
      return;
  }

</Insert>
<Copy StartSeek="11927" EndSeek="11950"/>
<Insert>  
</Insert>
<Copy StartSeek="11951" EndSeek="12014"/>
<Insert>   
</Insert>
<Copy StartSeek="12015" EndSeek="12227"/>
<Insert>    
</Insert>
<Copy StartSeek="12228" EndSeek="12381"/>
<Insert>      
      /* Redeem associated packets back to the pool */
</Insert>
<Copy StartSeek="12418" EndSeek="12579"/>
<Insert>              queue_put(p-&gt;pkt_pool, (void*) rx_desc-&gt;buf_cookie);
</Insert>
<Copy StartSeek="12644" EndSeek="12664"/>
<Insert>    
</Insert>
<Copy StartSeek="12665" EndSeek="12867"/>
<Insert>    
</Insert>
<Copy StartSeek="12868" EndSeek="13107"/>
<Insert>  int32_t        err, i;
</Insert>
<Copy StartSeek="13145" EndSeek="13328"/>
<Insert>  
  if (queue != 7) {
      //ETH_ERROR("Skipping ring (%d), port (%d).", queue, p-&gt;port);
      return DPA_OK;
  }

</Insert>
<Copy StartSeek="13329" EndSeek="14364"/>
<Insert>  rxq-&gt;next = rxq-&gt;first + NETA_DESC_ALIGNED_SIZE * eth_neta_get_next_rx_desc_num(p-&gt;port, queue);

</Insert>
<Copy StartSeek="14622" EndSeek="14679"/>
<Insert>           eth_neta_get_next_rx_desc_num(p-&gt;port, queue), queue, p-&gt;port);
</Insert>
<Copy StartSeek="14721" EndSeek="15304"/>
<Insert>      err = eth_refill_rx_desc(p, rx_desc);
</Insert>
<Copy StartSeek="15348" EndSeek="15365"/>
<Copy StartSeek="15451" EndSeek="15759"/>
<Insert>

</Insert>
<Copy StartSeek="15759" EndSeek="15930"/>
<Insert>  
</Insert>
<Copy StartSeek="15931" EndSeek="16073"/>
<Insert>  if (queue != 7) {
      //ETH_ERROR("Skipping ring (%d), port (%d).", queue, p-&gt;port);
      return;
  }

</Insert>
<Copy StartSeek="16073" EndSeek="16099"/>
<Insert>  ETH_ERROR("Shutting down port (%d), Tx Q (%d)", txq-&gt;port, txq-&gt;queue);

</Insert>
<Copy StartSeek="16099" EndSeek="17606"/>
<Insert>  
</Insert>
<Copy StartSeek="17607" EndSeek="17768"/>
<Insert>  if (queue != 7) {
      return DPA_OK;
  }

</Insert>
<Copy StartSeek="17768" EndSeek="19908"/>
<Insert>/* Transmit pending packets on all queues, refill Rx descriptors */
</Insert>
<Copy StartSeek="19953" EndSeek="19999"/>
<Insert>  eth_ring_t *txq, *rxq;
</Insert>
<Copy StartSeek="20018" EndSeek="20130"/>
<Insert>       if (queue != 7)
           continue;
  
</Insert>
<Copy StartSeek="20130" EndSeek="20271"/>
<Copy StartSeek="20354" EndSeek="20468"/>
<Insert>  }

  /* Return Rx descriptors back to HW. They all must be refilled by now */
  for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
       if (queue != 7)
           continue;

</Insert>
<Copy StartSeek="20785" EndSeek="21039"/>
<Insert> 
  return sent;
}


</Insert>
<Copy StartSeek="21554" EndSeek="21718"/>
<Insert>  uint32_t       rx_pending, tx_pending, rx_status, rx_bytes;
</Insert>
<Copy StartSeek="21781" EndSeek="21782"/>
<Insert>  if (queue != 7)
      return DPA_OK;

</Insert>
<Copy StartSeek="21782" EndSeek="21805"/>
<Insert>  
</Insert>
<Copy StartSeek="21806" EndSeek="21895"/>
<Insert>    tx_pending = eth_neta_txq_get_pending_desc_num(p-&gt;port, 0 /* txp */, queue);
    printk("&lt;0&gt; rx_pending=%d, tx_pending=%d", rx_pending, tx_pending);
</Insert>
<Copy StartSeek="22067" EndSeek="22183"/>
<Insert>  
</Insert>
<Copy StartSeek="22279" EndSeek="22495"/>
<Insert>  
</Insert>
<Copy StartSeek="22496" EndSeek="22634"/>
<Insert>          ETH_DBG("Error recving pkt, rx_status = 0x%x", rx_status);
</Insert>
<Copy StartSeek="22743" EndSeek="22847"/>
<Insert>      /* No need to invalidate pkt header: clean + invalidate done earlier */
</Insert>
<Copy StartSeek="22847" EndSeek="23097"/>
<Insert>      rx_pkt-&gt;offset = ETH_MH_SIZE;
      
      /*rx_pkt-&gt;port = 1; 
      rx_pkt-&gt;queue = 7;
      eth_xmit_pkt(rx_pkt);*/
  
</Insert>
<Copy StartSeek="23497" EndSeek="23541"/>
<Insert>      p-&gt;ops.recv_pkt(rx_pkt);
  
</Insert>
<Copy StartSeek="24162" EndSeek="24309"/>
<Insert>
/* Receive packets from port active queues */
int32_t eth_poll(uint8_t port) {
  eth_port_t *p = &amp;eth_ports[port];
  uint8_t     queue;

  /* Recv packets */
  /* TODO Rewrite for pending Rx queues only, based on IRQ cause */
  for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
       eth_rx(p, queue);
  }
  
</Insert>
<Copy StartSeek="24439" EndSeek="24513"/>
<Insert>  /* Transmit outgoing packets on all active ports */
</Insert>
<Copy StartSeek="24551" EndSeek="24616"/>
<Insert>
</Insert>
<Copy StartSeek="25275" EndSeek="25335"/>
<Insert>int32_t eth_xmit_pkt(eth_pkt_t* pkt) {
</Insert>
<Copy StartSeek="25372" EndSeek="25656"/>
<Insert>  tx_desc-&gt;command = p-&gt;tx_cmd; /* TODO Probably can do only once */
</Insert>
<Copy StartSeek="25688" EndSeek="25765"/>
<Insert>  tx_desc-&gt;hw_cmd = 0;
</Insert>
<Copy StartSeek="25843" EndSeek="26003"/>
<Insert>  dcache_l1_l2_clean_invalidate_double_line((uint32_t)pkt-&gt;buff /* TODO ???? + pkt-&gt;offset */);
</Insert>
<Copy StartSeek="26108" EndSeek="26406"/>
<Insert>   Normally, called from a Slow Path context */
int32_t eth_put_pkt(eth_pkt_t* pkt) {
  eth_port_t *p = &amp;eth_ports[pkt-&gt;pool_id];
  
  /* TODO Add validation for port and pkt size = match existing pool size */
  return queue_put(p-&gt;pkt_pool, pkt);
}


/* Notify of a buffer lease to refill Rx descriptor.
   Normally called from Fast Path context */
int32_t eth_lease_pkt(eth_pkt_t* pkt) {
  eth_port_t *p = &amp;eth_ports[pkt-&gt;pool_id];
</Insert>
<Copy StartSeek="26839" EndSeek="26840"/>
<Insert>  eth_refill_rx_desc(p, pkt-&gt;rx_desc);

  return DPA_OK;
}

</Insert>
<Copy StartSeek="27120" EndSeek="27327"/>
<Insert>  
</Insert>
<Copy StartSeek="27328" EndSeek="27394"/>
<Insert>  
</Insert>
<Copy StartSeek="27395" EndSeek="27927"/>
<Insert>       eth_pkt_t *pkt = p-&gt;ops.alloc_pkt(p-&gt;pkt_size);
</Insert>
<Copy StartSeek="27982" EndSeek="28337"/>
<Insert>          p-&gt;ops.free_pkt(pkt);
</Insert>
<Copy StartSeek="28369" EndSeek="28415"/>
<Insert>      /* Add to pool */
</Insert>
<Copy StartSeek="28611" EndSeek="28760"/>
<Insert>          p-&gt;ops.free_pkt(pkt);
</Insert>
<Copy StartSeek="28792" EndSeek="28841"/>
<Insert>  
</Insert>
<Copy StartSeek="28842" EndSeek="29174"/>
<Insert>         p-&gt;ops.free_pkt(pkt);
</Insert>
<Copy StartSeek="29202" EndSeek="29280"/>
<Insert>

</Insert>
<Copy StartSeek="29539" EndSeek="29649"/>
<Insert>  eth_port_t    *p;
  uint32_t       err, queue;
</Insert>
<Copy StartSeek="29689" EndSeek="29739"/>
<Insert>
</Insert>
<Copy StartSeek="29742" EndSeek="30404"/>
<Insert>  
</Insert>
<Copy StartSeek="30405" EndSeek="30829"/>
<Insert>  
</Insert>
<Copy StartSeek="30830" EndSeek="31090"/>
<Insert> 
</Insert>
<Copy StartSeek="31091" EndSeek="31248"/>
<Insert>  if (cfg-&gt;ops.alloc_pkt == NULL || cfg-&gt;ops.free_pkt == NULL ||
      cfg-&gt;ops.recv_pkt == NULL) {
</Insert>
<Copy StartSeek="31347" EndSeek="31717"/>
<Insert>  p-&gt;tx_cmd =  NETA_TX_FLZ_DESC_MASK | NETA_TX_L4_CSUM_NOT |
      NETA_TX_PKT_OFFSET_MASK(ETH_MH_SIZE);
</Insert>
<Copy StartSeek="31734" EndSeek="31755"/>
<Insert>  
</Insert>
<Copy StartSeek="31923" EndSeek="32043"/>
<Insert>  dpa_memset(p-&gt;rxq, 0, sizeof(p-&gt;rxq));
</Insert>
<Copy StartSeek="32043" EndSeek="32202"/>
<Insert>  dpa_memset(p-&gt;txq, 0, sizeof(p-&gt;txq));
</Insert>
<Copy StartSeek="32202" EndSeek="32375"/>
<Insert>  /* Active ports */
</Insert>
<Copy StartSeek="32401" EndSeek="32466"/>
<Insert>  
</Insert>
<Copy StartSeek="32467" EndSeek="32718"/>
<Insert>  uint32_t    err, queue;
  bool        is_init;
</Insert>
<Copy StartSeek="32760" EndSeek="32929"/>
<Insert>  is_init = p-&gt;init;
  
  if (is_init) {
</Insert>
<Copy StartSeek="33072" EndSeek="33129"/>
<Copy StartSeek="33300" EndSeek="33414"/>
<Insert>  /* Dealloc Tx rings */
  for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
       eth_txq_shutdown(p, queue);
  }

  /* Destroy Rx packet pool. NOTE: Packet buffers on lease, eg those in use 
     by Slow Path, must be released by their respective leasers */
</Insert>
<Copy StartSeek="33446" EndSeek="33511"/>
<Copy StartSeek="33532" EndSeek="33611"/>
<Insert>  for (port = 0; port &lt; ETH_MAX_PORT_NUM; port++) {
      p = &amp;eth_ports[port];
</Insert>
<Copy StartSeek="33679" EndSeek="33888"/>
<Insert>/* Refill descriptors, enable IRQ handling */
int32_t eth_open(uint8_t port) {
  return DPA_OK;
</Insert>
<Copy StartSeek="34016" EndSeek="34019"/>
<Copy StartSeek="34134" EndSeek="34135"/>
<Insert>/* Disable IRQ handling */
int32_t eth_close(uint8_t port) {
  return DPA_OK;
}

</Insert>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/08/20" Time="12:17:45000">
<Copy StartSeek="0" EndSeek="576"/>
<Insert>#include &lt;linux/kernel.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/version.h&gt;
#include &lt;linux/string.h&gt;
#include &lt;linux/time.h&gt;
#include &lt;linux/slab.h&gt;
#include &lt;linux/byteorder/generic.h&gt;
#include &lt;asm/div64.h&gt;
#include &lt;asm/bitops.h&gt;
#include &lt;linux/net.h&gt;
#include &lt;net/sock.h&gt;
#include &lt;net/inet_sock.h&gt;
#include &lt;net/udp.h&gt;
#include &lt;net/route.h&gt;
#include &lt;linux/tcp.h&gt;
#include &lt;linux/udp.h&gt;
#include &lt;linux/ip.h&gt;
#include &lt;linux/in.h&gt;
#include &lt;asm/uaccess.h&gt;
#include &lt;linux/file.h&gt;
#include &lt;linux/socket.h&gt;
#include &lt;linux/smp_lock.h&gt;
#include &lt;linux/slab.h&gt;
#include &lt;linux/mutex.h&gt;
#include &lt;linux/workqueue.h&gt;
#include &lt;linux/inetdevice.h&gt;
#include &lt;linux/skbuff.h&gt;
#include &lt;asm/unaligned.h&gt;

</Insert>
<Copy StartSeek="637" EndSeek="821"/>
<Copy StartSeek="845" EndSeek="1032"/>
<Insert>//#define ETH_DEBUG
</Insert>
<Copy StartSeek="1032" EndSeek="1682"/>
<Insert>    MEM_ALIGN_UP((mtu) + 2 + 4 + ETH_HLEN + 4, CPU_D_CACHE_LINE_SIZE)
</Insert>
<Copy StartSeek="1763" EndSeek="2272"/>
<Copy StartSeek="2308" EndSeek="3487"/>
<Copy StartSeek="3564" EndSeek="3726"/>
<Insert>static eth_port_t *active_ports;

</Insert>
<Copy StartSeek="3808" EndSeek="3809"/>
<Copy StartSeek="3810" EndSeek="7146"/>
<Insert>/* Decrement number of occupied descriptors, increment number of Non-occupied descriptors */
static inline void eth_neta_rxq_desc_num_update(uint32_t port, uint32_t queue, 
                                         uint32_t rx_done, uint32_t rx_filled) {
</Insert>
<Copy StartSeek="7395" EndSeek="7412"/>
<Insert>  if ((rx_done &lt;= 0xFF) &amp;&amp; (rx_filled &lt;= 0xFF)) {
      val = (rx_done &lt;&lt; NETA_RXQ_DEC_OCCUPIED_OFFS) | (rx_filled &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
</Insert>
<Copy StartSeek="7542" EndSeek="7678"/>
<Insert>  while ((rx_done &gt; 0) || (rx_filled &gt; 0)) {
    if (rx_done &lt;= 0xFF) {
      val = (rx_done &lt;&lt; NETA_RXQ_DEC_OCCUPIED_OFFS);
      rx_done = 0;
    } else {
      val = (0xFF &lt;&lt; NETA_RXQ_DEC_OCCUPIED_OFFS);
      rx_done -= 0xFF;
    }
</Insert>
<Copy StartSeek="7704" EndSeek="7733"/>
<Insert>      val |= (rx_filled &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
</Insert>
<Copy StartSeek="7836" EndSeek="7870"/>
<Insert>      val |= (0xFF &lt;&lt; NETA_RXQ_ADD_NON_OCCUPIED_OFFS);
</Insert>
<Copy StartSeek="7963" EndSeek="10485"/>
<Insert>  eth_pkt_t *pkt = (eth_pkt_t*) queue_get(p-&gt;pkt_pool);
</Insert>
<Copy StartSeek="10550" EndSeek="10571"/>
<Insert>      ETH_DBG("Can't refill Rx descriptor, port's (%d) pool empty.", p-&gt;port);
</Insert>
<Copy StartSeek="10652" EndSeek="10874"/>
<Copy StartSeek="11682" EndSeek="12501"/>
<Insert>      eth_neta_rxq_desc_num_update(rxq-&gt;port, rxq-&gt;queue, rx_pending, 0);
</Insert>
<Copy StartSeek="12572" EndSeek="14700"/>
<Insert>  if (next_rx_num) {
      next_rx_num--;
  }

</Insert>
<Copy StartSeek="14701" EndSeek="15510"/>
<Insert>          ETH_ERROR("Can't refill Rx descriptors, port's (%d) pool empty.", p-&gt;port);
</Insert>
<Copy StartSeek="15510" EndSeek="18979"/>
<Insert>  ETH_DBG("Next to use Tx desc (%d), q (%d), port (%d))", 
</Insert>
<Copy StartSeek="19037" EndSeek="19959"/>
<Insert>  
}
</Insert>
<Copy StartSeek="19962" EndSeek="19963"/>
<Insert>
</Insert>
<Copy StartSeek="19963" EndSeek="20008"/>
<Insert>static inline int32_t eth_tx(eth_port_t *p) {
  eth_ring_t *txq;
  uint8_t     queue;
  uint32_t    sent = 0;

</Insert>
<Copy StartSeek="20236" EndSeek="20253"/>
<Insert>  for (queue = 0; queue &lt; p-&gt;txq_num; queue++) {
       txq = p-&gt;txq[queue];
</Insert>
<Copy StartSeek="20315" EndSeek="20316"/>
<Insert>       if (txq-&gt;pending) {
           eth_neta_txq_pendind_desc_add(p-&gt;port, 0 /* txp */, queue, txq-&gt;pending);
           ETH_DBG("@@@@@@@ FINAL XMIT: port %d, %d pkts", p-&gt;port, txq-&gt;pending);
           txq-&gt;pending = 0;
       }

       sent += eth_neta_txq_update_sent_desc(p-&gt;port, 0 /* txp */, queue);
       if (sent) {
           p-&gt;ops.tx_done(p-&gt;port, sent);
       }
  }

  return sent;
</Insert>
<Copy StartSeek="20627" EndSeek="20630"/>
<Copy StartSeek="20884" EndSeek="20924"/>
<Insert>static inline void eth_rx_desc_return(eth_port_t *p) {
  eth_ring_t *rxq;
  uint8_t     queue;

 /* They all must be refilled by now */
 for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
       rxq = p-&gt;rxq[queue];
       if (rxq-&gt;pending) {
           eth_neta_rxq_desc_num_update(p-&gt;port, queue, rxq-&gt;pending /* Processed */,
                                        rxq-&gt;pending /* New added */);
           rxq-&gt;pending = 0;
       }
  }
}


</Insert>
<Copy StartSeek="21209" EndSeek="21629"/>
<Insert>            eth_neta_rxq_desc_num_update(i, q, rx_pending, rx_pending);
</Insert>
<Copy StartSeek="21689" EndSeek="21738"/>
<Insert>static inline int32_t eth_rx(eth_port_t *p, uint8_t queue) {
  eth_ring_t    *rxq;
  eth_rx_desc_t *rx_desc;
  eth_pkt_t     *rx_pkt;
  uint32_t       rx_pending, rx_status, rx_bytes, rx_desc_num;

</Insert>
<Copy StartSeek="21992" EndSeek="22015"/>
<Insert>
</Insert>
<Copy StartSeek="22018" EndSeek="22107"/>
<Copy StartSeek="22197" EndSeek="22411"/>
<Copy StartSeek="22418" EndSeek="22492"/>
<Insert>
      rx_desc_num = ( ((uint32_t) rx_desc) - ((uint32_t)rxq-&gt;first) )/ NETA_DESC_ALIGNED_SIZE;
      dcache_l1_l2_invalidate_single_line((uint32_t)rx_desc);
  
      /* Read from Rx descriptor */
      rx_status = rx_desc-&gt;status; 
  
      /* Recved packet */
      rx_pkt = (eth_pkt_t *) rx_desc-&gt;buf_cookie;

      /* Validate */
</Insert>
<Copy StartSeek="22528" EndSeek="22754"/>
<Copy StartSeek="22786" EndSeek="22887"/>
<Insert>  
      rx_pkt-&gt;port = p-&gt;port; /* TODO Probably no need, is filled during refill */
      rx_pkt-&gt;queue = queue; /* TODO Probably no need, is filled during refill */
</Insert>
<Copy StartSeek="23258" EndSeek="23422"/>
<Insert>      rx_pkt-&gt;eth_hdr = (dpa_eth_hdr_t*)(rx_pkt-&gt;buff + rx_pkt-&gt;offset);
      rx_pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (rx_pkt-&gt;buff + NETA_RX_GET_IPHDR_OFFSET(rx_desc));
</Insert>
<Copy StartSeek="23573" EndSeek="23574"/>
<Insert>      dcache_l1_l2_invalidate_double_line((uint32_t)(rx_pkt-&gt;buff));
      dcache_l1_l2_invalidate_multi_line((uint32_t)rx_pkt-&gt;buff, rx_pkt-&gt;size);
      
      /* Forward the packet for handling */

</Insert>
<Copy StartSeek="23574" EndSeek="23580"/>
<Copy StartSeek="23755" EndSeek="24013"/>
<Insert>      /* No need to invalidate pkt header: clean + invalidate done earlier */
</Insert>
<Copy StartSeek="24051" EndSeek="24080"/>
<Insert>
      /* TODO [redesign] probably here it is a good place to check some return status
      ops.pkt_rx(..) and if the pkt is indicated as 'leased' do eth_rx_desc_refill
      of rx_desc here, instead of having DPA do it via eth_lease_pkt API */
  
      /* Update stats */
</Insert>
<Copy StartSeek="24430" EndSeek="24493"/>
<Copy StartSeek="24494" EndSeek="24526"/>
<Insert>
  return rxq-&gt;pending;
}

int printk(const char * fmt, ...);


</Insert>
<Copy StartSeek="24530" EndSeek="24605"/>
<Insert>  eth_port_t *p;

</Insert>
<Copy StartSeek="24605" EndSeek="24679"/>
<Insert>  /* Transmit packets on all ports */
  for (p = active_ports; p; p = p-&gt;next) {
       eth_tx(p);
  }
}
</Insert>
<Copy StartSeek="24753" EndSeek="24801"/>
<Insert>int32_t eth_poll(uint8_t port) {
  eth_port_t *p = &amp;eth_ports[port];
  uint8_t rx_queue;
  uint32_t cause;

</Insert>
<Copy StartSeek="24919" EndSeek="24947"/>
<Insert>  cause = DPA_REG_READ(NETA_INTR_NEW_CAUSE_REG(port)) &amp; ETH_RX_INTR_MASK;

</Insert>
<Copy StartSeek="25100" EndSeek="25209"/>
<Insert>    rx_queue = fls(cause &gt;&gt; NETA_CAUSE_RXQ_OCCUP_DESC_OFFS) - 1;
</Insert>
<Copy StartSeek="25257" EndSeek="25282"/>
<Insert>    cause &amp;= ~((1 &lt;&lt; rx_queue) &lt;&lt; NETA_CAUSE_RXQ_OCCUP_DESC_OFFS);
</Insert>
<Copy StartSeek="25312" EndSeek="25418"/>
<Insert>  eth_rx_desc_return(p);

  return DPA_OK;
}


</Insert>
<Copy StartSeek="25581" EndSeek="25657"/>
<Insert>  eth_port_t    *p = &amp;eth_ports[pkt-&gt;port];
  eth_ring_t    *txq = p-&gt;txq[pkt-&gt;queue];
  eth_tx_desc_t *tx_desc;

</Insert>
<Copy StartSeek="25838" EndSeek="25874"/>
<Copy StartSeek="25877" EndSeek="26011"/>
<Insert>  tx_desc-&gt;command = pkt-&gt;cmd; 
</Insert>
<Copy StartSeek="26066" EndSeek="26381"/>
<Insert>  dcache_l1_l2_clean_invalidate_double_line(MEM_ALIGN_DOWN((uint32_t)pkt-&gt;buff, CPU_D_CACHE_LINE_SIZE));
</Insert>
<Copy StartSeek="26447" EndSeek="26466"/>
<Insert>
</Insert>
<Copy StartSeek="26500" EndSeek="27244"/>
<Insert>/* Try stealing packet buffer for slow path handling. Will succeed if can refill underlying 
rx descriptor from existing port's pool */
int32_t eth_pkt_lease(eth_pkt_t* pkt) {
  return eth_rx_desc_refill(&amp;eth_ports[pkt-&gt;pool_id], pkt-&gt;rx_desc);
}

</Insert>
<Copy StartSeek="27244" EndSeek="28705"/>
<Insert>      pkt-&gt;pool_id = p-&gt;port;
</Insert>
<Copy StartSeek="28747" EndSeek="31751"/>
<Copy StartSeek="31773" EndSeek="32052"/>
<Insert>//dpa_os_fiq_alloc(p-&gt;irq);
</Insert>
<Copy StartSeek="32080" EndSeek="32559"/>
<Insert>  p-&gt;next = active_ports;
  active_ports = p;

</Insert>
<Copy StartSeek="32669" EndSeek="32939"/>
<Insert>  uint32_t err, queue, i;
</Insert>
<Copy StartSeek="32962" EndSeek="33216"/>
<Insert>//    dpa_os_fiq_free(p-&gt;irq);
</Insert>
<Copy StartSeek="33247" EndSeek="33772"/>
<Insert>  /* Rebuild active ports list */
  active_ports = NULL;
  for (i = 0; i &lt; ETH_MAX_PORT_NUM; i++) {
      p = &amp;eth_ports[i];
      if (p-&gt;init) {
          p-&gt;next = active_ports;
          active_ports = p;
      }
  }
  
</Insert>
<Copy StartSeek="33919" EndSeek="34278"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/08/27" Time="12:31:35000">
<Copy StartSeek="0" EndSeek="26042"/>
<Insert>  tx_desc-&gt;csum_l4 = 0;
</Insert>
<Copy StartSeek="26042" EndSeek="26076"/>
<Copy StartSeek="26100" EndSeek="34278"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/08/27" Time="12:50:26000">
<Copy StartSeek="0" EndSeek="26076"/>
<Insert>  tx_desc-&gt;csum_l4 = 0;
</Insert>
<Copy StartSeek="26100" EndSeek="34278"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/08/27" Time="15:04:42000">
<Copy StartSeek="0" EndSeek="2272"/>
<Insert>int printk(const char * fmt, ...);

</Insert>
<Copy StartSeek="2272" EndSeek="21826"/>
<Insert>  register eth_pkt_t     *rx_pkt;
  register uint8_t       *rx_buff;
  uint32_t                rx_pending, rx_status, rx_bytes;
 
</Insert>
<Copy StartSeek="21939" EndSeek="21962"/>
<Insert>  
</Insert>
<Copy StartSeek="21963" EndSeek="22315"/>
<Insert>    /* Recv batch of packets */
</Insert>
<Copy StartSeek="22315" EndSeek="22324"/>
<Insert>      
      /* Current Rx descriptor */
</Insert>
<Copy StartSeek="22355" EndSeek="22790"/>
<Insert>    
</Insert>
<Copy StartSeek="22791" EndSeek="22833"/>
<Insert>      rx_pkt = (eth_pkt_t *) rx_desc-&gt;buf_cookie;
      rx_buff = rx_pkt-&gt;buff;
      
</Insert>
<Copy StartSeek="22905" EndSeek="22949"/>
<Insert>      dcache_l1_l2_invalidate_double_line((uint32_t)(rx_buff));
      _PLD((uint32_t)rx_buff);
      _PLD((uint32_t)rx_buff + 32);
  
      rx_pkt-&gt;port = p-&gt;port;
      rx_pkt-&gt;queue = queue;
      rx_pkt-&gt;size = rx_bytes = (rx_desc-&gt;data_size - (ETH_CRC_SIZE + ETH_MH_SIZE));
      rx_pkt-&gt;offset = ETH_MH_SIZE; /* FIXME Only for MH-enabled interfaces */
      rx_pkt-&gt;eth_hdr = (dpa_eth_hdr_t*)(rx_buff + ETH_MH_SIZE);
      rx_pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (rx_buff + NETA_RX_GET_IPHDR_OFFSET(rx_desc));

</Insert>
<Copy StartSeek="23483" EndSeek="23923"/>
<Copy StartSeek="24041" EndSeek="24078"/>
<Insert>      p-&gt;ops.pkt_rx(rx_pkt);
      switch (rx_pkt-&gt;status) {
</Insert>
<Copy StartSeek="24133" EndSeek="24166"/>
<Insert>          eth_pkt_tx(rx_pkt);
</Insert>
<Copy StartSeek="24193" EndSeek="24320"/>
<Insert>          rx_pkt-&gt;status = ETH_PKT_STATUS_DROP;
</Insert>
<Copy StartSeek="24365" EndSeek="24471"/>
<Insert>      p-&gt;stats.rx_bytes += rx_bytes;
</Insert>
<Copy StartSeek="24509" EndSeek="26092"/>
<Insert>//tx_desc-&gt;csum_l4 = 0;
</Insert>
<Copy StartSeek="26092" EndSeek="26673"/>
<Insert>      being responsible for pkt dealloc. */
</Insert>
<Copy StartSeek="26716" EndSeek="34269"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/08/29" Time="18:16:58000">
<Copy StartSeek="0" EndSeek="23452"/>
<Insert>      pkt-&gt;rx_desc = rx_desc;
</Insert>
<Copy StartSeek="23482" EndSeek="34269"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/08/30" Time="15:26:4000">
<Copy StartSeek="0" EndSeek="845"/>
<Insert>#define ETH_ERROR(format, args...)  printk("&lt;0&gt;"format, ##args); /*DPA_ERROR(format, ##args)*/
#define ETH_INFO(format, args...) printk("&lt;0&gt;"format, ##args);/*DPA_INFO(format, ##args)*/
</Insert>
<Copy StartSeek="966" EndSeek="984"/>
<Insert>#define ETH_DBG(format, args...)  printk("&lt;0&gt;ETH "format, ##args);/*ETH_INFO(format, ##args)*/
</Insert>
<Copy StartSeek="1043" EndSeek="2481"/>
<Insert>  bool           init; /* true if initialized */
  uint8_t        port; /* Physical port number */
  uint8_t        rxq_num; /* Number of Rx queues */
  uint8_t        txq_num; /* Number of Tx queues */
  uint32_t       mtu; /* MTU */
  uint32_t       irq; /* Interrupt number */
  uint32_t       hw_cmd; /* HW command spec for Gunit */
  uint32_t       rx_desc_num; /* Number of Rx descriptors */
  uint32_t       tx_desc_num; /* Number of Tx descriptors */
  eth_ops_t      ops; /* Callbacks */
  eth_ring_t    *rxq[ETH_MAX_RXQ_NUM]; /* Rx packet buffer rings */
  eth_ring_t    *txq[ETH_MAX_TXQ_NUM]; /* Tx packet buffer rings */
  queue_t       *pkt_pool; /* Rx packet buffers */
  uint32_t       pkt_size; /* Size of packet buffers in pkt_pool */
  uint32_t       pkt_pool_size; /* Required size of the packet pool */
  eth_stats_t    stats; /* Port statistics */
  uint32_t       txq_pending; /* bit-mask per queue with any pending pkts */
  eth_port_t     *next; /* Linked list */
</Insert>
<Copy StartSeek="3504" EndSeek="3577"/>
<Insert>static eth_port_t eth_ports[ETH_MAX_PORT_NUM];
</Insert>
<Copy StartSeek="3628" EndSeek="10257"/>
<Copy StartSeek="10358" EndSeek="10574"/>
<Insert>      ETH_ERROR("Can't refill Rx descriptor, port's (%d) pool empty.", p-&gt;port);
</Insert>
<Copy StartSeek="10574" EndSeek="11033"/>
<Insert>  register uint32_t addr;
 
</Insert>
<Copy StartSeek="11035" EndSeek="11114"/>
<Insert>      for (addr = curr; addr &lt;= top; addr += 32) {
</Insert>
<Copy StartSeek="11229" EndSeek="11251"/>
<Insert>      }
</Insert>
<Copy StartSeek="11261" EndSeek="11331"/>
<Insert>      for (addr = curr; addr &lt;= rxq-&gt;last; addr += 32) {
</Insert>
<Copy StartSeek="11452" EndSeek="11474"/>
<Insert>      }
</Insert>
<Copy StartSeek="11484" EndSeek="11579"/>
<Insert>      for (addr = rxq-&gt;first; addr &lt;= top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num; addr += 32) {
</Insert>
<Copy StartSeek="11735" EndSeek="11757"/>
<Insert>      }
</Insert>
<Copy StartSeek="11767" EndSeek="11827"/>
<Insert>  dpa_memset(&amp;eth_ports-&gt;stats, 0, sizeof(eth_stats_t));
</Insert>
<Copy StartSeek="11888" EndSeek="17705"/>
<Insert>  eth_ring_t *txq;
  int32_t     err;
  uint32_t    dma;

</Insert>
<Copy StartSeek="17801" EndSeek="19111"/>
<Insert>  
</Insert>
<Copy StartSeek="19263" EndSeek="21379"/>
<Copy StartSeek="21406" EndSeek="21657"/>
<Insert>   for (i = 0; i &lt; ETH_MAX_PORT_NUM; i++) {
</Insert>
<Copy StartSeek="21705" EndSeek="22403"/>
<Insert>    /* Invalidate pending Rx descriptors */
    eth_rx_desc_invalidate(rxq, rx_pending);

    //tx_pending = eth_neta_txq_get_pending_desc_num(p-&gt;port, 0 /* txp */, queue);
    //ETH_DBG("rx_pending=%d, tx_pending=%d, port %d", rx_pending, tx_pending, p-&gt;port);

    do {
</Insert>
<Copy StartSeek="22569" EndSeek="22640"/>
<Copy StartSeek="22716" EndSeek="23331"/>
<Insert>      _PLD((uint32_t)buff);
      _PLD((uint32_t)buff + 32);

</Insert>
<Copy StartSeek="23332" EndSeek="23712"/>
<Insert>//    pkt-&gt;rx_desc = rx_desc;

</Insert>
<Copy StartSeek="23713" EndSeek="24153"/>
<Insert>      /*if (pkt-&gt;rx_desc == NULL) {
          ETH_ERROR("pkt-&gt;rx_desc == NULL");
</Insert>
<Copy StartSeek="24265" EndSeek="24285"/>
<Insert>      }*/
      
</Insert>
<Copy StartSeek="24294" EndSeek="24496"/>
<Insert>          if (eth_rx_desc_refill(p, rx_desc) == DPA_OK)
              break;
          pkt-&gt;status = ETH_PKT_STATUS_DROP;
</Insert>
<Copy StartSeek="24585" EndSeek="26110"/>
<Insert>  
</Insert>
<Copy StartSeek="26111" EndSeek="26136"/>
<Insert>      /* TODO Add real number of available Tx descriptors and check */
</Insert>
<Copy StartSeek="26165" EndSeek="26234"/>
<Insert>  tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="26289" EndSeek="26332"/>
<Insert>  tx_desc-&gt;hw_cmd = p-&gt;hw_cmd; /* TODO Optimize, probably can do only once */

</Insert>
<Copy StartSeek="26333" EndSeek="26729"/>
<Insert>   case B. Slow Path origin: the owner is DPA Slow Path bridge
      being responsible for pkt dealloc */
</Insert>
<Copy StartSeek="26840" EndSeek="26841"/>
<Copy StartSeek="26898" EndSeek="27442"/>
<Insert>int32_t eth_get_stats(uint8_t port, eth_stats_t *stats) {
  if (port &gt; (ETH_MAX_PORT_NUM - 1)) {
</Insert>
<Copy StartSeek="27547" EndSeek="27632"/>
<Insert>  dpa_memcpy(stats, &amp;eth_ports[port].stats, sizeof(eth_stats_t));
</Insert>
<Copy StartSeek="27702" EndSeek="30086"/>
<Insert>  if (cfg-&gt;port &gt; (ETH_MAX_PORT_NUM - 1)) {
</Insert>
<Copy StartSeek="30134" EndSeek="33169"/>
<Insert>  if (port &gt; (ETH_MAX_PORT_NUM - 1)) {
</Insert>
<Copy StartSeek="33212" EndSeek="34470"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/09/03" Time="18:01:44000">
<Copy StartSeek="0" EndSeek="21379"/>
<Insert>  wait_cpu_cycles(330000);
</Insert>
<Copy StartSeek="21379" EndSeek="34443"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/09/03" Time="18:04:40000">
<Copy StartSeek="0" EndSeek="11774"/>
<Insert>
static void eth_reset_stats(eth_port_t *eth_port) {
  dpa_memset(&amp;eth_ports-&gt;stats, 0, sizeof(dpa_eth_stats_t));
}

</Insert>
<Copy StartSeek="11950" EndSeek="22480"/>
<Insert>     /* FIXME Found to cause instability under high traffic 
     eth_rx_desc_invalidate(rxq, rx_pending); */
</Insert>
<Copy StartSeek="22589" EndSeek="27473"/>
<Insert>int32_t eth_get_stats(uint8_t port, dpa_eth_stats_t *stats) {
</Insert>
<Copy StartSeek="27535" EndSeek="32729"/>
<Insert>  eth_reset_stats(p);
</Insert>
<Copy StartSeek="32757" EndSeek="34507"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="10:20:40000">
<Copy StartSeek="0" EndSeek="22678"/>
<Insert>      dcache_l1_l2_invalidate_single_line((uint32_t)rx_desc);
</Insert>
<Copy StartSeek="22740" EndSeek="34507"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="10:20:42000">
<Copy StartSeek="0" EndSeek="23009"/>
<Insert>          p-&gt;stats.rx_errors++;
</Insert>
<Copy StartSeek="23041" EndSeek="24263"/>
<Insert>          p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24296" EndSeek="24634"/>
<Insert>          p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24667" EndSeek="24696"/>
<Insert>      p-&gt;stats.rx_pkts++;
      p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24760" EndSeek="26167"/>
<Insert>     p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="26195" EndSeek="26265"/>
<Insert>  p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="26320" EndSeek="26872"/>
<Insert>  p-&gt;stats.tx_pkts++;
  p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="26928" EndSeek="34507"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="10:28:12000">
<Copy StartSeek="0" EndSeek="23009"/>
<Insert>//        p-&gt;stats.rx_errors++;
</Insert>
<Copy StartSeek="23041" EndSeek="24263"/>
<Insert>//        p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24296" EndSeek="24634"/>
<Insert>//        p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24667" EndSeek="24696"/>
<Insert>//    p-&gt;stats.rx_pkts++;
//    p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24760" EndSeek="26167"/>
<Insert>//   p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="26195" EndSeek="26265"/>
<Insert>//p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="26320" EndSeek="26872"/>
<Insert>//p-&gt;stats.tx_pkts++;
//p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="26928" EndSeek="34507"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="10:32:30000">
<Copy StartSeek="0" EndSeek="24696"/>
<Insert>      p-&gt;stats.rx_pkts++;
      p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24760" EndSeek="26265"/>
<Insert>  p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="26320" EndSeek="26872"/>
<Insert>  p-&gt;stats.tx_pkts++;
  p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="26928" EndSeek="34507"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="10:36:0000">
<Copy StartSeek="0" EndSeek="24696"/>
<Insert>//    p-&gt;stats.rx_pkts++;
//    p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24760" EndSeek="26265"/>
<Insert>//p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="26320" EndSeek="26872"/>
<Insert>//p-&gt;stats.tx_pkts++;
//p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="26928" EndSeek="34507"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="10:38:40000">
<Copy StartSeek="0" EndSeek="24634"/>
<Insert>          p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24667" EndSeek="24696"/>
<Insert>      p-&gt;stats.rx_pkts++;
      p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24760" EndSeek="26167"/>
<Insert>     p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="26195" EndSeek="34507"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="11:21:47000">
<Copy StartSeek="0" EndSeek="26872"/>
<Insert>  p-&gt;stats.tx_pkts++;
  p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="26928" EndSeek="34507"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="11:23:36000">
<Copy StartSeek="0" EndSeek="24362"/>
<Insert>      p-&gt;ops.pkt_rx(pkt);
</Insert>
<Copy StartSeek="24411" EndSeek="34530"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="15:43:34000">
<Copy StartSeek="0" EndSeek="678"/>
<Copy StartSeek="699" EndSeek="34551"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="15:45:43000">
<Copy StartSeek="0" EndSeek="23383"/>
<Insert>
</Insert>
<Copy StartSeek="23402" EndSeek="34569"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:08:5000">
<Copy StartSeek="0" EndSeek="11135"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
</Insert>
<Copy StartSeek="11199" EndSeek="11274"/>
<Insert>      }*/
  } else {
</Insert>
<Copy StartSeek="11292" EndSeek="11351"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
</Insert>
<Copy StartSeek="11416" EndSeek="11497"/>
<Insert>      }*/
</Insert>
<Copy StartSeek="11505" EndSeek="11600"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
</Insert>
<Copy StartSeek="11665" EndSeek="11781"/>
<Insert>      }*/
</Insert>
<Copy StartSeek="11789" EndSeek="34570"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:16:30000">
<Copy StartSeek="0" EndSeek="11054"/>
<Insert> 
</Insert>
<Copy StartSeek="11089" EndSeek="34603"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:18:3000">
<Copy StartSeek="0" EndSeek="11055"/>
<Insert>  register uint32_t addr,final;
</Insert>
<Copy StartSeek="11086" EndSeek="34602"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:18:11000">
<Copy StartSeek="0" EndSeek="11306"/>
<Insert>      }
   else {
</Insert>
<Copy StartSeek="11318" EndSeek="11442"/>
<Insert>        for (addr = curr; addr &lt;= rxq-&gt;last; addr += 32) {
</Insert>
<Copy StartSeek="11522" EndSeek="11712"/>
<Insert>       for (addr = rxq-&gt;first; addr &lt;= top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num; addr += 32) {
</Insert>
<Copy StartSeek="11825" EndSeek="34636"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:19:12000">
<Copy StartSeek="0" EndSeek="11766"/>
<Insert>       for (addr = rxq-&gt;first; addr &lt;= last; addr += 32) {
</Insert>
<Copy StartSeek="11824" EndSeek="34635"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:19:16000">
<Copy StartSeek="0" EndSeek="11306"/>
<Copy StartSeek="11316" EndSeek="34645"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:19:40000">
<Copy StartSeek="0" EndSeek="11452"/>
<Insert>        last = rxq-&gt;last;
        for (addr = curr; addr &lt;= last; addr += 32) {
          _PLD(addr);
</Insert>
<Copy StartSeek="11548" EndSeek="34639"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:19:54000">
<Copy StartSeek="0" EndSeek="11828"/>
<Insert>          _PLD(addr);
</Insert>
<Copy StartSeek="11848" EndSeek="34637"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:19:57000">
<Copy StartSeek="0" EndSeek="23451"/>
<Insert>      _PLD(buff);
</Insert>
<Copy StartSeek="23471" EndSeek="34639"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:30:5000">
<Copy StartSeek="0" EndSeek="23451"/>
<Insert>      //_PLD(buff);
</Insert>
<Copy StartSeek="23469" EndSeek="34637"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="16:33:21000">
<Copy StartSeek="0" EndSeek="11284"/>
<Insert>          _PLD(addr);
</Insert>
<Copy StartSeek="11306" EndSeek="11528"/>
<Insert>        _PLD(addr);
</Insert>
<Copy StartSeek="11548" EndSeek="11828"/>
<Insert>        _PLD(addr);
</Insert>
<Copy StartSeek="11848" EndSeek="23451"/>
<Insert>      _PLD(buff);
</Insert>
<Copy StartSeek="23469" EndSeek="34637"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="11:42:20000">
<Copy StartSeek="0" EndSeek="24797"/>
<Copy StartSeek="24838" EndSeek="34678"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="13:29:42000">
<Copy StartSeek="0" EndSeek="24797"/>
<Insert>          DPA_ERROR("unknown status\n");
</Insert>
<Copy StartSeek="24847" EndSeek="34687"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="15:23:30000">
<Copy StartSeek="0" EndSeek="24797"/>
<Insert>          DPA_ERROR("unknown %u\n", pkt-&gt;status);
</Insert>
<Copy StartSeek="24860" EndSeek="34700"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="15:25:8000">
<Copy StartSeek="0" EndSeek="24797"/>
<Insert>          DPA_ERROR("unknown pkt-&gt;status: %u\n", pkt-&gt;status);
</Insert>
<Copy StartSeek="24797" EndSeek="34637"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="15:25:45000">
<Copy StartSeek="0" EndSeek="23850"/>
<Insert>
</Insert>
<Copy StartSeek="23881" EndSeek="34667"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="15:36:4000">
<Copy StartSeek="0" EndSeek="23850"/>
<Insert>      pkt-&gt;rx_desc = rx_desc;

</Insert>
<Copy StartSeek="23851" EndSeek="34637"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="15:38:40000">
<Copy StartSeek="0" EndSeek="24686"/>
<Insert>          eth_rx_desc_refill(p, rx_desc); 
</Insert>
<Copy StartSeek="24728" EndSeek="34636"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="15:50:9000">
<Copy StartSeek="0" EndSeek="24686"/>
<Copy StartSeek="24724" EndSeek="34674"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="15:50:33000">
<Copy StartSeek="0" EndSeek="24686"/>
<Insert>          pkt-&gt;rx_desc = 0xdeadbabba;
</Insert>
<Copy StartSeek="24723" EndSeek="34673"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="16:34:14000">
<Copy StartSeek="0" EndSeek="24686"/>
<Insert>          pkt-&gt;rx_desc = 0xdeadbaba;
</Insert>
<Copy StartSeek="24723" EndSeek="34673"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="16:34:17000">
<Copy StartSeek="0" EndSeek="24686"/>
<Insert>          pkt-&gt;rx_desc = 0xdeadbeef;
          eth_rx_desc_refill(p, rx_desc);
</Insert>
<Copy StartSeek="24729" EndSeek="34637"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="16:59:2000">
<Copy StartSeek="0" EndSeek="23850"/>
<Insert>
</Insert>
<Copy StartSeek="23880" EndSeek="34666"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="17:14:38000">
<Copy StartSeek="0" EndSeek="24715"/>
<Insert>          eth_rx_desc_refill(p, rx_desc); 
</Insert>
<Copy StartSeek="24757" EndSeek="34665"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="19:14:30000">
<Copy StartSeek="0" EndSeek="22990"/>
<Insert>          ETH_DBG("Error recving pkt, rx_status (0x%x), port (%d)",
</Insert>
<Copy StartSeek="23060" EndSeek="34667"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="19:26:23000">
<Copy StartSeek="0" EndSeek="24717"/>
<Insert>          eth_rx_desc_refill(p, rx_desc);
</Insert>
<Copy StartSeek="24833" EndSeek="34741"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="20:40:12000">
<Copy StartSeek="0" EndSeek="24784"/>
<Insert>                  DPA_ERROR("failed to refill");
</Insert>
<Copy StartSeek="24835" EndSeek="34743"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="20:40:14000">
<Copy StartSeek="0" EndSeek="22632"/>
<Insert>     eth_rx_desc_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="22678" EndSeek="34743"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:36:40000">
<Copy StartSeek="0" EndSeek="22632"/>
<Insert>//   eth_rx_desc_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="22683" EndSeek="34748"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:38:50000">
<Copy StartSeek="0" EndSeek="22632"/>
<Insert>          eth_rx_desc_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="22689" EndSeek="34754"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:40:42000">
<Copy StartSeek="0" EndSeek="23403"/>
<Insert>      dcache_l1_l2_invalidate_double_line((uint32_t)(buff));
</Insert>
<Copy StartSeek="23470" EndSeek="34760"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:41:23000">
<Copy StartSeek="0" EndSeek="10817"/>
<Insert>
</Insert>
<Copy StartSeek="11822" EndSeek="23636"/>
<Insert>          eth_rx_desc_clean_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="23687" EndSeek="35758"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:42:22000">
<Copy StartSeek="0" EndSeek="10817"/>
<Insert>static inline void eth_rx_desc_invalidate(eth_ring_t *rxq, uint32_t rx_pending) {
</Insert>
<Copy StartSeek="10905" EndSeek="35764"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:42:31000">
<Copy StartSeek="0" EndSeek="11079"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(curr, top);
</Insert>
<Copy StartSeek="11138" EndSeek="11299"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(curr, rxq-&gt;last);
</Insert>
<Copy StartSeek="11364" EndSeek="11533"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(rxq-&gt;first, top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num);
</Insert>
<Copy StartSeek="11634" EndSeek="35782"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:42:49000">
<Copy StartSeek="0" EndSeek="11138"/>
<Insert>      /* FIXME Found to cause instability under high traffic */
</Insert>
<Copy StartSeek="11138" EndSeek="11300"/>
<Insert>      /* FIXME Found to cause instability under high traffic  */
</Insert>
<Copy StartSeek="11300" EndSeek="11505"/>
<Insert>      /* FIXME Found to cause instability under high traffic  */
</Insert>
<Copy StartSeek="11505" EndSeek="35588"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:43:0000">
<Copy StartSeek="0" EndSeek="23466"/>
<Insert>          eth_rx_desc_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="23517" EndSeek="23518"/>
<Copy StartSeek="23576" EndSeek="35646"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:43:27000">
<Copy StartSeek="0" EndSeek="23517"/>
<Insert>
</Insert>
<Copy StartSeek="23517" EndSeek="35645"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:43:28000">
<Copy StartSeek="0" EndSeek="11652"/>
<Copy StartSeek="11653" EndSeek="12119"/>
<Insert>//        _PLD(addr);
</Insert>
<Copy StartSeek="12141" EndSeek="12363"/>
<Insert>//      _PLD(addr);
</Insert>
<Copy StartSeek="12383" EndSeek="12663"/>
<Insert>//      _PLD(addr);
</Insert>
<Copy StartSeek="12683" EndSeek="23467"/>
<Insert>//        eth_rx_desc_invalidate(rxq, rx_pending);
          eth_rx_desc_clean_invalidate(rxq, rx_pending);

</Insert>
<Copy StartSeek="23565" EndSeek="23876"/>
<Insert>          DPA_ERROR("Error recving pkt, rx_status (0x%x), port (%d)",
</Insert>
<Copy StartSeek="23944" EndSeek="24276"/>
<Insert>      dcache_l1_l2_clean_invalidate_double_line((uint32_t)(buff));
//    _PLD(buff);
</Insert>
<Copy StartSeek="24355" EndSeek="24736"/>
<Insert>      pkt-&gt;rx_desc = rx_desc;
</Insert>
<Copy StartSeek="24737" EndSeek="25572"/>
<Insert>          if (eth_rx_desc_refill(p, rx_desc) == DPA_OUT_OF_MEMORY)
                  DPA_ERROR("failed to refill\n");
</Insert>
<Copy StartSeek="25615" EndSeek="35523"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:45:35000">
<Copy StartSeek="0" EndSeek="24736"/>
<Insert>
</Insert>
<Copy StartSeek="24767" EndSeek="35553"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:47:57000">
<Copy StartSeek="0" EndSeek="25602"/>
<Insert>          eth_rx_desc_refill(p, rx_desc); 
</Insert>
<Copy StartSeek="25708" EndSeek="35616"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:50:11000">
<Copy StartSeek="0" EndSeek="23246"/>
<Copy StartSeek="23379" EndSeek="25347"/>
<Insert>      /* Drop if in panic mode */
      if (eth_pkt_pool_is_empty(p)) {
          p-&gt;stats.rx_dropped++;
          continue;
      }

</Insert>
<Copy StartSeek="25349" EndSeek="35617"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:52:37000">
<Copy StartSeek="0" EndSeek="23282"/>
<Insert>      if (eth_pkt_pool_is_empty(p)) {
          p-&gt;stats.rx_dropped++;
          return;
      }
</Insert>
<Copy StartSeek="23353" EndSeek="35591"/>
</Delta>
<Delta Version="66" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:52:41000">
<Copy StartSeek="0" EndSeek="25577"/>
<Insert>          if (eth_rx_desc_refill(p, rx_desc) != DPA_OUT_OF_MEMORY)
                  pkt-&gt;rx_desc = NULL;
</Insert>
<Copy StartSeek="25620" EndSeek="35528"/>
</Delta>
<Delta Version="67" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="17:54:14000">
<Copy StartSeek="0" EndSeek="25321"/>
<Insert>

</Insert>
<Copy StartSeek="25455" EndSeek="35660"/>
</Delta>
<Delta Version="68" Comment="" NL="\10" Encoding="text" Date="2012/10/09" Time="18:30:9000">
<Copy StartSeek="0" EndSeek="23246"/>
<Insert>        /* Drop if in panic mode */
	if (eth_pkt_pool_is_empty(p)) {
		p-&gt;stats.rx_dropped++;
		return;
	}
</Insert>
<Copy StartSeek="23246" EndSeek="25319"/>
<Insert>          continue;
</Insert>
<Copy StartSeek="25337" EndSeek="35551"/>
</Delta>
<Delta Version="69" Comment="" NL="\10" Encoding="text" Date="2012/10/10" Time="13:39:47000">
<Copy StartSeek="0" EndSeek="24736"/>
<Insert>      pkt-&gt;rx_desc = rx_desc;
</Insert>
<Copy StartSeek="24768" EndSeek="35553"/>
</Delta>
<Delta Version="70" Comment="" NL="\10" Encoding="text" Date="2012/10/10" Time="13:41:35000">
<Copy StartSeek="0" EndSeek="10817"/>
<Insert>static inline void eth_rx_desc_clean_invalidate(eth_ring_t *rxq, uint32_t rx_pending) {
  register uint32_t curr = rxq-&gt;next;
  register uint32_t top = curr + NETA_DESC_ALIGNED_SIZE * (rx_pending - 1);

  register uint32_t addr,last;
 
  if (top &lt;= rxq-&gt;last) {
      dcache_l1_l2_clean_invalidate_multi_line(curr, top);
        for (addr = curr; addr &lt;= top; addr += 32) {
//        _PLD(addr);
        }
   } else {
      dcache_l1_l2_clean_invalidate_multi_line(curr, rxq-&gt;last);
      last = rxq-&gt;last;
      for (addr = curr; addr &lt;= last; addr += 32) {
//      _PLD(addr);
      }
      dcache_l1_l2_clean_invalidate_multi_line(rxq-&gt;first, top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num);
      last = top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num;
      for (addr = rxq-&gt;first; addr &lt;= last; addr += 32) {
//      _PLD(addr);
      }
  }
}


</Insert>
<Copy StartSeek="10818" EndSeek="22632"/>
<Insert>//   eth_rx_desc_invalidate(rxq, rx_pending);
     eth_rx_desc_clean_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="22679" EndSeek="24435"/>
<Insert>          return;
</Insert>
<Copy StartSeek="24455" EndSeek="34669"/>
</Delta>
<Delta Version="71" Comment="" NL="\10" Encoding="text" Date="2012/10/10" Time="13:43:4000">
<Copy StartSeek="0" EndSeek="23850"/>
<Insert>//      pkt-&gt;rx_desc = rx_desc;
</Insert>
<Copy StartSeek="23880" EndSeek="34667"/>
</Delta>
<Delta Version="72" Comment="" NL="\10" Encoding="text" Date="2012/10/10" Time="13:46:4000">
<Copy StartSeek="0" EndSeek="23470"/>
<Insert>      pkt-&gt;status = ETH_PKT_STATUS_NONE;
</Insert>
<Copy StartSeek="23496" EndSeek="34652"/>
</Delta>
<Delta Version="73" Comment="" NL="\10" Encoding="text" Date="2012/10/14" Time="11:15:38000">
<Copy StartSeek="0" EndSeek="23470"/>
<Insert>      pkt-&gt;status = 0x69;
</Insert>
<Copy StartSeek="23511" EndSeek="23880"/>
<Insert>
</Insert>
<Copy StartSeek="23880" EndSeek="34666"/>
</Delta>
<Delta Version="74" Comment="" NL="\10" Encoding="text" Date="2012/10/14" Time="16:09:5000">
<Copy StartSeek="0" EndSeek="23390"/>
<Insert>      dcache_l1_l2_invalidate_double_line((uint32_t)(buff));
</Insert>
<Copy StartSeek="23457" EndSeek="34672"/>
</Delta>
<Delta Version="75" Comment="" NL="\10" Encoding="text" Date="2012/10/14" Time="16:09:42000">
<Copy StartSeek="0" EndSeek="11114"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(curr, top);
</Insert>
<Copy StartSeek="11173" EndSeek="11334"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(curr, rxq-&gt;last);
</Insert>
<Copy StartSeek="11399" EndSeek="11568"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(rxq-&gt;first, top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num);
</Insert>
<Copy StartSeek="11669" EndSeek="34690"/>
</Delta>
<Delta Version="76" Comment="" NL="\10" Encoding="text" Date="2012/10/14" Time="16:14:5000">
<Copy StartSeek="0" EndSeek="29000"/>
<Insert>      dcache_l1_l2_invalidate_double_line(MEM_ALIGN_DOWN((uint32_t)pkt-&gt;buff, CPU_D_CACHE_LINE_SIZE));
</Insert>
<Copy StartSeek="29109" EndSeek="34696"/>
</Delta>
<Delta Version="77" Comment="" NL="\10" Encoding="text" Date="2012/10/14" Time="16:15:20000">
<Copy StartSeek="0" EndSeek="678"/>
<Insert>#include &lt;dpa/dpa.h&gt;
</Insert>
<Copy StartSeek="678" EndSeek="11033"/>
<Insert>
  register uint32_t addr,last;
 
</Insert>
<Copy StartSeek="11035" EndSeek="11061"/>
<Insert>      dcache_l1_l2_clean_invalidate_multi_line(curr, top);
      /* FIXME Found to cause instability under high traffic */
</Insert>
<Copy StartSeek="11176" EndSeek="11251"/>
<Insert>        }
   } else {
      dcache_l1_l2_clean_invalidate_multi_line(curr, rxq-&gt;last);
      /* FIXME Found to cause instability under high traffic  */
      last = rxq-&gt;last;
      for (addr = curr; addr &lt;= last; addr += 32) {
        _PLD(addr);
      }
      dcache_l1_l2_clean_invalidate_multi_line(rxq-&gt;first, top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num);
      /* FIXME Found to cause instability under high traffic  */
      last = top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num;
      for (addr = rxq-&gt;first; addr &lt;= last; addr += 32) {
        _PLD(addr);
      }
  }
}

</Insert>
<Copy StartSeek="11774" EndSeek="22272"/>
<Copy StartSeek="22314" EndSeek="22388"/>
<Insert>  if ((rxq-&gt;pending = (rx_pending = eth_neta_rxq_get_busy_desc_num(p-&gt;port, queue)))) {
</Insert>
<Copy StartSeek="22473" EndSeek="22519"/>
<Insert>     /* FIXME Found to cause instability under high traffic */
     eth_rx_desc_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="22627" EndSeek="22716"/>
<Insert>//    dcache_l1_l2_invalidate_single_line((uint32_t)rx_desc);
</Insert>
<Copy StartSeek="22778" EndSeek="23339"/>
<Insert>      dcache_l1_l2_clean_invalidate_double_line((uint32_t)(buff));
      _PLD(buff);

</Insert>
<Copy StartSeek="23401" EndSeek="23442"/>
<Insert>      pkt-&gt;port = p-&gt;port;
</Insert>
<Copy StartSeek="23466" EndSeek="23808"/>
<Copy StartSeek="23809" EndSeek="24249"/>
<Insert>      
</Insert>
<Copy StartSeek="24249" EndSeek="24420"/>
<Insert>//    p-&gt;ops.pkt_rx(pkt);
      dpa_pkt_rx(pkt);
</Insert>
<Copy StartSeek="24446" EndSeek="24692"/>
<Insert>//        p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24725" EndSeek="24754"/>
<Insert>//    p-&gt;stats.rx_pkts++;
//    p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24818" EndSeek="24847"/>
<Insert>  }
}


</Insert>
<Copy StartSeek="24882" EndSeek="26252"/>
<Insert>//   p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="26280" EndSeek="26957"/>
<Insert>//p-&gt;stats.tx_pkts++;
//p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="27013" EndSeek="28902"/>
<Insert>      dcache_l1_l2_clean_invalidate_double_line(MEM_ALIGN_DOWN((uint32_t)pkt-&gt;buff, CPU_D_CACHE_LINE_SIZE));
</Insert>
<Copy StartSeek="29005" EndSeek="31754"/>
<Insert>      cfg-&gt;ops.pkt_rx == NULL) {
</Insert>
<Copy StartSeek="31849" EndSeek="34654"/>
</Delta>
<Delta Version="78" Comment="" NL="\10" Encoding="text" Date="2012/10/14" Time="17:43:9000">
<Copy StartSeek="0" EndSeek="23778"/>
<Insert>      pkt-&gt;rx_desc = rx_desc;

</Insert>
<Copy StartSeek="23779" EndSeek="34624"/>
</Delta>
<Delta Version="79" Comment="" NL="\10" Encoding="text" Date="2012/10/14" Time="17:44:50000">
<Copy StartSeek="0" EndSeek="678"/>
<Copy StartSeek="699" EndSeek="11054"/>
<Insert> 
</Insert>
<Copy StartSeek="11088" EndSeek="11167"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
</Insert>
<Copy StartSeek="11231" EndSeek="11306"/>
<Insert>      }*/
  } else {
</Insert>
<Copy StartSeek="11328" EndSeek="11387"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
        for (addr = curr; addr &lt;= rxq-&gt;last; addr += 32) {
          _PLD(addr);
      }*/
</Insert>
<Copy StartSeek="11556" EndSeek="11651"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
       for (addr = rxq-&gt;first; addr &lt;= top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num; addr += 32) {
          _PLD(addr);
      }*/
  }
}

</Insert>
<Copy StartSeek="11863" EndSeek="22361"/>
<Insert>  register uint8_t        port = p-&gt;port;
</Insert>
<Copy StartSeek="22361" EndSeek="22435"/>
<Insert>  if ((rxq-&gt;pending = (rx_pending = eth_neta_rxq_get_busy_desc_num(port, queue)))) {
</Insert>
<Copy StartSeek="22523" EndSeek="22569"/>
<Insert>     /* FIXME Found to cause instability under high traffic
     eth_rx_desc_invalidate(rxq, rx_pending);*/
</Insert>
<Copy StartSeek="22678" EndSeek="22767"/>
<Insert>      dcache_l1_l2_invalidate_single_line((uint32_t)rx_desc);
</Insert>
<Copy StartSeek="22829" EndSeek="23451"/>
<Insert>
</Insert>
<Copy StartSeek="23470" EndSeek="23511"/>
<Insert>      pkt-&gt;port = port;
</Insert>
<Copy StartSeek="23538" EndSeek="24291"/>
<Copy StartSeek="24298" EndSeek="24469"/>
<Insert>      p-&gt;ops.pkt_rx(pkt);
</Insert>
<Copy StartSeek="24518" EndSeek="24764"/>
<Insert>          p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24797" EndSeek="24826"/>
<Insert>      p-&gt;stats.rx_pkts++;
      p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24890" EndSeek="24919"/>
<Insert>
    p-&gt;ops.rx_done(port);
  }
}


</Insert>
<Copy StartSeek="24927" EndSeek="26297"/>
<Insert>     p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="26325" EndSeek="27002"/>
<Insert>  p-&gt;stats.tx_pkts++;
  p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="27058" EndSeek="27214"/>
<Insert>
</Insert>
<Copy StartSeek="27238" EndSeek="27273"/>
<Copy StartSeek="27313" EndSeek="31862"/>
<Insert>      cfg-&gt;ops.pkt_rx == NULL || cfg-&gt;ops.rx_done == NULL ||
      cfg-&gt;ops.tx_done == NULL) {
</Insert>
<Copy StartSeek="31895" EndSeek="34700"/>
</Delta>
<Delta Version="80" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:18:10000">
<Copy StartSeek="0" EndSeek="23850"/>
<Insert>
</Insert>
<Copy StartSeek="23881" EndSeek="34730"/>
</Delta>
<Delta Version="81" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:18:34000">
<Copy StartSeek="0" EndSeek="10595"/>
<Copy StartSeek="10633" EndSeek="34768"/>
</Delta>
<Delta Version="82" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:21:18000">
<Copy StartSeek="0" EndSeek="10595"/>
<Insert>          DPA_ERROR("no pkts left!");
</Insert>
<Copy StartSeek="10639" EndSeek="34774"/>
</Delta>
<Delta Version="83" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:21:24000">
<Copy StartSeek="0" EndSeek="23894"/>
<Copy StartSeek="23985" EndSeek="34865"/>
</Delta>
<Delta Version="84" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:22:20000">
<Copy StartSeek="0" EndSeek="23894"/>
<Insert>      rx_desc-&gt;buf_cookie = (uint32_t) pkt;
      rx_desc-&gt;buf_phys_addr = pkt-&gt;phys_addr;
</Insert>
<Copy StartSeek="23894" EndSeek="34774"/>
</Delta>
<Delta Version="85" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:23:26000">
<Copy StartSeek="0" EndSeek="27288"/>
<Insert>  ETH_ERROR("testing");
</Insert>
<Copy StartSeek="27288" EndSeek="34750"/>
</Delta>
<Delta Version="86" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:24:14000">
<Copy StartSeek="0" EndSeek="27323"/>
<Insert>          ETH_ERROR("fast path pkt !");
</Insert>
<Copy StartSeek="27323" EndSeek="34710"/>
</Delta>
<Delta Version="87" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:25:36000">
<Copy StartSeek="0" EndSeek="27957"/>
<Insert>
</Insert>
<Copy StartSeek="28058" EndSeek="34810"/>
</Delta>
<Delta Version="88" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:34:52000">
<Copy StartSeek="0" EndSeek="28016"/>
<Insert>        ETH_ERROR("port %u", p-&gt;port);
</Insert>
<Copy StartSeek="28057" EndSeek="34812"/>
</Delta>
<Delta Version="89" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:34:55000">
<Copy StartSeek="0" EndSeek="27957"/>
<Insert>static void dump_pkt_info(eth_pkt_t *pkt, eth_port_t *p)
</Insert>
<Copy StartSeek="27999" EndSeek="28001"/>
<Insert>        ETH_ERROR("port %u\n", p-&gt;port);
</Insert>
<Copy StartSeek="28002" EndSeek="34757"/>
</Delta>
<Delta Version="90" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:35:16000">
<Copy StartSeek="0" EndSeek="28001"/>
<Insert>
</Insert>
<Copy StartSeek="28056" EndSeek="34811"/>
</Delta>
<Delta Version="91" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:36:17000">
<Copy StartSeek="0" EndSeek="28001"/>
<Insert>        ETH_ERROR(pkt-&gt;buff, pkt-&gt;rx_desc, pkt-&gt;size);
}

</Insert>
<Copy StartSeek="28124" EndSeek="34876"/>
</Delta>
<Delta Version="92" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:36:59000">
<Copy StartSeek="0" EndSeek="28854"/>
<Copy StartSeek="28881" EndSeek="34903"/>
</Delta>
<Delta Version="93" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:37:21000">
<Copy StartSeek="0" EndSeek="28854"/>
<Insert>       dump_pkt_info(pkt);
</Insert>
<Copy StartSeek="28881" EndSeek="34903"/>
</Delta>
<Delta Version="94" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="10:39:25000">
<Copy StartSeek="0" EndSeek="678"/>
<Insert>#include &lt;dpa/dpa.h&gt;
</Insert>
<Copy StartSeek="678" EndSeek="10574"/>
<Insert>          DPA_ERROR("HAIM: no pkts left!");
</Insert>
<Copy StartSeek="10574" EndSeek="11033"/>
<Insert>
  register uint32_t addr,last;
 
</Insert>
<Copy StartSeek="11035" EndSeek="11114"/>
<Insert>      /* FIXME Found to cause instability under high traffic */
</Insert>
<Copy StartSeek="11176" EndSeek="11251"/>
<Insert>        }
   } else {
</Insert>
<Copy StartSeek="11272" EndSeek="11331"/>
<Insert>      /* FIXME Found to cause instability under high traffic  */
      last = rxq-&gt;last;
      for (addr = curr; addr &lt;= last; addr += 32) {
        _PLD(addr);
      }
</Insert>
<Copy StartSeek="11484" EndSeek="11579"/>
<Insert>      /* FIXME Found to cause instability under high traffic  */
      last = top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num;
      for (addr = rxq-&gt;first; addr &lt;= last; addr += 32) {
        _PLD(addr);
      }
  }
}

</Insert>
<Copy StartSeek="11774" EndSeek="22272"/>
<Copy StartSeek="22314" EndSeek="22388"/>
<Insert>  if ((rxq-&gt;pending = (rx_pending = eth_neta_rxq_get_busy_desc_num(p-&gt;port, queue)))) {
</Insert>
<Copy StartSeek="22473" EndSeek="22519"/>
<Insert>     /* FIXME Found to cause instability under high traffic */
     eth_rx_desc_invalidate(rxq, rx_pending);
</Insert>
<Copy StartSeek="22627" EndSeek="22716"/>
<Insert>//    dcache_l1_l2_invalidate_single_line((uint32_t)rx_desc);
</Insert>
<Copy StartSeek="22778" EndSeek="23400"/>
<Insert>      _PLD(buff);

</Insert>
<Copy StartSeek="23401" EndSeek="23442"/>
<Insert>      pkt-&gt;port = p-&gt;port;
</Insert>
<Copy StartSeek="23466" EndSeek="23778"/>
<Insert>      pkt-&gt;rx_desc = rx_desc;

</Insert>
<Copy StartSeek="23779" EndSeek="24219"/>
<Insert>      
</Insert>
<Copy StartSeek="24219" EndSeek="24390"/>
<Insert>//    p-&gt;ops.pkt_rx(pkt);
      dpa_pkt_rx(pkt);
</Insert>
<Copy StartSeek="24416" EndSeek="24662"/>
<Insert>//        p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24695" EndSeek="24724"/>
<Insert>//    p-&gt;stats.rx_pkts++;
//    p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24788" EndSeek="24817"/>
<Insert>  }
}


</Insert>
<Copy StartSeek="24852" EndSeek="25902"/>
<Insert>
</Insert>
<Copy StartSeek="26027" EndSeek="26346"/>
<Insert>//   p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="26374" EndSeek="27051"/>
<Insert>//p-&gt;stats.tx_pkts++;
//p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="27107" EndSeek="27263"/>
<Copy StartSeek="27264" EndSeek="27933"/>
<Insert>static void dump_pkt_info(eth_pkt_t *pkt)
{
        ETH_ERROR("pkt-&gt;buff %p, pkt-&gt;rx_desc %p, pkt-&gt;size %u",
                  pkt-&gt;buff, pkt-&gt;rx_desc, pkt-&gt;size);
}

</Insert>
<Copy StartSeek="27934" EndSeek="28664"/>
<Insert>//     dump_pkt_info(pkt);
</Insert>
<Copy StartSeek="28664" EndSeek="31848"/>
<Insert>      cfg-&gt;ops.pkt_rx == NULL) {
</Insert>
<Copy StartSeek="31943" EndSeek="34748"/>
</Delta>
<Delta Version="95" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="11:32:56000">
<Copy StartSeek="0" EndSeek="25902"/>
<Insert>static inline void restore_pkt(eth_pkt_t *pkt)
</Insert>
<Copy StartSeek="25958" EndSeek="34757"/>
</Delta>
<Delta Version="96" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="11:33:3000">
<Copy StartSeek="0" EndSeek="26777"/>
<Insert>
</Insert>
<Copy StartSeek="26806" EndSeek="34785"/>
</Delta>
<Delta Version="97" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="11:33:42000">
<Copy StartSeek="0" EndSeek="25960"/>
<Copy StartSeek="25990" EndSeek="34815"/>
</Delta>
<Delta Version="98" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="11:34:11000">
<Copy StartSeek="0" EndSeek="26063"/>
<Insert>
}
</Insert>
<Copy StartSeek="26065" EndSeek="34814"/>
</Delta>
<Delta Version="99" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="11:34:15000">
<Copy StartSeek="0" EndSeek="25960"/>
<Insert>        #define VLAN_HDR_SZ 4
        pkt-&gt;buff -= VLAN_HDR_SZ;
        pkt-&gt;phys_addr -= VLAN_HDR_SZ;
</Insert>
<Copy StartSeek="26063" EndSeek="34814"/>
</Delta>
<Delta Version="100" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="14:01:54000">
<Copy StartSeek="0" EndSeek="25960"/>
<Insert>//      #define VLAN_HDR_SZ 4
//      pkt-&gt;buff -= VLAN_HDR_SZ;
//      pkt-&gt;phys_addr -= VLAN_HDR_SZ;
</Insert>
<Copy StartSeek="26063" EndSeek="34814"/>
</Delta>
<Delta Version="101" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="16:53:49000">
<Copy StartSeek="0" EndSeek="25902"/>
<Insert>static inline void restore_pkt_vlan_del(eth_pkt_t *pkt)
</Insert>
<Copy StartSeek="25958" EndSeek="34814"/>
</Delta>
<Delta Version="102" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="16:53:54000">
<Copy StartSeek="0" EndSeek="26806"/>
<Insert>  restore_pkt_vlan_del(pkt);
</Insert>
<Copy StartSeek="26835" EndSeek="34814"/>
</Delta>
<Delta Version="103" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="16:54:0000">
<Copy StartSeek="0" EndSeek="25960"/>
<Copy StartSeek="26073" EndSeek="34927"/>
</Delta>
<Delta Version="104" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="17:43:49000">
<Copy StartSeek="0" EndSeek="26046"/>
<Insert>                
        }
</Insert>
<Copy StartSeek="26097" EndSeek="34951"/>
</Delta>
<Delta Version="105" Comment="" NL="\10" Encoding="text" Date="2012/12/19" Time="17:44:20000">
<Copy StartSeek="0" EndSeek="10651"/>
<Insert>  rx_desc-&gt;buf_phys_addr = pkt-&gt;phys_addr;
</Insert>
<Copy StartSeek="10693" EndSeek="22239"/>
<Insert>  register uint8_t       *buff;
</Insert>
<Copy StartSeek="22274" EndSeek="23272"/>
<Insert>      buff = pkt-&gt;buff;

</Insert>
<Copy StartSeek="23355" EndSeek="23399"/>
<Insert>      dcache_l1_l2_invalidate_double_line((uint32_t)(buff));
</Insert>
<Copy StartSeek="23463" EndSeek="23626"/>
<Insert>      pkt-&gt;offset = ETH_MH_SIZE; /* FIXME Only for MH-enabled interfaces */
      pkt-&gt;eth_hdr = (dpa_eth_hdr_t*)(buff + ETH_MH_SIZE);
      pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (buff + NETA_RX_GET_IPHDR_OFFSET(rx_desc));

</Insert>
<Copy StartSeek="23772" EndSeek="25895"/>
<Insert>static inline void restore_pkt_vlan_add(eth_pkt_t *pkt)
{
        struct dpa_entry *dpe = pkt-&gt;dpa_handle;
        if (dpe-&gt;state != DPE_FWD) {
                return;
                
        }
        #define VLAN_HDR_SZ 4
        pkt-&gt;buff += VLAN_HDR_SZ;
        pkt-&gt;phys_addr += VLAN_HDR_SZ;
}
</Insert>
<Copy StartSeek="25896" EndSeek="26368"/>
<Insert>  tx_desc-&gt;buf_phys_addr = pkt-&gt;phys_addr;

</Insert>
<Copy StartSeek="26515" EndSeek="26674"/>
<Insert>  dcache_l1_l2_clean_invalidate_double_line((uint32_t)pkt-&gt;buff);
  restore_pkt_vlan_add(pkt);
</Insert>
<Copy StartSeek="26744" EndSeek="28664"/>
<Insert>      if (pkt-&gt;phys_addr == 0 || pkt-&gt;buff == NULL || pkt-&gt;alloc_size &lt; p-&gt;pkt_size) {
</Insert>
<Copy StartSeek="28750" EndSeek="34722"/>
</Delta>
<Delta Version="106" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="09:04:6000">
<Copy StartSeek="0" EndSeek="26405"/>
<Insert>  /* FIXME Find out if tx_desc-&gt;data_size includes or not MH */
</Insert>
<Copy StartSeek="26405" EndSeek="34658"/>
</Delta>
<Delta Version="107" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="10:40:52000">
<Copy StartSeek="0" EndSeek="26368"/>
<Insert>  tx_desc-&gt;data_size += ETH_MH_SIZE;
</Insert>
<Copy StartSeek="26469" EndSeek="34722"/>
</Delta>
<Delta Version="108" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="13:55:9000">
<Copy StartSeek="0" EndSeek="26368"/>
<Insert>//tx_desc-&gt;data_size += ETH_MH_SIZE;
</Insert>
<Copy StartSeek="26368" EndSeek="34685"/>
</Delta>
<Delta Version="109" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="13:55:14000">
<Copy StartSeek="0" EndSeek="26368"/>
<Insert>  /* FIXME Find out if tx_desc-&gt;data_size includes or not MH */
</Insert>
<Copy StartSeek="26415" EndSeek="34668"/>
</Delta>
<Delta Version="110" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="14:19:2000">
<Copy StartSeek="0" EndSeek="26313"/>
<Insert>  p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="26313" EndSeek="26360"/>
<Copy StartSeek="26415" EndSeek="34668"/>
</Delta>
<Delta Version="111" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="14:19:11000">
<Copy StartSeek="0" EndSeek="34667"/>
<Insert>
</Insert>
</Delta>
<Delta Version="112" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="14:57:28000">
<Copy StartSeek="0" EndSeek="34753"/>
</Delta>
<Delta Version="113" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="14:57:59000">
<Copy StartSeek="0" EndSeek="34754"/>
<Insert>volatile unsigned int sizeof_rx_desc(void)
</Insert>
<Copy StartSeek="34798" EndSeek="34840"/>
</Delta>
<Delta Version="114" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="14:58:14000">
<Copy StartSeek="0" EndSeek="34840"/>
</Delta>
<Delta Version="115" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:01:55000">
<Copy StartSeek="0" EndSeek="34712"/>
<Insert>        return sizeof(struct rx_desc);
</Insert>
<Copy StartSeek="34744" EndSeek="34917"/>
</Delta>
<Delta Version="116" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:03:15000">
<Copy StartSeek="0" EndSeek="34667"/>
<Insert>volatile unsigned int sizeof_rx_desc(void)
</Insert>
<Copy StartSeek="34716" EndSeek="34718"/>
<Insert>        return sizeof(rx_desc);
}

volatile unsigned int sizeof_eth_port(void)
{
</Insert>
<Copy StartSeek="34718" EndSeek="34842"/>
</Delta>
<Delta Version="117" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:04:0000">
<Copy StartSeek="0" EndSeek="34759"/>
<Copy StartSeek="34848" EndSeek="34931"/>
</Delta>
<Delta Version="118" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:04:51000">
<Copy StartSeek="0" EndSeek="34931"/>
</Delta>
<Delta Version="119" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:08:53000">
<Copy StartSeek="0" EndSeek="34983"/>
<Insert>        return sizeof(eth_pkt_t);
</Insert>
<Copy StartSeek="35021" EndSeek="35023"/>
</Delta>
<Delta Version="120" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:08:55000">
<Copy StartSeek="0" EndSeek="34667"/>
<Insert>volatile unsigned int sizeof_eth_rx_desc_t(void)
{
        return sizeof(eth_rx_desc_t);
}

volatile unsigned int sizeof_eth_port(void)
{
        return sizeof(struct eth_port);
}

volatile unsigned int sizeof_eth_pkt_t(void)
{
        return sizeof(eth_pkt_t);
}

volatile unsigned int sizeof_eth_tx_desc_t(void)
{
        return sizeof(eth_tx_desc_t);
}
</Insert>
</Delta>
<Delta Version="121" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:22:22000">
<Copy StartSeek="0" EndSeek="636"/>
<Insert>
</Insert>
<Copy StartSeek="666" EndSeek="873"/>
<Insert>
</Insert>
<Copy StartSeek="894" EndSeek="1033"/>
<Insert>#define ETH_DBG(format, args...)  ETH_INFO(format, ##args)
</Insert>
<Copy StartSeek="1094" EndSeek="2221"/>
<Insert>
</Insert>
<Copy StartSeek="2221" EndSeek="3760"/>
<Insert>

</Insert>
<Copy StartSeek="3847" EndSeek="10855"/>
<Insert>  dcache_l1_l2_clean_single_line((uint32_t) rx_desc);

</Insert>
<Copy StartSeek="10855" EndSeek="11140"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(curr, top);
</Insert>
<Copy StartSeek="11140" EndSeek="11298"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(curr, rxq-&gt;last);
</Insert>
<Copy StartSeek="11298" EndSeek="11451"/>
<Insert>      dcache_l1_l2_invalidate_multi_line(rxq-&gt;first, top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num);
</Insert>
<Copy StartSeek="11451" EndSeek="16904"/>
<Insert>  /* Set minimum bandwidth */
  #ifdef DPA_ETH_WRR_NEW
</Insert>
<Copy StartSeek="16936" EndSeek="17019"/>
<Insert>  #else
    DPA_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(txq-&gt;port, 0 /* txp */, txq-&gt;queue), 0);
    DPA_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(txq-&gt;port, 0 /* txp */, txq-&gt;queue), 0);
  #endif /* MV_ETH_WRR_NEW */
  
</Insert>
<Copy StartSeek="17022" EndSeek="19131"/>
<Insert>#ifdef DPA_ETH_WRR_NEW 
</Insert>
<Copy StartSeek="19131" EndSeek="19227"/>
<Insert>#else
  DPA_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(p-&gt;port, 0 /* txp */, queue), 0x03ffffff);
  DPA_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(p-&gt;port, 0 /* txp */, queue), 0x3fffffff);
#endif /* DPA_ETH_WRR_NEW */

</Insert>
<Copy StartSeek="19228" EndSeek="20398"/>
<Insert>static inline void __eth_tx_empty(void) {
}

static inline void __eth0_tx(void) {
  eth_tx(eth0);
}

static inline void __eth1_tx(void) {
  eth_tx(eth1);
}

static void (*eth0_tx)(void) = __eth_tx_empty;

static void (*eth1_tx)(void) = __eth_tx_empty;

</Insert>
<Copy StartSeek="20398" EndSeek="21648"/>
<Insert>     /* Invalidate pending Rx descriptors */
     /* FIXME Found to cause instability under high traffic
     eth_rx_desc_invalidate(rxq, rx_pending);*/

     do {
</Insert>
<Copy StartSeek="21731" EndSeek="21809"/>
<Insert>      dcache_l1_l2_invalidate_single_line((uint32_t)rx_desc);
</Insert>
<Copy StartSeek="21893" EndSeek="22468"/>
<Insert>      /* Invalidate &amp; preload pkt header */
      dcache_l1_l2_invalidate_double_line((uint32_t)(phy_hdr));

</Insert>
<Copy StartSeek="22468" EndSeek="22776"/>
<Insert>#if 0
      rx_desc_num = ( ((uint32_t) rx_desc) - ((uint32_t)rxq-&gt;first) )/ NETA_DESC_ALIGNED_SIZE;
      dcache_l1_l2_invalidate_multi_line((uint32_t)rx_pkt-&gt;buff, rx_pkt-&gt;size);
      ETH_DBG("____ PORT %d, %d _____** RX ** rx_desc_num %d, desc_addr=0x%x, buff=0x%x, size=%d", 
                  p-&gt;port, queue, rx_desc_num, (uint32_t)rx_desc, (uint32_t) rx_pkt-&gt;buff, rx_pkt-&gt;size);
      dump_data(rx_pkt-&gt;buff, rx_pkt-&gt;size);
#endif

</Insert>
<Copy StartSeek="22845" EndSeek="23478"/>
<Insert>/* Transmit pending packets on all ports */
</Insert>
<Copy StartSeek="23529" EndSeek="23560"/>
<Insert>  /* Complete cache write to DDR */
  dcache_l1_l2_drain_write_buffer();

  /* Transmit packets on all active ports */
  eth0_tx();
  eth1_tx();
}



/* Receive packets from port active queues */
void eth_poll(uint8_t port) {
</Insert>
<Copy StartSeek="23802" EndSeek="23847"/>
<Copy StartSeek="24238" EndSeek="24278"/>
<Insert>  
  /* Read cause register */
  cause = DPA_REG_READ(NETA_INTR_NEW_CAUSE_REG(port));
</Insert>
<Copy StartSeek="24388" EndSeek="24485"/>
<Insert>
</Insert>
<Copy StartSeek="24489" EndSeek="24558"/>
<Insert>
</Insert>
<Copy StartSeek="24561" EndSeek="24771"/>
<Insert>  /* Return rx decriptors to Gunit */
</Insert>
<Copy StartSeek="24809" EndSeek="24968"/>
<Insert>}

</Insert>
<Copy StartSeek="24998" EndSeek="24999"/>
<Copy StartSeek="25029" EndSeek="25594"/>
<Insert>  /* Clean the Tx descriptor */
  dcache_l1_l2_clean_single_line((uint32_t)tx_desc);

  /* Clean &amp; invalidate the header. On Rx will not need to invalidate */
  dcache_l1_l2_clean_invalidate_double_line((uint32_t)pkt-&gt;phy_hdr);

</Insert>
<Copy StartSeek="25594" EndSeek="27757"/>
<Insert>      /* Invalidate cache for packet header and add to pool */
      dcache_l1_l2_invalidate_double_line(MEM_ALIGN_DOWN((uint32_t)pkt-&gt;buff, CPU_D_CACHE_LINE_SIZE));
</Insert>
<Copy StartSeek="27785" EndSeek="30465"/>
<Insert>  

</Insert>
<Copy StartSeek="30466" EndSeek="31099"/>
<Insert>
  /* Alloc FIQ */
</Insert>
<Copy StartSeek="31190" EndSeek="31220"/>
<Insert>  dpa_os_eth_set_handler(cfg-&gt;port, eth_poll);
  dpa_os_fiq_alloc(p-&gt;irq);

</Insert>
<Copy StartSeek="31313" EndSeek="31433"/>
<Insert>  for (queue = 0; queue &lt; p-&gt;rxq_num; queue++) {
</Insert>
<Copy StartSeek="31484" EndSeek="31773"/>
<Insert>  /* Active ports list */
  if (p-&gt;port == 0) {
      eth0_tx = __eth0_tx;
  } else if (p-&gt;port == 1) {
      eth1_tx = __eth1_tx;
  }

</Insert>
<Copy StartSeek="31773" EndSeek="32303"/>
<Insert>      /* Mask FIQ */
      dpa_os_fiq_free(p-&gt;irq);
      dpa_os_eth_set_handler(port, NULL);

</Insert>
<Copy StartSeek="32370" EndSeek="32852"/>
<Insert>  /* Active ports list */
  if (p-&gt;port == 0) {
      eth0_tx = __eth_tx_empty;
  } else if(p-&gt;port == 1) {
      eth1_tx = __eth_tx_empty;
  }
  
</Insert>
<Copy StartSeek="32852" EndSeek="32963"/>
<Copy StartSeek="32964" EndSeek="33027"/>
<Insert>  DPA_REG_WRITE(NETA_INTR_NEW_MASK_REG(port), ETH_RX_INTR_MASK);
}

</Insert>
<Copy StartSeek="33148" EndSeek="33260"/>
<Insert>}


</Insert>
<Copy StartSeek="33317" EndSeek="33318"/>
</Delta>
<Delta Version="122" Comment="" NL="\10" Encoding="text" Date="2013/02/07" Time="23:12:36000">
<Copy StartSeek="0" EndSeek="22692"/>
<Insert>      pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + NETA_RX_GET_IPHDR_OFFSET(rx_desc));

</Insert>
<Copy StartSeek="23009" EndSeek="33553"/>
</Delta>
<Delta Version="123" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="12:00:57000">
<Copy StartSeek="0" EndSeek="22802"/>
<Insert>		if ((rx_desc-&gt;status &amp; ETH_RX_VLAN_TAGGED_FRAME_MASK))
			ipOffset = MV_ETH_MH_SIZE + sizeof(MV_802_3_HEADER) + MV_VLAN_HLEN;
</Insert>
<Copy StartSeek="22955" EndSeek="33578"/>
</Delta>
<Delta Version="124" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="12:01:52000">
<Copy StartSeek="0" EndSeek="22802"/>
<Insert>		if ((rx_status &amp; ETH_RX_VLAN_TAGGED_FRAME_MASK))
</Insert>
<Copy StartSeek="22851" EndSeek="33576"/>
</Delta>
<Delta Version="125" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="12:02:29000">
<Copy StartSeek="0" EndSeek="22851"/>
<Insert>			pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(MV_802_3_HEADER) + MV_VLAN_HLEN);
</Insert>
<Copy StartSeek="22978" EndSeek="33601"/>
</Delta>
<Delta Version="126" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="12:02:54000">
<Copy StartSeek="0" EndSeek="22851"/>
<Insert>			pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) 
                        (phy_hdr + MV_ETH_MH_SIZE + sizeof(MV_802_3_HEADER) + MV_VLAN_HLEN);
</Insert>
<Copy StartSeek="22951" EndSeek="22958"/>
<Insert>			ipOffset = MV_ETH_MH_SIZE + sizeof(MV_802_3_HEADER);
</Insert>
<Copy StartSeek="23043" EndSeek="33603"/>
</Delta>
<Delta Version="127" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="12:11:1000">
<Copy StartSeek="0" EndSeek="22851"/>
<Insert>			pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t) + MV_VLAN_HLEN);
</Insert>
<Copy StartSeek="22940" EndSeek="33592"/>
</Delta>
<Delta Version="128" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="12:13:22000">
<Copy StartSeek="0" EndSeek="22717"/>
<Insert>		pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + NETA_RX_GET_IPHDR_OFFSET(rx_desc));
</Insert>
<Copy StartSeek="22800" EndSeek="22806"/>
<Insert>		if (rx_status &amp; ETH_RX_VLAN_TAGGED_FRAME_MASK)
			pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_vlan_ethhdr_t));
		else
			pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t));
</Insert>
<Copy StartSeek="23047" EndSeek="33607"/>
</Delta>
<Delta Version="129" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="13:51:1000">
<Copy StartSeek="0" EndSeek="22692"/>
<Insert>#ifdef CONFIG_MV_ETH_PNC
</Insert>
<Copy StartSeek="22692" EndSeek="22775"/>
<Insert>#else
      if (rx_status &amp; ETH_RX_VLAN_TAGGED_FRAME_MASK)
        pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_vlan_ethhdr_t));
      else
	pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t));
#endif

      

</Insert>
<Copy StartSeek="22776" EndSeek="33320"/>
</Delta>
<Delta Version="130" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:42:47000">
<Copy StartSeek="0" EndSeek="22692"/>
<Copy StartSeek="22717" EndSeek="22800"/>
<Insert>
</Insert>
<Copy StartSeek="22807" EndSeek="33351"/>
</Delta>
<Delta Version="131" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:43:6000">
<Copy StartSeek="0" EndSeek="23047"/>
<Insert>      p-&gt;ops.pkt_rx(pkt);
</Insert>
<Copy StartSeek="23070" EndSeek="33348"/>
</Delta>
<Delta Version="132" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="16:39:34000">
<Copy StartSeek="0" EndSeek="23047"/>
<Insert>      dpa_pkt_rx(pkt);
</Insert>
<Copy StartSeek="23073" EndSeek="33351"/>
</Delta>
<Delta Version="133" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="16:41:15000">
<Copy StartSeek="0" EndSeek="22162"/>
<Insert>          p-&gt;stats.rx_errors++;
</Insert>
<Copy StartSeek="22194" EndSeek="22948"/>
<Insert>          p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="22981" EndSeek="23319"/>
<Insert>          p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="23352" EndSeek="23381"/>
<Insert>      p-&gt;stats.rx_pkts++;
</Insert>
<Copy StartSeek="23407" EndSeek="33351"/>
</Delta>
<Delta Version="134" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:15:40000">
<Copy StartSeek="0" EndSeek="25907"/>
<Insert>  p-&gt;stats.tx_pkts++;
</Insert>
<Copy StartSeek="25929" EndSeek="33351"/>
</Delta>
<Delta Version="135" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:16:15000">
<Copy StartSeek="0" EndSeek="25379"/>
<Insert>     p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="25407" EndSeek="33351"/>
</Delta>
<Delta Version="136" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:16:24000">
<Copy StartSeek="0" EndSeek="25929"/>
<Insert>  p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="25963" EndSeek="33351"/>
</Delta>
<Delta Version="137" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:17:29000">
<Copy StartSeek="0" EndSeek="23047"/>
<Insert>      p-&gt;ops.pkt_rx(pkt);
</Insert>
<Copy StartSeek="23070" EndSeek="33348"/>
</Delta>
<Delta Version="138" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:19:45000">
<Copy StartSeek="0" EndSeek="23047"/>
<Insert>      dpa_pkt_rx(pkt);
</Insert>
<Copy StartSeek="23073" EndSeek="33351"/>
</Delta>
<Delta Version="139" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:22:57000">
<Copy StartSeek="0" EndSeek="23407"/>
<Insert>      p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="23445" EndSeek="33351"/>
</Delta>
<Delta Version="140" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:23:11000">
<Copy StartSeek="0" EndSeek="25524"/>
<Insert>  p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="25579" EndSeek="33351"/>
</Delta>
<Delta Version="141" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:23:43000">
<Copy StartSeek="0" EndSeek="23407"/>
<Insert>//    p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="23445" EndSeek="33351"/>
</Delta>
<Delta Version="142" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:25:8000">
<Copy StartSeek="0" EndSeek="25929"/>
<Insert>//p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="25963" EndSeek="33351"/>
</Delta>
<Delta Version="143" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:25:24000">
<Copy StartSeek="0" EndSeek="25524"/>
<Insert>//p-&gt;stats.tx_bytes += tx_desc-&gt;data_size = pkt-&gt;size;
</Insert>
<Copy StartSeek="25579" EndSeek="25907"/>
<Insert>//p-&gt;stats.tx_pkts++;
</Insert>
<Copy StartSeek="25931" EndSeek="33353"/>
</Delta>
<Delta Version="144" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:53:27000">
<Copy StartSeek="0" EndSeek="25907"/>
<Insert>  //p-&gt;stats.tx_pkts++;
</Insert>
<Copy StartSeek="25929" EndSeek="33351"/>
</Delta>
<Delta Version="145" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="18:07:13000">
<Copy StartSeek="0" EndSeek="23407"/>
<Insert>      p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="23445" EndSeek="33351"/>
</Delta>
<Delta Version="146" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="18:08:15000">
<Copy StartSeek="0" EndSeek="25907"/>
<Insert>  p-&gt;stats.tx_pkts++;
</Insert>
<Copy StartSeek="25929" EndSeek="33351"/>
</Delta>
<Delta Version="147" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="18:08:40000">
<Copy StartSeek="0" EndSeek="25929"/>
<Insert>  p-&gt;stats.tx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="25963" EndSeek="33351"/>
</Delta>
<Delta Version="148" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="18:09:36000">
<Copy StartSeek="0" EndSeek="873"/>
<Insert>//#define ETH_DEBUG
</Insert>
<Copy StartSeek="891" EndSeek="1492"/>
<Insert>#define ETH_MAX_MTU 1500
</Insert>
<Copy StartSeek="1552" EndSeek="3793"/>
<Insert>//static eth_port_t *eth2 = &amp;eth_ports[2];
//static eth_port_t *eth3 = &amp;eth_ports[3];

</Insert>
<Copy StartSeek="3835" EndSeek="10843"/>
<Copy StartSeek="10892" EndSeek="11149"/>
<Insert> 
</Insert>
<Copy StartSeek="11150" EndSeek="11176"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
        for (addr = curr; addr &lt;= top; addr += 32) {
</Insert>
<Copy StartSeek="11337" EndSeek="11380"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
        for (addr = curr; addr &lt;= rxq-&gt;last; addr += 32) {
</Insert>
<Copy StartSeek="11551" EndSeek="11583"/>
<Insert>      /* FIXME Found to cause instability under high traffic 
       for (addr = rxq-&gt;first; addr &lt;= top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num; addr += 32) {
</Insert>
<Copy StartSeek="11826" EndSeek="21930"/>
<Insert>          
</Insert>
<Copy StartSeek="22095" EndSeek="22182"/>
<Copy StartSeek="22239" EndSeek="22592"/>
<Insert>//        p-&gt;stats.rx_errors++;
</Insert>
<Copy StartSeek="22624" EndSeek="22898"/>
<Copy StartSeek="23001" EndSeek="23340"/>
<Insert>      ETH_DBG("Recvd pkt size port %d, %d bytes", port, pkt-&gt;size);

</Insert>
<Copy StartSeek="23667" EndSeek="23739"/>
<Insert>//        p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="23772" EndSeek="24110"/>
<Insert>//        p-&gt;stats.rx_dropped++;
</Insert>
<Copy StartSeek="24143" EndSeek="24172"/>
<Insert>//    p-&gt;stats.rx_pkts++;
//    p-&gt;stats.rx_bytes += pkt-&gt;size;
</Insert>
<Copy StartSeek="24236" EndSeek="24382"/>
<Insert>
</Insert>
<Copy StartSeek="24450" EndSeek="24591"/>
<Insert>}


</Insert>
<Copy StartSeek="24642" EndSeek="25214"/>
<Copy StartSeek="25253" EndSeek="26323"/>
<Insert>//   p-&gt;stats.tx_dropped++;
</Insert>
<Copy StartSeek="26351" EndSeek="26568"/>
<Insert>
</Insert>
<Copy StartSeek="26789" EndSeek="27071"/>
<Insert>//p-&gt;stats.tx_pkts++;
//p-&gt;stats.tx_bytes += pkt-&gt;size;

</Insert>
<Copy StartSeek="27165" EndSeek="28989"/>
<Insert>      /* Add pkt to pool */
</Insert>
<Copy StartSeek="29149" EndSeek="34459"/>
<Insert>
</Insert>
<Copy StartSeek="34459" EndSeek="34683"/>
</Delta>
<Delta Version="149" Comment="" NL="\10" Encoding="text" Date="2013/04/10" Time="13:43:1000">
<Copy StartSeek="0" EndSeek="873"/>
<Insert>#define ETH_DEBUG
</Insert>
<Copy StartSeek="893" EndSeek="1494"/>
<Insert>#define ETH_MAX_MTU 2048 /* NOTE: ZTE MC_SFU requirement */
</Insert>
<Copy StartSeek="1519" EndSeek="3627"/>
<Copy StartSeek="3679" EndSeek="3853"/>
<Insert>
</Insert>
<Copy StartSeek="3895" EndSeek="10903"/>
<Insert>  dcache_clean_single_line((uint32_t) rx_desc);

</Insert>
<Copy StartSeek="10903" EndSeek="11160"/>
<Insert>
</Insert>
<Copy StartSeek="11162" EndSeek="11188"/>
<Insert>      dcache_invalidate_multi_line(curr, top);
      /* FIXME Found to cause instability under high traffic  
      for (addr = curr; addr &lt;= top; addr += 32) {
</Insert>
<Copy StartSeek="11303" EndSeek="11346"/>
<Insert>      dcache_invalidate_multi_line(curr, rxq-&gt;last);
      /* FIXME Found to cause instability under high traffic
      for (addr = curr; addr &lt;= rxq-&gt;last; addr += 32) {
</Insert>
<Copy StartSeek="11467" EndSeek="11499"/>
<Insert>      dcache_invalidate_multi_line(rxq-&gt;first, top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num);
      /* FIXME Found to cause instability under high traffic
      for (addr = rxq-&gt;first; addr &lt;= top - NETA_DESC_ALIGNED_SIZE * rxq-&gt;num; addr += 32) {
</Insert>
<Copy StartSeek="11655" EndSeek="21759"/>
<Insert>
    /* Invalidate pending Rx descriptors */
    /* FIXME Found to cause instability under high traffic */
    //eth_rx_desc_invalidate(rxq, rx_pending);
          
</Insert>
<Copy StartSeek="21770" EndSeek="21857"/>
<Insert>      dcache_invalidate_single_line((uint32_t)rx_desc);

</Insert>
<Copy StartSeek="21857" EndSeek="22516"/>
<Insert>      /* Invalidate &amp; preload pkt header */
      dcache_invalidate_double_line((uint32_t)(phy_hdr));

</Insert>
<Copy StartSeek="22516" EndSeek="22740"/>
<Insert>#ifdef CONFIG_MV_ETH_PNC
</Insert>
<Copy StartSeek="22740" EndSeek="22823"/>
<Insert>#endif
      ETH_DBG("Recvd pkt size port %d, desc bytes %d, %d bytes",
               port, rx_desc-&gt;data_size, pkt-&gt;size);

#if 0
      dcache_invalidate_multi_line((uint32_t)pkt-&gt;eth_hdr, pkt-&gt;size - 1);
      ETH_DBG("____ PORT %d, %d _____** RX ** size=%d", p-&gt;port, queue, pkt-&gt;size);
      dump_data(pkt-&gt;eth_hdr, 32);
#endif

</Insert>
<Copy StartSeek="22893" EndSeek="23608"/>
<Insert>  /* Complete cache write to DDR */
  dcache_drain_write_buffer();

</Insert>
<Copy StartSeek="23609" EndSeek="23661"/>
<Insert>  if (eth0-&gt;init) {
      eth_tx(eth0);
  }

</Insert>
<Copy StartSeek="23661" EndSeek="23705"/>
<Insert>  
</Insert>
<Copy StartSeek="23706" EndSeek="24326"/>
<Insert>  ETH_DBG("eth_poll, irq %d", irq);
  
</Insert>
<Copy StartSeek="24326" EndSeek="25641"/>
<Insert>  

  /* Clean the Tx descriptor */
  dcache_clean_single_line((uint32_t)tx_desc);

  /* Clean &amp; invalidate the header. On Rx will not need to invalidate */
  dcache_clean_invalidate_double_line((uint32_t)pkt-&gt;phy_hdr);

</Insert>
<Copy StartSeek="25642" EndSeek="25980"/>
<Insert>  ETH_DBG("pkt-&gt;size %u", pkt-&gt;size);
</Insert>
<Copy StartSeek="25981" EndSeek="27805"/>
<Insert>      /* Invalidate cache for packet header and add to pool */
      dcache_invalidate_double_line(MEM_ALIGN_DOWN((uint32_t)pkt-&gt;buff, CPU_D_CACHE_LINE_SIZE));
</Insert>
<Copy StartSeek="27833" EndSeek="33143"/>
<Copy StartSeek="33144" EndSeek="33368"/>
</Delta>
<Delta Version="150" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="13:13:16000">
<Copy StartSeek="0" EndSeek="23661"/>
<Copy StartSeek="23701" EndSeek="23790"/>
<Insert>}


</Insert>
<Copy StartSeek="23838" EndSeek="33452"/>
</Delta>
<Delta Version="151" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="13:14:16000">
<Copy StartSeek="0" EndSeek="23790"/>
<Copy StartSeek="23791" EndSeek="33453"/>
</Delta>
<Delta Version="152" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="13:14:18000">
<Copy StartSeek="0" EndSeek="24887"/>
<Insert>  eth_tx_all();

</Insert>
<Copy StartSeek="24919" EndSeek="33468"/>
</Delta>
<Delta Version="153" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="16:56:59000">
<Copy StartSeek="0" EndSeek="24841"/>
<Insert>  /* Transmit pending packets on all ports */
</Insert>
<Copy StartSeek="24885" EndSeek="33466"/>
</Delta>
<Delta Version="154" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="16:57:2000">
<Copy StartSeek="0" EndSeek="24841"/>
<Insert>  /* Transmit pending packets this ports */
</Insert>
<Copy StartSeek="24884" EndSeek="33465"/>
</Delta>
<Delta Version="155" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="16:57:4000">
<Copy StartSeek="0" EndSeek="24841"/>
<Insert>  /* Transmit pending packets this port */
</Insert>
<Copy StartSeek="24887" EndSeek="33468"/>
</Delta>
<Delta Version="156" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="16:57:10000">
<Copy StartSeek="0" EndSeek="24411"/>
<Insert>  //eth_irq_disable(p-&gt;port);
</Insert>
<Copy StartSeek="24439" EndSeek="33466"/>
</Delta>
<Delta Version="157" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:03:4000">
<Copy StartSeek="0" EndSeek="25115"/>
<Insert>  //eth_irq_enable(p-&gt;port);
</Insert>
<Copy StartSeek="25142" EndSeek="33464"/>
</Delta>
<Delta Version="158" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:03:6000">
<Copy StartSeek="0" EndSeek="24411"/>
<Insert>  eth_irq_disable(p-&gt;port);
</Insert>
<Copy StartSeek="24441" EndSeek="25117"/>
<Insert>  eth_irq_enable(p-&gt;port);
</Insert>
<Copy StartSeek="25146" EndSeek="33468"/>
</Delta>
<Delta Version="159" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:03:25000">
<Copy StartSeek="0" EndSeek="31368"/>
<Insert>  err = dpa_os_irq_alloc(p-&gt;irq, eth_poll, "dpa_eth", p);
</Insert>
<Copy StartSeek="31425" EndSeek="33467"/>
</Delta>
<Delta Version="160" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:08:14000">
<Copy StartSeek="0" EndSeek="24273"/>
<Insert>dpa_irqreturn_t eth_poll(int32_t irq, void *dev) {
</Insert>
<Copy StartSeek="24323" EndSeek="33466"/>
</Delta>
<Delta Version="161" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:08:25000">
<Copy StartSeek="0" EndSeek="24226"/>
<Insert>
</Insert>
<Copy StartSeek="24262" EndSeek="33501"/>
</Delta>
<Delta Version="162" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:08:50000">
<Copy StartSeek="0" EndSeek="24262"/>
<Copy StartSeek="24267" EndSeek="33506"/>
</Delta>
<Delta Version="163" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:10:41000">
<Copy StartSeek="0" EndSeek="24450"/>
<Insert>  //eth_irq_disable(p-&gt;port);
</Insert>
<Copy StartSeek="24478" EndSeek="33504"/>
</Delta>
<Delta Version="164" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:36:21000">
<Copy StartSeek="0" EndSeek="24226"/>
<Insert>uint32_t eth_poll(eth_port_t *port)
{

}
</Insert>
<Copy StartSeek="24227" EndSeek="24273"/>
<Insert>dpa_irqreturn_t eth_irq(int32_t irq, void *dev) {
</Insert>
<Copy StartSeek="24324" EndSeek="33465"/>
</Delta>
<Delta Version="165" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:48:28000">
<Copy StartSeek="0" EndSeek="24411"/>
<Insert>  eth_irq_disable(p-&gt;port);
</Insert>
<Copy StartSeek="24441" EndSeek="31368"/>
<Insert>  err = dpa_os_irq_alloc(p-&gt;irq, eth_irq, "dpa_eth", p);
</Insert>
<Copy StartSeek="31426" EndSeek="33468"/>
</Delta>
<Delta Version="166" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:48:43000">
<Copy StartSeek="0" EndSeek="24411"/>
<Insert>  //eth_irq_disable(p-&gt;port);
</Insert>
<Copy StartSeek="24439" EndSeek="33466"/>
</Delta>
<Delta Version="167" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="18:18:9000">
<Copy StartSeek="0" EndSeek="25115"/>
<Insert>  //eth_irq_enable(p-&gt;port);
</Insert>
<Copy StartSeek="25142" EndSeek="33464"/>
</Delta>
</DeltaFile>
