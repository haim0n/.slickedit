<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="64" Comment="" Date="2012/05/07" Time="14:48:42000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2010, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
* dpa_api.h
*
* Description:
*       Marvell Data Path Acceleration Engine API
*
*/

#ifndef _DPA_API_H_
#define _DPA_API_H_

#ifdef __cplusplus
extern "C" {
#endif

#include &lt;dpa_types.h&gt;


int32_t dpa_init(const uint8_t* dpa_config);
int32_t dpa_shutdown(void);

int32_t dpa_stats_get(dpa_stats_t* stats);
int32_t dpa_stats_clear(void);

int32_t dpa_log_level_set(dpa_log_unit_t id, int32_t log_level);

/* bind/unbind physical if to dpa */
int32_t dpa_if_bind(uint8_t *if_name);
int32_t dpa_if_unbind(uint8_t *if_name);

/* bridge API */
/* add/remove physical/virtual if to/from bridge */
int32_t dpa_bridge_if_add(uint8_t *br_name, uint8_t *if_name);
int32_t dpa_bridge_if_del(uint8_t *br_name, uint8_t *if_name);

typedef enum {
	DPA_BR_RULE_DROP	= 0x1,
	DPA_BR_RULE_ETH_TYPE	= 0x2,
	DPA_BR_RULE_IN_VID	= 0x4,
	DPA_BR_RULE_OUT_VID	= 0x8,
	DPA_BR_RULE_OUT_VLAN_P	= 0x10,
} DPA_BRIDGE_RULE_FLAGS;

typedef struct l2_rule {
	uint16_t eth_type; 		
	uint16_t in_vid; 		/* input vlan id */
	uint16_t out_vid; 		/* set to 0xffff if no vlan header present */
	uint8_t out_vlan_prio; 		/* 3 bit field. IEEE 802.1p priority. If Set to 0xff, val is copied from input vlan header */
	uint32_t mark;
} l2_rule_t;

typedef struct dpa_bridge_rule {
	dpa_bridge_fdb_t *next;
	uint8_t	da[MV_MAC_ADDR_SIZE]; 	/* destination mac address */
	uint8_t	sa[MV_MAC_ADDR_SIZE]; 	/* source mac address */
	uint8_t iif_name[IFNAMSIZ];	/* input interface name. use it instead of iff field */
	uint8_t oif_name[IFNAMSIZ];	/* output interface name use it instead of oif field */
	l2_rule_t l2r;			/* classification/modification params */
	DPA_BRIDGE_RULE_FLAGS flags;
} dpa_bridge_fdb_t;


/* Add/Del bridging forwarding data base entry */
int32_t dpa_bridge_fdb_add(uint8_t *br_name, dpa_bridge_fdb_t *br_fdb);
int32_t dpa_bridge_fdb_del(uint8_t *br_name, dpa_bridge_fdb_t *br_fdb);
dpa_bridge_fdb_t *dpa_bridge_fdb_query(uint8_t *br_name);

/* remove all bridge rules from bridge */
void dpa_bridge_flush(uint8_t *br_name);

#ifdef DPA_VLAN
typedef enum {
	DPA_VLAN_RX_TRANSPARENT                = 0,
	DPA_VLAN_RX_DROP_UNTAGGED              = 1,
	DPA_VLAN_RX_DROP_TAGGED                = 2,
	DPA_VLAN_RX_DROP_UNKNOWN               = 3,
	DPA_VLAN_RX_DROP_UNTAGGED_AND_UNKNOWN  = 4,
} dpa_vlan_rx_mode;

typedef enum {
	DPA_VLAN_TX_TRANSPARENT = 0,
	DPA_VLAN_TX_UNTAGGED    = 1,
	DPA_VLAN_TX_TAGGED      = 2,
} dpa_vlan_tx_mode;

int32_t dpa_vlan_add(uint8_t *vlan_name, uint16_t vid);
int32_t dpa_vlan_del(uint8_t *vlan_name, uint16_t vid);

int32_t dpa_vlan_prio_set(uint8_t *if_name, uint8_t vprio);
int32_t dpa_vlan_vid_set(uint8_t *if_name, uint16_t vid);
int32_t dpa_vlan_rx_mode_set(uint8_t *if_name, dpa_vlan_rx_mode mode);
int32_t dpa_vlan_tx_mode_set(uint8_t *if_name, dpa_vlan_tx_mode mode);
#endif /* DPA_VLAN */

#ifdef DPA_IPV4_FWD
typedef struct dpa_arp_entry {
	uint8_t l3_addr[MV_MAX_L3_ADDR_SIZE];
	uint8_t mac[MV_MAC_ADDR_SIZE];
	uint32_t family;
} dpa_arp_entry_t;

uint32_t dpa_arp_add(dpa_arp_entry_t *arp);
uint32_t dpa_arp_del(dpa_arp_entry_t *arp);
uint32_t dpa_arp_flush(void);

typedef struct dpa_rt_rule {
	uint8_t	dst_l3[MV_MAX_L3_ADDR_SIZE];
	uint8_t	dst_l3_gw[MV_MAX_L3_ADDR_SIZE];
	uint32_t dst_mask_len;
	uint32_t family;
	uint32_t mtu;
	uint8_t oif_name[IFNAMSIZ];
} dpa_rt_rule_t;

uint32_t dpa_rt_rule_add(dpa_rt_rule_t *rule);
uint32_t dpa_rt_rule_del(dpa_rt_rule_t *rule);
uint32_t dpa_rt_rule_flush(void);
#endif /* DPA_IPV4_FWD */

#ifdef DPA_CONNTRACK
typedef enum {
	DPA_CT_RULE_FLAG_SNAT          = 0X1
	DPA_CT_RULE_FLAG_DNAT          = 0X2,
	DPA_CT_RULE_FLAG_DROP          = 0X4,
	DPA_CT_RULE_FLAG_SET_DSCP      = 0X8,
	DPA_CT_RULE_FLAG_SET_VLAN_PRIO = 0X10,
	DPA_CT_RULE_FLAG_SET_VLAN_ID   = 0X20,
	DPA_CT_RULE_FLAG_SET_TXQ       = 0X40,
	DPA_CT_RULE_FLAG_SET_TXP       = 0X80,
	DPA_CT_RULE_FLAG_SET_MH        = 0X100,
} dpa_ct_rule_flags;

typedef struct dpa_rule_ct_mod {
	/* NAT ipv4 only */
	uint32_t new_sip;
	uint32_t new_dip;
	uint16_t new_sport;
	uint16_t new_dport;

	uint8_t new_dscp;
	uint8_t new_vlan_prio;
	uint16_t new_vlan_id;
	uint8_t new_txq;
	uint8_t new_txp;
	uint8_t new_mh;
} dpa_rule_ct_mod_t;

typedef struct dpa_rule_ct {
	uint32_t family;
	uint8_t srcL3[MV_MAX_L3_ADDR_SIZE];
	uint8_t dstL3[MV_MAX_L3_ADDR_SIZE];
	uint16_t proto;
	uint16_t sport;
	uint16_t dport;
	dpa_ct_rule_flags flags;
	dpa_rule_ct_mod_t mod_params;
	uint32_t age;
} dpa_rule_ct_t;

dpa_ct_rule_add(dpa_rule_ct *rule);
dpa_ct_rule_del(dpa_rule_ct *rule);
dpa_ct_rule_flush(void);
#endif /* DPA_CONNTRACK */

#ifdef __cplusplus
}
#endif

#endif /* _DPA_API_H_ */
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/04/01" Time="14:48:12000">
<Copy StartSeek="0" EndSeek="869"/>
<Copy StartSeek="922" EndSeek="4550"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:18:8000">
<Copy StartSeek="0" EndSeek="869"/>
<Insert>/* HAIM FIXME : remove. it shall be in xml config */
int32_t dpa_auto_learn_set(bool en);

</Insert>
<Copy StartSeek="870" EndSeek="4460"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:18:17000">
<Copy StartSeek="0" EndSeek="828"/>
<Insert>/* enable/disable auto learning agent */

</Insert>
<Copy StartSeek="828" EndSeek="4418"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:18:21000">
<Copy StartSeek="0" EndSeek="828"/>
<Insert>/* bind/unbind dpa interface */
</Insert>
<Copy StartSeek="865" EndSeek="4423"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:30:6000">
<Copy StartSeek="0" EndSeek="865"/>
<Insert>int32_t dpa_if_add(uint8_t *if_name);
int32_t dpa_if_del(uint8_t *if_name);
</Insert>
<Copy StartSeek="945" EndSeek="4427"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:30:36000">
<Copy StartSeek="0" EndSeek="946"/>
<Insert>#ifdef DPA_BRIDGE
</Insert>
<Copy StartSeek="963" EndSeek="4426"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:31:30000">
<Copy StartSeek="0" EndSeek="1938"/>
<Insert>#endif /* DPA_BRIDGE */

</Insert>
<Copy StartSeek="1939" EndSeek="4402"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:31:39000">
<Copy StartSeek="0" EndSeek="963"/>
<Copy StartSeek="1015" EndSeek="4454"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:52:44000">
<Copy StartSeek="0" EndSeek="1141"/>
<Insert>void dpa_bridge_flush(void);

</Insert>
<Copy StartSeek="1200" EndSeek="4483"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:54:38000">
<Copy StartSeek="0" EndSeek="1141"/>
<Insert>/* remove all */
</Insert>
<Copy StartSeek="1181" EndSeek="4506"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:56:0000">
<Copy StartSeek="0" EndSeek="1141"/>
<Insert>/* remove all interfaces from bridge */
void dpa_bridge_flush(uint8_t *br_name);

</Insert>
<Copy StartSeek="1142" EndSeek="1961"/>
<Insert>
</Insert>
<Copy StartSeek="2045" EndSeek="4508"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:56:56000">
<Copy StartSeek="0" EndSeek="1853"/>
<Insert>int32_t dpa_bridge_rule_add(dpa_bridge_rule_t *rule);
</Insert>
<Copy StartSeek="1911" EndSeek="4512"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:58:13000">
<Copy StartSeek="0" EndSeek="1853"/>
<Insert>int32_t dpa_bridge_fdb_rule_add(dpa_bridge_rule_t *rule);
</Insert>
<Copy StartSeek="1906" EndSeek="4507"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:58:32000">
<Copy StartSeek="0" EndSeek="1906"/>
<Insert>int32_t dpa_bridge_rule_del(dpa_bridge_rule_t *rule);
</Insert>
<Copy StartSeek="1959" EndSeek="4506"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:58:55000">
<Copy StartSeek="0" EndSeek="1825"/>
<Insert>/* Add/Del bridging rule */
</Insert>
<Copy StartSeek="1875" EndSeek="4528"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:59:20000">
<Copy StartSeek="0" EndSeek="1803"/>
<Insert>} dpa_bridge_rule_t;
</Insert>
<Copy StartSeek="1823" EndSeek="1874"/>
<Insert>int32_t dpa_bridge_fdb_add(dpa_bridge_rule_t *rule);
int32_t dpa_bridge_fdb_del(dpa_bridge_rule_t *rule);
</Insert>
<Copy StartSeek="1978" EndSeek="4525"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="17:59:45000">
<Copy StartSeek="0" EndSeek="1874"/>
<Insert>int32_t dpa_bridge_fdb_add(dpa_bridge_fdb_t *rule);
int32_t dpa_bridge_fdb_del(dpa_bridge_fdb_t *rule);
</Insert>
<Copy StartSeek="2016" EndSeek="4563"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="18:01:18000">
<Copy StartSeek="0" EndSeek="1945"/>
<Insert>int32_t dpa_bridge_fdb_del(uint8_t *br_name , dpa_bridge_fdb_t *rule);
</Insert>
<Copy StartSeek="2015" EndSeek="4562"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="18:02:56000">
<Copy StartSeek="0" EndSeek="1874"/>
<Insert>int32_t dpa_bridge_fdb_add(uint8_t *br_name , dpa_bridge_fdb_t *rule);
</Insert>
<Copy StartSeek="1944" EndSeek="4561"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="18:03:1000">
<Copy StartSeek="0" EndSeek="1874"/>
<Insert>int32_t dpa_bridge_fdb_add(uint8_t *br_name, dpa_bridge_fdb_t *rule);
int32_t dpa_bridge_fdb_del(uint8_t *br_name, dpa_bridge_fdb_t *rule);
</Insert>
<Copy StartSeek="2018" EndSeek="4565"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="18:03:37000">
<Copy StartSeek="0" EndSeek="1359"/>
<Insert>	uint16_t in_vid; 		/* input vlan id */
	uint16_t out_vid; 		/* set to 0xffff if no vlan header present */
	uint8_t out_vlan_prio; 		/* 3 bit field. IEEE 802.1p priority. If Set to 0xff, val is copied from input vlan header */
</Insert>
<Copy StartSeek="1359" EndSeek="4338"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="18:17:7000">
<Copy StartSeek="0" EndSeek="1529"/>
<Copy StartSeek="1557" EndSeek="4366"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="18:30:6000">
<Copy StartSeek="0" EndSeek="1529"/>
<Insert>	uint16_t ethertype;		/* */
</Insert>
<Copy StartSeek="1556" EndSeek="4365"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="18:30:19000">
<Copy StartSeek="0" EndSeek="1529"/>
<Insert>	uint16_t eth_type;		/* */
</Insert>
<Copy StartSeek="1529" EndSeek="4338"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:17:9000">
<Copy StartSeek="0" EndSeek="1529"/>
<Insert>	DPA_BRIDGE_RULE_FLAGS flags; 	/* bit field */
</Insert>
<Copy StartSeek="1529" EndSeek="4291"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:17:12000">
<Copy StartSeek="0" EndSeek="1550"/>
<Copy StartSeek="1685" EndSeek="4426"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:22:0000">
<Copy StartSeek="0" EndSeek="1550"/>
<Insert>typedef l2_rule {
	dpa_bridge_fdb_t fdb;
	/* HAIM FIXME : add vlan params */
</Insert>
<Copy StartSeek="1617" EndSeek="1630"/>
<Insert>}
void l2_classify_rule_add(l2_rule_t *clr)

</Insert>
<Copy StartSeek="1644" EndSeek="4385"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:25:52000">
<Copy StartSeek="0" EndSeek="1617"/>
<Insert>	uit32 mark;
</Insert>
<Copy StartSeek="1631" EndSeek="4386"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:26:0000">
<Copy StartSeek="0" EndSeek="1617"/>
<Insert>	uint32 mark;
</Insert>
<Copy StartSeek="1633" EndSeek="4388"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:26:3000">
<Copy StartSeek="0" EndSeek="1529"/>
<Copy StartSeek="1545" EndSeek="4404"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:26:32000">
<Copy StartSeek="0" EndSeek="1529"/>
<Copy StartSeek="1583" EndSeek="4458"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:27:11000">
<Copy StartSeek="0" EndSeek="1206"/>
<Insert>
</Insert>
<Copy StartSeek="1303" EndSeek="1716"/>
<Insert>typedef struct l2_rule {
	/* HAIM FIXME : eth_type, vid , vprio */
	uint32_t mark;
} l2_rule_t;

</Insert>
<Copy StartSeek="1717" EndSeek="4458"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:27:20000">
<Copy StartSeek="0" EndSeek="1273"/>
<Copy StartSeek="1288" EndSeek="4473"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:28:25000">
<Copy StartSeek="0" EndSeek="1273"/>
<Insert>	int32_t drop;
</Insert>
<Copy StartSeek="1290" EndSeek="4475"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:28:30000">
<Copy StartSeek="0" EndSeek="1273"/>
<Insert>	int32_t action;
</Insert>
<Copy StartSeek="1304" EndSeek="4489"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:28:56000">
<Copy StartSeek="0" EndSeek="1656"/>
<Insert>	/* HAIM FIXME : add bitfild for each l2rule param */
</Insert>
<Copy StartSeek="1711" EndSeek="4490"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:30:46000">
<Copy StartSeek="0" EndSeek="1943"/>
<Copy StartSeek="2027" EndSeek="4574"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:32:20000">
<Copy StartSeek="0" EndSeek="1943"/>
<Insert>dpa_bridge_fdb_t *dpa_bridge_fdb_query(uint8_t *br_name, dpa_bridge_fdb_t *br_fdb);
</Insert>
<Copy StartSeek="2019" EndSeek="4566"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:32:38000">
<Copy StartSeek="0" EndSeek="2019"/>
<Copy StartSeek="2020" EndSeek="4567"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:32:42000">
<Copy StartSeek="0" EndSeek="1943"/>
<Copy StartSeek="1994" EndSeek="4618"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:33:45000">
<Copy StartSeek="0" EndSeek="2558"/>
<Copy StartSeek="2618" EndSeek="4678"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:37:42000">
<Copy StartSeek="0" EndSeek="2559"/>
<Copy StartSeek="2597" EndSeek="4716"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="19:38:31000">
<Copy StartSeek="0" EndSeek="1231"/>
<Insert>	/* HAIM FIXME : eth_type, vid , vprio */
</Insert>
<Copy StartSeek="1481" EndSeek="4924"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:04:42000">
<Copy StartSeek="0" EndSeek="2805"/>
<Insert>int32_t dpa_vlan_add(uint8_t *vlan_name, uint16_t vid, );

</Insert>
<Copy StartSeek="2918" EndSeek="4978"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:05:26000">
<Copy StartSeek="0" EndSeek="1180"/>
<Copy StartSeek="1288" EndSeek="5086"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:36:33000">
<Copy StartSeek="0" EndSeek="1258"/>
<Insert>	DPA_BR_RULE_OUT_VLAN_P	= 16,
</Insert>
<Copy StartSeek="1290" EndSeek="5088"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:36:43000">
<Copy StartSeek="0" EndSeek="1157"/>
<Insert>	DPA_BR_RULE_DROP	= 1,
	DPA_BR_RULE_ETH_TYPE	= 2,
	DPA_BR_RULE_IN_VID	= 4,
	DPA_BR_RULE_OUT_VID	= 8,
</Insert>
<Copy StartSeek="1266" EndSeek="5096"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:37:8000">
<Copy StartSeek="0" EndSeek="2037"/>
<Insert>	l2_rule_t l2r;
</Insert>
<Copy StartSeek="2057" EndSeek="5100"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:37:55000">
<Copy StartSeek="0" EndSeek="1324"/>
<Insert>typedef struct l2_rule {
</Insert>
<Copy StartSeek="1349" EndSeek="1646"/>
<Insert>} l2_rule_t;
</Insert>
<Copy StartSeek="1659" EndSeek="5100"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:38:45000">
<Copy StartSeek="0" EndSeek="1982"/>
<Insert>	/* HAIM FIXME : add bitfield for each l2rule param */
</Insert>
<Copy StartSeek="1982" EndSeek="5045"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:39:5000">
<Copy StartSeek="0" EndSeek="1324"/>
<Insert>typedef struct br_rule {
</Insert>
<Copy StartSeek="1349" EndSeek="1646"/>
<Insert>} br_rule_t;
</Insert>
<Copy StartSeek="1659" EndSeek="1982"/>
<Insert>	br_rule_t br_rule;
</Insert>
<Copy StartSeek="2053" EndSeek="5096"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:39:44000">
<Copy StartSeek="0" EndSeek="1599"/>
<Insert>	DPA_BRIDGE_RULE_FLAGS action;
</Insert>
<Copy StartSeek="1599" EndSeek="1951"/>
<Insert>	/* HAIM FIXME : add bitfield for each l2rule param */
</Insert>
<Copy StartSeek="1951" EndSeek="1967"/>
<Copy StartSeek="1998" EndSeek="5041"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:41:17000">
<Copy StartSeek="0" EndSeek="1951"/>
<Insert>	l2_rule_t l2r;
</Insert>
<Copy StartSeek="2010" EndSeek="5084"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:41:28000">
<Copy StartSeek="0" EndSeek="2041"/>
<Copy StartSeek="2066" EndSeek="5109"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:42:28000">
<Copy StartSeek="0" EndSeek="1662"/>
<Copy StartSeek="1687" EndSeek="2066"/>
<Insert>	dpa_bridge_fdb_t *next;
</Insert>
<Copy StartSeek="2068" EndSeek="5111"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:42:42000">
<Copy StartSeek="0" EndSeek="2066"/>
<Insert>	
</Insert>
<Copy StartSeek="2066" EndSeek="5109"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:42:46000">
<Copy StartSeek="0" EndSeek="2035"/>
<Insert>	DPA_BRIDGE_RULE_FLAGS action;
</Insert>
<Copy StartSeek="2070" EndSeek="5113"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:43:6000">
<Copy StartSeek="0" EndSeek="2035"/>
<Insert>	DPA_BRIDGE_RULE_FLAGS rule_flags;
</Insert>
<Copy StartSeek="2065" EndSeek="5108"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:43:9000">
<Copy StartSeek="0" EndSeek="2281"/>
<Insert>/* HAIM FIXME : return a list of those guys ..  */
</Insert>
<Copy StartSeek="2281" EndSeek="5057"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:43:35000">
<Copy StartSeek="0" EndSeek="2281"/>
<Insert>dpa_bridge_fdb_t *dpa_bridge_fdb_query(uint8_t *br_name, uint8_t *if_name);
</Insert>
<Copy StartSeek="2339" EndSeek="5039"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:44:4000">
<Copy StartSeek="0" EndSeek="2922"/>
<Insert>int32_t dpa_vlan_add(uint8_t *vlan_name, uint16_t vid);
</Insert>
<Copy StartSeek="2978" EndSeek="5039"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:53:12000">
<Copy StartSeek="0" EndSeek="2828"/>
<Insert>/* HAIM FIXME : add remove, params */
</Insert>
<Copy StartSeek="2856" EndSeek="5029"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:53:16000">
<Copy StartSeek="0" EndSeek="2828"/>
<Insert>/* HAIM FIXME : params ??*/
</Insert>
<Copy StartSeek="2857" EndSeek="5030"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="10:53:17000">
<Copy StartSeek="0" EndSeek="2827"/>
<Insert>
/* HAIM FIXME : params ?? */
</Insert>
<Copy StartSeek="2827" EndSeek="5000"/>
</Delta>
</DeltaFile>
