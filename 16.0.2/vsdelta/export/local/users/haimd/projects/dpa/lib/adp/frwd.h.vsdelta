<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="3" Comment="" Date="2013/07/04" Time="16:30:35000" NL="\10" Encoding="text">
<Insert>#ifndef _ADP_FRWD_H_
#define _ADP_FRWD_H_

#include &lt;adp_types.h&gt;
#include &lt;eth/eth.h&gt;

#include "zte/zte_api_fast.h"

struct adp_pri_key {
	uint32_t sip;
	uint32_t dip;
	/* HAIM FIXME : add IPV6 */
	uint16_t sport;
	uint16_t dport;
	uint32_t protocol; /* NOTE: u32 is for padding */
};

typedef enum {
	DPF_NEW = 0UL,
	DPF_LRN,
	DPF_FWD,
	DPF_LCL,
	DPF_DROP
} adp_flow_states;

#define SET_DPF_STATUS(dpf, stat) ((dpf)-&gt;state = (stat))

struct adp_frwd_l2 {
	uint8_t dmac[6];
	uint8_t smac[6];
	uint16_t eth_type;
	uint16_t vlan_id;
	uint16_t pppoe_sid;
};


struct adp_flow {
	void *attr;
	struct adp_pri_key key;
	struct adp_flow *next; /* Used by fast &amp; slow contexts */
	uint32_t state;
	struct {
		struct adp_pri_key mod_tuple;
		struct adp_frwd_l2 l2;
		uint32_t tx_port; /* FIXME make 8 bit */
		uint32_t tx_queue; /* FIXME make 8 bit */
		uint32_t ops;
	} mod;
	adp_flow_stats_t stats;
	bool is_alive;
	uint16_t group_id;
};

#if 0
struct adp_flow_mc_t {
  void *attr;
  struct adp_pri_key key;
  uint8_t dmac[6];
  uint16_t vlan_id;
  struct adp_flow_mc_t *next; /* Used by fast &amp; slow contexts */
  uint32_t state;
  struct {
    struct adp_pri_key tuple;
    struct adp_frwd_l2 l2[ETH_LAN_PORT_NUM];
    uint32_t tx_port[ETH_LAN_PORT_NUM]; /* FIXME make 8 bit */
    uint32_t ops[ETH_LAN_PORT_NUM];
  } mod;
  adp_flow_stats_t stats;
  bool is_alive;
};

#endif

int32_t adp_frwd_init(void);
void adp_frwd_exit(void);
struct adp_flow *adp_frwd_flow_alloc(void);
void adp_frwd_flow_free(struct adp_flow *dpf);
struct adp_flow *adp_frwd_flow_find(struct adp_pri_key *key);
void adp_frwd_flow_add(struct adp_flow *dpf);
int32_t adp_frwd_flow_remove(struct adp_pri_key *key);
bool adp_frwd_flow_is_alive(struct adp_pri_key *key);
int32_t adp_frwd_flow_get_stats(struct adp_pri_key *key, adp_flow_stats_t *stats);
void adp_frwd_clean_all(void);
adp_flow_states adp_frwd_rx(eth_pkt_t *pkt);

typedef void (*adp_frwd_traverse_cb) (void *);
void adp_frwd_traverse(adp_frwd_traverse_cb cb);
void adp_frwd_mc_traverse(adp_frwd_traverse_cb cb);


#endif /* _ADP_FRWD_H_ */
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2013/06/30" Time="18:27:14000">
<Copy StartSeek="0" EndSeek="1852"/>
<Copy StartSeek="1888" EndSeek="2110"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2013/07/04" Time="15:42:38000">
<Copy StartSeek="0" EndSeek="1852"/>
<Insert>void adp_frwd_get_hash_stats(void);
</Insert>
<Copy StartSeek="1883" EndSeek="2105"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2013/07/04" Time="15:44:57000">
<Copy StartSeek="0" EndSeek="1852"/>
<Insert>void adp_frwd_get_stats(void);
</Insert>
<Copy StartSeek="1852" EndSeek="2074"/>
</Delta>
</DeltaFile>
