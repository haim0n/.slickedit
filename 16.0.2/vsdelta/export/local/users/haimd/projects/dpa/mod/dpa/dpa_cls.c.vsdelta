<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="2493" Comment="" Date="2013/06/02" Time="17:52:10000" NL="\10" Encoding="text">
<Insert>#include &lt;dpa_types.h&gt;
#include &lt;log/log.h&gt;
#include &lt;util/string.h&gt;
#include &lt;dpa/../../platform/linux_kernel_space/eth/eth_regs.h&gt;
#include &lt;util/xxhash.h&gt;

#include "dpa_cls.h"
#include "dpa_cls_mm.h"
#include "dpa_mdf.h"

#ifdef __DPA_DEBUG__
#define DPA_CLS_DBG(format, args...) DPA_DBG(format, ##args)
#else
#define DPA_CLS_DBG(format, args...) 
#endif

#define DPA_CLS_ERR(format, args...) DPA_ERROR(format, ##args)

#define DPA_CLS_TBL_SZ (1&lt;&lt;15)
#define DPA_LRN_PKTS 10

#define MAC_PFMT(mac) mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]
#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"

#define NIPQUAD(addr) \
  ((unsigned char *)&amp;addr)[0], \
  ((unsigned char *)&amp;addr)[1], \
  ((unsigned char *)&amp;addr)[2], \
  ((unsigned char *)&amp;addr)[3]
#define NIPQUAD_FMT "%u.%u.%u.%u"

char *dpa_entry_state_names[]  = {
	"NEW",
	"LRN",
	"FWD",
	"LCL",
};

static uint32_t dpe_cmd_flag = 0;
/* HAIM FIXME : rw protection is needed ! */
static struct dpa_entry *dpa_entry_tbl[DPA_CLS_TBL_SZ];

static void dpa_entry_dump(struct dpa_entry *dpe)
{
#ifdef __DPA_DEBUG__
	struct dpa_pri_key *tup = &amp;dpe-&gt;org.cls_tuple;
	struct dpa_pri_key *mod_tup = &amp;dpe-&gt;mod.mod_tuple;
	struct dpa_l2 *l2_org = &amp;dpe-&gt;org.l2;
	struct dpa_l2 *l2_mod = &amp;dpe-&gt;mod.l2;

	DPA_CLS_DBG("org dmac= "MAC_FMT" smac= "MAC_FMT" eth_type:%#x vlan:%u",
		 MAC_PFMT(l2_org-&gt;dmac), MAC_PFMT(l2_org-&gt;smac), 
		 dpa_ntohs(l2_org-&gt;eth_type), dpa_ntohs(l2_org-&gt;vlan_id));

	DPA_CLS_DBG("org ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
		 tup-&gt;protocol,
		 NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
		 NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));

	DPA_CLS_DBG("mod dmac= "MAC_FMT" smac= "MAC_FMT " eth_type:%#x vlan:%u",
	  MAC_PFMT(l2_mod-&gt;dmac), MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
		    dpa_ntohs(l2_mod-&gt;vlan_id));

	DPA_CLS_DBG("mod ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
	  mod_tup-&gt;protocol,
	  NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
	  NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));

	DPA_CLS_DBG("state:%s rx:%u fwd:%u mod_ops:%#x\n", 
		 dpa_entry_state_names[dpe-&gt;state],
		 dpe-&gt;counters.rx_hits, dpe-&gt;counters.fwd_hits, 
		 dpe-&gt;mod_ops);
#endif
}

static void dpa_dump_rx_desc(eth_rx_desc_t *rx_desc)
{
#ifdef DEBUG
	uint32_t rx_status = rx_desc-&gt;status;

	DPA_CLS_DBG("(%s:%d) ipv4:%u tcp:%u, udp:%u uc:%lu l4_csum:%u l3_off:%u\n",
		 __func__, __LINE__,
	       NETA_RX_L3_IS_IP4(rx_status), 
	       NETA_RX_L4_IS_TCP(rx_status),
	       NETA_RX_L4_IS_UDP(rx_status),
	      (rx_desc-&gt;pnc_info &amp; NETA_PNC_DA_UC),
		 (rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) != 0,
		 NETA_RX_GET_IPHDR_OFFSET(rx_desc));
#endif
}

/* compares both sa and da. returns 1 if equal */
static inline uint32_t is_modified_mac_addr(const void *a, const void *b)
{
	
	register uint16_t *a16 ,*b16;
	a16 = (uint16_t *)a;
	b16 = (uint16_t *)b;
	
	return  !((*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++));
}

static inline uint32_t dpa_cls_memcmp_14b_16a(const void *a, const void *b)
{
	
	register uint16_t *a16 ,*b16;
	a16 = (uint16_t *)a;
	b16 = (uint16_t *)b;
	
	return  (*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16++ == *b16++) &amp;&amp;
		(*a16 == *b16);
}

static inline void dpa_cls_memcpy_14b_16a(void *a, const void *b)
{
	register uint16_t *a16 ,*b16;
	a16 = (uint16_t *)a;
	b16 = (uint16_t *)b;

	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16 = *b16;
}

static void dpa_entry_init_eth_params(struct dpa_entry *dpe, dpa_eth_hdr_t *eth)
{
	uint32_t *d, *s;
	
	s = (uint32_t *)eth-&gt;h_dest;
	d = (uint32_t *)(&amp;dpe-&gt;org.l2.dmac);
	dpa_cls_memcpy_14b_16a(d, s);

	d = (uint32_t *)(&amp;dpe-&gt;mod.l2.dmac);
	dpa_cls_memcpy_14b_16a(d, s);
}

/* pkt should point to ethhdr */
static inline uint32_t is_dpa_entry_match_l2(struct dpa_l2 *a, uint8_t *pkt)
{
	return dpa_cls_memcmp_14b_16a((uint16_t *)a, (uint16_t *)pkt);
}

static inline uint32_t
is_pri_key_match(struct dpa_pri_key *a, struct dpa_pri_key *b)
{
	register uint32_t *a32, *b32;
	a32 = (uint32_t *)a;
	b32 = (uint32_t *)b;

	return (*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32 == *b32);

//      return (a-&gt;dip == b-&gt;dip) &amp;&amp;
//      	(a-&gt;sip == b-&gt;sip) &amp;&amp;
//      	(a-&gt;protocol == b-&gt;protocol) &amp;&amp;
//      	(a-&gt;sport == b-&gt;sport) &amp;&amp;
//      	(a-&gt;dport == b-&gt;dport);
}

static inline uint32_t is_dpa_entry_match_pkt(struct dpa_entry *dpe,
					  struct dpa_pri_key *cls,
					  uint8_t *pkt)
{
	return is_pri_key_match(&amp;dpe-&gt;org.cls_tuple, cls) &amp;&amp;
		is_dpa_entry_match_l2(&amp;dpe-&gt;org.l2, pkt);
}

static inline struct dpa_entry *dpa_entry_alloc(void)
{
	struct dpa_entry *tmp;

	tmp = dcm_alloc();
	tmp-&gt;state = DPE_NEW;
	tmp-&gt;counters.rx_hits = 0;
	tmp-&gt;counters.fwd_hits = 0;
	tmp-&gt;mod_ops = 0;
	tmp-&gt;mod.tx_port = NULL;
	return tmp;
}

#define SEED 	0
#define LEN	12
#define PRIME1   2654435761U
#define PRIME2   2246822519U
#define PRIME3   3266489917U
#define PRIME4   668265263U
#define PRIME5   0x165667b1
#define _rotl(x,r) (((x) &lt;&lt; (r)) | ((x) &gt;&gt; (32 - (r))))

static inline unsigned int dpa_cls_XXH_small32_12b(const void* key)
{
	register const unsigned char* p = (unsigned char*)key;
	register int idx = SEED + PRIME1;
	register unsigned int crc  = PRIME5;


	crc += ((*(unsigned int*)p) + idx++);
	p+=4;
	crc += _rotl(crc, 17) * PRIME4;
	crc *= PRIME1;
	crc += ((*(unsigned int*)p) + idx++);
	p+=4;
	crc += _rotl(crc, 17) * PRIME4;
	crc *= PRIME1;

	crc += ((*p) + idx++);
	crc *= PRIME1;
	p++;
	crc += ((*p) + idx++);
	crc *= PRIME1;
	p++;
	crc += ((*p) + idx++);
	crc *= PRIME1;
	p++;
	crc += ((*p) + idx++);
	crc *= PRIME1;

	crc += LEN;

	crc ^= crc &gt;&gt; 15;
	crc *= PRIME2;
	crc ^= crc &gt;&gt; 13;
	crc *= PRIME3;
	crc ^= crc &gt;&gt; 16;

	return crc;
}


static struct dpa_entry *dpa_entry_find(struct dpa_pri_key *cls,
					uint8_t *pkt)
{
	uint32_t idx;
	struct dpa_entry **dpe, *tmp;

//	idx = dpa_cls_XXH_small32_12b(cls);
//      idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
	idx = cls-&gt;sport;
//      idx *= PRIME1;
//      idx += cls-&gt;dport;
	idx &amp;= (DPA_CLS_TBL_SZ - 1);
	dpe = &amp;dpa_entry_tbl[idx]; /* head of the chain */
	DPA_CLS_DBG("looking for idx %u\n", idx);

	/* a new guy's in town */
	if (*dpe == NULL) {
		DPA_CLS_DBG("allocating new dpe\n");
		*dpe = dpa_entry_alloc();
		if (*dpe)
			(*dpe)-&gt;next = NULL;
		return *dpe;
	}
	tmp = *dpe;
	do {
		if (is_dpa_entry_match_pkt(tmp, cls, pkt)) {
			DPA_CLS_DBG("match dpe found\n");
			return tmp;
		}
		tmp = tmp-&gt;next;
	} while (tmp);

	/* put him in chains ! */
	DPA_CLS_DBG("dpe collision\n");
	tmp = dpa_entry_alloc();
	tmp-&gt;next = *dpe;
	*dpe = tmp;

	return tmp;
}

static inline void dpa_pri_key_init(dpa_ip_hdr_t *iph, dpa_l4_hdr_t *l4,
		struct dpa_pri_key *tup)
{
	tup-&gt;sip = iph-&gt;saddr;
	tup-&gt;dip = iph-&gt;daddr;
	tup-&gt;protocol = iph-&gt;protocol;
	tup-&gt;sport = l4-&gt;source;
	tup-&gt;dport = l4-&gt;dest;
}

static void dpa_dump_pkt(uint8_t *buf, uint32_t bytes)
{
#ifdef DEBUG_DUMP_PKT
  
	uint32_t i = 0;

	DPA_DBG("[%4x]: ", i);
	for (i = 1; i&lt;= bytes; i++) {
		DPA_DBG("%.2x ", (*buf) &amp; 0xff);
		if ((i &amp; 0xf) == 0) {
			DPA_DBG("\n[%4x]: ", i);
		}
		buf++;
	}
#endif
}

static void dpa_cls_clean_all(void)
{
	unsigned int idx;
	struct dpa_entry *e, *next;

	for (idx = 0; idx &lt; DPA_CLS_TBL_SZ; idx++) {
		e = dpa_entry_tbl[idx];
		while (e) {
			next = e-&gt;next;
			e-&gt;next = NULL;
			/* dpa_memset(e, 0, sizeof(struct dpa_entry)); */
			dcm_free(e);
			e = next;
		}
		dpa_entry_tbl[idx] = NULL;
	}
}

/* invoke from slow path only !*/
void dpa_cls_cmd_clean(void)
{
	DPA_INFO("dpe table wiped!\n");
	dpe_cmd_flag = 1;
	dpa_cls_clean_all();
	dpe_cmd_flag = 0;
}


/* dpa cls entry point */
dpa_entry_states dpa_cls_rx(eth_pkt_t *pkt)
{
	dpa_ip_hdr_t *iph;
	dpa_l4_hdr_t *l4;
	struct dpa_pri_key tup;
	struct dpa_entry *dpe;
	dpa_eth_hdr_t *eth = pkt-&gt;eth_hdr;
	eth_rx_desc_t *rx_desc = pkt-&gt;rx_desc;
	uint32_t rx_status = rx_desc-&gt;status;
  
	if (dpe_cmd_flag)
		return DPE_LCL;
 
	if (!NETA_RX_L3_IS_IP4(rx_status)) {
		if (eth-&gt;h_proto == dpa_ntohs(DPA_ETH_P_ARP)) {
			pkt-&gt;prio = DPA_PKT_PRI_MAX;

			return DPE_LCL;
		}
	}

	pkt-&gt;prio = DPA_PKT_PRI_MIN;

	if (!(NETA_RX_L4_IS_TCP(rx_status) || NETA_RX_L4_IS_UDP(rx_status)) ||
	    NETA_RX_IP_IS_FRAG(rx_status) ||
	    !(rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) ||
	    !(rx_desc-&gt;pnc_info &amp; NETA_PNC_DA_UC)) {
		return DPE_LCL;
	}
	dpa_dump_rx_desc(rx_desc);
	
	iph = pkt-&gt;ip_hdr;
	l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + (iph-&gt;ihl &lt;&lt; 2));
	pkt-&gt;l4_hdr = l4;

	dpa_pri_key_init(iph, l4, &amp;tup); 
	dpe = dpa_entry_find(&amp;tup, (uint8_t *)eth);
	if (!dpe)
		return DPE_LCL;
	pkt-&gt;dpa_handle = (void *)dpe; /* mark the packet as ours */

	switch (dpe-&gt;state) {
	case DPE_FWD:
		dpa_dump_pkt((uint8_t *)eth, 40);
		if (NETA_RX_L4_IS_TCP(rx_status) &amp;&amp; 
		    (((dpa_tcp_hdr_t *)l4)-&gt;fin || ((dpa_tcp_hdr_t *)l4)-&gt;rst)) {
			DPA_CLS_DBG("FIN or RST detected!");
			SET_DPE_STATUS(dpe, DPE_LCL);
			return DPE_LCL;
		}
		dpa_modify_pkt(pkt);

		if (dpe-&gt;mod_ops) {
			uint8_t ip_off =
				(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
			pkt-&gt;cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
				    (ip_off &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
				    ((NETA_RX_GET_IPHDR_HDRLEN(rx_desc)) &lt;&lt; NETA_TX_IP_HLEN_OFFS);
		
			if (dpe-&gt;org.cls_tuple.protocol == DPA_IP_PROTO_UDP)
				pkt-&gt;cmd |= NETA_TX_L4_UDP;
			else
				pkt-&gt;cmd &amp;= ~NETA_TX_L4_UDP;

			pkt-&gt;cmd |= NETA_TX_L4_CSUM_FULL;
		}
		/* Eth egress port */
		pkt-&gt;port = dpe-&gt;mod.tx_port;
    
		/* Eth Tx queue */
		pkt-&gt;queue = 7;	/* FIXME qos2queue(pkt) */
		DPA_CLS_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);

		dpa_dump_pkt((uint8_t *)eth, 40);
		break;
	case DPE_LRN:
		break;
	case DPE_LCL:
		break;
	case DPE_NEW:
		dpa_entry_init_eth_params(dpe, eth);
		dpe-&gt;org.cls_tuple = tup;
		dpe-&gt;mod.mod_tuple = tup;
		
		if (!NETA_RX_IS_VLAN(rx_desc)) {
			dpe-&gt;org.l2.vlan_id = 0;
		} else {
			dpe-&gt;org.l2.vlan_id = ((dpa_vlan_ethhdr_t *)eth)-&gt;h_vlan_TCI;
		}
		if (!NETA_RX_IS_PPPOE(rx_desc)) {
			dpe-&gt;org.l2.pppoe_sid = 0;
		}
		SET_DPE_STATUS(dpe, DPE_LRN);
		dpa_entry_dump(dpe);
		break;
	}

	return dpe-&gt;state;
}

static uint32_t
is_modified_pri_key(struct dpa_entry *dpe, dpa_ip_hdr_t *pkt_iph)
{
	struct dpa_pri_key *mt = &amp;dpe-&gt;mod.mod_tuple;
	dpa_l4_hdr_t *l4;
	uint32_t ret = 0;

	l4 = (dpa_l4_hdr_t*)((uint8_t* )pkt_iph + (pkt_iph-&gt;ihl &lt;&lt; 2));

	if (mt-&gt;sip != pkt_iph-&gt;saddr || 
	    mt-&gt;dip != pkt_iph-&gt;daddr) {
		mt-&gt;sip = pkt_iph-&gt;saddr;
		mt-&gt;dip = pkt_iph-&gt;daddr;
		ret = 1;
	}
	if (mt-&gt;sport != l4-&gt;source || mt-&gt;dport != l4-&gt;dest) {
		mt-&gt;sport = l4-&gt;source;
		mt-&gt;dport = l4-&gt;dest;
		ret = 1;
	}
	return ret;
}

static uint32_t
is_modified_eth_type(struct dpa_entry *dpe, dpa_eth_hdr_t *pkt_eth)
{
	struct dpa_l2 *mod_l2 = &amp;dpe-&gt;mod.l2;

	if (mod_l2-&gt;eth_type != pkt_eth-&gt;h_proto) {
		mod_l2-&gt;eth_type = pkt_eth-&gt;h_proto;

		if (pkt_eth-&gt;h_proto == dpa_ntohs(DPA_ETH_P_8021Q)) {
			dpa_vlan_ethhdr_t *vh = (dpa_vlan_ethhdr_t *)pkt_eth;
			mod_l2-&gt;vlan_id = vh-&gt;h_vlan_TCI;
		}
		return 1;
	}
	if (mod_l2-&gt;eth_type == dpa_ntohs(DPA_ETH_P_8021Q)) {
		dpa_vlan_ethhdr_t *vh = (dpa_vlan_ethhdr_t *)pkt_eth;

		if (mod_l2-&gt;vlan_id != vh-&gt;h_vlan_TCI) {
			mod_l2-&gt;vlan_id = vh-&gt;h_vlan_TCI;
			return 1;
		}
	}
	return 0;
}

static uint32_t
is_modified_l2(struct dpa_entry *dpe, dpa_eth_hdr_t *eth)
{
	uint32_t ret;

	ret = is_modified_eth_type(dpe, eth);
	if (is_modified_mac_addr(dpe-&gt;mod.l2.dmac, eth)) {
		dpa_cls_memcpy_14b_16a(dpe-&gt;mod.l2.dmac, eth);
		return 1;
	}
	return ret;
}

/* stability test: ret 1 if packet differs from dpe record */
static uint32_t
is_dpa_entry_modified(struct dpa_entry *dpe, eth_pkt_t *pkt)
			    
{
	uint32_t ret = 0;
	uint32_t tx_port = pkt-&gt;port;
	
	if (dpe-&gt;mod.tx_port != tx_port) {
		dpe-&gt;mod.tx_port = tx_port;
		ret = 1;
	}
	ret |= is_modified_l2(dpe, pkt-&gt;eth_hdr);
	ret |= is_modified_pri_key(dpe, pkt-&gt;ip_hdr);
	return ret;
}

static void dpa_entry_calc_mod_ops(struct dpa_entry *dpe)
{
	struct dpa_l2 *org_l2 = &amp;dpe-&gt;org.l2;
	struct dpa_l2 *mod_l2 = &amp;dpe-&gt;mod.l2;
	struct dpa_pri_key *org_tup = &amp;dpe-&gt;org.cls_tuple;
	struct dpa_pri_key *mod_tup = &amp;dpe-&gt;mod.mod_tuple;
	

	if (is_modified_mac_addr(dpe-&gt;org.l2.dmac, dpe-&gt;mod.l2.dmac)) {
		dpe-&gt;mod_ops |= DPA_MDF_ETH_CHG| DPA_MDF_IP_V4_TTL;
	}
	if (org_l2-&gt;eth_type == dpa_ntohs(DPA_ETH_P_8021Q)) {
		if (mod_l2-&gt;eth_type == dpa_ntohs(DPA_ETH_P_8021Q)) {
			if (mod_l2-&gt;vlan_id != org_l2-&gt;vlan_id) {
				DPA_CLS_DBG("vlan chg: %u-&gt;%u",
					    dpa_ntohs(org_l2-&gt;vlan_id),
					    dpa_ntohs(mod_l2-&gt;vlan_id));
				dpe-&gt;mod_ops |= DPA_MDF_VLAN_CHG;
			}
		} else if (mod_l2-&gt;eth_type == dpa_ntohs(DPA_ETH_P_IP)) {
			DPA_CLS_DBG("vlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
			dpe-&gt;mod_ops |= DPA_MDF_VLAN_DEL;
		} else {
			/* HAIM FIXME :further check for more headers - e.g. PPPoE */
			DPA_ERROR("Unhandled modification");
			dpe-&gt;mod_ops = 0;
			return;
		}
	} else if (org_l2-&gt;eth_type == dpa_ntohs(DPA_ETH_P_IP)) {
		if (mod_l2-&gt;eth_type == dpa_ntohs(DPA_ETH_P_8021Q)) {
			DPA_CLS_DBG("vlan add: %u", dpa_ntohs(mod_l2-&gt;vlan_id));
			dpe-&gt;mod_ops |= DPA_MDF_VLAN_ADD;
		}
	}

	if (mod_tup-&gt;sip != org_tup-&gt;sip || mod_tup-&gt;dip != org_tup-&gt;dip) {
		dpe-&gt;mod_ops |= DPA_MDF_IP_V4_CHG;
	}
	if (mod_tup-&gt;sport != org_tup-&gt;sport ||
	    mod_tup-&gt;dport != org_tup-&gt;dport) {
		dpe-&gt;mod_ops |= DPA_MDF_L4_CHG;
	}
}

/* OS independent implementation of dpa_tx. Assumes all xmit parsing
   has been done by calling func */
void dpa_cls_tx(eth_pkt_t *pkt)
{
	struct dpa_entry *dpe = (struct dpa_entry *)pkt-&gt;dpa_handle;

	if (!dpe || dpe-&gt;state != DPE_LRN) {
		DPA_CLS_DBG("dpe %p, state %x\n", dpe, (dpe ? dpe-&gt;state : ~0));
		return;
	}
	if (is_dpa_entry_modified(dpe, pkt) &amp;&amp; dpe-&gt;counters.fwd_hits++) {
		DPA_CLS_DBG("UNstable connection, moving to lcl");
		dpe-&gt;state = DPE_LCL;
		dpa_entry_dump(dpe);
		return;
	}
	if (++dpe-&gt;counters.fwd_hits == DPA_LRN_PKTS) {
		DPA_CLS_DBG("stable connection, moving to fwd");
		dpa_entry_calc_mod_ops(dpe);
		dpe-&gt;state = DPE_FWD;
		dpa_entry_dump(dpe);
	}
}

int32_t dpa_cls_init(void)
{
	void *pool = dcm_init(DPA_CLS_TBL_SZ, 
			      sizeof(struct dpa_entry));
	if (!pool)
		return DPA_OUT_OF_MEMORY;
	
	if (dpa_mdf_init())
		return DPA_CONFIG_ERROR;


	return DPA_OK;
}

void dpa_cls_exit(void)
{
	dpa_cls_clean_all();
}
</Insert>
</MostRecent>
<Delta Version="2094" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:26:22000">
<Copy StartSeek="0" EndSeek="1048"/>
<Copy StartSeek="1049" EndSeek="17081"/>
</Delta>
<Delta Version="2095" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:26:24000">
<Copy StartSeek="0" EndSeek="17066"/>
<Insert>	dcm_exit();
}
</Insert>
</Delta>
<Delta Version="2096" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:26:44000">
<Copy StartSeek="0" EndSeek="3035"/>
<Insert>	return (dpe &amp;&amp; (dpe-&gt;state != DPE_INV));
</Insert>
<Copy StartSeek="3066" EndSeek="17093"/>
</Delta>
<Delta Version="2097" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:27:19000">
<Copy StartSeek="0" EndSeek="3069"/>
<Insert>/* returns first valid entry after pos (inclusively) and updates the pos
</Insert>
<Copy StartSeek="3265" EndSeek="3401"/>
<Insert>
</Insert>
<Copy StartSeek="3408" EndSeek="3490"/>
<Insert>		dpe = dpa_entry_tbl[*pos];
</Insert>
<Copy StartSeek="3535" EndSeek="17238"/>
</Delta>
<Delta Version="2098" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:29:31000">
<Copy StartSeek="0" EndSeek="3175"/>
<Insert>   The function returns first valid entry starting at mm_pool[pos]
   and updates the pos
   in case no match found a null will be returned */
</Insert>
<Copy StartSeek="3296" EndSeek="17216"/>
</Delta>
<Delta Version="2099" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:29:56000">
<Copy StartSeek="0" EndSeek="3243"/>
<Insert>   the pos is updated to the matching slot index. */
</Insert>
<Copy StartSeek="3296" EndSeek="17216"/>
</Delta>
<Delta Version="2100" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:29:57000">
<Copy StartSeek="0" EndSeek="3379"/>
<Insert>	pool 
</Insert>
<Copy StartSeek="3445" EndSeek="17275"/>
</Delta>
<Delta Version="2101" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:30:37000">
<Copy StartSeek="0" EndSeek="3445"/>
<Copy StartSeek="3446" EndSeek="17276"/>
</Delta>
<Delta Version="2102" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:30:39000">
<Copy StartSeek="0" EndSeek="3528"/>
<Insert>		dpe = dpa_cls_mm_pool dpa_entry_tbl[*pos];
</Insert>
<Copy StartSeek="3565" EndSeek="17268"/>
</Delta>
<Delta Version="2103" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:30:52000">
<Copy StartSeek="0" EndSeek="3528"/>
<Insert>		dpe = mm_pool dpa_entry_tbl[*pos];
</Insert>
<Copy StartSeek="3551" EndSeek="17254"/>
</Delta>
<Delta Version="2104" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:30:58000">
<Copy StartSeek="0" EndSeek="3497"/>
<Insert>		DPA_DBG("*pos: %u\n", *pos);
</Insert>
<Copy StartSeek="3535" EndSeek="17261"/>
</Delta>
<Delta Version="2105" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:31:8000">
<Copy StartSeek="0" EndSeek="3535"/>
<Insert>		dpe = mm_pool[*pos];
</Insert>
<Copy StartSeek="3561" EndSeek="17264"/>
</Delta>
<Delta Version="2106" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:31:37000">
<Copy StartSeek="0" EndSeek="3535"/>
<Insert>		dpe = (mm_pool + *pos);
</Insert>
<Copy StartSeek="3558" EndSeek="17261"/>
</Delta>
<Delta Version="2107" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:31:58000">
<Copy StartSeek="0" EndSeek="3535"/>
<Insert>		dpe = mm_pool[*pos];
</Insert>
<Copy StartSeek="3561" EndSeek="17264"/>
</Delta>
<Delta Version="2108" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:32:14000">
<Copy StartSeek="0" EndSeek="3490"/>
<Insert>
</Insert>
<Copy StartSeek="3515" EndSeek="3559"/>
<Insert>		dpe = (mm_pool + *pos);
</Insert>
<Copy StartSeek="3562" EndSeek="17265"/>
</Delta>
<Delta Version="2109" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:33:27000">
<Copy StartSeek="0" EndSeek="3562"/>
<Insert>		if (is_valid_cls_entry(dpe))
</Insert>
<Copy StartSeek="3608" EndSeek="3623"/>
<Insert>		(*pos)++;
</Insert>
<Copy StartSeek="3630" EndSeek="17275"/>
</Delta>
<Delta Version="2110" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:33:53000">
<Copy StartSeek="0" EndSeek="3490"/>
<Insert>	dpe = (mm_pool + *pos);
</Insert>
<Copy StartSeek="3492" EndSeek="3536"/>
<Insert>		
		if (is_valid_cls_entry(dpe)) {
			(*pos)++;
</Insert>
<Copy StartSeek="3595" EndSeek="3610"/>
<Insert>		}
		
</Insert>
<Copy StartSeek="3622" EndSeek="17267"/>
</Delta>
<Delta Version="2111" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:34:22000">
<Copy StartSeek="0" EndSeek="1238"/>
<Insert>void *dpa_cls_mm_pool
</Insert>
<Copy StartSeek="1239" EndSeek="17246"/>
</Delta>
<Delta Version="2112" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:34:49000">
<Copy StartSeek="0" EndSeek="3477"/>
<Insert>//      	DPA_DBG("*pos: %u\n", *pos);
</Insert>
<Copy StartSeek="3508" EndSeek="17239"/>
</Delta>
<Delta Version="2113" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:35:37000">
<Copy StartSeek="0" EndSeek="3425"/>
<Copy StartSeek="3461" EndSeek="17275"/>
</Delta>
<Delta Version="2114" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:36:16000">
<Copy StartSeek="0" EndSeek="3425"/>
<Insert>	DPA_DBG("mm_pool: %u\n", mm_pool);
</Insert>
<Copy StartSeek="3461" EndSeek="17275"/>
</Delta>
<Delta Version="2115" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="13:36:20000">
<Copy StartSeek="0" EndSeek="3425"/>
<Insert>	DPA_DBG("mm_pool: %p\n", mm_pool);
</Insert>
<Copy StartSeek="3425" EndSeek="17239"/>
</Delta>
<Delta Version="2116" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="14:26:51000">
<Copy StartSeek="0" EndSeek="3477"/>
<Insert>		DPA_DBG("*pos: %u\n", *pos);
</Insert>
<Copy StartSeek="3477" EndSeek="3598"/>
<Copy StartSeek="3628" EndSeek="17238"/>
</Delta>
<Delta Version="2117" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="14:28:0000">
<Copy StartSeek="0" EndSeek="17238"/>
</Delta>
<Delta Version="2118" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:02:46000">
<Copy StartSeek="0" EndSeek="17238"/>
<Insert>
volatile unsigned int sizeof_dpa_entry(void)
{
        return sizeof(struct dpa_entry);
}
</Insert>
</Delta>
<Delta Version="2119" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:23:27000">
<Copy StartSeek="0" EndSeek="3598"/>
<Insert>	DPA_DBG("*pos: %u\n", *pos);
</Insert>
<Copy StartSeek="3598" EndSeek="17208"/>
</Delta>
<Delta Version="2120" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:35:16000">
<Copy StartSeek="0" EndSeek="3504"/>
<Insert>		if (is_valid_cls_entry(dpe)) 
</Insert>
<Copy StartSeek="3550" EndSeek="3565"/>
<Copy StartSeek="3569" EndSeek="17226"/>
</Delta>
<Delta Version="2121" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:51:33000">
<Copy StartSeek="0" EndSeek="3537"/>
<Insert>			(*pos)++;
</Insert>
<Copy StartSeek="3537" EndSeek="17213"/>
</Delta>
<Delta Version="2122" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:51:46000">
<Copy StartSeek="0" EndSeek="3504"/>
<Insert>		if (is_valid_cls_entry(dpe)) {
</Insert>
<Copy StartSeek="3535" EndSeek="3550"/>
<Insert>		}
</Insert>
<Copy StartSeek="3550" EndSeek="17207"/>
</Delta>
<Delta Version="2123" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="15:52:9000">
<Copy StartSeek="0" EndSeek="1239"/>
<Insert>//static void dpa_cls_entry_dump(struct dpa_entry *dpe)
//{
//        struct dpa_pri_key *tup = &amp;dpe-&gt;org.cls_tuple;
//        struct dpa_pri_key *mod_tup = &amp;dpe-&gt;mod.mod_tuple;
//        struct dpa_l2 *l2_org = &amp;dpe-&gt;org.l2;
//        struct dpa_l2 *l2_mod = &amp;dpe-&gt;mod.l2;
//        char buf[1024];
//        char *tmp = buf;
//
//        tmp += dpa_sprintf(tmp,"\norg dmac= "MAC_FMT" smac= "MAC_FMT" eth_type:%#x vlan:%u\n",
//                           MAC_PFMT(l2_org-&gt;dmac), MAC_PFMT(l2_org-&gt;smac),
//                           dpa_ntohs(l2_org-&gt;eth_type), dpa_ntohs(l2_org-&gt;vlan_id));
//
//        tmp += dpa_sprintf(tmp,"org ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
//                           tup-&gt;protocol,
//                           NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
//                           NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));
//
//        tmp += dpa_sprintf(tmp,"mod dmac= "MAC_FMT" smac= "MAC_FMT " eth_type:%#x vlan:%u\n",
//                           MAC_PFMT(l2_mod-&gt;dmac), MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
//                           dpa_ntohs(l2_mod-&gt;vlan_id));
//
//        tmp += dpa_sprintf(tmp,"mod ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
//                           mod_tup-&gt;protocol,
//                           NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
//                           NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));
//
//        dpa_sprintf(tmp,"state:%s rx_pkts:%u fwd:%u mod_ops:%#x\n",
//                    dpa_get_state_name[dpe-&gt;state],
//                    dpe-&gt;counters.rx_hits, dpe-&gt;counters.fwd_hits,
//                    dpe-&gt;mod_ops);
//
//        DPA_INFO("%s", buf);
//}

</Insert>
<Copy StartSeek="1239" EndSeek="15499"/>
</Delta>
<Delta Version="2124" Comment="" NL="\10" Encoding="text" Date="2013/01/16" Time="16:15:9000">
<Copy StartSeek="0" EndSeek="1716"/>
<Insert>
</Insert>
<Copy StartSeek="1742" EndSeek="1794"/>
<Copy StartSeek="1848" EndSeek="15578"/>
</Delta>
<Delta Version="2125" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="09:56:15000">
<Copy StartSeek="0" EndSeek="1716"/>
<Insert>	unsigned int count = 0;

</Insert>
<Copy StartSeek="1717" EndSeek="1769"/>
<Insert>		if ((++count &amp; 0xfffff) == 0) {
			DPA_DBG("");
		}
</Insert>
<Copy StartSeek="1769" EndSeek="15499"/>
</Delta>
<Delta Version="2126" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="09:58:40000">
<Copy StartSeek="0" EndSeek="1769"/>
<Copy StartSeek="1784" EndSeek="15514"/>
</Delta>
<Delta Version="2127" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="09:59:29000">
<Copy StartSeek="0" EndSeek="1769"/>
<Insert>		DPA_DBG("");
</Insert>
<Copy StartSeek="1812" EndSeek="15542"/>
</Delta>
<Delta Version="2128" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:00:36000">
<Copy StartSeek="0" EndSeek="1769"/>
<Insert>		if ((*pos &amp; 0xfff) {
</Insert>
<Copy StartSeek="1798" EndSeek="15548"/>
</Delta>
<Delta Version="2129" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:00:44000">
<Copy StartSeek="0" EndSeek="1798"/>
<Insert>			DPA_DBG("");
</Insert>
<Copy StartSeek="1818" EndSeek="15552"/>
</Delta>
<Delta Version="2130" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:00:50000">
<Copy StartSeek="0" EndSeek="1769"/>
<Insert>		if ((*pos &amp; 0xfff) == 0) {
</Insert>
<Copy StartSeek="1803" EndSeek="15557"/>
</Delta>
<Delta Version="2131" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:01:23000">
<Copy StartSeek="0" EndSeek="1803"/>
<Insert>			DPA_DBG("*pos");
</Insert>
<Copy StartSeek="1833" EndSeek="15567"/>
</Delta>
<Delta Version="2132" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:01:33000">
<Copy StartSeek="0" EndSeek="1769"/>
<Insert>		if (((*pos +1) &amp; 0xfff) == 0) {
</Insert>
<Copy StartSeek="1804" EndSeek="15568"/>
</Delta>
<Delta Version="2133" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:03:34000">
<Copy StartSeek="0" EndSeek="1769"/>
<Insert>		if (((*pos +1) &amp; 0xffff) == 0) {
</Insert>
<Copy StartSeek="1805" EndSeek="15569"/>
</Delta>
<Delta Version="2134" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:04:26000">
<Copy StartSeek="0" EndSeek="1769"/>
<Insert>		if (((*pos + 1) &amp; 0xffff) == 0) {
</Insert>
<Copy StartSeek="1805" EndSeek="15569"/>
</Delta>
<Delta Version="2135" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:05:28000">
<Copy StartSeek="0" EndSeek="1805"/>
<Insert>			DPA_DBG("*pos %u\n",*pos);
</Insert>
<Copy StartSeek="1833" EndSeek="15567"/>
</Delta>
<Delta Version="2136" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:06:43000">
<Copy StartSeek="0" EndSeek="7605"/>
<Insert>//void dpa_cls_dump_all(void)
//{
//        unsigned int idx;
//        struct dpa_entry *e;
//
//        dpe_cmd_flag = 1;
//        for (idx = 0; idx &lt; DPA_CLS_TBL_SZ; idx++) {
//                e = dpa_entry_tbl[idx];
//                while (e) {
//                        dpa_cls_entry_dump(e);
//                        e = e-&gt;next;
//                }
//        }
//        dpe_cmd_flag = 0;
//}

</Insert>
<Copy StartSeek="7605" EndSeek="15163"/>
</Delta>
<Delta Version="2137" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:09:52000">
<Copy StartSeek="0" EndSeek="1761"/>
<Insert>	
</Insert>
<Copy StartSeek="1762" EndSeek="15162"/>
</Delta>
<Delta Version="2138" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:10:35000">
<Copy StartSeek="0" EndSeek="1768"/>
<Insert>		if (((*pos + 1) &amp; 0x3fff) == 0) {
			DPA_DBG("*pos %u",*pos);
		}
</Insert>
<Copy StartSeek="1768" EndSeek="15094"/>
</Delta>
<Delta Version="2139" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:10:56000">
<Copy StartSeek="0" EndSeek="1626"/>
<Copy StartSeek="1632" EndSeek="1893"/>
<Insert>
</Insert>
<Copy StartSeek="1900" EndSeek="15106"/>
</Delta>
<Delta Version="2140" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:11:20000">
<Copy StartSeek="0" EndSeek="1626"/>
<Insert>#if 0
</Insert>
<Copy StartSeek="1626" EndSeek="1887"/>
<Insert>#endif
</Insert>
<Copy StartSeek="1888" EndSeek="15094"/>
</Delta>
<Delta Version="2141" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:34:58000">
<Copy StartSeek="0" EndSeek="1567"/>
<Insert>struct dpa_entry *dpa_cls_get_first_valid(uint32_t *pos) {
</Insert>
<Copy StartSeek="1626" EndSeek="15094"/>
</Delta>
<Delta Version="2142" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:35:2000">
<Copy StartSeek="0" EndSeek="247"/>
<Insert>	#define DPA_CLS_DBG(format, args...) DPA_DBG(format, ##args)
</Insert>
<Copy StartSeek="308" EndSeek="314"/>
<Insert>	#define DPA_CLS_DBG(format, args...) 
</Insert>
<Copy StartSeek="352" EndSeek="1148"/>
<Insert>
char *dpa_cls_get_state_name(uint32_t state)
{
	return dpa_entry_state_names[state];
}

</Insert>
<Copy StartSeek="1148" EndSeek="8008"/>
<Insert>	// dpe_cls_cmd_exec();
</Insert>
<Copy StartSeek="8029" EndSeek="15000"/>
</Delta>
<Delta Version="2143" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:37:36000">
<Copy StartSeek="0" EndSeek="7445"/>
<Insert>//static void dpe_cls_cmd_exec(void)
//{
//        /* HAIM FIXME : switch to fls() logic */
//        if (!dpe_cmd)
//                return;
//
//        if (dpe_cmd &amp; DPE_CMD_CLEAN) {
//                dpa_cls_clean_all();
//                dpe_cmd &amp;= ~DPE_CMD_CLEAN;
//        }
//}
</Insert>
<Copy StartSeek="7639" EndSeek="14908"/>
</Delta>
<Delta Version="2144" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="10:37:50000">
<Copy StartSeek="0" EndSeek="1355"/>
<Insert>   The function returns first valid entry starting at mm_pool[pos].
   The pos is updated to the matching slot index. */
</Insert>
<Copy StartSeek="1487" EndSeek="7456"/>
<Insert>static void dpe_cls_cmd_exec(void)
</Insert>
<Copy StartSeek="7498" EndSeek="14045"/>
<Insert>	if (dpe_cmd_flag || !dpe || dpe-&gt;state != DPE_LRN) {
</Insert>
<Copy StartSeek="14098" EndSeek="14925"/>
</Delta>
<Delta Version="2145" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:04:49000">
<Copy StartSeek="0" EndSeek="982"/>
<Insert>static uint32_t dpe_cmd_flag = 0;
static void *dpa_cls_mm_pool;

</Insert>
<Copy StartSeek="983" EndSeek="1084"/>
<Copy StartSeek="1114" EndSeek="14011"/>
<Insert>	if (!dpe || dpe-&gt;state != DPE_LRN ||dpe_cmd_flag) {
</Insert>
<Copy StartSeek="14059" EndSeek="14886"/>
</Delta>
<Delta Version="2146" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:17:55000">
<Copy StartSeek="0" EndSeek="1114"/>
<Copy StartSeek="1115" EndSeek="14887"/>
</Delta>
<Delta Version="2147" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:17:56000">
<Copy StartSeek="0" EndSeek="982"/>
<Insert>
</Insert>
<Copy StartSeek="982" EndSeek="14886"/>
</Delta>
<Delta Version="2148" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:17:58000">
<Copy StartSeek="0" EndSeek="7533"/>
<Insert>
</Insert>
<Copy StartSeek="7547" EndSeek="14899"/>
</Delta>
<Delta Version="2149" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:35:3000">
<Copy StartSeek="0" EndSeek="9705"/>
<Copy StartSeek="9733" EndSeek="14927"/>
</Delta>
<Delta Version="2150" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:36:58000">
<Copy StartSeek="0" EndSeek="7419"/>
<Insert>}

</Insert>
<Copy StartSeek="7455" EndSeek="7566"/>
<Insert>	DPA_DBG("");
</Insert>
<Copy StartSeek="7568" EndSeek="14948"/>
</Delta>
<Delta Version="2151" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:41:9000">
<Copy StartSeek="0" EndSeek="7541"/>
<Insert>	if (!dpe_cmd)
</Insert>
<Copy StartSeek="7571" EndSeek="14963"/>
</Delta>
<Delta Version="2152" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:41:32000">
<Copy StartSeek="0" EndSeek="7581"/>
<Insert>	
</Insert>
<Copy StartSeek="7614" EndSeek="14994"/>
</Delta>
<Delta Version="2153" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:42:52000">
<Copy StartSeek="0" EndSeek="7419"/>
<Insert>	DPA_DBG("dpe_cmd %#x",dpe_cmd);
</Insert>
<Copy StartSeek="7421" EndSeek="7550"/>
<Insert>	DPA_DBG("dpe_cmd %#x",dpe_cmd);
</Insert>
<Copy StartSeek="7552" EndSeek="14932"/>
</Delta>
<Delta Version="2154" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:44:45000">
<Copy StartSeek="0" EndSeek="7419"/>
<Insert>	
}

</Insert>
<Copy StartSeek="7422" EndSeek="14930"/>
</Delta>
<Delta Version="2155" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:44:46000">
<Copy StartSeek="0" EndSeek="7916"/>
<Insert>	dpe_cls_cmd_exec();
</Insert>
<Copy StartSeek="7949" EndSeek="14942"/>
</Delta>
<Delta Version="2156" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:50:2000">
<Copy StartSeek="0" EndSeek="7419"/>
<Insert>}

</Insert>
<Copy StartSeek="7472" EndSeek="14992"/>
</Delta>
<Delta Version="2157" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:50:32000">
<Copy StartSeek="0" EndSeek="7472"/>
<Insert>static inline void dpe_cls_cmd_exec(void)
{
	/* HAIM FIXME : switch to fls() logic */
	if (dpe_cmd == DPE_CMD_NONE)
		return;
	
	if (dpe_cmd &amp; DPE_CMD_CLEAN) {
		dpa_cls_clean_all();
		dpe_cmd &amp;= ~DPE_CMD_CLEAN;
	}
}
</Insert>
<Copy StartSeek="7780" EndSeek="15083"/>
</Delta>
<Delta Version="2158" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:50:37000">
<Copy StartSeek="0" EndSeek="14208"/>
<Insert>	if (!dpe || dpe-&gt;state != DPE_LRN ||dpe_cmd) {
</Insert>
<Copy StartSeek="14257" EndSeek="15084"/>
</Delta>
<Delta Version="2159" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:54:19000">
<Copy StartSeek="0" EndSeek="10572"/>
<Insert>//      if (NETA_RX_IS_VLAN(rx_desc)) {
//      	vh = skb-&gt;data + ETH_HLEN;
//      	dpa_cls_info.l2.vlan_id = vh-&gt;h_vlan_TCI;
//      	/* VLAN + IP */
//      	dpa_cls_info.eth_type = vh-&gt;h_vlan_encapsulated_proto;
//      }
}

</Insert>
<Copy StartSeek="10575" EndSeek="14858"/>
</Delta>
<Delta Version="2160" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:55:12000">
<Copy StartSeek="0" EndSeek="7472"/>
<Insert>//static inline void dpe_cls_cmd_exec(void)
//{
//        /* HAIM FIXME : switch to fls() logic */
//        if (dpe_cmd == DPE_CMD_NONE)
//                return;
//
//        if (dpe_cmd &amp; DPE_CMD_CLEAN) {
//                dpa_cls_clean_all();
//                dpe_cmd &amp;= ~DPE_CMD_CLEAN;
//        }
//}

</Insert>
<Copy StartSeek="7472" EndSeek="14549"/>
</Delta>
<Delta Version="2161" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:55:28000">
<Copy StartSeek="0" EndSeek="7419"/>
<Insert>	dpa_cls_clean_all();
	dpe_cmd &amp;= ~DPE_CMD_CLEAN;
}

</Insert>
<Copy StartSeek="7640" EndSeek="7916"/>
<Insert>	if (dpe_cmd)
		return DPE_LCL;

</Insert>
<Copy StartSeek="7937" EndSeek="10419"/>
<Insert>}

</Insert>
<Copy StartSeek="10648" EndSeek="14055"/>
<Insert>	if (!dpe || dpe-&gt;state != DPE_LRN || dpe_cmd) {
</Insert>
<Copy StartSeek="14103" EndSeek="14930"/>
</Delta>
<Delta Version="2162" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:57:49000">
<Copy StartSeek="0" EndSeek="10419"/>
<Insert>//      if (NETA_RX_IS_VLAN(rx_desc)) {
//      	vh = skb-&gt;data + ETH_HLEN;
//      	dpa_cls_info.l2.vlan_id = vh-&gt;h_vlan_TCI;
//      	/* VLAN + IP */
//      	dpa_cls_info.eth_type = vh-&gt;h_vlan_encapsulated_proto;
//      }
}

</Insert>
<Copy StartSeek="10422" EndSeek="14704"/>
</Delta>
<Delta Version="2163" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="13:59:37000">
<Copy StartSeek="0" EndSeek="7937"/>
<Copy StartSeek="7974" EndSeek="14741"/>
</Delta>
<Delta Version="2164" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="14:05:51000">
<Copy StartSeek="0" EndSeek="7937"/>
<Insert>	if (dpe_cmd) {
</Insert>
<Copy StartSeek="7951" EndSeek="7969"/>
<Insert>	}
</Insert>
<Copy StartSeek="7969" EndSeek="14736"/>
</Delta>
<Delta Version="2165" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="14:05:52000">
<Copy StartSeek="0" EndSeek="7937"/>
<Insert>	if (dpe_cmd)
		return DPE_LCL;
</Insert>
<Copy StartSeek="7937" EndSeek="14704"/>
</Delta>
<Delta Version="2166" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="15:18:50000">
<Copy StartSeek="0" EndSeek="7466"/>
<Insert>	/* HAIM FIXME : switch to fls() logic */
</Insert>
<Copy StartSeek="7543" EndSeek="14739"/>
</Delta>
<Delta Version="2167" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="15:27:44000">
<Copy StartSeek="0" EndSeek="7509"/>
<Insert>	   2. move this to timer event*/
</Insert>
<Copy StartSeek="7544" EndSeek="14740"/>
</Delta>
<Delta Version="2168" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="15:27:45000">
<Copy StartSeek="0" EndSeek="7005"/>
<Insert>
</Insert>
<Copy StartSeek="7011" EndSeek="7365"/>
<Insert>
</Insert>
<Copy StartSeek="7649" EndSeek="15028"/>
</Delta>
<Delta Version="2169" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="15:35:56000">
<Copy StartSeek="0" EndSeek="7005"/>
<Insert>#if 0
static void dpa_cls_clean_all(void)
{
	unsigned int idx;
	struct dpa_entry *e, *next;

	for (idx = 0; idx &lt; DPA_CLS_TBL_SZ; idx++) {
		e = dpa_entry_tbl[idx];
		while (e) {
			next = e-&gt;next;
			e-&gt;next = NULL;
			/* dpa_memset(e, 0, sizeof(struct dpa_entry)); */
			e-&gt;state = DPE_INV;
			dcm_free(e);
			e = next;
		}
		dpa_entry_tbl[idx] = NULL;
	}
}
#else
</Insert>
<Copy StartSeek="7006" EndSeek="7277"/>
<Insert>#endif
</Insert>
<Copy StartSeek="7278" EndSeek="14657"/>
</Delta>
<Delta Version="2170" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="15:37:36000">
<Copy StartSeek="0" EndSeek="7044"/>
<Insert>	struct dpa_entry *dpe;
	struct dpa_entry *mm_pool = (struct dpa_entry *)dpa_cls_mm_pool;
</Insert>
<Copy StartSeek="7092" EndSeek="7093"/>
<Insert>	do {
		dpe = (mm_pool + *pos);	
		if (is_valid_cls_entry(dpe))
			return dpe;
		(*pos)++;
	} while (*pos &lt; DPA_CLS_TBL_SZ);

	return NULL;
}

</Insert>
<Copy StartSeek="7361" EndSeek="7466"/>
<Insert>	/* HAIM FIXME : 1. switch to fls() logic,
	   2. move this to timer event */
</Insert>
<Copy StartSeek="7508" EndSeek="14704"/>
</Delta>
<Delta Version="2171" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="15:38:7000">
<Copy StartSeek="0" EndSeek="7422"/>
<Insert>static inline void dpe_cls_cmd_exec(void)
</Insert>
<Copy StartSeek="7464" EndSeek="7916"/>
<Insert>	dpe_cls_cmd_exec();
</Insert>
<Copy StartSeek="7937" EndSeek="14704"/>
</Delta>
<Delta Version="2172" Comment="" NL="\10" Encoding="text" Date="2013/01/17" Time="15:39:22000">
<Copy StartSeek="0" EndSeek="786"/>
<Insert>char *dpa_entry_state_names[] = {
	"INVALID",
</Insert>
<Copy StartSeek="821" EndSeek="857"/>
<Insert>enum dpe_commands {
	DPE_CMD_NONE = 0UL,
	DPE_CMD_CLEAN = 1,
};
static enum dpe_commands dpe_cmd = DPE_CMD_NONE;

</Insert>
<Copy StartSeek="891" EndSeek="992"/>
<Insert>static void *dpa_cls_mm_pool;

static inline uint32_t is_valid_cls_entry(struct dpa_entry *dpe)
{
	return dpe-&gt;state != DPE_INV;
}

/* This is a gross hack - we know how the mm of the entries allocated,
   and allow to peek inside of it.
   The function returns first valid entry starting from mm_pool[pos].
   The pos is updated to the first found valid slot index. */
struct dpa_entry *dpa_cls_get_first_valid(uint32_t *pos)
{
	struct dpa_entry *dpe;
	struct dpa_entry *mm_pool = (struct dpa_entry *)dpa_cls_mm_pool;

	if (*pos &gt;= DPA_CLS_TBL_SZ)
		return NULL;

	do {
		dpe = (mm_pool + *pos);	
		if (is_valid_cls_entry(dpe))
			return dpe;
		(*pos)++;
	} while (*pos &lt; DPA_CLS_TBL_SZ);

	return NULL;
}

</Insert>
<Copy StartSeek="2174" EndSeek="7653"/>
<Insert>			e-&gt;state = DPE_INV;
</Insert>
<Copy StartSeek="7653" EndSeek="7721"/>
<Copy StartSeek="7755" EndSeek="7786"/>
<Insert>	dpe_cmd |= DPE_CMD_CLEAN;
}

static inline void dpa_cls_cmd_exec(void)
{
	/* HAIM FIXME : switch to fls() logic */
	if (dpe_cmd == DPE_CMD_NONE)
		return;
	
	if (dpe_cmd &amp; DPE_CMD_CLEAN) {
		dpa_cls_clean_all();
		dpe_cmd &amp;= ~DPE_CMD_CLEAN;
	}
}

</Insert>
<Copy StartSeek="7883" EndSeek="8158"/>
<Insert>
	dpa_cls_cmd_exec();
</Insert>
<Copy StartSeek="8200" EndSeek="8320"/>
<Copy StartSeek="8321" EndSeek="8347"/>
<Copy StartSeek="8348" EndSeek="8378"/>
<Copy StartSeek="8379" EndSeek="8536"/>
<Insert>	    !(rx_desc-&gt;pnc_info &amp; NETA_PNC_DA_UC)) {
</Insert>
<Copy StartSeek="8578" EndSeek="9970"/>
<Insert>		++dpe-&gt;counters.fwd_hits;
</Insert>
<Copy StartSeek="9970" EndSeek="10539"/>
<Insert>#ifdef __DPA_DEBUG__
		dpa_cls_entry_dump(dpe);
#endif
</Insert>
<Copy StartSeek="10562" EndSeek="10621"/>
<Insert>}

</Insert>
<Copy StartSeek="10850" EndSeek="14257"/>
<Insert>	if (!dpe || dpe-&gt;state != DPE_LRN ||dpe_cmd) {
</Insert>
<Copy StartSeek="14295" EndSeek="14520"/>
<Insert>#ifdef __DPA_DEBUG__
		dpa_cls_entry_dump(dpe);
#endif
</Insert>
<Copy StartSeek="14543" EndSeek="14711"/>
<Insert>#ifdef __DPA_DEBUG__
		dpa_cls_entry_dump(dpe);
#endif
	}
}

</Insert>
<Copy StartSeek="14740" EndSeek="14769"/>
<Insert>	dpa_cls_mm_pool = dcm_init(DPA_CLS_TBL_SZ, 
</Insert>
<Copy StartSeek="14809" EndSeek="14845"/>
<Insert>	if (!dpa_cls_mm_pool)
</Insert>
<Copy StartSeek="14857" EndSeek="15004"/>
<Insert>	if (dpa_cls_mm_pool)
		dcm_exit();
}
</Insert>
</Delta>
<Delta Version="2173" Comment="" NL="\10" Encoding="text" Date="2013/02/07" Time="22:27:8000">
<Copy StartSeek="0" EndSeek="10437"/>
<Insert>		if (!NETA_RX_IS_PPPOE(rx_desc)) {
</Insert>
<Copy StartSeek="10540" EndSeek="10570"/>
<Insert>		}
</Insert>
<Copy StartSeek="10581" EndSeek="15080"/>
</Delta>
<Delta Version="2174" Comment="" NL="\10" Encoding="text" Date="2013/02/07" Time="22:36:57000">
<Copy StartSeek="0" EndSeek="10575"/>
<Insert>		*/ 
</Insert>
<Copy StartSeek="10580" EndSeek="15079"/>
</Delta>
<Delta Version="2175" Comment="" NL="\10" Encoding="text" Date="2013/02/07" Time="22:37:24000">
<Copy StartSeek="0" EndSeek="8536"/>
<Insert>	    NETA_PNC_RX_IS_NOT_DA_UC(rx_desc)) {
</Insert>
<Copy StartSeek="8575" EndSeek="15076"/>
</Delta>
<Delta Version="2176" Comment="" NL="\10" Encoding="text" Date="2013/02/07" Time="23:00:50000">
<Copy StartSeek="0" EndSeek="9595"/>
<Insert>				    ((NETA_RX_GET_IPHDR_HDRLEN(rx_desc)) &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9641" EndSeek="15051"/>
</Delta>
<Delta Version="2177" Comment="" NL="\10" Encoding="text" Date="2013/02/07" Time="23:07:35000">
<Copy StartSeek="0" EndSeek="9595"/>
<Insert>				    ((iph-&gt;ihl) &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9639" EndSeek="15049"/>
</Delta>
<Delta Version="2178" Comment="" NL="\10" Encoding="text" Date="2013/02/07" Time="23:07:51000">
<Copy StartSeek="0" EndSeek="8161"/>
<Copy StartSeek="8212" EndSeek="15100"/>
</Delta>
<Delta Version="2179" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:10:59000">
<Copy StartSeek="0" EndSeek="8161"/>
<Insert>	printk(KERN_ERR "(%s:%d)\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8161" EndSeek="15049"/>
</Delta>
<Delta Version="2180" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:11:5000">
<Copy StartSeek="0" EndSeek="2229"/>
<Insert>#ifdef DEBUG
</Insert>
<Copy StartSeek="2244" EndSeek="2630"/>
<Insert>#endif
</Insert>
<Copy StartSeek="2639" EndSeek="15053"/>
</Delta>
<Delta Version="2181" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:11:16000">
<Copy StartSeek="0" EndSeek="8165"/>
<Copy StartSeek="8220" EndSeek="8259"/>
<Copy StartSeek="8314" EndSeek="8461"/>
<Insert>
</Insert>
<Copy StartSeek="8516" EndSeek="8546"/>
<Insert>
</Insert>
<Copy StartSeek="8601" EndSeek="8846"/>
<Insert>	
</Insert>
<Copy StartSeek="8901" EndSeek="9104"/>
<Insert>
</Insert>
<Copy StartSeek="9159" EndSeek="15378"/>
</Delta>
<Delta Version="2182" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:12:46000">
<Copy StartSeek="0" EndSeek="9330"/>
<Insert>
</Insert>
<Copy StartSeek="9385" EndSeek="15432"/>
</Delta>
<Delta Version="2183" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:12:49000">
<Copy StartSeek="0" EndSeek="7886"/>
<Insert>
</Insert>
<Copy StartSeek="7909" EndSeek="15454"/>
</Delta>
<Delta Version="2184" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:13:47000">
<Copy StartSeek="0" EndSeek="2284"/>
<Insert>	DPA_CLS_DBG("(%s:%d) ipv4:%u tcp:%u, udp:%u uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2357" EndSeek="15450"/>
</Delta>
<Delta Version="2185" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:14:12000">
<Copy StartSeek="0" EndSeek="7882"/>
<Insert>#define KERN_ERR	"&lt;3&gt;"
</Insert>
<Copy StartSeek="7883" EndSeek="8161"/>
<Insert>	printk(KERN_ERR "(%s:%d) DBG\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8161" EndSeek="8200"/>
<Insert>	printk(KERN_ERR "(%s:%d) DBG\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8200" EndSeek="8347"/>
<Insert>	printk(KERN_ERR "(%s:%d) DBG\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8348" EndSeek="8378"/>
<Insert>	printk(KERN_ERR "(%s:%d) DBG\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8379" EndSeek="8624"/>
<Insert>	printk(KERN_ERR "(%s:%d) DBG\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8626" EndSeek="8829"/>
<Insert>	printk(KERN_ERR "(%s:%d) DBG\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8830" EndSeek="9001"/>
<Insert>	printk(KERN_ERR "(%s:%d) DBG\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="9002" EndSeek="15049"/>
</Delta>
<Delta Version="2186" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:14:49000">
<Copy StartSeek="0" EndSeek="8161"/>
<Copy StartSeek="8178" EndSeek="8364"/>
<Insert>
</Insert>
<Copy StartSeek="8381" EndSeek="8411"/>
<Insert>
</Insert>
<Copy StartSeek="8428" EndSeek="8673"/>
<Insert>	
</Insert>
<Copy StartSeek="8690" EndSeek="8893"/>
<Insert>
</Insert>
<Copy StartSeek="8910" EndSeek="9081"/>
<Insert>
</Insert>
<Copy StartSeek="9098" EndSeek="15145"/>
</Delta>
<Delta Version="2187" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:15:20000">
<Copy StartSeek="0" EndSeek="2495"/>
<Insert>	      (rx_desc-&gt;pnc_info &amp; NETA_PNC_DA_UC),
</Insert>
<Copy StartSeek="2533" EndSeek="15138"/>
</Delta>
<Delta Version="2188" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:16:3000">
<Copy StartSeek="0" EndSeek="2229"/>
<Insert>//#ifdef DEBUG
</Insert>
<Copy StartSeek="2242" EndSeek="2617"/>
<Insert>//#endif
</Insert>
<Copy StartSeek="2624" EndSeek="8150"/>
<Insert>	DPA_DBG("DBG");
</Insert>
<Copy StartSeek="8150" EndSeek="8336"/>
<Insert>	DPA_DBG("DBG");
</Insert>
<Copy StartSeek="8337" EndSeek="8367"/>
<Insert>	DPA_DBG("DBG");
</Insert>
<Copy StartSeek="8368" EndSeek="8613"/>
<Insert>	DPA_DBG("DBG");
</Insert>
<Copy StartSeek="8615" EndSeek="8818"/>
<Insert>	DPA_DBG("DBG");
</Insert>
<Copy StartSeek="8819" EndSeek="8990"/>
<Insert>	DPA_DBG("DBG");
</Insert>
<Copy StartSeek="8991" EndSeek="15038"/>
</Delta>
<Delta Version="2189" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:18:36000">
<Copy StartSeek="0" EndSeek="226"/>
<Copy StartSeek="248" EndSeek="15060"/>
</Delta>
<Delta Version="2190" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:52:2000">
<Copy StartSeek="0" EndSeek="2251"/>
<Insert>#ifdef DEBUG
</Insert>
<Copy StartSeek="2266" EndSeek="2641"/>
<Insert>#endif
</Insert>
<Copy StartSeek="2650" EndSeek="15064"/>
</Delta>
<Delta Version="2191" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="17:57:12000">
<Copy StartSeek="0" EndSeek="2306"/>
<Insert>	DPA_DBG("(%s:%d) ipv4:%u tcp:%u, udp:%u uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2381" EndSeek="15066"/>
</Delta>
<Delta Version="2192" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="18:04:8000">
<Copy StartSeek="0" EndSeek="7195"/>
<Insert>#ifdef DEBUG_DUMP_PKT
</Insert>
<Copy StartSeek="7219" EndSeek="7398"/>
<Insert>#endif
</Insert>
<Copy StartSeek="7407" EndSeek="9022"/>
<Insert>
</Insert>
<Copy StartSeek="9057" EndSeek="15104"/>
</Delta>
<Delta Version="2193" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="18:10:18000">
<Copy StartSeek="0" EndSeek="2306"/>
<Insert>	DPA_DBG("(%s:%d) ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2392" EndSeek="2415"/>
<Copy StartSeek="2428" EndSeek="15128"/>
</Delta>
<Delta Version="2194" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="18:18:44000">
<Copy StartSeek="0" EndSeek="9046"/>
<Insert>	dpa_dump_pkt((uint8_t *)eth, 40);
</Insert>
<Copy StartSeek="9048" EndSeek="15095"/>
</Delta>
<Delta Version="2195" Comment="" NL="\10" Encoding="text" Date="2013/02/10" Time="18:19:22000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>
</Insert>
<Copy StartSeek="8356" EndSeek="15523"/>
</Delta>
<Delta Version="2196" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:01:36000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>static void dpa_
</Insert>
<Copy StartSeek="7948" EndSeek="15527"/>
</Delta>
<Delta Version="2197" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:02:4000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>static void dpa_is_l
</Insert>
<Copy StartSeek="7984" EndSeek="8674"/>
<Copy StartSeek="8675" EndSeek="15564"/>
</Delta>
<Delta Version="2198" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:41:4000">
<Copy StartSeek="0" EndSeek="8011"/>
<Insert>      pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + NETA_RX_GET_IPHDR_OFFSET(rx_desc));
</Insert>
<Copy StartSeek="8099" EndSeek="15569"/>
</Delta>
<Delta Version="2199" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:41:25000">
<Copy StartSeek="0" EndSeek="8158"/>
<Insert>        pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_vlan_ethhdr_t));
</Insert>
<Copy StartSeek="8257" EndSeek="15574"/>
</Delta>
<Delta Version="2200" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:41:39000">
<Copy StartSeek="0" EndSeek="7986"/>
<Insert>#ifdef CONFIG_MV_ETH_PNC
      pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (pkt-&gt;phy_hdr + NETA_RX_GET_IPHDR_OFFSET(rx_desc));
#else
</Insert>
<Copy StartSeek="8012" EndSeek="15481"/>
</Delta>
<Delta Version="2201" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:43:35000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>static inline void dpa_reset_network_hdr(eth_pkt_t *pkt)
</Insert>
<Copy StartSeek="7979" EndSeek="15476"/>
</Delta>
<Delta Version="2202" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:44:0000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>static inline void dpa_reset_ip_hdr(eth_pkt_t *pkt)
</Insert>
<Copy StartSeek="7978" EndSeek="15475"/>
</Delta>
<Delta Version="2203" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:44:3000">
<Copy StartSeek="0" EndSeek="8205"/>
<Insert>
</Insert>
<Copy StartSeek="8294" EndSeek="15563"/>
</Delta>
<Delta Version="2204" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:45:11000">
<Copy StartSeek="0" EndSeek="8302"/>
<Insert>	pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t));
</Insert>
<Copy StartSeek="8302" EndSeek="15480"/>
</Delta>
<Delta Version="2205" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:46:44000">
<Copy StartSeek="0" EndSeek="8777"/>
<Insert>
</Insert>
<Copy StartSeek="8800" EndSeek="15502"/>
</Delta>
<Delta Version="2206" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:46:52000">
<Copy StartSeek="0" EndSeek="8006"/>
<Insert>      if (rx_status &amp; ETH_RX_VLAN_TAGGED_FRAME_MASK)
        pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (pkt-&gt;phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_vlan_ethhdr_t));
      else if (eth_hdr-&gt;h_proto == ETH_P_IP) {
	      pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t));
      }
</Insert>
<Copy StartSeek="8276" EndSeek="15476"/>
</Delta>
<Delta Version="2207" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:47:12000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>static inline void dpa_reset_iphdr(eth_pkt_t *pkt)
</Insert>
<Copy StartSeek="7982" EndSeek="8755"/>
<Insert>	dpa_reset_iphdr(pkt);
</Insert>
<Copy StartSeek="8782" EndSeek="15484"/>
</Delta>
<Delta Version="2208" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:48:3000">
<Copy StartSeek="0" EndSeek="8010"/>
<Insert>	if (rx_status &amp; ETH_RX_VLAN_TAGGED_FRAME_MASK)
</Insert>
<Copy StartSeek="8046" EndSeek="15472"/>
</Delta>
<Delta Version="2209" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:51:22000">
<Copy StartSeek="0" EndSeek="8139"/>
<Insert>	else if (eth_hdr-&gt;h_proto == ETH_P_IP) {
		pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t));
	}
</Insert>
<Copy StartSeek="8139" EndSeek="15343"/>
</Delta>
<Delta Version="2210" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:51:53000">
<Copy StartSeek="0" EndSeek="8587"/>
<Insert>
			return DPE_LCL;
		}
	}
</Insert>
<Copy StartSeek="8612" EndSeek="15341"/>
</Delta>
<Delta Version="2211" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:52:19000">
<Copy StartSeek="0" EndSeek="8612"/>
<Insert>	dpa_cls_reset_iphdr(pkt);
</Insert>
<Copy StartSeek="8612" EndSeek="8888"/>
<Insert>	
</Insert>
<Copy StartSeek="8915" EndSeek="15339"/>
</Delta>
<Delta Version="2212" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:52:55000">
<Copy StartSeek="0" EndSeek="8139"/>
<Copy StartSeek="8234" EndSeek="15434"/>
</Delta>
<Delta Version="2213" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:53:59000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>static inline void dpa_cls_reset_iphdr(eth_pkt_t *pkt)
</Insert>
<Copy StartSeek="7980" EndSeek="8981"/>
<Insert>	dpa_cls_reset_iphdr(pkt);
</Insert>
<Copy StartSeek="9006" EndSeek="15430"/>
</Delta>
<Delta Version="2214" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:55:13000">
<Copy StartSeek="0" EndSeek="7927"/>
<Insert>static inline void dpa_cls_set_iphdr(eth_pkt_t *pkt)
</Insert>
<Copy StartSeek="7980" EndSeek="8981"/>
<Insert>	dpa_cls_set_iphdr(pkt);
</Insert>
<Copy StartSeek="9006" EndSeek="15430"/>
</Delta>
<Delta Version="2215" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:55:25000">
<Copy StartSeek="0" EndSeek="8232"/>
<Copy StartSeek="8283" EndSeek="15481"/>
</Delta>
<Delta Version="2216" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:56:2000">
<Copy StartSeek="0" EndSeek="226"/>
<Insert>#define __DPA_DEBUG__
</Insert>
<Copy StartSeek="226" EndSeek="15459"/>
</Delta>
<Delta Version="2217" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="15:59:39000">
<Copy StartSeek="0" EndSeek="7197"/>
<Insert>//#ifdef DEBUG_DUMP_PKT
</Insert>
<Copy StartSeek="7219" EndSeek="7398"/>
<Insert>//#endif
</Insert>
<Copy StartSeek="7405" EndSeek="15455"/>
</Delta>
<Delta Version="2218" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="16:04:56000">
<Copy StartSeek="0" EndSeek="2229"/>
<Insert>//#ifdef DEBUG
</Insert>
<Copy StartSeek="2242" EndSeek="2643"/>
<Insert>//#endif
</Insert>
<Copy StartSeek="2650" EndSeek="15451"/>
</Delta>
<Delta Version="2219" Comment="" NL="\10" Encoding="text" Date="2013/02/11" Time="16:07:48000">
<Copy StartSeek="0" EndSeek="6001"/>
<Insert>	struct dpa_entry **dpe, *tmp, *prev = NULL;
</Insert>
<Copy StartSeek="6053" EndSeek="6270"/>
<Copy StartSeek="6284" EndSeek="8562"/>
<Insert>
</Insert>
<Copy StartSeek="8562" EndSeek="9422"/>
<Insert>	
</Insert>
<Copy StartSeek="9423" EndSeek="15470"/>
</Delta>
<Delta Version="2220" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:02:34000">
<Copy StartSeek="0" EndSeek="6001"/>
<Insert>	struct dpa_entry **dpe, *tmp, *prev = NULL, *dpe2;
</Insert>
<Copy StartSeek="6046" EndSeek="6263"/>
<Insert>	dpe2 = *dpe;
</Insert>
<Copy StartSeek="6263" EndSeek="15449"/>
</Delta>
<Delta Version="2221" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:04:59000">
<Copy StartSeek="0" EndSeek="6001"/>
<Insert>	struct dpa_entry **dpe, *tmp, *prev = NULL;
</Insert>
<Copy StartSeek="6051" EndSeek="6216"/>
<Insert>	dpe = &amp;dpa_entry_tbl[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="6273" EndSeek="6344"/>
<Insert>	if (*dpe == NULL) {
</Insert>
<Copy StartSeek="6370" EndSeek="6409"/>
<Insert>		*dpe = dpa_entry_alloc();
		if (*dpe)
			(*dpe)-&gt;next = NULL;
		return *dpe;
</Insert>
<Copy StartSeek="6508" EndSeek="6511"/>
<Insert>	tmp = *dpe;
</Insert>
<Copy StartSeek="6529" EndSeek="6644"/>
<Insert>			if (tmp != *dpe) {
</Insert>
<Copy StartSeek="6671" EndSeek="6699"/>
<Insert>				tmp-&gt;next = *dpe;
				*dpe = tmp;
</Insert>
<Copy StartSeek="6747" EndSeek="6907"/>
<Insert>	tmp-&gt;next = *dpe;
	*dpe = tmp;
</Insert>
<Copy StartSeek="6949" EndSeek="15514"/>
</Delta>
<Delta Version="2222" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:05:58000">
<Copy StartSeek="0" EndSeek="6001"/>
<Insert>	struct dpa_entry **dpe_list, *tmp, *prev = NULL;
</Insert>
<Copy StartSeek="6057" EndSeek="6279"/>
<Copy StartSeek="6297" EndSeek="15538"/>
</Delta>
<Delta Version="2223" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:07:14000">
<Copy StartSeek="0" EndSeek="6368"/>
<Insert>	if (*dpe_list == NULL) {
</Insert>
<Copy StartSeek="6388" EndSeek="6427"/>
<Insert>		*dpe_list = dpa_entry_alloc();
		if (*dpe_list)
			(*dpe_list)-&gt;next = NULL;
		return *dpe_list;
</Insert>
<Copy StartSeek="6502" EndSeek="6505"/>
<Insert>	tmp = *dpe_list;
</Insert>
<Copy StartSeek="6517" EndSeek="6632"/>
<Insert>			if (tmp != *dpe_list) {
</Insert>
<Copy StartSeek="6653" EndSeek="6681"/>
<Insert>				tmp-&gt;next = *dpe_list;
</Insert>
<Copy StartSeek="6702" EndSeek="6883"/>
<Insert>	tmp-&gt;next = *dpe_list;
</Insert>
<Copy StartSeek="6901" EndSeek="15484"/>
</Delta>
<Delta Version="2224" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:09:50000">
<Copy StartSeek="0" EndSeek="6488"/>
<Copy StartSeek="6507" EndSeek="15503"/>
</Delta>
<Delta Version="2225" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:10:18000">
<Copy StartSeek="0" EndSeek="7855"/>
<Insert>	DPA_INFO("dpe table wiped!\n");
</Insert>
<Copy StartSeek="7855" EndSeek="7915"/>
<Insert>}

</Insert>
<Copy StartSeek="7951" EndSeek="15503"/>
</Delta>
<Delta Version="2226" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:24:18000">
<Copy StartSeek="0" EndSeek="7855"/>
<Copy StartSeek="7888" EndSeek="7948"/>
<Insert>	DPA_INFO("dpe table wiped!\n");
}

</Insert>
<Copy StartSeek="7951" EndSeek="9184"/>
<Insert>	} else {
		l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + 40); /* ipv6 no nesting */
	}
</Insert>
<Copy StartSeek="9287" EndSeek="15526"/>
</Delta>
<Delta Version="2227" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:42:20000">
<Copy StartSeek="0" EndSeek="9184"/>
<Insert>	} 
//      else {
//      	l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + 40); /* ipv6 no nesting */
//      }
</Insert>
<Copy StartSeek="9264" EndSeek="15503"/>
</Delta>
<Delta Version="2228" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:42:58000">
<Copy StartSeek="0" EndSeek="9184"/>
<Insert>	} else {
		l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + 40); /* ipv6 no nesting */
	}
</Insert>
<Copy StartSeek="9187" EndSeek="15426"/>
</Delta>
<Delta Version="2229" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:44:1000">
<Copy StartSeek="0" EndSeek="9782"/>
<Copy StartSeek="9786" EndSeek="15430"/>
</Delta>
<Delta Version="2230" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:45:26000">
<Copy StartSeek="0" EndSeek="9100"/>
<Insert>	if (iph-&gt;version == 4) {
		l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + (iph-&gt;ihl &lt;&lt; 2));
	}
</Insert>
<Copy StartSeek="9159" EndSeek="15402"/>
</Delta>
<Delta Version="2231" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:46:33000">
<Copy StartSeek="0" EndSeek="9157"/>
<Insert>	
</Insert>
<Copy StartSeek="9157" EndSeek="15400"/>
</Delta>
<Delta Version="2232" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="15:46:36000">
<Copy StartSeek="0" EndSeek="9752"/>
<Insert>		{
#else
		{
</Insert>
<Copy StartSeek="9752" EndSeek="9759"/>
<Copy StartSeek="9764" EndSeek="15391"/>
</Delta>
<Delta Version="2233" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="16:17:59000">
<Copy StartSeek="0" EndSeek="8595"/>
<Insert>	if (dpe_cmd_flag)
</Insert>
<Copy StartSeek="8624" EndSeek="15401"/>
</Delta>
<Delta Version="2234" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="16:18:47000">
<Copy StartSeek="0" EndSeek="8595"/>
<Insert>	if (unlikely(dpe_cmd_flag))
</Insert>
<Copy StartSeek="8614" EndSeek="15391"/>
</Delta>
<Delta Version="2235" Comment="" NL="\10" Encoding="text" Date="2013/02/21" Time="16:19:39000">
<Copy StartSeek="0" EndSeek="7824"/>
<Copy StartSeek="7975" EndSeek="15542"/>
</Delta>
<Delta Version="2236" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:52:1000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_dpa_slow_path(void)
</Insert>
<Copy StartSeek="7864" EndSeek="7900"/>
<Insert>	dpe_cmd_flag = 1;
	dpa_cls_clean_all();
}

</Insert>
<Copy StartSeek="7923" EndSeek="15524"/>
</Delta>
<Delta Version="2237" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:52:52000">
<Copy StartSeek="0" EndSeek="7866"/>
<Insert>	DPA_INFO("dpa slow path on!\n");
</Insert>
<Copy StartSeek="7898" EndSeek="15522"/>
</Delta>
<Delta Version="2238" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:53:0000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_dpa_slow_path(bool on)
</Insert>
<Copy StartSeek="7868" EndSeek="15526"/>
</Delta>
<Delta Version="2239" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:53:19000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_dpa_slow_path(uint32_t on)
</Insert>
<Copy StartSeek="7863" EndSeek="15521"/>
</Delta>
<Delta Version="2240" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:53:35000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_dpa_mode(uint32_t on)
</Insert>
<Copy StartSeek="7865" EndSeek="15523"/>
</Delta>
<Delta Version="2241" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:53:51000">
<Copy StartSeek="0" EndSeek="7867"/>
<Insert>	DPA_INFO("dpa slow path !\n");
</Insert>
<Copy StartSeek="7914" EndSeek="15538"/>
</Delta>
<Delta Version="2242" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:54:24000">
<Copy StartSeek="0" EndSeek="7934"/>
<Insert>}

</Insert>
<Copy StartSeek="7974" EndSeek="15575"/>
</Delta>
<Delta Version="2243" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:54:52000">
<Copy StartSeek="0" EndSeek="7934"/>
<Insert>	if (on) {
</Insert>
<Copy StartSeek="7944" EndSeek="7967"/>
<Insert>	}
}

</Insert>
<Copy StartSeek="7970" EndSeek="15571"/>
</Delta>
<Delta Version="2244" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:54:56000">
<Copy StartSeek="0" EndSeek="7934"/>
<Insert>	if (on) 
		dpa_cls_cmd_clean();
}

</Insert>
<Copy StartSeek="7937" EndSeek="15538"/>
</Delta>
<Delta Version="2245" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:56:17000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_dpa_bypass(uint32_t on)
</Insert>
<Copy StartSeek="7865" EndSeek="15538"/>
</Delta>
<Delta Version="2246" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="14:57:29000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_bypass_dpa(uint32_t on)
</Insert>
<Copy StartSeek="7863" EndSeek="15536"/>
</Delta>
<Delta Version="2247" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:18:51000">
<Copy StartSeek="0" EndSeek="7790"/>
<Insert>/* invoke from slow path only !*/
</Insert>
<Copy StartSeek="7790" EndSeek="15502"/>
</Delta>
<Delta Version="2248" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:18:58000">
<Copy StartSeek="0" EndSeek="7790"/>
<Copy StartSeek="7824" EndSeek="15536"/>
</Delta>
<Delta Version="2249" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:19:5000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_fwd_mode(uint32_t on)
</Insert>
<Copy StartSeek="7865" EndSeek="15538"/>
</Delta>
<Delta Version="2250" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:19:15000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_fwd_mode(uint32_t slow)
</Insert>
<Copy StartSeek="7861" EndSeek="15534"/>
</Delta>
<Delta Version="2251" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:19:19000">
<Copy StartSeek="0" EndSeek="7863"/>
<Insert>	DPA_INFO("bypass %s\n", (on ? "on" : "off"));
</Insert>
<Copy StartSeek="7912" EndSeek="15536"/>
</Delta>
<Delta Version="2252" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:19:24000">
<Copy StartSeek="0" EndSeek="7863"/>
<Insert>	DPA_INFO("bypass %s\n", (slow ? "on" : "off"));
</Insert>
<Copy StartSeek="7863" EndSeek="15487"/>
</Delta>
<Delta Version="2253" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:19:41000">
<Copy StartSeek="0" EndSeek="7863"/>
<Insert>	dpe_cmd_flag = on;
</Insert>
<Copy StartSeek="7886" EndSeek="15490"/>
</Delta>
<Delta Version="2254" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:19:47000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_fwd_mode(bool slow)
</Insert>
<Copy StartSeek="7865" EndSeek="7867"/>
<Insert>	dpe_cmd_flag = !slow;
</Insert>
<Copy StartSeek="7894" EndSeek="15498"/>
</Delta>
<Delta Version="2255" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:20:7000">
<Copy StartSeek="0" EndSeek="7867"/>
<Copy StartSeek="7927" EndSeek="15558"/>
</Delta>
<Delta Version="2256" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:20:58000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_fwd_mode(bool fast_fwd)
</Insert>
<Copy StartSeek="7867" EndSeek="15560"/>
</Delta>
<Delta Version="2257" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:42:32000">
<Copy StartSeek="0" EndSeek="7869"/>
<Insert>	DPA_INFO("dpa %s path\n", (fast_fwd ? : "fast" : "slow"));
</Insert>
<Copy StartSeek="7948" EndSeek="15579"/>
</Delta>
<Delta Version="2258" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:42:48000">
<Copy StartSeek="0" EndSeek="7869"/>
<Insert>	DPA_INFO("dpa %s path\n", (mode == DPA_FWD_MODE_S_PATH ? : "fast" : "slow"));
</Insert>
<Copy StartSeek="7946" EndSeek="15577"/>
</Delta>
<Delta Version="2259" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:42:53000">
<Copy StartSeek="0" EndSeek="7946"/>
<Insert>	dpe_cmd_flag = !fast_fwd;
</Insert>
<Copy StartSeek="7991" EndSeek="15595"/>
</Delta>
<Delta Version="2260" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:43:7000">
<Copy StartSeek="0" EndSeek="7946"/>
<Insert>	dpe_cmd_flag = (mode == DPA_FWD_MODE_FAST);
</Insert>
<Copy StartSeek="7993" EndSeek="15597"/>
</Delta>
<Delta Version="2261" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:43:14000">
<Copy StartSeek="0" EndSeek="7869"/>
<Insert>	DPA_INFO("dpa %s path\n", (mode == DPA_FWD_MODE_FAST ? : "fast" : "slow"));
</Insert>
<Copy StartSeek="7944" EndSeek="15595"/>
</Delta>
<Delta Version="2262" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:44:5000">
<Copy StartSeek="0" EndSeek="7824"/>
<Insert>void dpa_cls_cmd_fwd_mode(dpa_mode_t mode)
{
	DPA_INFO("dpa %s path\n", (mode == DPA_FWD_MODE_FAST ? "fast" : "slow"));
	dpe_cmd_flag = (mode == DPA_FWD_MODE_S_PATH);
}

/* invoke from slow path only !*/
</Insert>
<Copy StartSeek="7824" EndSeek="15391"/>
</Delta>
<Delta Version="2263" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="16:36:22000">
<Copy StartSeek="0" EndSeek="9423"/>
<Copy StartSeek="9431" EndSeek="9634"/>
<Copy StartSeek="9643" EndSeek="15408"/>
</Delta>
<Delta Version="2264" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="16:38:21000">
<Copy StartSeek="0" EndSeek="4855"/>
<Insert>	tmp-&gt;counters.rx_hits = 0;
</Insert>
<Copy StartSeek="4890" EndSeek="10983"/>
<Insert>	dpe-&gt;counters.rx_hits++;
</Insert>
<Copy StartSeek="11016" EndSeek="15422"/>
</Delta>
<Delta Version="2265" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:07:1000">
<Copy StartSeek="0" EndSeek="6104"/>
<Insert>	idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
</Insert>
<Copy StartSeek="6204" EndSeek="15483"/>
</Delta>
<Delta Version="2266" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:08:55000">
<Copy StartSeek="0" EndSeek="6204"/>
<Insert>	idx += cls-&gt;sport;
	idx *= PRIME1;
	idx += cls-&gt;dport;
	idx &amp;= (DPA_CLS_TBL_SZ - 1);
</Insert>
<Copy StartSeek="6318" EndSeek="15511"/>
</Delta>
<Delta Version="2267" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:08:59000">
<Copy StartSeek="0" EndSeek="6318"/>
<Insert>	dpe_list = &amp;dpa_entry_tbl[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="6377" EndSeek="15513"/>
</Delta>
<Delta Version="2268" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:09:23000">
<Copy StartSeek="0" EndSeek="6318"/>
<Insert>	dpe_list = &amp;(dpa_entry_tbl +idx); /* head of the chain */
</Insert>
<Copy StartSeek="6378" EndSeek="15514"/>
</Delta>
<Delta Version="2269" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:09:25000">
<Copy StartSeek="0" EndSeek="6104"/>
<Insert>	idx = ((cls-&gt;sip ^ (_rotl(cls-&gt;dip,7)) + cls-&gt;sport) * PRIME1 + cls-&gt;dport) &amp; (DPA_CLS_TBL_SZ -1);
//      idx += cls-&gt;sport;
//      idx *= PRIME1;
//      idx += cls-&gt;dport;
//      idx &amp;= (DPA_CLS_TBL_SZ - 1);
	dpe_list = &amp;(dpa_entry_tbl + idx); /* head of the chain */
</Insert>
<Copy StartSeek="6286" EndSeek="15422"/>
</Delta>
<Delta Version="2270" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:10:31000">
<Copy StartSeek="0" EndSeek="6286"/>
<Insert>	dpe = *dpe_list;
</Insert>
<Copy StartSeek="6313" EndSeek="15431"/>
</Delta>
<Delta Version="2271" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:11:50000">
<Copy StartSeek="0" EndSeek="6286"/>
<Insert>	dpe = dpa_entry_tbl[idx];
</Insert>
<Copy StartSeek="6304" EndSeek="15422"/>
</Delta>
<Delta Version="2272" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:14:10000">
<Copy StartSeek="0" EndSeek="6104"/>
<Insert>	idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
</Insert>
<Copy StartSeek="6150" EndSeek="15429"/>
</Delta>
<Delta Version="2273" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:26:44000">
<Copy StartSeek="0" EndSeek="6150"/>
<Insert>	idx += cls-&gt;sport;
</Insert>
<Copy StartSeek="6169" EndSeek="15428"/>
</Delta>
<Delta Version="2274" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:26:50000">
<Copy StartSeek="0" EndSeek="6150"/>
<Insert>	idx = cls-&gt;sport;
	idx *= PRIME1;
	idx += cls-&gt;dport;
</Insert>
<Copy StartSeek="6243" EndSeek="15466"/>
</Delta>
<Delta Version="2275" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:27:59000">
<Copy StartSeek="0" EndSeek="6150"/>
<Insert>	idx = (cls-&gt;sport * PRIME1) ^ cls-&gt;dport;
</Insert>
<Copy StartSeek="6169" EndSeek="15442"/>
</Delta>
<Delta Version="2276" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:29:37000">
<Copy StartSeek="0" EndSeek="6150"/>
<Insert>	idx = cls-&gt;sport;
</Insert>
<Copy StartSeek="6169" EndSeek="15442"/>
</Delta>
<Delta Version="2277" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:29:48000">
<Copy StartSeek="0" EndSeek="6219"/>
<Insert>	idx &amp;= (DPA_CLS_TBL_SZ - 1);
</Insert>
<Copy StartSeek="6256" EndSeek="15449"/>
</Delta>
<Delta Version="2278" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:30:4000">
<Copy StartSeek="0" EndSeek="6219"/>
<Insert>//      idx &amp;= (DPA_CLS_TBL_SZ - 1);
</Insert>
<Copy StartSeek="6249" EndSeek="15442"/>
</Delta>
<Delta Version="2279" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:30:10000">
<Copy StartSeek="0" EndSeek="6219"/>
<Insert>	idx &amp;= (DPA_CLS_TBL_SZ - 1);
</Insert>
<Copy StartSeek="6256" EndSeek="15449"/>
</Delta>
<Delta Version="2280" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:30:20000">
<Copy StartSeek="0" EndSeek="6150"/>
<Insert>	idx = cls-&gt;dport;
</Insert>
<Copy StartSeek="6192" EndSeek="15472"/>
</Delta>
<Delta Version="2281" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:35:56000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>
</Insert>
<Copy StartSeek="186" EndSeek="4882"/>
<Insert>//      tmp-&gt;counters.rx_hits = 0;
</Insert>
<Copy StartSeek="4910" EndSeek="6124"/>
<Insert>//      idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
	idx = cls-&gt;dport &amp; (DPA_CLS_TBL_SZ - 1);
//      idx *= PRIME1;
//      idx += cls-&gt;dport;
//      idx &amp;= (DPA_CLS_TBL_SZ - 1);
</Insert>
<Copy StartSeek="6249" EndSeek="9450"/>
<Insert>		#if 0
</Insert>
<Copy StartSeek="9450" EndSeek="9653"/>
<Insert>		#endif
</Insert>
<Copy StartSeek="9653" EndSeek="10986"/>
<Insert>//      dpe-&gt;counters.rx_hits++;
</Insert>
<Copy StartSeek="11012" EndSeek="15418"/>
</Delta>
<Delta Version="2282" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="10:11:37000">
<Copy StartSeek="0" EndSeek="15181"/>
<Insert>	void *pool = dcm_init(DPA_CLS_TBL_SZ, 
			      sizeof(struct dpa_entry));
</Insert>
<Copy StartSeek="15288" EndSeek="15449"/>
</Delta>
<Delta Version="2283" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="10:26:47000">
<Copy StartSeek="0" EndSeek="15271"/>
<Insert>	mem_pool_create
</Insert>
<Copy StartSeek="15271" EndSeek="15432"/>
</Delta>
<Delta Version="2284" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="10:26:57000">
<Copy StartSeek="0" EndSeek="15181"/>
<Insert>	mem_pool_t* pool = mem_pool_create(sizeof(struct dpa_entry),
</Insert>
<Copy StartSeek="15248" EndSeek="15437"/>
</Delta>
<Delta Version="2285" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:02:26000">
<Copy StartSeek="0" EndSeek="15181"/>
<Insert>	mem_pool_t* tup5_pool = mem_pool_create(sizeof(struct dpa_entry),
</Insert>
<Copy StartSeek="15243" EndSeek="15432"/>
</Delta>
<Delta Version="2286" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:23:53000">
<Copy StartSeek="0" EndSeek="207"/>
<Insert>#include "dpa_cls_mm.h"
</Insert>
<Copy StartSeek="207" EndSeek="15408"/>
</Delta>
<Delta Version="2287" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:24:27000">
<Copy StartSeek="0" EndSeek="995"/>
<Insert>
</Insert>
<Copy StartSeek="1021" EndSeek="15182"/>
<Insert>	mem_pool_t* pool = mem_pool_create(sizeof(struct dpa_entry),
</Insert>
<Copy StartSeek="15232" EndSeek="15421"/>
</Delta>
<Delta Version="2288" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:25:13000">
<Copy StartSeek="0" EndSeek="7750"/>
<Insert>			dcm_free(e);
</Insert>
<Copy StartSeek="7777" EndSeek="15432"/>
</Delta>
<Delta Version="2289" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:25:47000">
<Copy StartSeek="0" EndSeek="4840"/>
<Insert>	tmp = dcm_alloc();
</Insert>
<Copy StartSeek="4869" EndSeek="15441"/>
</Delta>
<Delta Version="2290" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:26:33000">
<Copy StartSeek="0" EndSeek="7835"/>
<Insert>}

</Insert>
<Copy StartSeek="7863" EndSeek="15466"/>
</Delta>
<Delta Version="2291" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:27:9000">
<Copy StartSeek="0" EndSeek="7835"/>
<Insert>	mem_pool_destroy(pool);
</Insert>
<Copy StartSeek="7837" EndSeek="15441"/>
<Insert>}
</Insert>
</Delta>
<Delta Version="2292" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:27:39000">
<Copy StartSeek="0" EndSeek="15392"/>
<Insert>
</Insert>
<Copy StartSeek="15453" EndSeek="15501"/>
<Insert>	mem_pool_destroy(pool);
</Insert>
<Copy StartSeek="15503" EndSeek="15505"/>
</Delta>
<Delta Version="2293" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:27:59000">
<Copy StartSeek="0" EndSeek="15501"/>
<Insert>	
}
</Insert>
</Delta>
<Delta Version="2294" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:28:2000">
<Copy StartSeek="0" EndSeek="15392"/>
<Insert>void dpa_cls_mm_pools_destroy()
</Insert>
<Copy StartSeek="15428" EndSeek="15505"/>
<Insert>}
</Insert>
</Delta>
<Delta Version="2295" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:28:10000">
<Copy StartSeek="0" EndSeek="15505"/>
<Insert>	dpa_cls_mm_pools_destroy
</Insert>
<Copy StartSeek="15534" EndSeek="15536"/>
</Delta>
<Delta Version="2296" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:28:13000">
<Copy StartSeek="0" EndSeek="185"/>
<Insert>
</Insert>
<Copy StartSeek="185" EndSeek="7834"/>
<Insert>	
}

</Insert>
<Copy StartSeek="7837" EndSeek="15389"/>
<Copy StartSeek="15390" EndSeek="15455"/>
<Copy StartSeek="15456" EndSeek="15535"/>
</Delta>
<Delta Version="2297" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:30:13000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>#include &lt;util/mm_pool.h&gt;
</Insert>
<Copy StartSeek="185" EndSeek="15536"/>
</Delta>
<Delta Version="2298" Comment="" NL="\10" Encoding="text" Date="2013/02/28" Time="11:31:9000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>#include &lt;util/mem_pool.h&gt;

</Insert>
<Copy StartSeek="159" EndSeek="180"/>
<Copy StartSeek="204" EndSeek="424"/>
<Insert>#define DPA_CLS_TBL_SZ (1&lt;&lt;15)
</Insert>
<Copy StartSeek="454" EndSeek="785"/>
<Insert>char *dpa_entry_state_names[]  = {
</Insert>
<Copy StartSeek="831" EndSeek="867"/>
<Insert>static uint32_t dpe_cmd_flag = 0;
</Insert>
<Copy StartSeek="981" EndSeek="1082"/>
<Insert>static mem_pool_t* pool;
</Insert>
<Copy StartSeek="1112" EndSeek="1113"/>
<Insert>static void dpa_entry_dump(struct dpa_entry *dpe)
</Insert>
<Copy StartSeek="1178" EndSeek="1180"/>
<Insert>#ifdef __DPA_DEBUG__
	struct dpa_pri_key *tup = &amp;dpe-&gt;org.cls_tuple;
	struct dpa_pri_key *mod_tup = &amp;dpe-&gt;mod.mod_tuple;
	struct dpa_l2 *l2_org = &amp;dpe-&gt;org.l2;
	struct dpa_l2 *l2_mod = &amp;dpe-&gt;mod.l2;

	DPA_CLS_DBG("org dmac= "MAC_FMT" smac= "MAC_FMT" eth_type:%#x vlan:%u",
		 MAC_PFMT(l2_org-&gt;dmac), MAC_PFMT(l2_org-&gt;smac), 
		 dpa_ntohs(l2_org-&gt;eth_type), dpa_ntohs(l2_org-&gt;vlan_id));

	DPA_CLS_DBG("org ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
		 tup-&gt;protocol,
		 NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
		 NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="1646" EndSeek="1647"/>
<Insert>	DPA_CLS_DBG("mod dmac= "MAC_FMT" smac= "MAC_FMT " eth_type:%#x vlan:%u",
	  MAC_PFMT(l2_mod-&gt;dmac), MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
		    dpa_ntohs(l2_mod-&gt;vlan_id));

	DPA_CLS_DBG("mod ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
	  mod_tup-&gt;protocol,
	  NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
	  NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));

	DPA_CLS_DBG("state:%s rx:%u fwd:%u mod_ops:%#x\n", 
		 dpa_entry_state_names[dpe-&gt;state],
		 dpe-&gt;counters.rx_hits, dpe-&gt;counters.fwd_hits, 
		 dpe-&gt;mod_ops);
#endif
}

</Insert>
<Copy StartSeek="1790" EndSeek="1898"/>
<Insert>	DPA_DBG("(%s:%d)status:%#x, ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="1975" EndSeek="1998"/>
<Insert>		rx_status,
</Insert>
<Copy StartSeek="1998" EndSeek="2113"/>
<Insert>	      NETA_PNC_RX_IS_DA_UC(rx_desc),
</Insert>
<Copy StartSeek="2158" EndSeek="4413"/>
<Insert>	tmp = mem_pool_alloc(pool);
</Insert>
<Copy StartSeek="4433" EndSeek="5602"/>
<Insert>	struct dpa_entry **dpe_list, *tmp, *prev = NULL, *dpe;
</Insert>
<Copy StartSeek="5647" EndSeek="5812"/>
<Insert>	dpe_list = &amp;dpa_entry_tbl[idx]; /* head of the chain */
	dpe = *dpe_list;
</Insert>
<Copy StartSeek="5864" EndSeek="5935"/>
<Insert>	if (dpe == NULL) {
</Insert>
<Copy StartSeek="5956" EndSeek="5995"/>
<Insert>		dpe = dpa_entry_alloc();
		if (dpe)
			(dpe)-&gt;next = NULL;
		*dpe_list = dpe;
		return dpe;
	}
	tmp = dpe;
</Insert>
<Copy StartSeek="6090" EndSeek="6205"/>
<Insert>			if (tmp != dpe) {
</Insert>
<Copy StartSeek="6227" EndSeek="6255"/>
<Insert>				tmp-&gt;next = dpe;
				*dpe_list = tmp;
</Insert>
<Copy StartSeek="6293" EndSeek="6453"/>
<Insert>	tmp-&gt;next = dpe;
	*dpe_list = tmp;
</Insert>
<Copy StartSeek="6485" EndSeek="7269"/>
<Insert>			mem_pool_free(pool, e);
</Insert>
<Copy StartSeek="7308" EndSeek="7360"/>
<Insert>/* invoke from slow path only !*/
</Insert>
<Copy StartSeek="7360" EndSeek="7391"/>
<Insert>	DPA_INFO("dpe table wiped!\n");
	dpe_cmd_flag = 1;
	dpa_cls_clean_all();
	dpe_cmd_flag = 0;
}

static inline void dpa_cls_iphdr_set(eth_pkt_t *pkt)
{
#ifndef CONFIG_MV_ETH_PNC
	if (NETA_RX_IS_VLAN(pkt-&gt;rx_desc))
		pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (pkt-&gt;phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_vlan_ethhdr_t));
	else
		pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (pkt-&gt;phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t));
	/* HAIM FIXME : add parsing for pppoe &amp;&amp; DVLAN */
#endif
}

</Insert>
<Copy StartSeek="7639" EndSeek="7914"/>
<Insert>  
	if (dpe_cmd_flag)
		return DPE_LCL;
 
</Insert>
<Copy StartSeek="7936" EndSeek="8056"/>
<Insert>		}
		return DPE_LCL;
</Insert>
<Copy StartSeek="8079" EndSeek="8112"/>
<Insert>
</Insert>
<Copy StartSeek="8112" EndSeek="8269"/>
<Insert>	    !NETA_PNC_RX_IS_DA_UC(rx_desc)) {
</Insert>
<Copy StartSeek="8315" EndSeek="8364"/>
<Insert>	dpa_cls_iphdr_set(pkt);
</Insert>
<Copy StartSeek="8366" EndSeek="8386"/>
<Insert>	l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + (iph-&gt;ihl &lt;&lt; 2));
</Insert>
<Copy StartSeek="8550" EndSeek="9145"/>
<Copy StartSeek="9155" EndSeek="9162"/>
<Insert>		{

</Insert>
<Copy StartSeek="9162" EndSeek="9335"/>
<Insert>				    (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9406" EndSeek="9707"/>
<Copy StartSeek="9735" EndSeek="10202"/>
<Insert>		/* HAIM FIXME : replace with a fallback when pnc unavaiable */
		/*if (!NETA_RX_IS_PPPOE(rx_desc)) {
</Insert>
<Copy StartSeek="10238" EndSeek="10268"/>
<Insert>		} 
		*/
</Insert>
<Copy StartSeek="10272" EndSeek="10304"/>
<Insert>		dpa_entry_dump(dpe);
</Insert>
<Copy StartSeek="10359" EndSeek="10418"/>
<Insert>//      if (NETA_RX_IS_VLAN(rx_desc)) {
//      	vh = skb-&gt;data + ETH_HLEN;
//      	dpa_cls_info.l2.vlan_id = vh-&gt;h_vlan_TCI;
//      	/* VLAN + IP */
//      	dpa_cls_info.eth_type = vh-&gt;h_vlan_encapsulated_proto;
//      }
}

</Insert>
<Copy StartSeek="10421" EndSeek="13828"/>
<Insert>	if (!dpe || dpe-&gt;state != DPE_LRN) {
</Insert>
<Copy StartSeek="13876" EndSeek="14101"/>
<Insert>		dpa_entry_dump(dpe);
</Insert>
<Copy StartSeek="14156" EndSeek="14324"/>
<Insert>		dpa_entry_dump(dpe);
	}
}

</Insert>
<Copy StartSeek="14385" EndSeek="14414"/>
<Insert>	pool = mem_pool_create(sizeof(struct dpa_entry),
					   DPA_CLS_TBL_SZ, 4);
	if (!pool)
</Insert>
<Copy StartSeek="14518" EndSeek="14617"/>
<Insert>void dpa_cls_mm_pools_destroy(void)
{
	mem_pool_destroy(pool);
}

</Insert>
<Copy StartSeek="14617" EndSeek="14665"/>
<Insert>	dpa_cls_mm_pools_destroy();
}
</Insert>
</Delta>
<Delta Version="2299" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="10:05:49000">
<Copy StartSeek="0" EndSeek="314"/>
<Insert>#define DPA_CLS_DBG(format, args...) 
</Insert>
<Copy StartSeek="351" EndSeek="423"/>
<Insert>#define DPA_CLS_TBL_SZ (1&lt;&lt;1)
</Insert>
<Copy StartSeek="454" EndSeek="785"/>
<Insert>char *dpa_entry_state_names[] = {
	"INVALID",
</Insert>
<Copy StartSeek="820" EndSeek="856"/>
<Insert>enum dpe_commands {
	DPE_CMD_NONE = 0UL,
	DPE_CMD_CLEAN = 1,
};
static enum dpe_commands dpe_cmd = DPE_CMD_NONE;

</Insert>
<Copy StartSeek="890" EndSeek="991"/>
<Insert>static void *dpa_cls_mm_pool;

static inline uint32_t is_valid_cls_entry(struct dpa_entry *dpe)
{
	return dpe-&gt;state != DPE_INV;
}

/* This is a gross hack - we know how the mm of the entries allocated,
   and allow to peek inside of it.
   The function returns first valid entry starting from mm_pool[pos].
   The pos is updated to the first found valid slot index. */
struct dpa_entry *dpa_cls_get_first_valid(uint32_t *pos)
{
	struct dpa_entry *dpe;
	struct dpa_entry *mm_pool = (struct dpa_entry *)dpa_cls_mm_pool;

	if (*pos &gt;= DPA_CLS_TBL_SZ)
		return NULL;

	do {
		dpe = (mm_pool + *pos);	
		if (is_valid_cls_entry(dpe))
			return dpe;
		(*pos)++;
	} while (*pos &lt; DPA_CLS_TBL_SZ);

	return NULL;
}

</Insert>
<Copy StartSeek="2173" EndSeek="2281"/>
<Insert>	DPA_CLS_DBG("(%s:%d) ipv4:%u tcp:%u, udp:%u uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2367" EndSeek="2390"/>
<Copy StartSeek="2403" EndSeek="2518"/>
<Insert>	      (rx_desc-&gt;pnc_info &amp; NETA_PNC_DA_UC),
</Insert>
<Copy StartSeek="2556" EndSeek="4831"/>
<Copy StartSeek="4857" EndSeek="6026"/>
<Insert>	struct dpa_entry **dpe, *tmp, *prev = NULL;
</Insert>
<Copy StartSeek="6082" EndSeek="6247"/>
<Insert>	dpe = &amp;dpa_entry_tbl[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="6322" EndSeek="6393"/>
<Insert>	if (*dpe == NULL) {
</Insert>
<Copy StartSeek="6413" EndSeek="6452"/>
<Insert>		*dpe = dpa_entry_alloc();
		if (*dpe)
			(*dpe)-&gt;next = NULL;
		return *dpe;
	}
	tmp = *dpe;
</Insert>
<Copy StartSeek="6561" EndSeek="6676"/>
<Insert>			if (tmp != *dpe) {
</Insert>
<Copy StartSeek="6697" EndSeek="6725"/>
<Insert>				tmp-&gt;next = *dpe;
				*dpe = tmp;
</Insert>
<Copy StartSeek="6767" EndSeek="6927"/>
<Insert>	tmp-&gt;next = *dpe;
	*dpe = tmp;
</Insert>
<Copy StartSeek="6963" EndSeek="7215"/>
<Copy StartSeek="7216" EndSeek="7316"/>
<Insert>	DPA_DBG("[%4x]: ", i);
</Insert>
<Copy StartSeek="7344" EndSeek="7375"/>
<Insert>		DPA_DBG("%.2x ", (*buf) &amp; 0xff);
</Insert>
<Copy StartSeek="7414" EndSeek="7438"/>
<Insert>			DPA_DBG("\n[%4x]: ", i);
</Insert>
<Copy StartSeek="7470" EndSeek="7760"/>
<Insert>			e-&gt;state = DPE_INV;
</Insert>
<Copy StartSeek="7760" EndSeek="7828"/>
<Copy StartSeek="7862" EndSeek="7893"/>
<Insert>	dpe_cmd |= DPE_CMD_CLEAN;
}

static inline void dpa_cls_cmd_exec(void)
{
	/* HAIM FIXME : switch to fls() logic */
	if (dpe_cmd == DPE_CMD_NONE)
		return;
	
	if (dpe_cmd &amp; DPE_CMD_CLEAN) {
		dpa_cls_clean_all();
		dpe_cmd &amp;= ~DPE_CMD_CLEAN;
	}
}

</Insert>
<Copy StartSeek="8355" EndSeek="8630"/>
<Insert>
	dpa_cls_cmd_exec();
</Insert>
<Copy StartSeek="8672" EndSeek="8792"/>
<Insert>			return DPE_LCL;
		}
</Insert>
<Copy StartSeek="8814" EndSeek="8847"/>
<Copy StartSeek="8848" EndSeek="9005"/>
<Insert>	    !(rx_desc-&gt;pnc_info &amp; NETA_PNC_DA_UC)) {
</Insert>
<Copy StartSeek="9044" EndSeek="9093"/>
<Insert>	
</Insert>
<Copy StartSeek="9118" EndSeek="9138"/>
<Insert>	if (iph-&gt;version == 4) {
		l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + (iph-&gt;ihl &lt;&lt; 2));
	} else {
		l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + 40); /* ipv6 no nesting */
	}
</Insert>
<Copy StartSeek="9195" EndSeek="9295"/>
<Insert>	if (!dpe)
</Insert>
<Copy StartSeek="9308" EndSeek="9326"/>
<Copy StartSeek="9329" EndSeek="9693"/>
<Copy StartSeek="9829" EndSeek="9931"/>
<Insert>#else
		{
</Insert>
<Copy StartSeek="9931" EndSeek="9938"/>
<Copy StartSeek="10029" EndSeek="10157"/>
<Insert>				    (ip_off &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
				    ((NETA_RX_GET_IPHDR_HDRLEN(rx_desc)) &lt;&lt; NETA_TX_IP_HLEN_OFFS);
		
</Insert>
<Copy StartSeek="10300" EndSeek="10471"/>
<Insert>		/* Eth egress port */
		pkt-&gt;port = dpe-&gt;mod.tx_port;
    
		/* Eth Tx queue */
		pkt-&gt;queue = 7;	/* FIXME qos2queue(pkt) */
		++dpe-&gt;counters.fwd_hits;
</Insert>
<Copy StartSeek="10476" EndSeek="10943"/>
<Insert>		if (!NETA_RX_IS_PPPOE(rx_desc)) {
</Insert>
<Copy StartSeek="11046" EndSeek="11076"/>
<Insert>		}
</Insert>
<Copy StartSeek="11086" EndSeek="11118"/>
<Insert>#ifdef __DPA_DEBUG__
		dpa_cls_entry_dump(dpe);
#endif
</Insert>
<Copy StartSeek="11141" EndSeek="11200"/>
<Insert>}

</Insert>
<Copy StartSeek="11429" EndSeek="14836"/>
<Insert>	if (!dpe || dpe-&gt;state != DPE_LRN ||dpe_cmd) {
</Insert>
<Copy StartSeek="14874" EndSeek="15099"/>
<Insert>#ifdef __DPA_DEBUG__
		dpa_cls_entry_dump(dpe);
#endif
</Insert>
<Copy StartSeek="15122" EndSeek="15290"/>
<Insert>#ifdef __DPA_DEBUG__
		dpa_cls_entry_dump(dpe);
#endif
	}
}

</Insert>
<Copy StartSeek="15319" EndSeek="15348"/>
<Insert>	dpa_cls_mm_pool = dcm_init(DPA_CLS_TBL_SZ, 
</Insert>
<Copy StartSeek="15388" EndSeek="15424"/>
<Insert>	if (!dpa_cls_mm_pool)
</Insert>
<Copy StartSeek="15436" EndSeek="15583"/>
<Insert>	if (dpa_cls_mm_pool)
		dcm_exit();
}
</Insert>
</Delta>
<Delta Version="2300" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="11:26:8000">
<Copy StartSeek="0" EndSeek="6490"/>
<Insert>			(dpe)-&gt;next = NULL;
</Insert>
<Copy StartSeek="6511" EndSeek="15583"/>
</Delta>
<Delta Version="2301" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="11:40:33000">
<Copy StartSeek="0" EndSeek="6083"/>
<Insert>//	idx = dpa_cls_XXH_small32_12b(cls);
	idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
	idx += cls-&gt;sport;
	idx *= PRIME1;
	idx += cls-&gt;dport;
</Insert>
<Copy StartSeek="6243" EndSeek="15609"/>
</Delta>
<Delta Version="2302" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="14:21:4000">
<Copy StartSeek="0" EndSeek="226"/>
<Insert>#ifdef __DPA_DEBUG__
</Insert>
<Copy StartSeek="232" EndSeek="4796"/>
<Insert>	tmp = dcm_alloc();
	if (!tmp)
		return NULL;
	tmp-&gt;state = DPE_NEW;
	tmp-&gt;counters.rx_hits = 0;
	tmp-&gt;counters.fwd_hits = 0;
	tmp-&gt;mod_ops = 0;
	tmp-&gt;mod.tx_port = NULL;
</Insert>
<Copy StartSeek="5036" EndSeek="6137"/>
<Insert>	idx = dpa_cls_XXH_small32_12b(cls);
//      idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
//      idx += cls-&gt;sport;
//      idx *= PRIME1;
//      idx += cls-&gt;dport;
</Insert>
<Copy StartSeek="6271" EndSeek="6376"/>
<Insert>	DPA_CLS_DBG("looking for idx %u\n", idx);
</Insert>
<Copy StartSeek="6419" EndSeek="6467"/>
<Insert>		DPA_CLS_DBG("allocating new dpe\n");
</Insert>
<Copy StartSeek="6506" EndSeek="6544"/>
<Insert>			dpe-&gt;next = NULL;
</Insert>
<Copy StartSeek="6567" EndSeek="6668"/>
<Insert>			DPA_CLS_DBG("match dpe found\n");
</Insert>
<Copy StartSeek="6705" EndSeek="6922"/>
<Insert>	DPA_CLS_DBG("dpe collision\n");
</Insert>
<Copy StartSeek="6955" EndSeek="6981"/>
<Copy StartSeek="7013" EndSeek="15671"/>
</Delta>
<Delta Version="2303" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:22:51000">
<Copy StartSeek="0" EndSeek="6376"/>
<Insert>	DPA_CLS_DBG("\nlooking for idx %u", idx);
</Insert>
<Copy StartSeek="6417" EndSeek="15669"/>
</Delta>
<Delta Version="2304" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:25:8000">
<Copy StartSeek="0" EndSeek="6465"/>
<Insert>		DPA_CLS_DBG("\nallocating new dpe");
</Insert>
<Copy StartSeek="6502" EndSeek="15667"/>
</Delta>
<Delta Version="2305" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:25:12000">
<Copy StartSeek="0" EndSeek="6664"/>
<Insert>			DPA_CLS_DBG("\nmatch dpe found");
</Insert>
<Copy StartSeek="6699" EndSeek="15665"/>
</Delta>
<Delta Version="2306" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:25:17000">
<Copy StartSeek="0" EndSeek="6916"/>
<Insert>	DPA_CLS_DBG("\ndpe collision");
</Insert>
<Copy StartSeek="6947" EndSeek="15663"/>
</Delta>
<Delta Version="2307" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:25:21000">
<Copy StartSeek="0" EndSeek="232"/>
<Insert>#define DPA_CLS_DBG(format, args...) DPA_DBG(format, ##args)
</Insert>
<Copy StartSeek="292" EndSeek="15662"/>
</Delta>
<Delta Version="2308" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:27:40000">
<Copy StartSeek="0" EndSeek="839"/>
<Insert>
</Insert>
<Copy StartSeek="880" EndSeek="15702"/>
</Delta>
<Delta Version="2309" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:27:57000">
<Copy StartSeek="0" EndSeek="8750"/>
<Copy StartSeek="8768" EndSeek="15720"/>
</Delta>
<Delta Version="2310" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:28:49000">
<Copy StartSeek="0" EndSeek="232"/>
<Insert>#define DPA_CLS_DBG(format, args...) printk(format, ##args)
</Insert>
<Copy StartSeek="301" EndSeek="15729"/>
</Delta>
<Delta Version="2311" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:34:15000">
<Copy StartSeek="0" EndSeek="232"/>
<Insert>#define DPA_CLS_DBG(format, args...) printk(KERN_ERR format, ##args)
</Insert>
<Copy StartSeek="292" EndSeek="15720"/>
</Delta>
<Delta Version="2312" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:39:3000">
<Copy StartSeek="0" EndSeek="8750"/>
<Insert>	DPA_CLS_DBG("");
</Insert>
<Copy StartSeek="8774" EndSeek="15726"/>
</Delta>
<Delta Version="2313" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:42:28000">
<Copy StartSeek="0" EndSeek="8750"/>
<Insert>	DPA_CLS_DBG("cls_rx");
</Insert>
<Copy StartSeek="8776" EndSeek="15728"/>
</Delta>
<Delta Version="2314" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:44:23000">
<Copy StartSeek="0" EndSeek="232"/>
<Insert>#define DPA_CLS_DBG(format, args...) printk(format, ##args)
</Insert>
<Copy StartSeek="293" EndSeek="8814"/>
<Insert> 
</Insert>
<Copy StartSeek="8816" EndSeek="15729"/>
</Delta>
<Delta Version="2315" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:45:52000">
<Copy StartSeek="0" EndSeek="232"/>
<Insert>#define DPA_CLS_DBG(format, args...) DPA_DBG(format, ##args)
</Insert>
<Copy StartSeek="292" EndSeek="15728"/>
</Delta>
<Delta Version="2316" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:47:5000">
<Copy StartSeek="0" EndSeek="8776"/>
<Copy StartSeek="8828" EndSeek="15780"/>
</Delta>
<Delta Version="2317" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:49:46000">
<Copy StartSeek="0" EndSeek="232"/>
<Copy StartSeek="255" EndSeek="15803"/>
</Delta>
<Delta Version="2318" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:50:2000">
<Copy StartSeek="0" EndSeek="8773"/>
<Insert>	DPA_CLS_DBG("cls_rx\n");
</Insert>
<Copy StartSeek="8773" EndSeek="15777"/>
</Delta>
<Delta Version="2319" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:50:10000">
<Copy StartSeek="0" EndSeek="8773"/>
<Insert>	printk(KERN_ERR "(%s:%d) \n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8824" EndSeek="15776"/>
</Delta>
<Delta Version="2320" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:50:13000">
<Copy StartSeek="0" EndSeek="8861"/>
<Insert>	
</Insert>
<Copy StartSeek="8912" EndSeek="15825"/>
</Delta>
<Delta Version="2321" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:50:38000">
<Copy StartSeek="0" EndSeek="8773"/>
<Insert>	printk(KERN_ERR "(%s:%d)\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8826" EndSeek="8863"/>
<Insert>	printk(KERN_ERR "(%s:%d)\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8916" EndSeek="15829"/>
</Delta>
<Delta Version="2322" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:53:28000">
<Copy StartSeek="0" EndSeek="8773"/>
<Insert>	//printk(KERN_ERR "(%s:%d)\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8824" EndSeek="8861"/>
<Insert>	//printk(KERN_ERR "(%s:%d)\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8912" EndSeek="15825"/>
</Delta>
<Delta Version="2323" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:53:31000">
<Copy StartSeek="0" EndSeek="8773"/>
<Insert>	printk(KERN_ERR "(%s:%d)\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8773" EndSeek="15774"/>
</Delta>
<Delta Version="2324" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:53:35000">
<Copy StartSeek="0" EndSeek="8810"/>
<Insert>	printk(KERN_ERR "(%s:%d)\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="8812" EndSeek="15725"/>
</Delta>
<Delta Version="2325" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:54:3000">
<Copy StartSeek="0" EndSeek="226"/>
<Insert>#if 1
#define	KERN_ERR	"&lt;3&gt;"
#define DPA_CLS_DBG(format, args...) printk(format, ##args)
</Insert>
<Copy StartSeek="308" EndSeek="855"/>
<Insert>extern int printk(const char *fmt, ...);
</Insert>
<Copy StartSeek="856" EndSeek="15678"/>
</Delta>
<Delta Version="2326" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:54:56000">
<Copy StartSeek="0" EndSeek="247"/>
<Copy StartSeek="264" EndSeek="15695"/>
</Delta>
<Delta Version="2327" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:58:3000">
<Copy StartSeek="0" EndSeek="247"/>
<Insert>#error "asdasdf"
</Insert>
<Copy StartSeek="247" EndSeek="15678"/>
</Delta>
<Delta Version="2328" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="19:58:15000">
<Copy StartSeek="0" EndSeek="6391"/>
<Insert>	DPA_CLS_DBG("looking for idx %u", idx);
</Insert>
<Copy StartSeek="6434" EndSeek="15680"/>
</Delta>
<Delta Version="2329" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:00:12000">
<Copy StartSeek="0" EndSeek="6482"/>
<Insert>		DPA_CLS_DBG("allocating new dpe");
</Insert>
<Copy StartSeek="6521" EndSeek="15682"/>
</Delta>
<Delta Version="2330" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:00:15000">
<Copy StartSeek="0" EndSeek="6683"/>
<Insert>			DPA_CLS_DBG("match dpe found");
</Insert>
<Copy StartSeek="6720" EndSeek="15684"/>
</Delta>
<Delta Version="2331" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:00:18000">
<Copy StartSeek="0" EndSeek="6937"/>
<Insert>	DPA_CLS_DBG("dpe collision");
</Insert>
<Copy StartSeek="6970" EndSeek="15686"/>
</Delta>
<Delta Version="2332" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:00:21000">
<Copy StartSeek="0" EndSeek="9674"/>
<Insert>			DPA_CLS_DBG("FIN or RST detected!");
</Insert>
<Copy StartSeek="9716" EndSeek="10579"/>
<Insert>		DPA_CLS_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
</Insert>
<Copy StartSeek="10698" EndSeek="13825"/>
<Insert>				DPA_CLS_DBG("vlan chg: %u-&gt;%u",
</Insert>
<Copy StartSeek="13863" EndSeek="14041"/>
<Insert>			DPA_CLS_DBG("vlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14103" EndSeek="14216"/>
<Insert>			DPA_ERROR("Unhandled modification");
</Insert>
<Copy StartSeek="14258" EndSeek="14409"/>
<Insert>			DPA_CLS_DBG("vlan add: %u", dpa_ntohs(mod_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14471" EndSeek="15135"/>
<Insert>		DPA_CLS_DBG("UNstable connection, moving to lcl");
</Insert>
<Copy StartSeek="15190" EndSeek="15299"/>
<Insert>		DPA_CLS_DBG("stable connection, moving to fwd");
</Insert>
<Copy StartSeek="15352" EndSeek="15702"/>
</Delta>
<Delta Version="2333" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:01:20000">
<Copy StartSeek="0" EndSeek="1244"/>
<Insert>	DPA_CLS_DBG("org dmac= "MAC_FMT" smac= "MAC_FMT" eth_type:%#x vlan:%u",
</Insert>
<Copy StartSeek="1319" EndSeek="1614"/>
<Insert>	DPA_CLS_DBG("mod dmac= "MAC_FMT" smac= "MAC_FMT " eth_type:%#x vlan:%u",
</Insert>
<Copy StartSeek="1690" EndSeek="15706"/>
</Delta>
<Delta Version="2334" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:01:32000">
<Copy StartSeek="0" EndSeek="6395"/>
<Insert>	DPA_CLS_DBG("looking for idx %u\n", idx);
</Insert>
<Copy StartSeek="6438" EndSeek="15706"/>
</Delta>
<Delta Version="2335" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:02:48000">
<Copy StartSeek="0" EndSeek="8738"/>
<Copy StartSeek="8764" EndSeek="15732"/>
</Delta>
<Delta Version="2336" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:03:5000">
<Copy StartSeek="0" EndSeek="8738"/>
<Insert>	DPA_CLS_DBG("cls_rx\n");
</Insert>
<Copy StartSeek="8738" EndSeek="15706"/>
</Delta>
<Delta Version="2337" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:04:49000">
<Copy StartSeek="0" EndSeek="1244"/>
<Insert>	DPA_CLS_DBG("org dmac= "MAC_FMT" smac= "MAC_FMT" eth_type:%#x vlan:%u\n",
</Insert>
<Copy StartSeek="1317" EndSeek="1612"/>
<Insert>	DPA_CLS_DBG("mod dmac= "MAC_FMT" smac= "MAC_FMT " eth_type:%#x vlan:%u\n",
</Insert>
<Copy StartSeek="1686" EndSeek="6482"/>
<Insert>		DPA_CLS_DBG("allocating new dpe\n");
</Insert>
<Copy StartSeek="6521" EndSeek="6683"/>
<Insert>			DPA_CLS_DBG("match dpe found\n");
</Insert>
<Copy StartSeek="6720" EndSeek="6937"/>
<Insert>	DPA_CLS_DBG("dpe collision\n");
</Insert>
<Copy StartSeek="6970" EndSeek="9674"/>
<Insert>			DPA_CLS_DBG("FIN or RST detected!\n");
</Insert>
<Copy StartSeek="9714" EndSeek="10577"/>
<Insert>		DPA_CLS_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x\n", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
</Insert>
<Copy StartSeek="10694" EndSeek="13821"/>
<Insert>				DPA_CLS_DBG("vlan chg: %u-&gt;%u\n",
</Insert>
<Copy StartSeek="13857" EndSeek="14035"/>
<Insert>			DPA_CLS_DBG("vlan del: %#x\n",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14095" EndSeek="14208"/>
<Insert>			DPA_ERROR("Unhandled modification\n");
</Insert>
<Copy StartSeek="14248" EndSeek="14399"/>
<Insert>			DPA_CLS_DBG("vlan add: %u\n", dpa_ntohs(mod_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14459" EndSeek="15123"/>
<Insert>		DPA_CLS_DBG("UNstable connection, moving to lcl\n");
</Insert>
<Copy StartSeek="15176" EndSeek="15285"/>
<Insert>		DPA_CLS_DBG("stable connection, moving to fwd\n");
</Insert>
<Copy StartSeek="15336" EndSeek="15686"/>
</Delta>
<Delta Version="2338" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:06:4000">
<Copy StartSeek="0" EndSeek="1244"/>
<Insert>	DPA_CLS_DBG("org dmac= "MAC_FMT" smac= "MAC_FMT" eth_type:%#x vlan:%u",
</Insert>
<Copy StartSeek="1319" EndSeek="1433"/>
<Insert>	DPA_CLS_DBG("org ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
</Insert>
<Copy StartSeek="1506" EndSeek="1616"/>
<Insert>	DPA_CLS_DBG("mod dmac= "MAC_FMT" smac= "MAC_FMT " eth_type:%#x vlan:%u",
</Insert>
<Copy StartSeek="1692" EndSeek="1808"/>
<Insert>	DPA_CLS_DBG("mod ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
</Insert>
<Copy StartSeek="1881" EndSeek="2011"/>
<Insert>	DPA_CLS_DBG("state:%s rx:%u fwd:%u mod_ops:%#x\n", 
</Insert>
<Copy StartSeek="2066" EndSeek="4856"/>
<Insert>      DPA_CLS_DBG("Failed to alloc dpe entry\n");
</Insert>
<Copy StartSeek="4908" EndSeek="9686"/>
<Insert>			DPA_CLS_DBG("FIN or RST detected!");
</Insert>
<Copy StartSeek="9728" EndSeek="10591"/>
<Insert>		DPA_CLS_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
</Insert>
<Copy StartSeek="10710" EndSeek="13837"/>
<Insert>				DPA_CLS_DBG("vlan chg: %u-&gt;%u",
</Insert>
<Copy StartSeek="13875" EndSeek="14053"/>
<Insert>			DPA_CLS_DBG("vlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14115" EndSeek="14419"/>
<Insert>			DPA_CLS_DBG("vlan add: %u", dpa_ntohs(mod_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14481" EndSeek="14997"/>
<Insert>		DPA_CLS_DBG("dpe %p, state %x\n", dpe, (dpe ? dpe-&gt;state : ~0));
</Insert>
<Copy StartSeek="15066" EndSeek="15147"/>
<Insert>		DPA_CLS_DBG("UNstable connection, moving to lcl");
</Insert>
<Copy StartSeek="15202" EndSeek="15311"/>
<Insert>		DPA_CLS_DBG("stable connection, moving to fwd");
</Insert>
<Copy StartSeek="15364" EndSeek="15714"/>
</Delta>
<Delta Version="2339" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:07:6000">
<Copy StartSeek="0" EndSeek="247"/>
<Insert>#define DPA_CLS_DBG(format, args...) DPA_DBG(format, ##args)
</Insert>
<Copy StartSeek="311" EndSeek="15717"/>
</Delta>
<Delta Version="2340" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:13:38000">
<Copy StartSeek="0" EndSeek="247"/>
<Copy StartSeek="282" EndSeek="15752"/>
</Delta>
<Delta Version="2341" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:14:26000">
<Copy StartSeek="0" EndSeek="1282"/>
<Insert>	DPA_CLS_DBG("\norg dmac= "MAC_FMT" smac= "MAC_FMT" eth_type:%#x vlan:%u",
</Insert>
<Copy StartSeek="1355" EndSeek="1469"/>
<Insert>	DPA_CLS_DBG("\norg ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
</Insert>
<Copy StartSeek="1540" EndSeek="1650"/>
<Insert>	DPA_CLS_DBG("\nmod dmac= "MAC_FMT" smac= "MAC_FMT " eth_type:%#x vlan:%u",
</Insert>
<Copy StartSeek="1724" EndSeek="1840"/>
<Insert>	DPA_CLS_DBG("\nmod ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
</Insert>
<Copy StartSeek="1911" EndSeek="2041"/>
<Insert>	DPA_CLS_DBG("\nstate:%s rx:%u fwd:%u mod_ops:%#x\n", 
</Insert>
<Copy StartSeek="2094" EndSeek="4884"/>
<Insert>      DPA_CLS_DBG("\nFailed to alloc dpe entry\n");
</Insert>
<Copy StartSeek="4934" EndSeek="9712"/>
<Insert>			DPA_CLS_DBG("\nFIN or RST detected!");
</Insert>
<Copy StartSeek="9752" EndSeek="10615"/>
<Insert>		DPA_CLS_DBG("\n################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
</Insert>
<Copy StartSeek="10732" EndSeek="13859"/>
<Insert>				DPA_CLS_DBG("\nvlan chg: %u-&gt;%u",
</Insert>
<Copy StartSeek="13895" EndSeek="14073"/>
<Insert>			DPA_CLS_DBG("\nvlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14133" EndSeek="14437"/>
<Insert>			DPA_CLS_DBG("\nvlan add: %u", dpa_ntohs(mod_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14497" EndSeek="15013"/>
<Insert>		DPA_CLS_DBG("\ndpe %p, state %x\n", dpe, (dpe ? dpe-&gt;state : ~0));
</Insert>
<Copy StartSeek="15080" EndSeek="15161"/>
<Insert>		DPA_CLS_DBG("\nUNstable connection, moving to lcl");
</Insert>
<Copy StartSeek="15214" EndSeek="15323"/>
<Insert>		DPA_CLS_DBG("\nstable connection, moving to fwd");
</Insert>
<Copy StartSeek="15374" EndSeek="15724"/>
</Delta>
<Delta Version="2342" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:15:24000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>
</Insert>
<Copy StartSeek="186" EndSeek="15751"/>
</Delta>
<Delta Version="2343" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:57:32000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>#include &lt;dpa_byteorder.h&gt;
</Insert>
<Copy StartSeek="186" EndSeek="15752"/>
</Delta>
<Delta Version="2344" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:58:10000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>#include &lt;dpa_byte_order.h&gt;
</Insert>
<Copy StartSeek="188" EndSeek="15754"/>
</Delta>
<Delta Version="2345" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="21:06:46000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>//#include &lt;dpa_byte_order.h&gt;

</Insert>
<Copy StartSeek="159" EndSeek="13859"/>
<Insert>				DPA_CLS_DBG("vlan chg: %u-&gt;%u",
</Insert>
<Copy StartSeek="13890" EndSeek="14068"/>
<Insert>			DPA_CLS_DBG("vlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14123" EndSeek="14427"/>
<Insert>			DPA_CLS_DBG("vlan add: %u", dpa_ntohs(mod_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14482" EndSeek="15709"/>
</Delta>
<Delta Version="2346" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="21:20:4000">
<Copy StartSeek="0" EndSeek="13859"/>
<Insert>				PRINTK("vlan chg: %u-&gt;%u",
</Insert>
<Copy StartSeek="13890" EndSeek="14068"/>
<Insert>			PRINTK("vlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14123" EndSeek="14427"/>
<Insert>			PRINTK("vlan add: %u", dpa_ntohs(mod_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14482" EndSeek="15709"/>
</Delta>
<Delta Version="2347" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="21:20:9000">
<Copy StartSeek="0" EndSeek="13859"/>
<Insert>				printk("vlan chg: %u-&gt;%u",
</Insert>
<Copy StartSeek="13895" EndSeek="14073"/>
<Insert>			printk("vlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14133" EndSeek="14437"/>
<Insert>			printk("vlan add: %u", dpa_ntohs(mod_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14497" EndSeek="15724"/>
</Delta>
<Delta Version="2348" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="21:35:20000">
<Copy StartSeek="0" EndSeek="14073"/>
<Insert>			DPA_CLS_DBG("vlan del: %#x",dpa_ntohs(org_l2-&gt;vlan_id));
</Insert>
<Copy StartSeek="14132" EndSeek="15723"/>
</Delta>
<Delta Version="2349" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="21:37:23000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>
</Insert>
<Copy StartSeek="188" EndSeek="521"/>
<Copy StartSeek="522" EndSeek="6259"/>
<Copy StartSeek="6265" EndSeek="6360"/>
<Copy StartSeek="6394" EndSeek="8564"/>
<Copy StartSeek="8612" EndSeek="10360"/>
<Copy StartSeek="10380" EndSeek="10907"/>
<Copy StartSeek="10938" EndSeek="15892"/>
</Delta>
<Delta Version="2350" Comment="" NL="\10" Encoding="text" Date="2013/04/10" Time="13:31:45000">
<Copy StartSeek="0" EndSeek="10360"/>
<Copy StartSeek="10430" EndSeek="15962"/>
</Delta>
<Delta Version="2351" Comment="" NL="\10" Encoding="text" Date="2013/04/10" Time="13:43:46000">
<Copy StartSeek="0" EndSeek="10360"/>
<Insert>			DPA_CLS_DBG("pkt_size org %u, upd %u", pkt-&gt;size, pkt-&gt;size + mh)l
</Insert>
<Copy StartSeek="10430" EndSeek="15962"/>
</Delta>
<Delta Version="2352" Comment="" NL="\10" Encoding="text" Date="2013/04/10" Time="13:43:46000">
<Copy StartSeek="0" EndSeek="10360"/>
<Insert>			DPA_CLS_DBG("pkt_size org %u, upd %u", pkt-&gt;size, pkt-&gt;size + mh);
</Insert>
<Copy StartSeek="10458" EndSeek="15990"/>
</Delta>
<Delta Version="2353" Comment="" NL="\10" Encoding="text" Date="2013/04/10" Time="13:44:30000">
<Copy StartSeek="0" EndSeek="8564"/>
<Insert>extern void dump_data(uint8_t *data, int len);

</Insert>
<Copy StartSeek="8564" EndSeek="8839"/>
<Insert>  
</Insert>
<Copy StartSeek="8856" EndSeek="10052"/>
<Insert>#ifndef DPA_MARK_FWD_PKT /* marking requires ip.csum recalc */
		/* Eth Tx cmd */
		if (dpe-&gt;mod_ops)
#endif
		{
			uint8_t mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
			uint8_t ip_off =
				(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
			DPA_CLS_DBG("pkt_size org %u (updated to %u), offset %u", pkt-&gt;size, pkt-&gt;size + mh, mh^0x02);
			pkt-&gt;size += mh;
			pkt-&gt;cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
</Insert>
<Copy StartSeek="10314" EndSeek="10624"/>
<Insert>		}
    
</Insert>
<Copy StartSeek="10697" EndSeek="10851"/>
<Insert>		dump_data(pkt-&gt;phy_hdr, 40);
</Insert>
<Copy StartSeek="10851" EndSeek="13355"/>
<Copy StartSeek="13384" EndSeek="15834"/>
</Delta>
<Delta Version="2354" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:48:56000">
<Copy StartSeek="0" EndSeek="13431"/>
<Copy StartSeek="13465" EndSeek="15868"/>
</Delta>
<Delta Version="2355" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:49:3000">
<Copy StartSeek="0" EndSeek="13355"/>
<Copy StartSeek="13356" EndSeek="13432"/>
<Insert>	DPA_CLS_DBG("modified pri key");
</Insert>
<Copy StartSeek="13516" EndSeek="15919"/>
</Delta>
<Delta Version="2356" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:51:27000">
<Copy StartSeek="0" EndSeek="13355"/>
<Insert>
	DPA_CLS_DBG("modified l2");
</Insert>
<Copy StartSeek="13431" EndSeek="15965"/>
</Delta>
<Delta Version="2357" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:51:47000">
<Copy StartSeek="0" EndSeek="13430"/>
<Insert>
</Insert>
<Copy StartSeek="13430" EndSeek="15964"/>
</Delta>
<Delta Version="2358" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:51:51000">
<Copy StartSeek="0" EndSeek="13397"/>
<Insert>		DPA_CLS_DBG("modified l2");
</Insert>
<Copy StartSeek="13429" EndSeek="13525"/>
<Insert>		DPA_CLS_DBG("modified pri key");
</Insert>
<Copy StartSeek="13562" EndSeek="15968"/>
</Delta>
<Delta Version="2359" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:55:45000">
<Copy StartSeek="0" EndSeek="13397"/>
<Insert>		DPA_CLS_DBG("modified l2\n");
</Insert>
<Copy StartSeek="13424" EndSeek="15963"/>
</Delta>
<Delta Version="2360" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:55:56000">
<Copy StartSeek="0" EndSeek="13520"/>
<Insert>		DPA_CLS_DBG("modified pri key\n");
</Insert>
<Copy StartSeek="13552" EndSeek="15958"/>
</Delta>
<Delta Version="2361" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:55:59000">
<Copy StartSeek="0" EndSeek="10052"/>
<Insert>	/* Eth Tx cmd */
	mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
    pkt-&gt;size += mh;
	if (dpe-&gt;mod_ops) {
				uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
				pkt-&gt;cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
				    ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
					((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
				    (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
		
</Insert>
<Copy StartSeek="10454" EndSeek="10686"/>
<Insert>	}
    
</Insert>
<Copy StartSeek="10691" EndSeek="15952"/>
</Delta>
<Delta Version="2362" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:57:38000">
<Copy StartSeek="0" EndSeek="9916"/>
<Insert>    /* Eth egress port */
    pkt-&gt;port = dpe-&gt;mod.tx_port;
    
    /* Eth Tx queue */
    pkt-&gt;queue = 0; /* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="10039" EndSeek="15940"/>
</Delta>
<Delta Version="2363" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="11:57:56000">
<Copy StartSeek="0" EndSeek="15229"/>
<Insert>		DPA_CLS_DBG("dpe %p, state %x\n", dpe, (dpe ? dpe-&gt;state : ~0));
</Insert>
<Copy StartSeek="15319" EndSeek="15963"/>
</Delta>
<Delta Version="2364" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="12:00:52000">
<Copy StartSeek="0" EndSeek="15229"/>
<Insert>		DPA_CLS_DBG("dpe %p, state %x\n", dpe, (dpe ? dpa_entry_state_names[dpe-&gt;state] : ~0));
</Insert>
<Copy StartSeek="15319" EndSeek="15963"/>
</Delta>
<Delta Version="2365" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="12:00:56000">
<Copy StartSeek="0" EndSeek="15229"/>
<Insert>		DPA_CLS_DBG("dpe %p, state %s\n", dpe, (dpe ? dpa_entry_state_names[dpe-&gt;state] : ~0));
</Insert>
<Copy StartSeek="15326" EndSeek="15970"/>
</Delta>
<Delta Version="2366" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="12:01:6000">
<Copy StartSeek="0" EndSeek="6366"/>
<Insert>  idx = cls-&gt;dport;
</Insert>
<Copy StartSeek="6385" EndSeek="6423"/>
<Insert>	dpe_list = &amp;dpa_entry_tbl[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="6480" EndSeek="7131"/>
<Insert>	} 
</Insert>
<Copy StartSeek="7134" EndSeek="15968"/>
</Delta>
<Delta Version="2367" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="13:50:46000">
<Copy StartSeek="0" EndSeek="15699"/>
<Insert>}

</Insert>
<Copy StartSeek="15724" EndSeek="15990"/>
</Delta>
<Delta Version="2368" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:03:31000">
<Copy StartSeek="0" EndSeek="15699"/>
<Copy StartSeek="15762" EndSeek="16053"/>
</Delta>
<Delta Version="2369" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:04:7000">
<Copy StartSeek="0" EndSeek="6423"/>
<Insert>	dpe_list = &amp;dpa_entry_tbl[idx];	/* head of the chain */
</Insert>
<Copy StartSeek="6480" EndSeek="7131"/>
<Insert>	}
</Insert>
<Copy StartSeek="7135" EndSeek="13336"/>
<Insert>	if (is_modified_l2(dpe, pkt-&gt;eth_hdr)) {
		printk("modified l2\n");
	}
</Insert>
<Copy StartSeek="13336" EndSeek="13383"/>
<Insert>	if (is_modified_pri_key(dpe, pkt-&gt;ip_hdr)) {
		printk("modified pri key\n");
	}
</Insert>
<Copy StartSeek="13383" EndSeek="15901"/>
</Delta>
<Delta Version="2370" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:08:0000">
<Copy StartSeek="0" EndSeek="15185"/>
<Copy StartSeek="15225" EndSeek="15941"/>
</Delta>
<Delta Version="2371" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:12:32000">
<Copy StartSeek="0" EndSeek="15185"/>
<Insert>	DPA_CLS_DBG("cls_tx: fwd_hits: %u\n");
</Insert>
<Copy StartSeek="15223" EndSeek="15939"/>
</Delta>
<Delta Version="2372" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:12:39000">
<Copy StartSeek="0" EndSeek="15585"/>
<Insert>	DPA_CLS_DBG("cls_tx: fwd_hits %u\n", dpe-&gt;counters.fwd_hits);
</Insert>
<Copy StartSeek="15646" EndSeek="15937"/>
</Delta>
<Delta Version="2373" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:12:43000">
<Copy StartSeek="0" EndSeek="15185"/>
<Insert>	DPA_CLS_DBG("cls_tx: fwd_hits: %u");
</Insert>
<Copy StartSeek="15224" EndSeek="15938"/>
</Delta>
<Delta Version="2374" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:12:47000">
<Copy StartSeek="0" EndSeek="15586"/>
<Insert>	DPA_CLS_DBG("cls_tx: fwd_hits %u", dpe-&gt;counters.fwd_hits);
</Insert>
<Copy StartSeek="15648" EndSeek="15939"/>
</Delta>
<Delta Version="2375" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:12:49000">
<Copy StartSeek="0" EndSeek="15185"/>
<Insert>	DPA_CLS_DBG("cls_tx1: fwd_hits: %u");
</Insert>
<Copy StartSeek="15247" EndSeek="15962"/>
</Delta>
<Delta Version="2376" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:13:0000">
<Copy StartSeek="0" EndSeek="15185"/>
<Insert>	DPA_CLS_DBG("cls_tx1: fwd_hits: %u",dpe-&gt;counters.fwd_hits);
</Insert>
<Copy StartSeek="15248" EndSeek="15963"/>
</Delta>
<Delta Version="2377" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:13:2000">
<Copy StartSeek="0" EndSeek="15248"/>
<Copy StartSeek="15270" EndSeek="15985"/>
</Delta>
<Delta Version="2378" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:13:18000">
<Copy StartSeek="0" EndSeek="15185"/>
<Insert>	DPA_CLS_DBG("cls_tx1: fwd_hits: %u", dpe-&gt;counters.fwd_hits);
</Insert>
<Copy StartSeek="15252" EndSeek="15989"/>
</Delta>
<Delta Version="2379" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:13:26000">
<Copy StartSeek="0" EndSeek="15636"/>
<Insert>	DPA_CLS_DBG("cls_tx2: fwd_hits %u", dpe-&gt;counters.fwd_hits);
</Insert>
<Copy StartSeek="15702" EndSeek="15993"/>
</Delta>
<Delta Version="2380" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:13:31000">
<Copy StartSeek="0" EndSeek="11867"/>
<Copy StartSeek="11911" EndSeek="16037"/>
</Delta>
<Delta Version="2381" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:19:13000">
<Copy StartSeek="0" EndSeek="11867"/>
<Insert>	DPA_CLS_DBG("is_mod_pri_key: "NIPQUAD_FMT)
</Insert>
<Copy StartSeek="11943" EndSeek="16069"/>
</Delta>
<Delta Version="2382" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:19:47000">
<Copy StartSeek="0" EndSeek="11867"/>
<Insert>	DPA_CLS_DBG("is_mod_pri_key: saddr:"NIPQUAD_FMT,NIPQUAD(&amp;pkt_iph-&gt;saddr));
</Insert>
<Copy StartSeek="12059" EndSeek="16185"/>
</Delta>
<Delta Version="2383" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:21:48000">
<Copy StartSeek="0" EndSeek="11867"/>
<Insert>	DPA_CLS_DBG("is_mod_pri_key ipv4:proto %u "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
		 tup-&gt;protocol,
</Insert>
<Copy StartSeek="11935" EndSeek="16153"/>
</Delta>
<Delta Version="2384" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:21:57000">
<Copy StartSeek="0" EndSeek="11867"/>
<Insert>	DPA_CLS_DBG("is_mod_pri_key "NIPQUAD_FMT":%d-&gt;"NIPQUAD_FMT":%d\n",
</Insert>
<Copy StartSeek="11932" EndSeek="16150"/>
</Delta>
<Delta Version="2385" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:22:13000">
<Copy StartSeek="0" EndSeek="11867"/>
<Insert>	DPA_CLS_DBG("is_mod_pri_key "NIPQUAD_FMT"-&gt;"NIPQUAD_FMT":%d\n",
</Insert>
<Copy StartSeek="11929" EndSeek="16147"/>
</Delta>
<Delta Version="2386" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:22:20000">
<Copy StartSeek="0" EndSeek="11929"/>
<Insert>		 NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
</Insert>
<Copy StartSeek="11978" EndSeek="16151"/>
</Delta>
<Delta Version="2387" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:22:38000">
<Copy StartSeek="0" EndSeek="11978"/>
<Insert>		 NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="12028" EndSeek="16155"/>
</Delta>
<Delta Version="2388" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:22:40000">
<Copy StartSeek="0" EndSeek="11929"/>
<Insert>		 NIPQUAD(pkt_iph-&gt;sip), dpa_ntohs(tup-&gt;sport),
		 NIPQUAD(pkt_iph-&gt;dip), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="12032" EndSeek="16159"/>
</Delta>
<Delta Version="2389" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:22:49000">
<Copy StartSeek="0" EndSeek="11929"/>
<Insert>		 NIPQUAD(pkt_iph-&gt;saddr), dpa_ntohs(tup-&gt;sport),
		 NIPQUAD(pkt_iph-&gt;daddr), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="11987" EndSeek="16114"/>
</Delta>
<Delta Version="2390" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="14:23:11000">
<Copy StartSeek="0" EndSeek="15373"/>
<Copy StartSeek="15477" EndSeek="16218"/>
</Delta>
<Delta Version="2391" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="18:35:15000">
<Copy StartSeek="0" EndSeek="15437"/>
<Insert>	__func__, __LINE__,pkt, pkt-&gt;ip_hdr);
</Insert>
<Copy StartSeek="15483" EndSeek="16225"/>
</Delta>
<Delta Version="2392" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="18:35:18000">
<Copy StartSeek="0" EndSeek="15373"/>
<Insert>	printk(KERN_ERR "(%s:%d) HAIM: pkt %p, pkt-&gt;nh(ip_hdr) %p\n", 
</Insert>
<Copy StartSeek="15428" EndSeek="16216"/>
</Delta>
<Delta Version="2393" Comment="" NL="\10" Encoding="text" Date="2013/04/11" Time="18:47:28000">
<Copy StartSeek="0" EndSeek="6366"/>
<Insert>	idx = cls-&gt;dport;
</Insert>
<Copy StartSeek="6386" EndSeek="8853"/>
<Insert>  
</Insert>
<Copy StartSeek="8854" EndSeek="8891"/>
<Insert> 
</Insert>
<Copy StartSeek="8892" EndSeek="10997"/>
<Insert>		
</Insert>
<Copy StartSeek="10998" EndSeek="11863"/>
<Insert>	DPA_CLS_DBG("is_mod_pri_key "NIPQUAD_FMT"-&gt;"NIPQUAD_FMT"\n",
		 NIPQUAD(pkt_iph-&gt;saddr), 
		 NIPQUAD(pkt_iph-&gt;daddr));

</Insert>
<Copy StartSeek="11863" EndSeek="15071"/>
<Insert>		DPA_CLS_DBG("dpe %p, state %s\n", dpe, (dpe ? dpa_entry_state_names[dpe-&gt;state] : "INVALID"));
</Insert>
<Copy StartSeek="15138" EndSeek="15151"/>
<Insert>	DPA_CLS_DBG("1111 cls_tx: fwd_hits: %u", dpe-&gt;counters.fwd_hits);
	printk("(%s:%d) HAIM: pkt %p, pkt-&gt;nh(ip_hdr) %p\n", 
	       __func__, __LINE__,pkt, pkt-&gt;ip_hdr);

	dpa_entry_dump(dpe);
</Insert>
<Copy StartSeek="15151" EndSeek="15513"/>
<Insert>	DPA_CLS_DBG("2222 cls_tx: fwd_hits %u", dpe-&gt;counters.fwd_hits);
	dpa_entry_dump(dpe);
}

</Insert>
<Copy StartSeek="15516" EndSeek="15782"/>
</Delta>
<Delta Version="2394" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="15:50:10000">
<Copy StartSeek="0" EndSeek="9991"/>
<Insert>		pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="10036" EndSeek="15782"/>
</Delta>
<Delta Version="2395" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="15:50:38000">
<Copy StartSeek="0" EndSeek="14831"/>
<Copy StartSeek="14954" EndSeek="15905"/>
</Delta>
<Delta Version="2396" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:10:37000">
<Copy StartSeek="0" EndSeek="14912"/>
<Insert>      rc = queue_is_full(p-&gt;pkt_pool);
</Insert>
<Copy StartSeek="14941" EndSeek="15895"/>
</Delta>
<Delta Version="2397" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:10:46000">
<Copy StartSeek="0" EndSeek="14912"/>
<Insert>	queue_is_full(p-&gt;pkt_pool);
</Insert>
<Copy StartSeek="14926" EndSeek="15880"/>
</Delta>
<Delta Version="2398" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:12:16000">
<Copy StartSeek="0" EndSeek="14912"/>
<Insert>	p-&gt;pkt_pool;
</Insert>
<Copy StartSeek="14925" EndSeek="15879"/>
</Delta>
<Delta Version="2399" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:12:21000">
<Copy StartSeek="0" EndSeek="14830"/>
<Insert>
</Insert>
<Copy StartSeek="24176" EndSeek="25224"/>
</Delta>
<Delta Version="2400" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:14:56000">
<Copy StartSeek="0" EndSeek="14830"/>
<Copy StartSeek="14831" EndSeek="25225"/>
</Delta>
<Delta Version="2401" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:14:57000">
<Copy StartSeek="0" EndSeek="24177"/>
<Insert>void dpa_cls_rx_ip_fragment(eth_pkt_t *pkt)
{
	eth_port_t *p = &amp;eth_ports[port];
	p-&gt;pkt_pool
}
</Insert>
<Copy StartSeek="24297" EndSeek="25249"/>
</Delta>
<Delta Version="2402" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:59:9000">
<Copy StartSeek="0" EndSeek="8853"/>
<Insert>
</Insert>
<Copy StartSeek="8856" EndSeek="8893"/>
<Insert>
</Insert>
<Copy StartSeek="8895" EndSeek="9892"/>
<Copy StartSeek="10012" EndSeek="25372"/>
</Delta>
<Delta Version="2403" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:32:43000">
<Copy StartSeek="0" EndSeek="9892"/>
<Insert>		if (dpa_ntohs(iph-&gt;tot_len) &lt;= mtu)
</Insert>
<Copy StartSeek="9937" EndSeek="25379"/>
</Delta>
<Delta Version="2404" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:33:4000">
<Copy StartSeek="0" EndSeek="9892"/>
<Insert>		if (dpa_ntohs(iph-&gt;tot_len) &gt; dpe-&gt;ip_mtu)
			return;

		if (iph-&gt;frag_off &amp; htons(IP_DF))
			DPA_DBG("DF flag is set !");
</Insert>
<Copy StartSeek="10014" EndSeek="10015"/>
<Insert>
</Insert>
<Copy StartSeek="10015" EndSeek="25375"/>
</Delta>
<Delta Version="2405" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:33:17000">
<Copy StartSeek="0" EndSeek="10013"/>
<Insert>

</Insert>
<Copy StartSeek="10013" EndSeek="25373"/>
</Delta>
<Delta Version="2406" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:33:41000">
<Copy StartSeek="0" EndSeek="9976"/>
<Insert>				DPA_DBG("DF flag is set !");
		}
</Insert>
<Copy StartSeek="9986" EndSeek="25346"/>
</Delta>
<Delta Version="2407" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:33:53000">
<Copy StartSeek="0" EndSeek="9976"/>
<Insert>				
</Insert>
<Copy StartSeek="9996" EndSeek="25361"/>
</Delta>
<Delta Version="2408" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:34:39000">
<Copy StartSeek="0" EndSeek="9939"/>
<Insert>			if (iph-&gt;frag_off &amp; htons(IP_DF))
</Insert>
<Copy StartSeek="10033" EndSeek="10053"/>
<Insert>
		}
</Insert>
<Copy StartSeek="10063" EndSeek="25423"/>
</Delta>
<Delta Version="2409" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:36:42000">
<Copy StartSeek="0" EndSeek="9978"/>
<Insert>				DPA_CLS_DBG("ip.flags.DF = 1 &amp;&amp; should fragment");
</Insert>
<Copy StartSeek="10031" EndSeek="25421"/>
</Delta>
<Delta Version="2410" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:36:51000">
<Copy StartSeek="0" EndSeek="10056"/>
<Insert>
</Insert>
<Copy StartSeek="10087" EndSeek="25451"/>
</Delta>
<Delta Version="2411" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="11:37:12000">
<Copy StartSeek="0" EndSeek="9978"/>
<Insert>				DPA_CLS_DBG("ip.flags.DF = 1 &amp;&amp; mtu too large");
</Insert>
<Copy StartSeek="10025" EndSeek="25445"/>
</Delta>
<Delta Version="2412" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:09:23000">
<Copy StartSeek="0" EndSeek="10050"/>
<Copy StartSeek="10074" EndSeek="25469"/>
</Delta>
<Delta Version="2413" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:12:28000">
<Copy StartSeek="0" EndSeek="10050"/>
<Insert>			dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="10074" EndSeek="25469"/>
</Delta>
<Delta Version="2414" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:12:46000">
<Copy StartSeek="0" EndSeek="10050"/>
<Insert>			should_fragment = 1;
</Insert>
<Copy StartSeek="10050" EndSeek="25445"/>
</Delta>
<Delta Version="2415" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:13:26000">
<Copy StartSeek="0" EndSeek="10050"/>
<Copy StartSeek="10074" EndSeek="10109"/>
<Insert>		dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="10112" EndSeek="25449"/>
</Delta>
<Delta Version="2416" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:14:3000">
<Copy StartSeek="0" EndSeek="10109"/>
<Insert>		

</Insert>
<Copy StartSeek="10110" EndSeek="25446"/>
</Delta>
<Delta Version="2417" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:14:5000">
<Copy StartSeek="0" EndSeek="10105"/>
<Insert>		}

</Insert>
<Copy StartSeek="10140" EndSeek="25476"/>
</Delta>
<Delta Version="2418" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:14:41000">
<Copy StartSeek="0" EndSeek="10116"/>
<Insert>			dpa_modify_pkt;
</Insert>
<Copy StartSeek="10140" EndSeek="25481"/>
</Delta>
<Delta Version="2419" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:14:46000">
<Copy StartSeek="0" EndSeek="10105"/>
<Insert>		} else {
			dpa_modify_pkt(pkt);
		}

</Insert>
<Copy StartSeek="10129" EndSeek="25465"/>
</Delta>
<Delta Version="2420" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:16:33000">
<Copy StartSeek="0" EndSeek="10050"/>
<Insert>			dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="10050" EndSeek="10081"/>
<Copy StartSeek="10085" EndSeek="25445"/>
</Delta>
<Delta Version="2421" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:16:41000">
<Copy StartSeek="0" EndSeek="9892"/>
<Copy StartSeek="9915" EndSeek="10108"/>
<Insert>		dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="10109" EndSeek="25446"/>
</Delta>
<Delta Version="2422" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:16:53000">
<Copy StartSeek="0" EndSeek="10109"/>
<Insert>
</Insert>
<Copy StartSeek="10109" EndSeek="25445"/>
</Delta>
<Delta Version="2423" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:17:5000">
<Copy StartSeek="0" EndSeek="10108"/>
<Insert>
</Insert>
<Copy StartSeek="10108" EndSeek="25444"/>
</Delta>
<Delta Version="2424" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:17:7000">
<Copy StartSeek="0" EndSeek="9892"/>
<Insert>		dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="9892" EndSeek="10050"/>
<Copy StartSeek="10074" EndSeek="10109"/>
<Copy StartSeek="10110" EndSeek="25446"/>
</Delta>
<Delta Version="2425" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:18:55000">
<Copy StartSeek="0" EndSeek="10105"/>
<Insert>		}

</Insert>
<Copy StartSeek="10145" EndSeek="25481"/>
</Delta>
<Delta Version="2426" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:19:7000">
<Copy StartSeek="0" EndSeek="9892"/>
<Copy StartSeek="10112" EndSeek="25701"/>
</Delta>
<Delta Version="2427" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:23:57000">
<Copy StartSeek="0" EndSeek="9941"/>
<Insert>			if (iph-&gt;frag_off &amp; htons(IP_DF)) {
				DPA_CLS_DBG("DF = 1 &amp;&amp; insufficient mtu");
				return DPE_LCL;
			}
</Insert>
<Copy StartSeek="9941" EndSeek="9965"/>
<Insert>			dpa_mdf_ipv4_fragment(pkt);
</Insert>
<Copy StartSeek="10009" EndSeek="25603"/>
</Delta>
<Delta Version="2428" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:24:33000">
<Copy StartSeek="0" EndSeek="10009"/>
<Insert>		}

</Insert>
<Copy StartSeek="10033" EndSeek="25622"/>
</Delta>
<Delta Version="2429" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:24:39000">
<Copy StartSeek="0" EndSeek="10028"/>
<Insert>		}

</Insert>
<Copy StartSeek="10099" EndSeek="25688"/>
</Delta>
<Delta Version="2430" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:25:8000">
<Copy StartSeek="0" EndSeek="9965"/>
<Insert>		} else if (iph-&gt;frag_off &amp; htons(IP_DF)){
</Insert>
<Copy StartSeek="10056" EndSeek="25735"/>
</Delta>
<Delta Version="2431" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:25:23000">
<Copy StartSeek="0" EndSeek="10145"/>
<Insert>
		if (dpa_ntohs(iph-&gt;tot_len) &gt; dpe-&gt;ip_mtu) {
			if (iph-&gt;frag_off &amp; htons(IP_DF)) {
				DPA_CLS_DBG("DF = 1 &amp;&amp; insufficient mtu");
				return DPE_LCL;
			}
			dpa_modify_pkt(pkt);
			dpa_mdf_ipv4_fragment(pkt);
		} else {
			dpa_modify_pkt(pkt);
		}

</Insert>
<Copy StartSeek="10145" EndSeek="25481"/>
</Delta>
<Delta Version="2432" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:25:31000">
<Copy StartSeek="0" EndSeek="9892"/>
<Insert>
</Insert>
<Copy StartSeek="9892" EndSeek="25480"/>
</Delta>
<Delta Version="2433" Comment="" NL="\10" Encoding="text" Date="2013/04/22" Time="14:27:20000">
<Copy StartSeek="0" EndSeek="8853"/>
<Insert>  
</Insert>
<Copy StartSeek="8854" EndSeek="8891"/>
<Insert> 
</Insert>
<Copy StartSeek="8892" EndSeek="9889"/>
<Insert>		if (dpa_ntohs(iph-&gt;tot_len) &lt;= dpe-&gt;ip_mtu) {
			dpa_modify_pkt(pkt);
		} else if (iph-&gt;frag_off &amp; htons(IP_DF)) {
			DPA_CLS_DBG("DF = 1 &amp;&amp; insufficient mtu");
			return DPE_LCL;
		} else {
			dpa_modify_pkt(pkt);
			dpa_mdf_ipv4_fragment(pkt);
		}
</Insert>
<Copy StartSeek="9913" EndSeek="9991"/>
<Insert>		pkt-&gt;queue = 0; /* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="10036" EndSeek="14831"/>
<Insert>//void dpa_ipv4_fragment(eth_pkt_t *pkt, mtu)
//{
//        struct iphdr *iph;
//        int raw = 0;
//        int ptr;
//        struct net_device *dev;
//        struct sk_buff *skb2;
//        unsigned int mtu, hlen, left, len, ll_rs, pad;
//        int offset;
//        __be16 not_last_frag;
//        struct rtable *rt = (struct rtable*)skb-&gt;dst;
//        int err = 0;
//
//        dev = rt-&gt;u.dst.dev;
//
//        /*
//         *      Point into the IP datagram header.
//         */
//
//        iph = skb-&gt;nh.iph;
//
//        if (unlikely((iph-&gt;frag_off &amp; htons(IP_DF)) &amp;&amp; !skb-&gt;local_df)) {
//                IP_INC_STATS(IPSTATS_MIB_FRAGFAILS);
//                icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED,
//                          htonl(dst_mtu(&amp;rt-&gt;u.dst)));
//                kfree_skb(skb);
//                return -EMSGSIZE;
//        }
//
//        /*
//         *      Setup starting values.
//         */
//
//        hlen = iph-&gt;ihl * 4;
//        mtu = dst_mtu(&amp;rt-&gt;u.dst) - hlen;       /* Size of data space */
//        IPCB(skb)-&gt;flags |= IPSKB_FRAG_COMPLETE;
//
//        /* When frag_list is given, use it. First, check its validity:
//         * some transformers could create wrong frag_list or break existing
//         * one, it is not prohibited. In this case fall back to copying.
//         *
//         * LATER: this step can be merged to real generation of fragments,
//         * we can switch to copy when see the first bad fragment.
//         */
//        if (skb_shinfo(skb)-&gt;frag_list) {
//                struct sk_buff *frag;
//                int first_len = skb_pagelen(skb);
//
//                if (first_len - hlen &gt; mtu ||
//                    ((first_len - hlen) &amp; 7) ||
//                    (iph-&gt;frag_off &amp; htons(IP_MF|IP_OFFSET)) ||
//                    skb_cloned(skb))
//                        goto slow_path;
//
//                for (frag = skb_shinfo(skb)-&gt;frag_list; frag; frag = frag-&gt;next) {
//                        /* Correct geometry. */
//                        if (frag-&gt;len &gt; mtu ||
//                            ((frag-&gt;len &amp; 7) &amp;&amp; frag-&gt;next) ||
//                            skb_headroom(frag) &lt; hlen)
//                            goto slow_path;
//
//                        /* Partially cloned skb? */
//                        if (skb_shared(frag))
//                                goto slow_path;
//
//                        BUG_ON(frag-&gt;sk);
//                        if (skb-&gt;sk) {
//                                sock_hold(skb-&gt;sk);
//                                frag-&gt;sk = skb-&gt;sk;
//                                frag-&gt;destructor = sock_wfree;
//                        }
//                        skb-&gt;truesize -= frag-&gt;truesize;
//                }
//
//                /* Everything is OK. Generate! */
//
//                err = 0;
//                offset = 0;
//                frag = skb_shinfo(skb)-&gt;frag_list;
//                skb_shinfo(skb)-&gt;frag_list = NULL;
//                skb-&gt;data_len = first_len - skb_headlen(skb);
//                skb-&gt;len = first_len;
//                iph-&gt;tot_len = htons(first_len);
//                iph-&gt;frag_off = htons(IP_MF);
//                ip_send_check(iph);
//
//                for (;;) {
//                        /* Prepare header of the next frame,
//                         * before previous one went down. */
//                        if (frag) {
//                                frag-&gt;ip_summed = CHECKSUM_NONE;
//                                frag-&gt;h.raw = frag-&gt;data;
//                                frag-&gt;nh.raw = __skb_push(frag, hlen);
//                                memcpy(frag-&gt;nh.raw, iph, hlen);
//                                iph = frag-&gt;nh.iph;
//                                iph-&gt;tot_len = htons(frag-&gt;len);
//                                ip_copy_metadata(frag, skb);
//                                if (offset == 0)
//                                        ip_options_fragment(frag);
//                                offset += skb-&gt;len - hlen;
//                                iph-&gt;frag_off = htons(offset&gt;&gt;3);
//                                if (frag-&gt;next != NULL)
//                                        iph-&gt;frag_off |= htons(IP_MF);
//                                /* Ready, complete checksum */
//                                ip_send_check(iph);
//                        }
//
//                        err = output(skb);
//
//                        if (!err)
//                                IP_INC_STATS(IPSTATS_MIB_FRAGCREATES);
//                        if (err || !frag)
//                                break;
//
//                        skb = frag;
//                        frag = skb-&gt;next;
//                        skb-&gt;next = NULL;
//                }
//
//                if (err == 0) {
//                        IP_INC_STATS(IPSTATS_MIB_FRAGOKS);
//                        return 0;
//                }
//
//                while (frag) {
//                        skb = frag-&gt;next;
//                        kfree_skb(frag);
//                        frag = skb;
//                }
//                IP_INC_STATS(IPSTATS_MIB_FRAGFAILS);
//                return err;
//        }
//
//slow_path:
//        left = skb-&gt;len - hlen;         /* Space per frame */
//        ptr = raw + hlen;               /* Where to start from */
//
//        /* for bridged IP traffic encapsulated inside f.e. a vlan header,
//         * we need to make room for the encapsulating header
//         */
//        pad = nf_bridge_pad(skb);
//        ll_rs = LL_RESERVED_SPACE_EXTRA(rt-&gt;u.dst.dev, pad);
//        mtu -= pad;
//
//        /*
//         *      Fragment the datagram.
//         */
//
//        offset = (ntohs(iph-&gt;frag_off) &amp; IP_OFFSET) &lt;&lt; 3;
//        not_last_frag = iph-&gt;frag_off &amp; htons(IP_MF);
//
//        /*
//         *      Keep copying data until we run out.
//         */
//
//        while(left &gt; 0) {
//                len = left;
//                /* IF: it doesn't fit, use 'mtu' - the data space left */
//                if (len &gt; mtu)
//                        len = mtu;
//                /* IF: we are not sending upto and including the packet end
//                   then align the next start on an eight byte boundary */
//                if (len &lt; left) {
//                        len &amp;= ~7;
//                }
//                /*
//                 *      Allocate buffer.
//                 */
//
//                if ((skb2 = alloc_skb(len+hlen+ll_rs, GFP_ATOMIC)) == NULL) {
//                        NETDEBUG(KERN_INFO "IP: frag: no memory for new fragment!\n");
//                        err = -ENOMEM;
//                        goto fail;
//                }
//
//                /*
//                 *      Set up data on packet
//                 */
//
//                ip_copy_metadata(skb2, skb);
//                skb_reserve(skb2, ll_rs);
//                skb_put(skb2, len + hlen);
//                skb2-&gt;nh.raw = skb2-&gt;data;
//                skb2-&gt;h.raw = skb2-&gt;data + hlen;
//
//                /*
//                 *      Charge the memory for the fragment to any owner
//                 *      it might possess
//                 */
//
//                if (skb-&gt;sk)
//                        skb_set_owner_w(skb2, skb-&gt;sk);
//
//                /*
//                 *      Copy the packet header into the new buffer.
//                 */
//
//                memcpy(skb2-&gt;nh.raw, skb-&gt;data, hlen);
//
//                /*
//                 *      Copy a block of the IP datagram.
//                 */
//                if (skb_copy_bits(skb, ptr, skb2-&gt;h.raw, len))
//                        BUG();
//                left -= len;
//
//                /*
//                 *      Fill in the new header fields.
//                 */
//                iph = skb2-&gt;nh.iph;
//                iph-&gt;frag_off = htons((offset &gt;&gt; 3));
//
//                /* ANK: dirty, but effective trick. Upgrade options only if
//                 * the segment to be fragmented was THE FIRST (otherwise,
//                 * options are already fixed) and make it ONCE
//                 * on the initial skb, so that all the following fragments
//                 * will inherit fixed options.
//                 */
//                if (offset == 0)
//                        ip_options_fragment(skb);
//
//                /*
//                 *      Added AC : If we are fragmenting a fragment that's not the
//                 *                 last fragment then keep MF on each bit
//                 */
//                if (left &gt; 0 || not_last_frag)
//                        iph-&gt;frag_off |= htons(IP_MF);
//                ptr += len;
//                offset += len;
//
//                /*
//                 *      Put this fragment into the sending queue.
//                 */
//                iph-&gt;tot_len = htons(len + hlen);
//
//                ip_send_check(iph);
//
//                err = output(skb2);
//                if (err)
//                        goto fail;
//
//                IP_INC_STATS(IPSTATS_MIB_FRAGCREATES);
//        }
//        kfree_skb(skb);
//        IP_INC_STATS(IPSTATS_MIB_FRAGOKS);
//        return err;
//
//fail:
//        kfree_skb(skb);
//        IP_INC_STATS(IPSTATS_MIB_FRAGFAILS);
//        return err;
//}

//void dpa_cls_rx_ip_fragment(eth_pkt_t *pkt)
//{
//        eth_port_t *p = &amp;eth_ports[port];
//        p-&gt;pkt_pool
//}

</Insert>
<Copy StartSeek="14831" EndSeek="15782"/>
</Delta>
<Delta Version="2434" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="09:25:21000">
<Copy StartSeek="0" EndSeek="4879"/>
<Insert>  tmp = dcm_alloc();
  if (!tmp) {
      DPA_CLS_DBG("Failed to alloc dpe entry\n");
      return NULL;
  }
</Insert>
<Copy StartSeek="4976" EndSeek="4977"/>
<Insert>  tmp-&gt;state = DPE_NEW;
  tmp-&gt;counters.rx_hits = 0;
  tmp-&gt;counters.fwd_hits = 0;
  tmp-&gt;mod_ops = 0;
  tmp-&gt;mod.tx_port = NULL;
</Insert>
<Copy StartSeek="5102" EndSeek="15766"/>
</Delta>
<Delta Version="2435" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="09:27:27000">
<Copy StartSeek="0" EndSeek="6350"/>
<Insert>  idx = cls-&gt;dport;
</Insert>
<Copy StartSeek="6369" EndSeek="15765"/>
</Delta>
<Delta Version="2436" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="09:28:45000">
<Copy StartSeek="0" EndSeek="4879"/>
<Insert>	tmp = dcm_alloc();
	if (!tmp) {
		DPA_CLS_DBG("Failed to alloc dpe entry\n");
		return NULL;
	}
</Insert>
<Copy StartSeek="4987" EndSeek="4988"/>
<Insert>	tmp-&gt;state = DPE_NEW;
	tmp-&gt;counters.rx_hits = 0;
	tmp-&gt;counters.fwd_hits = 0;
	tmp-&gt;mod_ops = 0;
	tmp-&gt;mod.tx_port = NULL;
</Insert>
<Copy StartSeek="5118" EndSeek="6366"/>
<Insert>	idx = cls-&gt;dport;
</Insert>
<Copy StartSeek="6386" EndSeek="15782"/>
</Delta>
<Delta Version="2437" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="09:34:1000">
<Copy StartSeek="0" EndSeek="1003"/>
<Insert>static struct dpa_entry *dpa_entry_tbl[DPA_CLS_TBL_SZ];
</Insert>
<Copy StartSeek="1059" EndSeek="6424"/>
<Insert>	dpe_list = &amp;dpa_entry_tbl[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="6481" EndSeek="7838"/>
<Insert>		e = dpa_entry_tbl[idx];
</Insert>
<Copy StartSeek="7864" EndSeek="8002"/>
<Insert>		dpa_entry_tbl[idx] = NULL;
</Insert>
<Copy StartSeek="8031" EndSeek="15782"/>
</Delta>
<Delta Version="2438" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="10:38:12000">
<Copy StartSeek="0" EndSeek="6366"/>
<Insert>  idx = cls-&gt;dport;
</Insert>
<Copy StartSeek="6385" EndSeek="15781"/>
</Delta>
<Delta Version="2439" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="10:39:31000">
<Copy StartSeek="0" EndSeek="2213"/>
<Insert>		 dpe-&gt;mod_ops);
</Insert>
<Copy StartSeek="2235" EndSeek="10156"/>
<Insert>		if (dpe-&gt;mod_ops) {
</Insert>
<Copy StartSeek="10182" EndSeek="13712"/>
<Insert>		dpe-&gt;mod_ops |= DPA_MDF_ETH_CHG| DPA_MDF_IP_V4_TTL;
</Insert>
<Copy StartSeek="13770" EndSeek="14040"/>
<Insert>				dpe-&gt;mod_ops |= DPA_MDF_VLAN_CHG;
</Insert>
<Copy StartSeek="14082" EndSeek="14206"/>
<Insert>			dpe-&gt;mod_ops |= DPA_MDF_VLAN_DEL;
</Insert>
<Copy StartSeek="14247" EndSeek="14363"/>
<Insert>			dpe-&gt;mod_ops = 0;
</Insert>
<Copy StartSeek="14388" EndSeek="14578"/>
<Insert>			dpe-&gt;mod_ops |= DPA_MDF_VLAN_ADD;
</Insert>
<Copy StartSeek="14619" EndSeek="14696"/>
<Insert>		dpe-&gt;mod_ops |= DPA_MDF_IP_V4_CHG;
</Insert>
<Copy StartSeek="14737" EndSeek="14822"/>
<Insert>		dpe-&gt;mod_ops |= DPA_MDF_L4_CHG;
</Insert>
<Copy StartSeek="14860" EndSeek="15817"/>
</Delta>
<Delta Version="2440" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="11:00:49000">
<Copy StartSeek="0" EndSeek="5075"/>
<Insert>  tmp-&gt;mod_ops = 0;
</Insert>
<Copy StartSeek="5099" EndSeek="15821"/>
</Delta>
<Delta Version="2441" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="11:01:16000">
<Copy StartSeek="0" EndSeek="2213"/>
<Insert>		 dpe-&gt;mod.mod_ops);
</Insert>
<Copy StartSeek="2231" EndSeek="5071"/>
<Insert>  tmp-&gt;mod.mod_ops = 0;
</Insert>
<Copy StartSeek="5091" EndSeek="10152"/>
<Insert>		if (dpe-&gt;mod.mod_ops) {
</Insert>
<Copy StartSeek="10174" EndSeek="13704"/>
<Insert>		dpe-&gt;mod.mod_ops |= DPA_MDF_ETH_CHG| DPA_MDF_IP_V4_TTL;
</Insert>
<Copy StartSeek="13758" EndSeek="14028"/>
<Insert>				dpe-&gt;mod.mod_ops |= DPA_MDF_VLAN_CHG;
</Insert>
<Copy StartSeek="14066" EndSeek="14190"/>
<Insert>			dpe-&gt;mod.mod_ops |= DPA_MDF_VLAN_DEL;
</Insert>
<Copy StartSeek="14227" EndSeek="14343"/>
<Insert>			dpe-&gt;mod.mod_ops = 0;
</Insert>
<Copy StartSeek="14364" EndSeek="14554"/>
<Insert>			dpe-&gt;mod.mod_ops |= DPA_MDF_VLAN_ADD;
</Insert>
<Copy StartSeek="14591" EndSeek="14668"/>
<Insert>		dpe-&gt;mod.mod_ops |= DPA_MDF_IP_V4_CHG;
</Insert>
<Copy StartSeek="14705" EndSeek="14790"/>
<Insert>		dpe-&gt;mod.mod_ops |= DPA_MDF_L4_CHG;
</Insert>
<Copy StartSeek="14824" EndSeek="15431"/>
<Insert>		dpa_entry_calc_mod_ops(dpe);
</Insert>
<Copy StartSeek="15458" EndSeek="15777"/>
</Delta>
<Delta Version="2442" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="11:03:27000">
<Copy StartSeek="0" EndSeek="15431"/>
<Insert>		dpa_entry_calc_ops(dpe);
</Insert>
<Copy StartSeek="15462" EndSeek="15781"/>
</Delta>
<Delta Version="2443" Comment="" NL="\10" Encoding="text" Date="2013/05/02" Time="11:03:57000">
<Copy StartSeek="0" EndSeek="1003"/>
<Insert>static struct dpa_entry *dpa_tbl_entry[DPA_CLS_TBL_SZ];
</Insert>
<Copy StartSeek="1059" EndSeek="6423"/>
<Insert>	dpe_list = &amp;dpa_tbl_entry[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="6480" EndSeek="7837"/>
<Insert>		e = dpa_tbl_entry[idx];
</Insert>
<Copy StartSeek="7863" EndSeek="8001"/>
<Insert>		dpa_tbl_entry[idx] = NULL;
</Insert>
<Copy StartSeek="8030" EndSeek="15781"/>
</Delta>
<Delta Version="2444" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:13:37000">
<Copy StartSeek="0" EndSeek="311"/>
<Insert>#define DPA_CLS_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="373" EndSeek="6496"/>
<Insert>	DPA_CLS_DBG("\nlooking for idx %u", idx);
</Insert>
<Copy StartSeek="6537" EndSeek="6585"/>
<Insert>		DPA_CLS_DBG("\nallocating new dpe");
</Insert>
<Copy StartSeek="6622" EndSeek="6784"/>
<Insert>			DPA_CLS_DBG("\nmatch dpe found");
</Insert>
<Copy StartSeek="6819" EndSeek="7036"/>
<Insert>	DPA_CLS_DBG("\ndpe collision");
</Insert>
<Copy StartSeek="7067" EndSeek="7636"/>
<Insert>			DPA_CLS_DBG("\n[%4x]: ", i);
</Insert>
<Copy StartSeek="7666" EndSeek="15769"/>
</Delta>
<Delta Version="2445" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:16:59000">
<Copy StartSeek="0" EndSeek="311"/>
<Insert>#define DPA_CLS_DBG(format, args...) printk(format"", ##args)
</Insert>
<Copy StartSeek="375" EndSeek="7638"/>
<Insert>			DPA_CLS_DBG("[%4x]: ", i);
</Insert>
<Copy StartSeek="7670" EndSeek="15773"/>
</Delta>
<Delta Version="2446" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:17:43000">
<Copy StartSeek="0" EndSeek="7180"/>
<Copy StartSeek="7268" EndSeek="15861"/>
</Delta>
<Delta Version="2447" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:23:57000">
<Copy StartSeek="0" EndSeek="7265"/>
<Insert>
}
</Insert>
<Copy StartSeek="8301" EndSeek="16894"/>
</Delta>
<Delta Version="2448" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:24:13000">
<Copy StartSeek="0" EndSeek="6057"/>
<Insert>
</Insert>
<Copy StartSeek="6448" EndSeek="17284"/>
</Delta>
<Delta Version="2449" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:25:27000">
<Copy StartSeek="0" EndSeek="6110"/>
<Insert>	struct dpa_entry **dpe_list, *tmp, *prev = NULL, *dpe;

</Insert>
<Copy StartSeek="6110" EndSeek="17227"/>
</Delta>
<Delta Version="2450" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:25:39000">
<Copy StartSeek="0" EndSeek="6057"/>
<Insert>static uint32_t dpa_cls_hash() 
</Insert>
<Copy StartSeek="6096" EndSeek="17234"/>
</Delta>
<Delta Version="2451" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:25:51000">
<Copy StartSeek="0" EndSeek="6057"/>
<Insert>static inline uint32_t dpa_cls_hash() 
</Insert>
<Copy StartSeek="6118" EndSeek="17256"/>
</Delta>
<Delta Version="2452" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:26:11000">
<Copy StartSeek="0" EndSeek="6057"/>
<Insert>static inline uint32_t dpa_cls_hash(struct dpa_pri_key *key)
</Insert>
<Copy StartSeek="6118" EndSeek="6139"/>
<Insert>//	idx = dpa_cls_XXH_small32_12b(cls);
</Insert>
<Copy StartSeek="6178" EndSeek="6184"/>
<Insert>	idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
	idx += cls-&gt;sport;
</Insert>
<Copy StartSeek="6243" EndSeek="6259"/>
<Insert>	idx += cls-&gt;dport;
</Insert>
<Copy StartSeek="6279" EndSeek="6285"/>
<Insert>	idx = cls-&gt;dport;
</Insert>
<Copy StartSeek="6304" EndSeek="6312"/>
<Insert>	idx &amp;= (DPA_CLS_TBL_SZ - 1);
</Insert>
<Copy StartSeek="6342" EndSeek="17256"/>
</Delta>
<Delta Version="2453" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:26:25000">
<Copy StartSeek="0" EndSeek="6342"/>
<Insert>	dpe_list = &amp;dpa_entry_tbl[idx]; /* head of the chain */
	dpe = *dpe_list;
}

</Insert>
<Copy StartSeek="6345" EndSeek="17181"/>
</Delta>
<Delta Version="2454" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:26:38000">
<Copy StartSeek="0" EndSeek="6710"/>
<Insert>	dpe_list = &amp;dpa_entry_tbl[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="6781" EndSeek="17195"/>
</Delta>
<Delta Version="2455" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:27:26000">
<Copy StartSeek="0" EndSeek="6431"/>
<Insert>	uint32_t idx = 0;
</Insert>
<Copy StartSeek="6431" EndSeek="6488"/>
<Insert>//	idx = dpa_cls_XXH_small32_12b(cls);
#if 0
	idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
	idx += cls-&gt;sport;
	idx *= PRIME1;
	idx += cls-&gt;dport;
#else
	idx = cls-&gt;dport;
#endif 
	idx &amp;= (DPA_CLS_TBL_SZ - 1);
</Insert>
<Copy StartSeek="6488" EndSeek="16973"/>
</Delta>
<Delta Version="2456" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:27:43000">
<Copy StartSeek="0" EndSeek="6120"/>
<Insert>	uint32_t idx = 0;
</Insert>
<Copy StartSeek="6148" EndSeek="16982"/>
</Delta>
<Delta Version="2457" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:27:56000">
<Copy StartSeek="0" EndSeek="7353"/>
<Insert>	uint32_t idx = 0;
</Insert>
<Copy StartSeek="7353" EndSeek="7410"/>
<Insert>//	idx = dpa_cls_XXH_small32_12b(cls);
#if 0
	idx = cls-&gt;sip ^ (_rotl(cls-&gt;dip,7));
	idx += cls-&gt;sport;
	idx *= PRIME1;
	idx += cls-&gt;dport;
#else
	idx = cls-&gt;dport;
#endif 
	idx &amp;= (DPA_CLS_TBL_SZ - 1);
	dpe_list = &amp;dpa_entry_tbl[idx]; /* head of the chain */
</Insert>
<Copy StartSeek="7481" EndSeek="16774"/>
</Delta>
<Delta Version="2458" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:28:21000">
<Copy StartSeek="0" EndSeek="7268"/>
<Copy StartSeek="7307" EndSeek="16813"/>
</Delta>
<Delta Version="2459" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:28:53000">
<Copy StartSeek="0" EndSeek="10501"/>
<Insert>	dpe = dpa_entry_find(&amp;tup, (uint8_t *)eth);
</Insert>
<Copy StartSeek="10545" EndSeek="16812"/>
</Delta>
<Delta Version="2460" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:29:5000">
<Copy StartSeek="0" EndSeek="7307"/>
<Insert>static struct dpa_entry *dpa_entry_get(struct dpa_pri_key *cls,
					uint8_t *pkt)
{
</Insert>
<Copy StartSeek="7387" EndSeek="16807"/>
</Delta>
<Delta Version="2461" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:29:9000">
<Copy StartSeek="0" EndSeek="6586"/>
<Insert>	DPA_CLS_DBG("looking for idx %u", idx);
</Insert>
<Copy StartSeek="6629" EndSeek="16809"/>
</Delta>
<Delta Version="2462" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:31:33000">
<Copy StartSeek="0" EndSeek="6630"/>
<Insert>	/* a new guy's in town */
	if (dpe == NULL) {
		DPA_CLS_DBG("allocating new dpe");
		dpe = dpa_entry_alloc();
		if (dpe)
			(dpe)-&gt;next = NULL;
		*dpe_list = dpe;
		return dpe;
	}
	tmp = dpe;
	do {
		if (is_dpa_entry_match_pkt(tmp, cls, pkt)) {
			DPA_CLS_DBG("match dpe found");
			/* rebalance chain */
			if (tmp != dpe) {
				prev-&gt;next = tmp-&gt;next;
				tmp-&gt;next = dpe;
				*dpe_list = tmp;
			}
			return tmp;
		}
		prev = tmp;
		tmp = tmp-&gt;next;
	} while (tmp);

	/* put him in chains ! */
	DPA_CLS_DBG("dpe collision");
	tmp = dpa_entry_alloc();
	if (!tmp) {
		return NULL;
	} 
	tmp-&gt;next = dpe;
	*dpe_list = tmp;

</Insert>
<Copy StartSeek="6630" EndSeek="16185"/>
</Delta>
<Delta Version="2463" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:31:45000">
<Copy StartSeek="0" EndSeek="6568"/>
<Insert>	dpe = *dpe_list;
	DPA_CLS_DBG("searching for idx %u", idx);

	return tmp;
}

</Insert>
<Copy StartSeek="6591" EndSeek="16130"/>
</Delta>
<Delta Version="2464" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:32:15000">
<Copy StartSeek="0" EndSeek="6440"/>
<Insert>	struct dpa_entry **dpe_list, *tmp, *prev = NULL, *dpe;
</Insert>
<Copy StartSeek="6470" EndSeek="16104"/>
</Delta>
<Delta Version="2465" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:32:24000">
<Copy StartSeek="0" EndSeek="6543"/>
<Copy StartSeek="6594" EndSeek="16155"/>
</Delta>
<Delta Version="2466" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:33:15000">
<Copy StartSeek="0" EndSeek="6881"/>
<Insert>	DPA_CLS_DBG("looking for idx %u", idx);
</Insert>
<Copy StartSeek="6937" EndSeek="16170"/>
</Delta>
<Delta Version="2467" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:34:15000">
<Copy StartSeek="0" EndSeek="6881"/>
<Insert>	DPA_CLS_DBG("dpa_entry_get: looking for idx %u", idx);
</Insert>
<Copy StartSeek="6922" EndSeek="16155"/>
</Delta>
<Delta Version="2468" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:34:21000">
<Copy StartSeek="0" EndSeek="6616"/>
<Insert>/* on failure allocates a new entry */
</Insert>
<Copy StartSeek="6656" EndSeek="16156"/>
</Delta>
<Delta Version="2469" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:35:57000">
<Copy StartSeek="0" EndSeek="6616"/>
<Insert>/* on mismatch allocates a new entry */
</Insert>
<Copy StartSeek="6655" EndSeek="16155"/>
</Delta>
<Delta Version="2470" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:36:13000">
<Copy StartSeek="0" EndSeek="6616"/>
<Insert>/* allocate a new entry on mismatch */
</Insert>
<Copy StartSeek="6656" EndSeek="16156"/>
</Delta>
<Delta Version="2471" Comment="" NL="\10" Encoding="text" Date="2013/05/05" Time="12:36:16000">
<Copy StartSeek="0" EndSeek="6594"/>
<Copy StartSeek="7037" EndSeek="16599"/>
</Delta>
<Delta Version="2472" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:14:15000">
<Copy StartSeek="0" EndSeek="6440"/>
<Insert>	struct dpa_entry **dpe_list;
</Insert>
<Copy StartSeek="6476" EndSeek="16605"/>
</Delta>
<Delta Version="2473" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:14:42000">
<Copy StartSeek="0" EndSeek="6548"/>
<Insert>
</Insert>
<Copy StartSeek="6566" EndSeek="16622"/>
</Delta>
<Delta Version="2474" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:14:49000">
<Copy StartSeek="0" EndSeek="6440"/>
<Insert>	struct dpa_entry **dpe_list, *dpe;
</Insert>
<Copy StartSeek="6496" EndSeek="6586"/>
<Insert>	DPA_CLS_DBG("dpa_entry_find: dpe %p", *dpe_list);
	if (dpe == NULL) {
		DPA_CLS_DBG("allocating new dpe");
		dpe = dpa_entry_alloc();
		if (dpe)
			(dpe)-&gt;next = NULL;
		*dpe_list = dpe;
</Insert>
<Copy StartSeek="6645" EndSeek="16513"/>
</Delta>
<Delta Version="2475" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:15:52000">
<Copy StartSeek="0" EndSeek="6586"/>
<Insert>	DPA_CLS_DBG("dpa_entry_find: dpe %p", dpe);

</Insert>
<Copy StartSeek="6587" EndSeek="16468"/>
</Delta>
<Delta Version="2476" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:16:1000">
<Copy StartSeek="0" EndSeek="6906"/>
<Insert>	return *dpe_list;
</Insert>
<Copy StartSeek="6919" EndSeek="16462"/>
</Delta>
<Delta Version="2477" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:16:47000">
<Copy StartSeek="0" EndSeek="6587"/>
<Insert>	if (!dpe) {
</Insert>
<Copy StartSeek="6598" EndSeek="6612"/>
<Insert>	}
</Insert>
<Copy StartSeek="6613" EndSeek="16458"/>
</Delta>
<Delta Version="2478" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:16:57000">
<Copy StartSeek="0" EndSeek="6902"/>
<Copy StartSeek="6903" EndSeek="16459"/>
</Delta>
<Delta Version="2479" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:19:11000">
<Copy StartSeek="0" EndSeek="4697"/>
<Insert>	return is_pri_key_match(&amp;dpe-&gt;org.cls_tuple, cls) &amp;&amp;
		is_dpa_entry_match_l2(&amp;dpe-&gt;org.l2, pkt);
}

</Insert>
<Copy StartSeek="4752" EndSeek="16413"/>
</Delta>
<Delta Version="2480" Comment="" NL="\10" Encoding="text" Date="2013/05/06" Time="10:19:49000">
<Copy StartSeek="0" EndSeek="158"/>
<Insert>#include &lt;util/byte_order.h&gt;

</Insert>
<Copy StartSeek="159" EndSeek="247"/>
<Insert>int printk(const char * fmt, ...);
#define DPA_CLS_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="308" EndSeek="314"/>
<Insert>#define DPA_CLS_DBG(format, args...)
</Insert>
<Copy StartSeek="352" EndSeek="424"/>
<Insert>#define DPA_CLS_TBL_SZ (1&lt;&lt;13)

</Insert>
<Copy StartSeek="455" EndSeek="2146"/>
<Insert>		 dpe-&gt;mod.ops);
</Insert>
<Copy StartSeek="2164" EndSeek="2282"/>
<Insert>	DPA_DBG("(%s:%d)status:%#x, ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2359" EndSeek="2382"/>
<Insert>		rx_status,
</Insert>
<Copy StartSeek="2382" EndSeek="2497"/>
<Insert>	      NETA_PNC_RX_IS_DA_UC(rx_desc),
</Insert>
<Copy StartSeek="2542" EndSeek="4615"/>
<Insert>	return is_pri_key_match(&amp;dpe-&gt;org.cls_tuple, cls);
}

</Insert>
<Copy StartSeek="4716" EndSeek="4797"/>
<Insert>  tmp = dcm_alloc();
  if (!tmp) {
      DPA_CLS_DBG("Failed to alloc dpe entry\n");
      return NULL;
  }

  tmp-&gt;state = DPE_NEW;
  tmp-&gt;counters.rx_hits = 0;
  tmp-&gt;counters.fwd_hits = 0;
  tmp-&gt;mod.ops = 0;
  tmp-&gt;mod.tx_port = NULL;

</Insert>
<Copy StartSeek="4942" EndSeek="5880"/>
<Insert>static inline uint32_t dpa_key_hash(struct dpa_pri_key *key)
{
	register uint32_t idx = 0;
//	idx = dpa_key_XXH_small32_12b(key);
#if 0
	idx = key-&gt;sip ^ (_rotl(key-&gt;dip,7));
	idx += key-&gt;sport;
	idx *= PRIME1;
	idx += key-&gt;dport;
#else
	idx = key-&gt;dport;
#endif 
	idx &amp;= (DPA_KEY_TBL_SZ - 1);
}

</Insert>
<Copy StartSeek="5881" EndSeek="5967"/>
<Insert>	struct dpa_entry **dpe_list, *tmp, *prev = NULL, *dpe;

	dpe_list = &amp;dpa_entry_tbl[dpa_key_hash(cls)]; /* head of the chain */
	dpe = *dpe_list;

	if (!dpe)
		return dpe;

	tmp = dpe;
	do {
		if (is_dpa_entry_match_pkt(tmp, cls, pkt)) {
			DPA_CLS_DBG("match dpe found");
			/* rebalance chain */
			if (tmp != dpe) {
				prev-&gt;next = tmp-&gt;next;
				tmp-&gt;next = dpe;
				*dpe_list = tmp;
			}
			return tmp;
		}
		prev = tmp;
		tmp = tmp-&gt;next;
	} while (tmp);

	return tmp;
}

/* allocates a new entry on mismatch */
static struct dpa_entry *dpa_entry_get(struct dpa_pri_key *cls, uint8_t *pkt)
{
	struct dpa_entry **dpe_list, *tmp, *prev = NULL, *dpe;

	dpe_list = &amp;dpa_entry_tbl[dpa_key_hash(cls)]; /* head of the chain */
	dpe = *dpe_list;
	DPA_CLS_DBG("looking for idx %u", idx);

</Insert>
<Copy StartSeek="6312" EndSeek="6339"/>
<Insert>	if (dpe == NULL) {
		DPA_CLS_DBG("allocating new dpe");
		dpe = dpa_entry_alloc();
		if (dpe)
			(dpe)-&gt;next = NULL;
		*dpe_list = dpe;
		return dpe;
	}
	tmp = dpe;
</Insert>
<Copy StartSeek="6494" EndSeek="6547"/>
<Insert>			DPA_CLS_DBG("match dpe found");
</Insert>
<Copy StartSeek="6584" EndSeek="6609"/>
<Insert>			if (tmp != dpe) {
</Insert>
<Copy StartSeek="6631" EndSeek="6659"/>
<Insert>				tmp-&gt;next = dpe;
				*dpe_list = tmp;
</Insert>
<Copy StartSeek="6697" EndSeek="6798"/>
<Insert>	DPA_CLS_DBG("dpe collision");
</Insert>
<Copy StartSeek="6831" EndSeek="6857"/>
<Insert>	if (!tmp) {
		return NULL;
	} 
	tmp-&gt;next = dpe;
	*dpe_list = tmp;

</Insert>
<Copy StartSeek="6890" EndSeek="7141"/>
<Insert>
</Insert>
<Copy StartSeek="7141" EndSeek="7241"/>
<Insert>	DPA_CLS_DBG("[%4x]: ", i);
</Insert>
<Copy StartSeek="7265" EndSeek="7296"/>
<Insert>		DPA_CLS_DBG("%.2x ", (*buf) &amp; 0xff);
</Insert>
<Copy StartSeek="7331" EndSeek="7355"/>
<Insert>			DPA_CLS_DBG("\n[%4x]: ", i);
</Insert>
<Copy StartSeek="7383" EndSeek="7902"/>
<Insert>static inline void dpa_cls_iphdr_set(eth_pkt_t *pkt)
{
#ifndef CONFIG_MV_ETH_PNC
	if (NETA_RX_IS_VLAN(pkt-&gt;rx_desc))
		pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (pkt-&gt;phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_vlan_ethhdr_t));
	else
		pkt-&gt;ip_hdr = (dpa_ip_hdr_t*) (pkt-&gt;phy_hdr + MV_ETH_MH_SIZE + sizeof(dpa_eth_hdr_t));
	/* HAIM FIXME : add parsing for pppoe &amp;&amp; DVLAN */
#endif
}

</Insert>
<Copy StartSeek="7903" EndSeek="8178"/>
<Insert>	uint8_t mh; 

</Insert>
<Copy StartSeek="8181" EndSeek="8218"/>
<Insert>
</Insert>
<Copy StartSeek="8220" EndSeek="8340"/>
<Insert>		}
		return DPE_LCL;
	}
</Insert>
<Copy StartSeek="8368" EndSeek="8556"/>
<Insert>	    !NETA_PNC_RX_IS_DA_UC(rx_desc)) {
</Insert>
<Copy StartSeek="8602" EndSeek="8651"/>
<Insert>	dpa_cls_iphdr_set(pkt);
</Insert>
<Copy StartSeek="8653" EndSeek="8673"/>
<Insert>	l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + (iph-&gt;ihl &lt;&lt; 2));
</Insert>
<Copy StartSeek="8837" EndSeek="8892"/>
<Insert>	dpe = dpa_entry_get(&amp;tup, (uint8_t *)eth);
	if (!dpe) {
</Insert>
<Copy StartSeek="8948" EndSeek="8966"/>
<Insert>	}
</Insert>
<Copy StartSeek="8966" EndSeek="9330"/>
<Insert>		/* Eth egress port */
		pkt-&gt;port = dpe-&gt;mod.tx_port;

		/* Eth Tx queue */
		pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */

</Insert>
<Copy StartSeek="9393" EndSeek="9412"/>
<Insert>		mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
		pkt-&gt;size += mh;
		if (dpe-&gt;mod.ops) {
			uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
</Insert>
<Copy StartSeek="9523" EndSeek="9577"/>
<Insert>				   ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
				   ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
				   (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);

</Insert>
<Copy StartSeek="9696" EndSeek="9863"/>
<Insert>		} else {
			pkt-&gt;cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
		}

</Insert>
<Copy StartSeek="9994" EndSeek="10315"/>
<Insert>
</Insert>
<Copy StartSeek="10318" EndSeek="10461"/>
<Insert>		/* HAIM FIXME : replace with a fallback when pnc unavaiable */
		/*if (!NETA_RX_IS_PPPOE(rx_desc)) {
</Insert>
<Copy StartSeek="10497" EndSeek="10527"/>
<Insert>		} 
		*/
</Insert>
<Copy StartSeek="10531" EndSeek="12952"/>
<Insert>		dpe-&gt;mod.ops |= DPA_MDF_ETH_CHG| DPA_MDF_IP_V4_TTL;
</Insert>
<Copy StartSeek="13006" EndSeek="13276"/>
<Insert>				dpe-&gt;mod.ops |= DPA_MDF_VLAN_CHG;
</Insert>
<Copy StartSeek="13314" EndSeek="13379"/>
<Insert>			DPA_CLS_DBG("vlan del: %u",dpa_ntohs(org_l2-&gt;vlan_id));
			dpe-&gt;mod.ops |= DPA_MDF_VLAN_DEL;
</Insert>
<Copy StartSeek="13476" EndSeek="13592"/>
<Insert>			dpe-&gt;mod.ops = 0;
</Insert>
<Copy StartSeek="13613" EndSeek="13803"/>
<Insert>			dpe-&gt;mod.ops |= DPA_MDF_VLAN_ADD;
</Insert>
<Copy StartSeek="13840" EndSeek="13917"/>
<Insert>		dpe-&gt;mod.ops |= DPA_MDF_IP_V4_CHG;
</Insert>
<Copy StartSeek="13954" EndSeek="14039"/>
<Insert>		dpe-&gt;mod.ops |= DPA_MDF_L4_CHG;
</Insert>
<Copy StartSeek="14073" EndSeek="15030"/>
</Delta>
<Delta Version="2481" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="11:03:11000">
<Copy StartSeek="0" EndSeek="6584"/>
<Insert>			/* rebalance chain */
			if (tmp != *dpe) {
				prev-&gt;next = tmp-&gt;next;
				tmp-&gt;next = *dpe;
				*dpe = tmp;
			}
</Insert>
<Copy StartSeek="6584" EndSeek="14912"/>
</Delta>
<Delta Version="2482" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="15:48:37000">
<Copy StartSeek="0" EndSeek="10480"/>
<Insert>	dpe-&gt;counters.rx_hits++;

</Insert>
<Copy StartSeek="10481" EndSeek="14886"/>
</Delta>
<Delta Version="2483" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="15:49:2000">
<Copy StartSeek="0" EndSeek="5986"/>
<Insert>	struct dpa_entry **dpe, *tmp, *prev = NULL;
</Insert>
<Copy StartSeek="6017" EndSeek="14872"/>
</Delta>
<Delta Version="2484" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="15:50:21000">
<Copy StartSeek="0" EndSeek="5986"/>
<Insert>	struct dpa_entry **dpe, *tmp;
</Insert>
<Copy StartSeek="6031" EndSeek="14886"/>
</Delta>
<Delta Version="2485" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="15:50:37000">
<Copy StartSeek="0" EndSeek="6603"/>
<Insert>		prev = tmp;
</Insert>
<Copy StartSeek="6603" EndSeek="14872"/>
</Delta>
<Delta Version="2486" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="15:50:59000">
<Copy StartSeek="0" EndSeek="5986"/>
<Insert>	struct dpa_entry **dpe, *tmp, *prev = NULL;
</Insert>
<Copy StartSeek="6017" EndSeek="14858"/>
</Delta>
<Delta Version="2487" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="15:51:5000">
<Copy StartSeek="0" EndSeek="5967"/>
<Insert>	uint32_t idx = 0;
</Insert>
<Copy StartSeek="5982" EndSeek="8523"/>
<Insert>	if (iph-&gt;version == 4) {
		l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + (iph-&gt;ihl &lt;&lt; 2));
	} else {
		l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + 40); /* ipv6 no nesting */
	}
</Insert>
<Copy StartSeek="8580" EndSeek="14747"/>
</Delta>
<Delta Version="2488" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:42:56000">
<Copy StartSeek="0" EndSeek="10362"/>
<Insert>//      if (NETA_RX_IS_VLAN(rx_desc)) {
//      	vh = skb-&gt;data + ETH_HLEN;
//      	dpa_cls_info.l2.vlan_id = vh-&gt;h_vlan_TCI;
//      	/* VLAN + IP */
//      	dpa_cls_info.eth_type = vh-&gt;h_vlan_encapsulated_proto;
//      }
}

</Insert>
<Copy StartSeek="10365" EndSeek="14521"/>
</Delta>
<Delta Version="2489" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:45:29000">
<Copy StartSeek="0" EndSeek="4817"/>
<Copy StartSeek="4848" EndSeek="14552"/>
</Delta>
<Delta Version="2490" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:47:4000">
<Copy StartSeek="0" EndSeek="4817"/>
<Insert>	if (!tmp) {
</Insert>
<Copy StartSeek="4828" EndSeek="4843"/>
<Insert>	}
</Insert>
<Copy StartSeek="4843" EndSeek="14547"/>
</Delta>
<Delta Version="2491" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:47:7000">
<Copy StartSeek="0" EndSeek="9099"/>
<Insert>#ifndef DPA_MARK_FWD_PKT /* marking requires ip.csum recalc */
		/* Eth Tx cmd */
		if (dpe-&gt;mod_ops)
#else
		{
#endif
</Insert>
<Copy StartSeek="9121" EndSeek="14450"/>
</Delta>
<Delta Version="2492" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:49:38000">
<Copy StartSeek="0" EndSeek="4817"/>
<Insert>	if (!tmp)
		return NULL;
</Insert>
<Copy StartSeek="4817" EndSeek="14424"/>
</Delta>
</DeltaFile>
