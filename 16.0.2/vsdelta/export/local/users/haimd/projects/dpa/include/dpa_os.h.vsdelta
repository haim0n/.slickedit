<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="9" Comment="" Date="2013/06/19" Time="12:40:29000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2013, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
*  dpa_os.h
* 
* Description:
*   DPA OS Primitives.
*
*******************************************************************************/

#ifndef _DPA_OS_H_
#define _DPA_OS_H_


#ifdef __cplusplus
extern "C" {
#endif

#include &lt;stdarg.h&gt;
#include &lt;dpa_basic_types.h&gt;


typedef long dpa_time_t;

typedef enum {
  DPA_IRQ_NONE    = (0 &lt;&lt; 0),
  DPA_IRQ_HANDLED   = (1 &lt;&lt; 0),
  DPA_IRQ_WAKE_THREAD   = (1 &lt;&lt; 1),
} dpa_irqreturn_t;

/*
 * typedef: struct dpa_timeval_t
 *
 * Description: Structure representing time.
 *
 * Fields:
 *
 *   tv_sec  - Seconds.
 *   tv_usec - Microseconds.
 */
typedef struct 
{
  dpa_time_t tv_sec;
  dpa_time_t tv_usec;
} dpa_timeval_t;

/*
 * typedef: struct dpa_timezone_t
 *
 * Description: 
 *
 * Structure representing time zone.
 *
 * Fields:
 *
 *   tz_minuteswest - Minutes west of GMT.
 *   tz_dsttime     - Nonzero if DST is ever in effect.
 */
typedef struct
{
  int tz_minuteswest;
  int tz_dsttime;
} dpa_timezone_t;


/*
 * typedef: struct dpa_os_config_t
 *
 * Description: 
 *
 * DPA OS primitives configuration.
 *
 * Fields:
 * 
 *
 */
typedef struct 
{ 
} dpa_os_config_t;


/*
 * typedef: dpa_os_eth_handler_t
 *
 * Description: 
 *
 * Ethernet port polling handler.
 *
 * Parameters:
 *
 *   port - Ethernet port to poll.
 */
typedef void (*dpa_os_eth_handler_t)(uint8_t port);


/*
 * typedef: dpa_irq_handler_t
 *
 * Description: 
 *
 * IRQ handler.
 *
 * Parameters:
 *
 *   None.
 */
typedef dpa_irqreturn_t (*dpa_irq_handler_t)(int32_t, void *);

/*
 * dpa_os_init
 *
 * Description: 
 *
 * Initialize DPA OS primitives. 
 *
 * Parameters:
 * 
 *   cfg - DPA OS primitives configuration.
 *
 * Returns: 0 on success and -1 on error.
 *
 */
int dpa_os_init(dpa_os_config_t *cfg);


/*
 * dpa_os_shutdown
 *
 * Description: 
 *
 * Terminate DPA OS primitives.
 *
 * Parameters:
 *
 *  None.
 *
 * Returns: None.
 *
 */
void dpa_os_shutdown(void);


/*
 * dpa_os_gettimeofday
 *
 * Description: 
 *
 * Return current time for the specified time zone.
 *
 * Parameters:
 *
 *   tv - Time structure.
 *   tz - Time zone.
 *
 * Returns: 0 on success and -1 on error
 *
 */
int dpa_os_gettimeofday(dpa_timeval_t *tv, dpa_timezone_t *tz);


/*
 * dpa_os_msleep
 *
 * Description: 
 *
 * Suspend program execution.
 *
 * Parameters:
 *
 *   msec - Time, milliseconds, to suspend execution.
 *
 * Returns:
 *  
 *   None.
 *
 */
void dpa_os_msleep(unsigned int msec);

/*
 * dpa_os_malloc
 *
 * Description: 
 *
 * Allocate memory.
 *
 * Parameters:
 *
 *   size - Number of bytes to allocate.
 *
 * Returns:
 *  
 *   Pointer to allocated memory or NULL if failed.
 *
 */
void* dpa_os_malloc(size_t size);

/*
 * dpa_os_alloc_pages
 *
 * Description: 
 *
 * Allocate free pages to contain size.
 *
 * Parameters:
 *
 *   size - Number of bytes.
 *
 * Returns:
 *  
 *   Pointer to allocated memory or NULL if failed.
 *
 */
void* dpa_os_alloc_pages(size_t size);


/*
 * dpa_os_realloc
 *
 * Description: 
 *
 * Reallocate memory.
 *
 * Parameters:
 *
 *   ptr - Pointer to currently allocated memory.
 *   size - new number of bytes to allocate.
 *
 * Returns:
 *  
 *   Pointer to allocated memory or NULL if failed.
 *
 */
void* dpa_os_realloc(void* ptr, size_t size);


/*
 * dpa_os_free
 *
 * Description: 
 *
 * Release memory.
 *
 * Parameters:
 *
 *   ptr  - Pointer to the previously allocated memory.
 *
 * Returns:
 *  
 *   None.
 *
 */
void dpa_os_free(void *ptr);

/*
 * dpa_os_free_pages
 *
 * Description: 
 *
 * Release allocated pages.
 *
 * Parameters:
 *
 *   ptr  - Pointer to the previously allocated pages.
 *
 * Returns:
 *  
 *   None.
 *
 */
void dpa_os_free_pages(void *ptr);

/*
 * dpa_os_lock_create
 *
 * Description: 
 *
 * Create mutex object.
 *
 * Parameters:
 *
 *  None.
 *
 * Returns:
 *  
 *   On success, the pointer to mutex.
 *   On failure, NULL.
 *
 */
void* dpa_os_lock_create(void);


/*
 * dpa_os_lock_delete
 *
 * Description: 
 *
 * Delete mutex object that can be used for thread syncronization.
 *
 * Parameters:
 *
 *  id - Mutex to delete.
 *
 * Returns:
 *  
 *   None.
 */
void dpa_os_lock_delete(void* id);

/*
 * dpa_os_lock
 *
 * Description: 
 *
 * Aquire lock of mutex object. The current thread may block until 
 * the mutex object is released by other thread(s).
 *
 * Parameters:
 *
 *  id - Mutex to acquire lock of.
 *
 * Returns:
 *  
 *   None.
 */
void dpa_os_lock(void* id);


/*
 * dpa_os_unlock
 *
 * Description: 
 *
 * Release lock of mutex object.
 *
 * Parameters:
 *
 *  id - Mutex to release the lock of.
 *
 * Returns:
 *  
 *   None.
 */
void dpa_os_unlock(void* id);


/*
 * DPA_OS_LOG_XXX
 *
 * Description: 
 *
 * Logging level constants for dpa_os_log.
 *
 * Constants:
 *
 * DPA_OS_LOG_EMERG   - System is unusable.
 * DPA_OS_LOG_ALERT   - Action must be taken immediately.
 * DPA_OS_LOG_CRIT    - Critical conditions.
 * DPA_OS_LOG_ERR     - Error conditions.
 * DPA_OS_LOG_WARNING - Warning conditions.
 * DPA_OS_LOG_NOTICE  - Normal but significant condition.
 * DPA_OS_LOG_INFO    - Informational.
 * DPA_OS_LOG_DEBUG   - Ddebug-level messages.
 */
#define DPA_OS_LOG_EMERG       0
#define DPA_OS_LOG_ALERT       1
#define DPA_OS_LOG_CRIT        2
#define DPA_OS_LOG_ERR         3
#define DPA_OS_LOG_WARNING     4
#define DPA_OS_LOG_NOTICE      5
#define DPA_OS_LOG_INFO        6
#define DPA_OS_LOG_DEBUG       7

/*
 * dpa_os_log
 *
 * Description: 
 *
 * Log system message.
 *
 * Parameters:
 *
 *   level  - Logging level.
 *   format - Message print format.
 *
 * Returns:
 *  
 *   None.
 *
 */
void dpa_os_log(int level, const char* format,...);


/*
 * dpa_os_virt_to_phys
 *
 * Description: 
 *
 * Convert virtual address to physical address.
 *
 * Parameters:
 *
 *   virt_addr  - Virtual address.
 *
 * Returns:
 *  
 *   Physical address.
 *
 */
uint32_t dpa_os_virt_to_phys(uint8_t* virt_addr, uint32_t size);

uint32_t dpa_os_phys_to_virt(uint8_t* virt_addr, uint32_t size);

/*
 * dpa_os_get_sys_clock
 *
 * Description: 
 *
 * Board system clock.
 *
 * Parameters:
 *   None.
 *
 * Returns:
 *
 *   Board system clock, cycles/sec.
 *
 */
uint32_t dpa_os_get_sys_clock(void);

/*
 * dpa_os_irq_alloc
 *
 * Description: 
 *
 * Set IRQ handler.
 *
 * Parameters:
 *   irq - Interrupt number.
 *
 * Returns:
 *
 *   None.
 *
 */
int32_t dpa_os_irq_alloc(uint32_t irq, dpa_irq_handler_t handler, const char *name, void *dev);

/*
 * dpa_os_irq_free
 *
 * Description: 
 *
 * Release IRQ handler.
 *
 * Parameters:
 *   irq - Interrupt number.
 *
 * Returns:
 *
 *   None.
 *
 */
int32_t dpa_os_irq_free(uint32_t irq, void *dev);


#ifdef __cplusplus
}
#endif


#endif
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/08/27" Time="12:49:30000">
<Copy StartSeek="0" EndSeek="1732"/>
<Insert>typedef void (*dpa_os_timer_handler_t)(void);
</Insert>
<Copy StartSeek="1782" EndSeek="7154"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/08/29" Time="09:51:20000">
<Copy StartSeek="0" EndSeek="1732"/>
<Insert>typedef void (*dpa_os_timer_handler_t)(uint32_t);
</Insert>
<Copy StartSeek="1788" EndSeek="7160"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/08/29" Time="09:54:51000">
<Copy StartSeek="0" EndSeek="716"/>
<Copy StartSeek="849" EndSeek="1752"/>
<Insert> * typedef: dpa_os_timer_handler_t
</Insert>
<Copy StartSeek="1782" EndSeek="1805"/>
<Insert> * Timer handler.
</Insert>
<Copy StartSeek="1821" EndSeek="1857"/>
<Insert>
typedef void (*dpa_os_timer_handler_t)(uint32_t timer);


</Insert>
<Copy StartSeek="1921" EndSeek="6065"/>
<Insert> * dpa_os_fiq_alloc
 *
 * Description: 
 *
 * Enable IRQ processing in the FIQ context.
 *
 * Parameters:
 *   irq - Interrupt number to enable.
 *
 * Returns:
 *
 *   None.
 *
 */
void dpa_os_fiq_alloc(uint32_t irq);


/*
 * dpa_os_fiq_free
 *
 * Description: 
 *
 * Disable IRQ processing in the FIQ context.
 *
 * Parameters:
 *   irq - Interrupt number to disable.
 *
 * Returns:
 *
 *   None.
 *
 */
void dpa_os_fiq_free(uint32_t irq);


/*
 * dpa_os_set_eth_handler
</Insert>
<Copy StartSeek="6085" EndSeek="6108"/>
<Insert> * Set ethernet port specific poll handler.
</Insert>
<Copy StartSeek="6128" EndSeek="6146"/>
<Insert> *   port    - Ethernet port to poll.
 *   handler - User defined callback handling ethernet port events. 
</Insert>
<Copy StartSeek="6175" EndSeek="6211"/>
<Insert>void dpa_os_eth_set_handler(uint8_t port, dpa_os_eth_handler_t handler);
</Insert>
<Copy StartSeek="6307" EndSeek="6308"/>
<Insert>
</Insert>
<Copy StartSeek="6308" EndSeek="6311"/>
<Insert> * dpa_os_set_timer_handler
</Insert>
<Copy StartSeek="6330" EndSeek="6353"/>
<Insert> * Set timer handler.
</Insert>
<Copy StartSeek="6377" EndSeek="6395"/>
<Insert> *   handler - User defined callback handling timer events.
</Insert>
<Copy StartSeek="6424" EndSeek="6460"/>
<Insert>void dpa_os_timer_set_handler(dpa_os_timer_handler_t handler);
</Insert>
<Copy StartSeek="6510" EndSeek="6511"/>
<Insert>uint32_t dpa_ntohl(uint32_t netlong);
uint16_t dpa_ntohs(uint16_t netshort);
uint32_t dpa_htonl(uint32_t hostlong);
uint16_t dpa_htons (uint16_t hostshort);



</Insert>
<Copy StartSeek="6512" EndSeek="6549"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="20:56:49000">
<Copy StartSeek="0" EndSeek="6512"/>
<Copy StartSeek="6672" EndSeek="6709"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2013/04/08" Time="21:06:34000">
<Copy StartSeek="0" EndSeek="74"/>
<Insert>* Copyright (C) 2012, Marvell Technology Group Ltd.
</Insert>
<Copy StartSeek="126" EndSeek="3072"/>
<Copy StartSeek="3324" EndSeek="6764"/>
<Insert>uint32_t dpa_ntohl(uint32_t netlong);
uint16_t dpa_ntohs(uint16_t netshort);
uint32_t dpa_htonl(uint32_t hostlong);
uint16_t dpa_htons (uint16_t hostshort);



</Insert>
<Copy StartSeek="6764" EndSeek="6801"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="12:39:0000">
<Copy StartSeek="0" EndSeek="3289"/>
<Insert>void* dpa_os_malloc(size_t size);
</Insert>
<Copy StartSeek="3328" EndSeek="6806"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="12:39:9000">
<Copy StartSeek="0" EndSeek="3847"/>
<Copy StartSeek="4072" EndSeek="7031"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="12:39:59000">
<Copy StartSeek="0" EndSeek="3940"/>
<Insert> *   ptr  - Pointer to the previously allocated memory.
</Insert>
<Copy StartSeek="3995" EndSeek="7030"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="12:40:20000">
<Copy StartSeek="0" EndSeek="4068"/>
<Copy StartSeek="4069" EndSeek="7031"/>
</Delta>
</DeltaFile>
