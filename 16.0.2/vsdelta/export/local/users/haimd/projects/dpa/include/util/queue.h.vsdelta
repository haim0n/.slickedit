<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="5" Comment="" Date="2012/10/04" Time="20:46:33000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2012, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
* queue.h
*
* Description:
*   A thread-safe lock-free fix-sized FIFO for a single producer 
*   and a single consumer threads.
*/

#ifndef _QUEUE_H_
#define _QUEUE_H_

#include &lt;dpa_os.h&gt;
#include &lt;util/mem.h&gt;

#ifdef __cplusplus
extern "C" {
#endif

typedef struct queue queue_t;

static inline queue_t *queue_create(uint32_t size);
static inline void queue_destroy(queue_t *queue);
static inline void *queue_get(queue_t *queue);
static inline bool queue_put(queue_t *queue, void *obj);
static inline bool queue_is_empty(queue_t *queue);
static inline bool queue_is_full(queue_t *queue);

/* Implementation */

struct queue {
  void **start;
  void **end;
  void **head;
  void **tail;
};

static inline queue_t *queue_create(uint32_t size) {
  queue_t *queue;

  queue = (queue_t*) DPA_MALLOC(sizeof(queue_t));
  if (queue != NULL) {
      queue-&gt;start = DPA_MALLOC((size + 1) * sizeof(void*));
      if (queue-&gt;start != NULL) {
          queue-&gt;end = queue-&gt;start + size;
          queue-&gt;head = queue-&gt;tail = queue-&gt;start;
      } else {
        queue_destroy(queue);
        queue = NULL;
      }
  }

  return queue;
}


static inline void queue_destroy(queue_t *queue) {
   if (queue) {
       if (queue-&gt;start) {
           DPA_FREE(queue-&gt;start);
       }
       DPA_FREE(queue);
   }
}


static inline bool queue_is_empty(queue_t* queue) {
  return (queue-&gt;tail == queue-&gt;head);
}

static inline bool queue_is_full(queue_t* queue) {
  register void **next_tail = queue-&gt;tail;
  
  if (++next_tail &gt; queue-&gt;end) {
      next_tail = queue-&gt;start;
  }

  return (next_tail == queue-&gt;head);
}


static inline bool queue_put(queue_t *queue, void *obj) {
  register void **next_tail = queue-&gt;tail;
  
  if (++next_tail &gt; queue-&gt;end) {
      next_tail = queue-&gt;start;
  }

  if (next_tail == queue-&gt;head) {
      return false;
  }

  *queue-&gt;tail = obj;
  queue-&gt;tail = next_tail;

  return true;
}


static inline void *queue_get(queue_t *queue) {
  void *obj;
  void **next_head = queue-&gt;head;

  if (queue-&gt;head == queue-&gt;tail) /* Empty queue */
      return NULL;

  obj = *queue-&gt;head;
  if (++next_head &gt; queue-&gt;end) {
      queue-&gt;head = queue-&gt;start;
  } else
      queue-&gt;head++;

  return obj;
}


#ifdef __cplusplus
}
#endif

#endif /* _QUEUE_H_ */</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/08/27" Time="12:49:30000">
<Copy StartSeek="0" EndSeek="2388"/>
<Insert>
</Insert>
<Copy StartSeek="2418" EndSeek="2512"/>
<Insert>  if (++queue-&gt;head &gt; queue-&gt;end) {
</Insert>
<Copy StartSeek="2541" EndSeek="2649"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="19:51:31000">
<Copy StartSeek="0" EndSeek="2388"/>
<Insert>  void **head = queue-&gt;head;
</Insert>
<Copy StartSeek="2422" EndSeek="2654"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="19:52:7000">
<Copy StartSeek="0" EndSeek="2517"/>
<Insert>  if (++head &gt; queue-&gt;end) {
</Insert>
<Copy StartSeek="2551" EndSeek="2659"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="20:11:12000">
<Copy StartSeek="0" EndSeek="2585"/>
<Insert>  }

</Insert>
<Copy StartSeek="2620" EndSeek="2689"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/10/04" Time="20:46:25000">
<Copy StartSeek="0" EndSeek="2594"/>
<Insert>          queue-&gt;head++;
</Insert>
<Copy StartSeek="2615" EndSeek="2685"/>
</Delta>
</DeltaFile>
