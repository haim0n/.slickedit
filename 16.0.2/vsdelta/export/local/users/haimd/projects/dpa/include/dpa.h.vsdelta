<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="18" Comment="" Date="2013/02/24" Time="17:22:34000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2012, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
* dpa.h
*
* Description:
*       Marvell Data Path Acceleration Engine API
*
*/

#ifndef _DPA_API_H_
#define _DPA_API_H_

#ifdef __cplusplus
extern "C" {
#endif

#include &lt;dpa_types.h&gt;


/*
 * dpa_init
 *
 * Description:
 *       Initialize DPA engine.
 *
 * Parameters:
 *       dpa_config - DPA engine configuration profile in xml format
 *
 * Returns:  
 *        DPA_OK              - On success. 
 *        DPA_CONFIG_ERROR    - On configuration error.
 *        DPA_OUT_OF_MEMORY   - On out of memory error.
 */
int32_t dpa_init(const char* dpa_config);


/*
 * dpa_shutdown
 *
 * Description:  
 *       Shutdown DPA engine.
 *
 * Parameters:
 *       None.    
 *
 * Returns: 
 *       DPA_OK - The function always succeeds.
 *
 */
int32_t dpa_shutdown(void);

/*
 * dpa_is_init
 *
 * Description:
 *
 * Current DPA initialization status.
 *
 * Parameters:
 *  None
 *
 * Returns:
 *
 * true if DPA is initialized, false - otherwise.
 *
 */
bool dpa_is_init(void);

/*
 * dpa_register_events
 *
 * Description: 
 *
 * Register application callbacks to receive DPA events.
 *
 * Parameters:
 * event_mask     - Mask of the events the applications is interested in.
 * event_handler  - Application callback function. 
 *
 * Returns:
 *
 * On success, the function returns DPA_OK.
 * On error, the function returns DPA_FAIL.
 *
 */
int32_t dpa_register_events(dpa_event_mask_t event_mask, dpa_event_handler_t* event_handler);



/*
 * dpa_get_version()
 *
 * Description: 
 *
 * Retrieve DPA version.
 *
 * Parameters:
 * 
 * None.
 *
 * Returns:
 *
 * On success, the function returns a string with DPA version.
 * On error, the function returns NULL.
 *
 */
const char* dpa_get_version(void);



/*
 * dpa_stats_get
 *
 * Description: 
 *
 * Retrieve DPA system statistics.
 *
 * Parameters:
 *
 * 
 * stats - Returned DPA statistics.
 *
 * Returns:
 *
 * On success, the function returns DPA_OK.
 * On error, the function returns DPA_FAIL.
 *
 */
int32_t dpa_stats_get(dpa_stats_t* stats);


/*
 * dpa_stats_reset
 *
 * Description: 
 *
 * Reset DPA system statistics.
 *
 * Parameters:
 *
 * None.
 *
 * Returns:
 *
 * On success, the function returns DPA_OK.
 * On error, the function returns DPA_FAIL.
 *
 */
int32_t dpa_stats_reset(void);


/*
 * dpa_table_flush
 *
 * Description: 
 *
 * Reset the DPA table of flows.
 *
 * Parameters:
 *
 * None.
 *
 * Returns:
 *
 * On success, the function returns DPA_OK.
 * On error, the function returns DPA_FAIL.
 *
 */
int32_t dpa_table_flush(void);

#ifdef __cplusplus
}
#endif


#endif
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/09/09" Time="13:49:7000">
<Copy StartSeek="0" EndSeek="2928"/>
<Copy StartSeek="3180" EndSeek="3217"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/10/17" Time="19:11:40000">
<Copy StartSeek="0" EndSeek="2972"/>
<Insert> * Reset the DPA table of flows.
</Insert>
<Copy StartSeek="3007" EndSeek="3150"/>
<Insert>int32_t dpa_table_flush(void);
</Insert>
<Copy StartSeek="3180" EndSeek="3218"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/10/17" Time="19:12:2000">
<Copy StartSeek="0" EndSeek="2972"/>
<Insert> * Dispaly the DPA table of flows.
</Insert>
<Copy StartSeek="3007" EndSeek="3218"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2013/01/07" Time="15:32:57000">
<Copy StartSeek="0" EndSeek="2931"/>
<Insert> * dpa_table_dump
</Insert>
<Copy StartSeek="2950" EndSeek="2973"/>
<Insert> * Display the DPA table of flows.
</Insert>
<Copy StartSeek="3006" EndSeek="3149"/>
<Insert>int32_t dpa_table_dump(void);

</Insert>
<Copy StartSeek="3186" EndSeek="3223"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:22:26000">
<Copy StartSeek="0" EndSeek="2931"/>
<Insert> * dpa_table_flush
</Insert>
<Copy StartSeek="2947" EndSeek="3220"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:22:32000">
<Copy StartSeek="0" EndSeek="2970"/>
<Insert> * Reset the DPA table of flows.
</Insert>
<Copy StartSeek="2991" EndSeek="3208"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:23:43000">
<Copy StartSeek="0" EndSeek="2970"/>
<Insert> * set the dpa mode.
 *
</Insert>
<Copy StartSeek="3099" EndSeek="3313"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:24:55000">
<Copy StartSeek="0" EndSeek="3094"/>
<Insert> * *
</Insert>
<Copy StartSeek="3098" EndSeek="3312"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:24:57000">
<Copy StartSeek="0" EndSeek="3113"/>
<Insert> *
</Insert>
<Copy StartSeek="3147" EndSeek="3343"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:25:23000">
<Copy StartSeek="0" EndSeek="2928"/>
<Insert>/*
 * dpa_fwd_mode
 *
 * Description: 
 *
 * set the dpa mode to either
 * Slow - all traffic fwd to slow path
 * DPA - classify and act according to slow path logic
 * 
 * Parameters:
 * 
 * mode - dpa forwarding mode
 * None.
 *
 * Returns:
 *
 * On success, the function returns DPA_OK.
 * On error, the function returns DPA_FAIL.
 *
 */
int32_t dpa_fwd_mode(uint32_t mode);
</Insert>
<Copy StartSeek="2961" EndSeek="2998"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:19:57000">
<Copy StartSeek="0" EndSeek="2928"/>
<Insert>void dpa_pkt_rx(eth_pkt_t* pkt);
</Insert>
<Copy StartSeek="2956" EndSeek="2993"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:20:11000">
<Copy StartSeek="0" EndSeek="2928"/>
<Insert>void dpa_pkt_rx(void* pkt);
</Insert>
<Copy StartSeek="2961" EndSeek="2998"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:20:53000">
<Copy StartSeek="0" EndSeek="2928"/>
<Copy StartSeek="2946" EndSeek="3016"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:21:3000">
<Copy StartSeek="0" EndSeek="2928"/>
<Insert>struct eth_pkt_t;
</Insert>
<Copy StartSeek="2954" EndSeek="3024"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:21:19000">
<Copy StartSeek="0" EndSeek="2954"/>
<Copy StartSeek="2984" EndSeek="3054"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:21:43000">
<Copy StartSeek="0" EndSeek="2928"/>
<Insert>typedef struct eth_pkt_t;
</Insert>
<Copy StartSeek="2928" EndSeek="3028"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:21:45000">
<Copy StartSeek="0" EndSeek="2928"/>
<Insert>typedef struct {
} eth_pkt_t;
</Insert>
<Copy StartSeek="2928" EndSeek="2998"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="17:21:56000">
<Copy StartSeek="0" EndSeek="2928"/>
<Insert>void dpa_pkt_rx(eth_pkt_t* pkt);
</Insert>
<Copy StartSeek="2928" EndSeek="2965"/>
</Delta>
</DeltaFile>
