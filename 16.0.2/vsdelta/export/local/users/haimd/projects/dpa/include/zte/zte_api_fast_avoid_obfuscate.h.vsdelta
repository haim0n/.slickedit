<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="1" Comment="" Date="2013/05/27" Time="14:39:9000" NL="\10" Encoding="text">
<Insert>/************************************************************************
*
* zte_api_fast.h
*
* Description:
*     Definition of ZTE Fast Network Processing API.
*
*******************************************************************************/

#ifndef _ZTE_API_FAST_
#define _ZTE_API_FAST_

#ifdef __cplusplus
extern "C" {
#endif

/* Number of LAN ports */
#define ZTE_LAN_PORT_NUM (2)

/* ACL value for rcqueue */ 
#define ZTE_ACTION_DROP (0xFF)

/* Direction up-link */
#define ZTE_DIR_UPLINK (0)

/* Direction down-link */
#define ZTE_DIR_DOWNLINK (1)

/* Non-specified parameter value */
#define ZTE_NO_PARAM (0xFFFF)

/* Operation succeeded */
#define ZTE_OK (0)
 
/* Operation failed */
#define ZTE_FAIL (-1)

/*
 * typedef: union ZTE_NETFF_IP
 *
 * Description:
 *
 * IPv4 or IPv6 address.
 * all[1] == all[2] == all[3] == 0x0000 indicates IPv4 address,
 * otherwise IPv6 (implied by [RFC4291]).
 *
 * Fields:
 *    all - Common buffer.
 *    ip  - IPv4 address.
 *    ip6 - IPv6 address.
 */
typedef union {
  unsigned int      all[4];
  unsigned int      ip;
  unsigned int      ip6[4];
} ZTE_NETFF_IP;


/*
 * typedef: struct ZTE_L3_HARDFAST_TUPLE
 *
 * Description:
 *
 * Classification tuple.
 *
 * Fields:
 *    sip        - Source IP address.
 *    dip        - Destination IP address.
 *    sport      - Source IP address.
 *    dport      - Destination IP address.
 *    protocol   - Protocol type [values ???]
 */
typedef struct zte_l3_hardfast_tuple {
  ZTE_NETFF_IP        sip; 
  ZTE_NETFF_IP        dip;
  unsigned short      sport;
  unsigned short      dport;
  unsigned char       protocol;
} ZTE_L3_HARDFAST_TUPLE;


/*
 * typedef: struct ZTE_L3_HARDFAST_SESSION
 *
 * Description:
 *
 * Unicast session specification.
 *
 * Fields:
 *    direction      - Direction of traffic: 0 - uplink, 1 - downlink.
 *    tuple          - Tuple used for session classification.
 *    l2length       - Received packet Layer 2 header length:
 *                     14 - No VLAN, no input PPP header.
 *                     18 - Single VLAN tag.
 *                     22 - Double VLAN or PPPoE header if isppp == 1 &amp;&amp; direction == 1. 
 *    l3num          - Layer 2/3 protocol number:
 *                     0 - IPv4 packets.
 *                     1 - IPv6.
 *                     2 - Bridging.
 *                     3 - DS-Lite: If direction == 0, DS-Lite header is added (see fields dlXXX below.)
 *                                  If direction == 1, DS-Lite header is removed.
 *    isppp          - PPP header:
 *                     (i) isppp == 1 &amp;&amp; direction == 1 &amp;&amp; sessionid == 0xFFFF
 *                     =&gt; PPPoE header _is_ present in Rx packet
 *                     =&gt; Remove PPPoE header in Tx packet
 *                     (ii) isppp == 1 &amp;&amp; direction == 0 &amp;&amp; sessionid != 0xFFFF
 *                      =&gt; PPPoE header _is not_ present in Rx packet
 *                      =&gt; Add PPPoE header to Tx packet
 *    gwmac          - Transmitted packet destination MAC if l3num != 2.
 *    smac           - Transmitted packet source MAC if l3num != 2.
 *    innervlan      - Transmitted packet inner &lt;VLAN ID | Priority&gt;, 0xFFFF - if not present 
 *    outervlan      - Transmitted packet outer &lt;VLAN ID | Priority&gt;, 0xFFFF - if not present 
 *    sessionid      - Transmitted packet PPP session id, 0xFFFF - if not present 
 *    dscpremark     - Update DSCP in transmitted packet: 0 - don't update, 1 - update.
 *    dscpvalue      - Transmitted packet DSCP value if dscpremark == 1.
 *    natip          - Transmitted packet source IP address if direction == 0  &amp;&amp; tuple.sip != natip.
 *                     Transmitted packet destination IP address if direction == 1  &amp;&amp; tuple.dip != natip.
 *    natport        - Transmitted packet source port if direction == 0 &amp;&amp; tuple.sport != natport.
 *                   - Transmitted packet destination port if direction == 1 &amp;&amp; tuple.dport != natport.
 *    gwip           - Gateway IP address.
 *    dltc           - Transmitted packet IPv6 TC if direction == 0 &amp;&amp; l3num == 3.
 *    dlfl           - Transmitted packet IPv6 flow label if direction == 0 &amp;&amp; l3num == 3.
 *    dlhl           - Transmitted packet IPv6 hop limit if direction == 0 &amp;&amp; l3num == 3.
 *    dlsip          - Transmitted packet IPv6 source IP address if direction == 0 &amp;&amp; l3num == 3.
 *    dldip          - Transmitted packet IPv6 destination IP address if direction == 0 &amp;&amp; l3num == 3.
 *    tcont          - Transmitted packet TCont Id (GPON) or LLID (EPON).
 *    channel        - Transmitted packet LAN port 0-7, WiFi 8-15 (downlink) or GEMport (uplink).
 *    queue          - Transmitted packet transmit queue.
 *    rcqueue        - Rate control policer index. If 0xFF, the session specifies an ACL 
 *                     (packets are dropped.)
 */
typedef struct zte_l3_hardfast_session {
  unsigned char         direction;
  ZTE_L3_HARDFAST_TUPLE tuple;
  unsigned char         l2length;
  unsigned short        l3num;
  unsigned char         isppp;
  unsigned char         gwmac[6];
  unsigned char         smac[6];
  unsigned short        innervlan;
  unsigned short        outervlan;
  unsigned short        sessionid;
  unsigned char         dscpremark;
  unsigned char         dscpvalue;
  ZTE_NETFF_IP          natip;
  unsigned short        natport;
  ZTE_NETFF_IP          gwip;
  unsigned char         dslite;
  unsigned char         dltc;
  unsigned int          dlfl;
  unsigned char         dlhl;
  ZTE_NETFF_IP          dlsip;
  ZTE_NETFF_IP          dldip;
  unsigned short        tcont;
  unsigned short        channel;
  unsigned char         queue;
  unsigned char         rcqueue;
} ZTE_L3_HARDFAST_SESSION;


/*
 * typedef: struct ZTE_L3_MC_HARDFAST_SESSION
 *
 * Description:
 *
 * Multicast session specification.
 *
 * Fields:
 *    direction      - Direction of traffic: 0 - uplink, 1 - downlink.
 *    tuple          - Tuple used for session classification.
 *    l2length       - Layer 2 header length in received packet.
 *    l3num          - Layer 2/3 protocol number:
 *                     0 - IPv4 packets.
 *                     1 - IPv6.
 *                     2 - Bridging.
 *                     3 - DS-Lite: If direction == 0, DS-Lite header is added (see fields dlXXX below.)
 *                                  If direction == 1, DS-Lite header is removed.
 *    isppp          - PPP header:
 *                     (i) isppp == 1 &amp;&amp; direction == 1 &amp;&amp; sessionid == 0xFFFF
 *                     =&gt; PPPoE header _is_ present in Rx packet
 *                     =&gt; Remove PPPoE header in Tx packet
 *                     (ii) isppp == 1 &amp;&amp; direction == 0 &amp;&amp; sessionid != 0xFFFF
 *                      =&gt; PPPoE header _is not_ present in Rx packet
 *                      =&gt; Add PPPoE header to Tx packet
 *    gwmac          - Transmitted packet destination MAC if l3num != 2.
 *    smac           - Transmitted packet source MAC if l3num != 2.
 *    innervlan      - Transmitted packet inner &lt;VLAN ID | Priority&gt;, 0xFFFF - if not present 
 *    outervlan      - Transmitted packet outer &lt;VLAN ID | Priority&gt;, 0xFFFF - if not present 
 *    sessionid      - Transmitted packet PPP session id, 0xFFFF - if not present 
 *    dscpremark     - Update DSCP in transmitted packet: 0 - don't update, 1 - update.
 *    dscpvalue      - Transmitted packet DSCP value if dscpremark == 1.
 *    natip          - Transmitted packet source IP address if direction == 0  &amp;&amp; tuple.sip != natip.
 *                     Transmitted packet destination IP address if direction == 1  &amp;&amp; tuple.dip != natip.
 *    natport        - Transmitted packet source port if direction == 0 &amp;&amp; tuple.sport != natport.
 *                   - Transmitted packet destination port if direction == 1 &amp;&amp; tuple.dport != natport.
 *    gwip           - Gateway IP address.
 *    dltc           - Transmitted packet IPv6 TC if direction == 0 &amp;&amp; l3num == 3.
 *    dlfl           - Transmitted packet IPv6 flow label if direction == 0 &amp;&amp; l3num == 3.
 *    dlhl           - Transmitted packet IPv6 hop limit if direction == 0 &amp;&amp; l3num == 3.
 *    dlsip          - Transmitted packet IPv6 source IP address if direction == 0 &amp;&amp; l3num == 3.
 *    dldip          - Transmitted packet IPv6 destination IP address if direction == 0 &amp;&amp; l3num == 3.
 *    tcont          - Transmitted packet TCont Id (GPON) or LLID (EPON).
 *    channel        - Transmitted packet LAN port 0-7, WiFi 8-15 (downlink) or GEMport (uplink).
 *                     More than one Tx port can be specified: channel[i] != 0xFFFF specifies a valid Tx port.
 *                     In this case, innervlan[i] and queue[i] must be specified, too.
 *    queue          - Transmitted packet transmit queue.
 *    rcqueue        - Rate control policer index. If 0xFF, the session specifies an ACL 
 *                     (packets are dropped.)
 */
 
typedef struct zte_l3_mc_hardfast_session {
  unsigned char         direction;
  ZTE_L3_HARDFAST_TUPLE tuple;
  unsigned char         l2length;
  unsigned short        l3num;
  unsigned char         isppp;
  unsigned char         gwmac[6];
  unsigned char         smac[6];
  unsigned short        innervlan[ZTE_LAN_PORT_NUM];
  unsigned short        outervlan;
  unsigned short        sessionid;
  unsigned char         dscpremark;
  unsigned char         dscpvalue;
  unsigned char         nat;
  ZTE_NETFF_IP          natip;
  unsigned short        natport;
  ZTE_NETFF_IP          gwip;
  unsigned char         dslite;
  unsigned char         dltc;
  unsigned int          dlfl;
  unsigned char         dlhl;
  ZTE_NETFF_IP          dlsip;
  ZTE_NETFF_IP          dldip;
  unsigned short        tcont;
  unsigned short        channel[ZTE_LAN_PORT_NUM];
  unsigned char         queue[ZTE_LAN_PORT_NUM];
  unsigned char         rcqueue;
} ZTE_L3_MC_HARDFAST_SESSION;


/*
 * typedef: struct ZTE_L3_HARDFAST_STAT
 *
 * Description:
 *
 * Session statistics counters.
 *
 * Fields:
 *    rxpkt   - Number of received packets.
 *    txpkt   - Number of transmitted packets.
 *    rxbyte  - Number of received bytes.
 *    txbyte  - Number of transmitted bytes.
 *    rxerror - Number of received errors.
 *    txerror - Number of transmit errors.
 */
typedef struct zte_l3_hardfast_stat {
  unsigned long long rxpkt;
  unsigned long long txpkt;
  unsigned long long rxbyte;
  unsigned long long txbyte; 
  unsigned long long rxerror;
  unsigned long long txerror;
} ZTE_L3_HARDFAST_STAT;


/*
 * zte_api_fast_l3_get_version
 *
 * Description:
 *       Get version.
 *
 * Parameters:
 *       None.
 *
 * Returns:
 *         String version.
 */
const char* zte_api_fast_l3_get_version(void);


/*
 * zte_api_fast_l3_init
 *
 * Description:
 *       Initialize offloader.
 *
 * Parameters:
 *       [IN] xml_config - XML configuration file.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_init(const char* xml_config);


/*
 * zte_api_fast_l3_shutdown
 *
 * Description:
 *       Terminate offloader.
 *
 * Parameters:
 *       None.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_shutdown(void);


/*
 * zte_api_fast_l3_session_add
 *
 * Description:
 *       Add a unicast session for offloading.
 *
 * Parameters:
 *       [IN] session - Session specification.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_session_add(ZTE_L3_HARDFAST_SESSION *session);


/*
 * zte_api_fast_l3_mc_session_add
 *
 * Description:
 *       Add a multicast session for offloading.
 *
 * Parameters:
 *       [IN] session - Session specification.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_mc_session_add(ZTE_L3_MC_HARDFAST_SESSION *session);


/*
 * zte_api_fast_l3_session_del
 *
 * Description:
 *       Delete an offloaded session. When more than one session matches
 *       the supplied tuple, all sessions are deleted.
 *
 * Parameters:
 *       [IN] tuple - A tuple identifying a session.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_session_del(ZTE_L3_HARDFAST_TUPLE *tuple);


/*
 * zte_api_fast_l3_session_use
 *
 * Description:
 *       Check if a session is offloaded.
 *
 * Parameters:
 *       [IN] tuple   - A tuple identifying a session.
 *       [OUT] status - Offloading status: 0 - not offloaded, 1 - offloaded.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_session_use(ZTE_L3_HARDFAST_TUPLE *tuple, unsigned char *status);


/*
 * zte_api_fast_l3_session_clr
 *
 * Description:
 *       Delete all offloaded sessions.
 *
 * Parameters:
 *       None.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_session_clr(void);

/*
 * zte_api_fast_l3_session_stat
 *
 * Description:
 *       Get statistics for a session.
 *
 * Parameters:
 *       [IN] tuple - A tuple identifying a session.
 *       [OUT] stat - Session statistics.
 *
 * Returns:
 *         0 - Operation completed successfully.
 *        -1 - Operation failed.
 */
int zte_api_fast_l3_session_stat(ZTE_L3_HARDFAST_TUPLE *tuple, ZTE_L3_HARDFAST_STAT *stat);

int32_t dpa_pkt_tx(eth_pkt_t *pkt, uint32_t priority);


/*
 * dpa_tx_start
 *
 * Description: 
 *
 * Wake-up DPA for packet batch transmission.
 *
 * Parameters:
 *
 *  None
 *
 * Returns:
 *
 *   DPA_OK on success, or error code on failure.
 *
 */
int32_t dpa_tx_start(void);


/*
 * dpa_tx_queue_ready
 *
 * Description:
 *
 * DPA queue transmission status.
 *
 * Parameters:
 *
 *   priority - Queue priority specificiation.
 *
 * Returns:
 *
 *   true if the queue is ready to transmit, false otherwise.
 *   If true, dpa_pkt_tx is guaranteed to succeed.
 *
 */
bool dpa_tx_queue_ready(uint32_t priority);


/*
 * dpa_pkt_reclaim
 *
 * Description:
 *
 * Allocate new empty packet in DPA.
 *
 * Parameters:
 *
 *   pkt - Ethernet packet whose attributes to use for a new packet.
 *
 * Returns:
 *
 *   DPA_OK on success, or error code on failure.
 *
 */
int32_t dpa_pkt_reclaim(eth_pkt_t *pkt);


/*
 * dpa_pkt_alloc
 *
 * Description: 
 *
 * Allocate ethernet packet buffer.
 *
 * Parameters:
 *
 *   size - Size of the buffer to hold a packet body and additional fields
 *          (Marvell header and crc), bytes.
 *
 * Returns:
 *
 *   Pointer to the allocated packet buffer or NULL if out of memory.
 *
 */
eth_pkt_t *dpa_pkt_alloc(uint32_t size);

/*
 * dpa_pkt_wrap
 *
 * Description: 
 *
 * Wrap up existing memory block with a packet buffer.
 *
 * Parameters:
 *
 *   data      - Pointer to data buffer.
 *   size      - Size of data block.
 *   os_handle - Associated OS object (skb).
 *
 * Returns:
 *
 *   Pointer to the allocated packet buffer or NULL if out of memory.
 *
 */
eth_pkt_t *dpa_pkt_wrap(void *data, uint32_t size, void *os_handle);

/*
 * dpa_pkt_free
 *
 * Description: 
 *
 * Free ethernet packet buffer.
 *
 * Parameters:
 *
 *   pkt - Packet buffer to free.
 *
 * Returns:
 *
 *   None.
 *
 */
void dpa_pkt_free(eth_pkt_t *pkt);

#ifdef __cplusplus
}
#endif

#endif /* _ZTE_API_FAST_ */
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:38:40000">
<Copy StartSeek="0" EndSeek="13407"/>
<Copy StartSeek="15273" EndSeek="15330"/>
</Delta>
</DeltaFile>
