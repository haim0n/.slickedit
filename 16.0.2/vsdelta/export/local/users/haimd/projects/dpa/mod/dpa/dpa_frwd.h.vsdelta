<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="6" Comment="" Date="2013/06/18" Time="11:32:35000" NL="\10" Encoding="text">
<Insert>#ifndef _DPA_FRWD_H_
#define _DPA_FRWD_H_

#include &lt;dpa_types.h&gt;
#include &lt;eth/eth.h&gt;

struct dpa_pri_key {
	uint32_t sip;
	uint32_t dip;
	/* HAIM FIXME : add IPV6 */
	uint16_t sport;
	uint16_t dport;
	uint32_t protocol; /* NOTE: u32 is for padding */
};

typedef enum {
	DPF_NEW = 0UL,
	DPF_LRN,
	DPF_FWD,
	DPF_LCL,
  DPF_DROP
} dpa_flow_states;

#define SET_DPF_STATUS(dpf, stat) ((dpf)-&gt;state = (stat))

struct dpa_frwd_l2 {
	uint8_t dmac[6];
	uint8_t smac[6];
	uint16_t eth_type;
	uint16_t vlan_id;
	uint16_t pppoe_sid;
};


struct dpa_flow {
	struct dpa_pri_key key;
	struct dpa_flow *next; /* Used by fast &amp; slow contexts */
	uint32_t state;
	struct {
		struct dpa_pri_key mod_tuple;
		struct dpa_frwd_l2 l2;
		uint32_t tx_port; /* FIXME make 8 bit */
		uint32_t tx_queue; /* FIXME make 8 bit */
		uint32_t ops;
	} mod;
	dpa_flow_stats_t stats;
	bool is_alive;
};

int32_t dpa_frwd_init(void);
void dpa_frwd_exit(void);
struct dpa_flow *dpa_frwd_flow_alloc(void);
void dpa_frwd_flow_free(struct dpa_flow *dpf);
struct dpa_flow *dpa_frwd_flow_find(struct dpa_pri_key *key);
void dpa_frwd_flow_add(struct dpa_flow *dpf);
int32_t dpa_frwd_flow_remove(struct dpa_pri_key *key);
bool dpa_frwd_flow_is_alive(struct dpa_pri_key *key);
int32_t dpa_frwd_flow_get_stats(struct dpa_pri_key *key, dpa_flow_stats_t *stats);
void dpa_frwd_clean_all(void);
dpa_flow_states dpa_frwd_rx(eth_pkt_t *pkt);


#endif /* _DPA_FRWD_H_ */
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="11:35:2000">
<Copy StartSeek="0" EndSeek="548"/>
<Insert>  struct dpa_pri_key key;
</Insert>
<Copy StartSeek="573" EndSeek="1423"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="19:19:13000">
<Copy StartSeek="0" EndSeek="573"/>
<Copy StartSeek="575" EndSeek="1425"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="19:19:51000">
<Copy StartSeek="0" EndSeek="573"/>
<Insert>	
</Insert>
<Copy StartSeek="595" EndSeek="1445"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="19:21:16000">
<Copy StartSeek="0" EndSeek="573"/>
<Insert>	void *dpa_ppp_hdr_t;
</Insert>
<Copy StartSeek="593" EndSeek="1443"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="19:21:57000">
<Copy StartSeek="0" EndSeek="573"/>
<Insert>	void *dpa_ppp_hdr;
</Insert>
<Copy StartSeek="573" EndSeek="1423"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:32:31000">
<Copy StartSeek="0" EndSeek="852"/>
<Insert>  bool is_alive;
</Insert>
<Copy StartSeek="868" EndSeek="1422"/>
</Delta>
</DeltaFile>
