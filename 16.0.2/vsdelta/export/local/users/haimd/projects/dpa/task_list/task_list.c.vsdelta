<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="153" Comment="" Date="2012/04/29" Time="17:09:13000" NL="\10" Encoding="text">
<Insert>/*
 *	Marvell Kernel Learning Agent
 * 
 *      Authors:
 *	Haim Daniel
 *
 *	This program is free software; you can redistribute it and/or
 *	modify it under the terms of the GNU General Public License
 *	as published by the Free Software Foundation; either version
 *	2 of the License, or (at your option) any later version.
 */

#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/version.h&gt;
#include &lt;linux/sched.h&gt;
#include &lt;linux/file.h&gt;
#include &lt;linux/if_pppox.h&gt;
#include &lt;net/sock.h&gt;

#undef pr_fmt
#define pr_fmt(fmt)	"task_list: " fmt

#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,24)
struct files_struct *get_files_struct(struct task_struct *task)
{
	struct files_struct *files;

	task_lock(task);
	files = task-&gt;files;
	if (files)
		atomic_inc(&amp;files-&gt;count);
	task_unlock(task);

	return files;
}
#endif

static struct sock *get_pppox_sock_by_filp(struct file *filp)
{
	struct inode *inode = filp-&gt;f_path.dentry-&gt;d_inode;
	struct sock *sk;

	if (!S_ISSOCK(inode-&gt;i_mode))
		return NULL;

	sk = SOCKET_I(inode)-&gt;sk;
	if (sk-&gt;sk_family != AF_PPPOX)
		return NULL;

	sock_hold(sk);

	return sk;
}

static void detect_pppox_sock_files(struct files_struct *files, 
				    struct task_struct *tsk /* just for printout */)
{
	int i, j;
	struct fdtable *fdt;

	j = 0;

	spin_lock(&amp;files-&gt;file_lock);
	fdt = files_fdtable(files);
	for (;;) {
		unsigned long set;
		i = j * __NFDBITS;
		if (i &gt;= fdt-&gt;max_fds)
			break;
		set = fdt-&gt;open_fds-&gt;fds_bits[j++];
		while (set) {
			if (set &amp; 1) {
				struct file *filep = fdt-&gt;fd[i];
				if (filep) {
					struct sock *sk = get_pppox_sock_by_filp(filep);
					if (sk) {
						struct pppox_sock *po;
						lock_sock(sk);
						po = pppox_sk(sk);
						printk(KERN_INFO "(%s:%d) found pppoe sock!\n", __func__, __LINE__);
						printk(KERN_INFO "Task %s (pid = %d) (state = %ld, flags = %lx), ch %u\n",
						       tsk-&gt;comm, tsk-&gt;pid,
						       tsk-&gt;state, tsk-&gt;flags, ppp_channel_index(&amp;po-&gt;chan));

						release_sock(sk);
						__sock_put(sk);
					}
				}
			}
			i++;
			set &gt;&gt;= 1;
		}
	}
	spin_unlock(&amp;files-&gt;file_lock);
}

#define pr_debug(fmt,arg...) \
	if (debug) \
		printk(KERN_DEBUG fmt,##arg)


static inline void scan_tasks(void)
{
	struct task_struct *tsk;
	struct files_struct *files;
	
	read_lock_irq(&amp;tasklist_lock);
	for_each_process(tsk) {
		files = get_files_struct(tsk);
		if (files) {
			detect_pppox_sock_files(files, tsk);
			put_files_struct(files);
		}
	}
	read_unlock_irq(&amp;tasklist_lock);
}

static int __init task_list(void)
{
	pr_info("init\n");
	scan_tasks();

	return 0;
}

static void __exit task_list_exit(void)
{
	pr_info("exit\n");
}

module_init(task_list)
module_exit(task_list_exit)
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Haim Daniel &lt;haimd@marvell.com&gt;");
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:10:11000">
<Copy StartSeek="0" EndSeek="421"/>
<Insert>#define pr_fmt(fmt)	"ksym_steal: " fmt
DEFINE_SPINLOCK(klna_lock);
</Insert>
<Copy StartSeek="460" EndSeek="461"/>
<Insert>struct sock *__sk_alloc_org(int family, gfp_t priority,
		      struct proto *prot, int zero_it)
{
	struct sock *sk;
//      sk = org_sk_alloc(family, priority, prot,zero_it);
start:
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
end:
	return sk;
}

struct sock *stolen_sk_alloc(int family, gfp_t priority,
		      struct proto *prot, int zero_it)
{
	struct sock *sk;
//      sk = org_sk_alloc(family, priority, prot,zero_it);

	sk = __sk_alloc_org(family,priority,prot,zero_it);
	printk(KERN_ERR "(%s:%d) HAIM: I SHOT THE SHERIFF!\n", __func__, __LINE__);
	return sk;
}


//static void klna_restore_sk_alloc(void)
//{
//        spin_lock_irq(&amp;klna_lock);
//      flush_icache_range((unsigned long)&amp;sk_alloc,
//      		   (unsigned long)&amp;sk_alloc + sizeof(*org_sk_alloc));
//        spin_unlock_irq(&amp;klna_lock);
//}

static int klna_steal_sk_alloc(void)
{
	if (&amp;sk_alloc == NULL) {
		printk(KERN_ERR "(%s:%d) can't find sk_alloc\n", __func__, __LINE__);
		return -ENOENT;
	}
	spin_lock_irq(&amp;klna_lock);
	/* make a copy of the org sk_alloc */
	memcpy(&amp;__sk_alloc_org, &amp;sk_alloc, 300 /* FIXME: calculate start-end of __sk_alloc_org */);
	printk(KERN_ERR "(%s:%d) __sk_alloc_org %p, sk_alloc %p\n", __func__, __LINE__, __sk_alloc_org, sk_alloc);
	spin_unlock_irq(&amp;klna_lock);

	return 0;
}

static int __init ksym_steal(void)
{
</Insert>
<Copy StartSeek="497" EndSeek="592"/>
<Insert>static void __exit ksym_steal_exit(void)
</Insert>
<Copy StartSeek="632" EndSeek="657"/>
<Insert>module_init(ksym_steal)
module_exit(ksym_steal_exit)
</Insert>
<Copy StartSeek="708" EndSeek="781"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:13:6000">
<Copy StartSeek="0" EndSeek="384"/>
<Copy StartSeek="409" EndSeek="432"/>
<Copy StartSeek="433" EndSeek="807"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:13:30000">
<Copy StartSeek="0" EndSeek="432"/>
<Insert>
</Insert>
<Copy StartSeek="432" EndSeek="806"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:13:34000">
<Copy StartSeek="0" EndSeek="486"/>
<Copy StartSeek="923" EndSeek="1243"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:14:19000">
<Copy StartSeek="0" EndSeek="554"/>
<Insert>	write_lock_irq(&amp;tasklist_lock);
</Insert>
<Copy StartSeek="586" EndSeek="1242"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:14:29000">
<Copy StartSeek="0" EndSeek="884"/>
<Insert>	write_unlock_irq(&amp;tasklist_lock);
</Insert>
<Copy StartSeek="918" EndSeek="1241"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:14:34000">
<Copy StartSeek="0" EndSeek="609"/>
<Insert>		if (task_cpu(p) == cpu &amp;&amp;
		    (!cputime_eq(p-&gt;utime, cputime_zero) ||
		     !cputime_eq(p-&gt;stime, cputime_zero)))
			printk(KERN_WARNING "Task %s (pid = %d) is on cpu %d\
				(state = %ld, flags = %x) \n",
				 p-&gt;comm, task_pid_nr(p), cpu,
				 p-&gt;state, p-&gt;flags);
	}
</Insert>
<Copy StartSeek="771" EndSeek="1128"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:14:55000">
<Copy StartSeek="0" EndSeek="609"/>
<Insert>		printk(KERN_WARNING "Task %s (pid = %d) is on cpu %d\
			(state = %ld, flags = %x) \n",
		       p-&gt;comm, task_pid_nr(p), cpu,
</Insert>
<Copy StartSeek="716" EndSeek="1106"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:15:21000">
<Copy StartSeek="0" EndSeek="609"/>
<Insert>		printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x) \n",
</Insert>
<Copy StartSeek="681" EndSeek="1105"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:15:26000">
<Copy StartSeek="0" EndSeek="864"/>
<Insert>	return klna_steal_sk_alloc();
//      return 0;
}

</Insert>
<Copy StartSeek="878" EndSeek="1067"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:16:7000">
<Copy StartSeek="0" EndSeek="681"/>
<Insert>		       p-&gt;comm, task_pid_nr(p),
</Insert>
<Copy StartSeek="709" EndSeek="1061"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:17:30000">
<Copy StartSeek="0" EndSeek="681"/>
<Insert>		       p-&gt;comm, tsk-&gt;pid,
</Insert>
<Copy StartSeek="707" EndSeek="1059"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:17:34000">
<Copy StartSeek="0" EndSeek="681"/>
<Insert>		       p-&gt;comm, p-&gt;pid,
</Insert>
<Copy StartSeek="715" EndSeek="1067"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:25:4000">
<Copy StartSeek="0" EndSeek="821"/>
<Insert>	unsigned long addr;

</Insert>
<Copy StartSeek="821" EndSeek="1045"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:27:6000">
<Copy StartSeek="0" EndSeek="841"/>
<Insert>
</Insert>
<Copy StartSeek="861" EndSeek="1064"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:45:50000">
<Copy StartSeek="0" EndSeek="861"/>
<Copy StartSeek="862" EndSeek="1065"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="10:45:50000">
<Copy StartSeek="0" EndSeek="681"/>
<Insert>		       p-&gt;comm, task_pid_nr(p),
</Insert>
<Copy StartSeek="707" EndSeek="1057"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="11:07:1000">
<Copy StartSeek="0" EndSeek="553"/>
<Insert>
</Insert>
<Copy StartSeek="583" EndSeek="766"/>
<Insert>	}
</Insert>
<Copy StartSeek="829" EndSeek="1146"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="11:17:0000">
<Copy StartSeek="0" EndSeek="822"/>
<Insert>			
	}
</Insert>
<Copy StartSeek="856" EndSeek="1173"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="11:59:37000">
<Copy StartSeek="0" EndSeek="818"/>
<Insert>		}
		put_files_struct(files);
			
	}
</Insert>
<Copy StartSeek="860" EndSeek="1177"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="11:59:52000">
<Copy StartSeek="0" EndSeek="486"/>
<Copy StartSeek="803" EndSeek="1134"/>
<Insert>
</Insert>
<Copy StartSeek="1153" EndSeek="1512"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:06:38000">
<Copy StartSeek="0" EndSeek="486"/>
<Insert>struct sock *netlink_getsockbyfilp(struct file *filp)
</Insert>
<Copy StartSeek="534" EndSeek="1506"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:07:27000">
<Copy StartSeek="0" EndSeek="1128"/>
<Insert>			files-&gt;fd_array
</Insert>
<Copy StartSeek="1171" EndSeek="1530"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:10:52000">
<Copy StartSeek="0" EndSeek="1171"/>
<Copy StartSeek="1198" EndSeek="1557"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:11:19000">
<Copy StartSeek="0" EndSeek="486"/>
<Insert>struct sock *__getsockbyfilp(struct file *filp)
</Insert>
<Copy StartSeek="541" EndSeek="1564"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:11:22000">
<Copy StartSeek="0" EndSeek="648"/>
<Insert>		return ERR_PTR(-ENOTSOCK);
</Insert>
<Copy StartSeek="663" EndSeek="1550"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:11:43000">
<Copy StartSeek="0" EndSeek="727"/>
<Insert>		return ERR_PTR(-EINVAL);
</Insert>
<Copy StartSeek="742" EndSeek="1538"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:11:49000">
<Copy StartSeek="0" EndSeek="874"/>
<Insert>
</Insert>
<Copy StartSeek="896" EndSeek="1194"/>
<Insert>
			}
</Insert>
<Copy StartSeek="1359" EndSeek="1718"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:13:32000">
<Copy StartSeek="0" EndSeek="596"/>
<Insert>	struct sock *sock;
</Insert>
<Copy StartSeek="614" EndSeek="662"/>
<Insert>	sock = SOCKET_I(inode)-&gt;sk;
	if (sock-&gt;sk_family != AF_PPPOX)
</Insert>
<Copy StartSeek="721" EndSeek="737"/>
<Insert>	sock_hold(sock);
	return sock;
}

</Insert>
<Copy StartSeek="769" EndSeek="1709"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:14:1000">
<Copy StartSeek="0" EndSeek="1185"/>
<Insert>				if (sock = __getsockbyfilp(files-&gt;fd_array[count])) {
</Insert>
<Copy StartSeek="1249" EndSeek="1715"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:15:16000">
<Copy StartSeek="0" EndSeek="1237"/>
<Insert>				if () {
</Insert>
<Copy StartSeek="1253" EndSeek="1719"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:15:21000">
<Copy StartSeek="0" EndSeek="409"/>
<Copy StartSeek="430" EndSeek="886"/>
<Insert>	struct sock *sock; 
</Insert>
<Copy StartSeek="905" EndSeek="1204"/>
<Insert>				sock = __getsockbyfilp(files-&gt;fd_array[count]);
</Insert>
<Copy StartSeek="1254" EndSeek="1270"/>
<Copy StartSeek="1313" EndSeek="1779"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:17:5000">
<Copy StartSeek="0" EndSeek="409"/>
<Insert>#include &lt;if/ppox.h&gt;
</Insert>
<Copy StartSeek="436" EndSeek="1785"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:17:29000">
<Copy StartSeek="0" EndSeek="409"/>
<Insert>#include &lt;linux/if_ppox.h&gt;
</Insert>
<Copy StartSeek="437" EndSeek="1786"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:17:43000">
<Copy StartSeek="0" EndSeek="1459"/>
<Insert>		
			
	}
</Insert>
<Copy StartSeek="1462" EndSeek="1779"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:17:54000">
<Copy StartSeek="0" EndSeek="1393"/>
<Insert>					__sock_put(sock);
</Insert>
<Copy StartSeek="1414" EndSeek="1777"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:18:22000">
<Copy StartSeek="0" EndSeek="1261"/>
<Insert>				if (sock) {
</Insert>
<Copy StartSeek="1275" EndSeek="1318"/>
<Copy StartSeek="1338" EndSeek="1411"/>
<Copy StartSeek="1434" EndSeek="1818"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:19:49000">
<Copy StartSeek="0" EndSeek="968"/>
<Insert>		printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x)\n",
		       p-&gt;comm, p-&gt;pid,
		       p-&gt;state, p-&gt;flags);
	
</Insert>
<Copy StartSeek="970" EndSeek="1283"/>
<Copy StartSeek="1421" EndSeek="1828"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:20:14000">
<Copy StartSeek="0" EndSeek="409"/>
<Copy StartSeek="433" EndSeek="1852"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:20:50000">
<Copy StartSeek="0" EndSeek="994"/>
<Insert>		files = get_files_struct(task);
</Insert>
<Copy StartSeek="1025" EndSeek="1849"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:21:1000">
<Copy StartSeek="0" EndSeek="864"/>
<Insert>	struct task_struct *p;
</Insert>
<Copy StartSeek="890" EndSeek="971"/>
<Insert>	for_each_process(p) {
</Insert>
<Copy StartSeek="996" EndSeek="998"/>
<Insert>		files = get_files_struct(p);
</Insert>
<Copy StartSeek="1031" EndSeek="1855"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:21:18000">
<Copy StartSeek="0" EndSeek="1385"/>
<Insert>					       p-&gt;comm, p-&gt;pid,
					       p-&gt;state, p-&gt;flags);
</Insert>
<Copy StartSeek="1455" EndSeek="1863"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="12:21:33000">
<Copy StartSeek="0" EndSeek="538"/>
<Copy StartSeek="755" EndSeek="2080"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:14:16000">
<Copy StartSeek="0" EndSeek="537"/>
<Insert>
</Insert>
<Copy StartSeek="586" EndSeek="801"/>
<Insert>
</Insert>
<Copy StartSeek="808" EndSeek="2134"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:23:25000">
<Copy StartSeek="0" EndSeek="384"/>
<Copy StartSeek="411" EndSeek="2161"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:23:45000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			while (count--) {
</Insert>
<Copy StartSeek="1408" EndSeek="2161"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:24:46000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			while (--count) {
</Insert>
<Copy StartSeek="1406" EndSeek="2159"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:25:28000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			while (count) {
</Insert>
<Copy StartSeek="1408" EndSeek="2161"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:25:35000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			while (count--) {
</Insert>
<Copy StartSeek="1408" EndSeek="2161"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:25:50000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			while (--count) {
</Insert>
<Copy StartSeek="1408" EndSeek="2161"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:25:58000">
<Copy StartSeek="0" EndSeek="1387"/>
<Copy StartSeek="1402" EndSeek="2176"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:26:6000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			count -= 1;
</Insert>
<Copy StartSeek="1414" EndSeek="2188"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:26:18000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			if (count)  count -= 1;
</Insert>
<Copy StartSeek="1413" EndSeek="2187"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:26:22000">
<Copy StartSeek="0" EndSeek="1387"/>
<Insert>			if (count) count -= 1;
</Insert>
<Copy StartSeek="1418" EndSeek="2192"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:26:41000">
<Copy StartSeek="0" EndSeek="1387"/>
<Copy StartSeek="1462" EndSeek="2267"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:27:33000">
<Copy StartSeek="0" EndSeek="1344"/>
<Insert>			int count = atomic_read(&amp;files-&gt;count);
</Insert>
<Copy StartSeek="1396" EndSeek="2276"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:28:6000">
<Copy StartSeek="0" EndSeek="1294"/>
<Insert>	
</Insert>
<Copy StartSeek="1347" EndSeek="1380"/>
<Copy StartSeek="1447" EndSeek="2394"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:32:0000">
<Copy StartSeek="0" EndSeek="1641"/>
<Copy StartSeek="1696" EndSeek="2449"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:33:2000">
<Copy StartSeek="0" EndSeek="1746"/>
<Copy StartSeek="1810" EndSeek="2513"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:33:8000">
<Copy StartSeek="0" EndSeek="1641"/>
<Insert>				printk(KERN_ERR "(%s:%d) \n", __func__, __LINE__);
				sk = __getsockbyfilp(files-&gt;fd_array[count]);
</Insert>
<Copy StartSeek="1832" EndSeek="2599"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:37:46000">
<Copy StartSeek="0" EndSeek="1761"/>
<Insert>				       filp, filp-&gt;f_path.dentry);
</Insert>
<Copy StartSeek="1815" EndSeek="2614"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:38:10000">
<Copy StartSeek="0" EndSeek="1815"/>
<Insert>				sk = __getsockbyfilp(filp);
</Insert>
<Copy StartSeek="1870" EndSeek="2637"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:40:58000">
<Copy StartSeek="0" EndSeek="1217"/>
<Insert>	struct sock *sk; 
</Insert>
<Copy StartSeek="1243" EndSeek="2644"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:41:18000">
<Copy StartSeek="0" EndSeek="1822"/>
<Insert>				if (filp) {
					sk = __getsockbyfilp(filp);
				}
</Insert>
<Copy StartSeek="1884" EndSeek="2651"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:41:45000">
<Copy StartSeek="0" EndSeek="836"/>
<Insert>static struct sock *__getsockbyfilp(struct file *filp)
</Insert>
<Copy StartSeek="898" EndSeek="1859"/>
<Insert>				sk = __getsockbyfilp(filp);
</Insert>
<Copy StartSeek="1898" EndSeek="2665"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:42:33000">
<Copy StartSeek="0" EndSeek="1962"/>
<Copy StartSeek="1990" EndSeek="2693"/>
</Delta>
<Delta Version="66" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:42:49000">
<Copy StartSeek="0" EndSeek="1962"/>
<Insert>				if (!sk)
					continue;
</Insert>
<Copy StartSeek="1962" EndSeek="2665"/>
</Delta>
<Delta Version="67" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:43:28000">
<Copy StartSeek="0" EndSeek="1775"/>
<Insert>				       filp, (filp ? filp-&gt;f_path.dentry : "0"));
</Insert>
<Copy StartSeek="1830" EndSeek="2666"/>
</Delta>
<Delta Version="68" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:43:58000">
<Copy StartSeek="0" EndSeek="1308"/>
<Insert>		printk(KERN_ERR "(%s:%d) \n", __func__, __LINE__);
</Insert>
<Copy StartSeek="1308" EndSeek="1341"/>
<Insert>		printk(KERN_ERR "(%s:%d) files %p\n", __func__, __LINE__,files);
</Insert>
<Copy StartSeek="1341" EndSeek="1408"/>
<Insert>			printk(KERN_ERR "(%s:%d) files_count %u\n", __func__, __LINE__, count);
</Insert>
<Copy StartSeek="1408" EndSeek="1508"/>
<Insert>				printk(KERN_ERR "(%s:%d) file %p, dentry %p\n", __func__, __LINE__,
				       filp, (filp ? filp-&gt;f_path.dentry : NULL));
</Insert>
<Copy StartSeek="1508" EndSeek="2344"/>
</Delta>
<Delta Version="69" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:44:57000">
<Copy StartSeek="0" EndSeek="1577"/>
<Insert>				printk(KERN_ERR "(%s:%d) sk %p\n", __func__, __LINE__, sk);
</Insert>
<Copy StartSeek="1577" EndSeek="2280"/>
</Delta>
<Delta Version="70" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="14:45:14000">
<Copy StartSeek="0" EndSeek="1250"/>
<Insert>
</Insert>
<Copy StartSeek="1274" EndSeek="1331"/>
<Copy StartSeek="1384" EndSeek="2356"/>
</Delta>
<Delta Version="71" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:05:28000">
<Copy StartSeek="0" EndSeek="1126"/>
<Copy StartSeek="1209" EndSeek="2439"/>
</Delta>
<Delta Version="72" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:07:23000">
<Copy StartSeek="0" EndSeek="1467"/>
<Copy StartSeek="1592" EndSeek="2564"/>
</Delta>
<Delta Version="73" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:08:31000">
<Copy StartSeek="0" EndSeek="1467"/>
<Insert>		pr_debug(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x)\n",
	 tsk-&gt;comm, tsk-&gt;pid,
	 tsk-&gt;state, tsk-&gt;flags);
</Insert>
<Copy StartSeek="1582" EndSeek="2555"/>
</Delta>
<Delta Version="74" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:08:35000">
<Copy StartSeek="0" EndSeek="1202"/>
<Insert>#else
</Insert>
<Copy StartSeek="1203" EndSeek="2550"/>
</Delta>
<Delta Version="75" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:08:56000">
<Copy StartSeek="0" EndSeek="1171"/>
<Insert>		printk(KERN_DEBUG fmt,##arg)
</Insert>
<Copy StartSeek="1203" EndSeek="2551"/>
</Delta>
<Delta Version="76" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:09:15000">
<Copy StartSeek="0" EndSeek="1329"/>
<Insert>	unsigned int debug = 0
</Insert>
<Copy StartSeek="1355" EndSeek="2553"/>
</Delta>
<Delta Version="77" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:09:29000">
<Copy StartSeek="0" EndSeek="1171"/>
<Insert>		printk(KERN_DEBUG fmt,##arg);
</Insert>
<Copy StartSeek="1202" EndSeek="2552"/>
</Delta>
<Delta Version="78" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:09:32000">
<Copy StartSeek="0" EndSeek="1464"/>
<Insert>		pr_debug("Task %s (pid = %d) (state = %ld, flags = %x)\n",
			 tsk-&gt;comm, tsk-&gt;pid,
			 tsk-&gt;state, tsk-&gt;flags);
</Insert>
<Copy StartSeek="1600" EndSeek="2573"/>
</Delta>
<Delta Version="79" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:10:21000">
<Copy StartSeek="0" EndSeek="1411"/>
<Insert>		if (strstr(tsk -&gt;comm, "pppd") {
</Insert>
<Copy StartSeek="1447" EndSeek="2574"/>
</Delta>
<Delta Version="80" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:10:34000">
<Copy StartSeek="0" EndSeek="1465"/>
<Insert>//      	pr_debug("Task %s (pid = %d) (state = %ld, flags = %x)\n",
//      		 tsk-&gt;comm, tsk-&gt;pid,
//      		 tsk-&gt;state, tsk-&gt;flags);
</Insert>
<Copy StartSeek="1580" EndSeek="2553"/>
</Delta>
<Delta Version="81" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:10:37000">
<Copy StartSeek="0" EndSeek="1411"/>
<Insert>		if (strstr(tsk -&gt;comm, "pppd")) {
</Insert>
<Copy StartSeek="1446" EndSeek="2552"/>
</Delta>
<Delta Version="82" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:12:12000">
<Copy StartSeek="0" EndSeek="1411"/>
<Insert>		if (strstr(tsk -&gt;comm, "ppp")) {
</Insert>
<Copy StartSeek="1447" EndSeek="2553"/>
</Delta>
<Delta Version="83" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:12:40000">
<Copy StartSeek="0" EndSeek="1411"/>
<Insert>		if (strstr(tsk -&gt;comm, "pppd")) {
</Insert>
<Copy StartSeek="1446" EndSeek="2552"/>
</Delta>
<Delta Version="84" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:12:44000">
<Copy StartSeek="0" EndSeek="1446"/>
<Copy StartSeek="1504" EndSeek="2610"/>
</Delta>
<Delta Version="85" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:13:44000">
<Copy StartSeek="0" EndSeek="1446"/>
<Insert>			printk(KERN_ERR "(%s:%d) !!!!\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="1446" EndSeek="2552"/>
</Delta>
<Delta Version="86" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:15:45000">
<Copy StartSeek="0" EndSeek="1680"/>
<Copy StartSeek="1720" EndSeek="2592"/>
</Delta>
<Delta Version="87" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:16:21000">
<Copy StartSeek="0" EndSeek="1850"/>
<Copy StartSeek="1903" EndSeek="2645"/>
</Delta>
<Delta Version="88" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:17:34000">
<Copy StartSeek="0" EndSeek="1850"/>
<Insert>				pr_debug("get_pppox_sock_by_filp(%u)\n", count);
</Insert>
<Copy StartSeek="1850" EndSeek="1889"/>
<Copy StartSeek="1951" EndSeek="2654"/>
</Delta>
<Delta Version="89" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:17:50000">
<Copy StartSeek="0" EndSeek="1820"/>
<Copy StartSeek="1870" EndSeek="2704"/>
</Delta>
<Delta Version="90" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:20:46000">
<Copy StartSeek="0" EndSeek="1820"/>
<Insert>				pr_debug("fd_array[%u] = %p\n", filp, count);
</Insert>
<Copy StartSeek="1870" EndSeek="2704"/>
</Delta>
<Delta Version="91" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:21:9000">
<Copy StartSeek="0" EndSeek="2384"/>
<Insert>	}
</Insert>
<Copy StartSeek="2400" EndSeek="2717"/>
</Delta>
<Delta Version="92" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:23:56000">
<Copy StartSeek="0" EndSeek="1720"/>
<Insert>			if (count) 
</Insert>
<Copy StartSeek="1734" EndSeek="2716"/>
</Delta>
<Delta Version="93" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:24:48000">
<Copy StartSeek="0" EndSeek="1750"/>
<Insert>			while (count--) {
</Insert>
<Copy StartSeek="1769" EndSeek="2714"/>
</Delta>
<Delta Version="94" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:25:18000">
<Copy StartSeek="0" EndSeek="2344"/>
<Insert>			}
</Insert>
<Copy StartSeek="2365" EndSeek="2730"/>
</Delta>
<Delta Version="95" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:25:44000">
<Copy StartSeek="0" EndSeek="1720"/>
<Insert>			if (count)
				count -= 1;
</Insert>
<Copy StartSeek="1749" EndSeek="2729"/>
</Delta>
<Delta Version="96" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:30:30000">
<Copy StartSeek="0" EndSeek="1881"/>
<Insert>					continue;
</Insert>
<Copy StartSeek="1893" EndSeek="2726"/>
</Delta>
<Delta Version="97" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:31:41000">
<Copy StartSeek="0" EndSeek="1749"/>
<Insert>			while (count) {
</Insert>
<Copy StartSeek="1770" EndSeek="2728"/>
</Delta>
<Delta Version="98" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:31:52000">
<Copy StartSeek="0" EndSeek="1883"/>
<Insert>					break;
</Insert>
<Copy StartSeek="1898" EndSeek="2731"/>
</Delta>
<Delta Version="99" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:31:58000">
<Copy StartSeek="0" EndSeek="2345"/>
<Insert>				count -= 1;
			}
</Insert>
<Copy StartSeek="2350" EndSeek="2715"/>
</Delta>
<Delta Version="100" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:32:7000">
<Copy StartSeek="0" EndSeek="1898"/>
<Copy StartSeek="2043" EndSeek="2860"/>
</Delta>
<Delta Version="101" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:35:18000">
<Copy StartSeek="0" EndSeek="1995"/>
<Copy StartSeek="2095" EndSeek="2960"/>
</Delta>
<Delta Version="102" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:35:53000">
<Copy StartSeek="0" EndSeek="1995"/>
<Insert>					printk(KERN_ERR "(%s:%d) inode-&gt;i_mode %#x\n", __func__, __LINE__,
					       inode-&gt;i_mode);
					if (!S_ISSOCK(inode-&gt;i_mode))
</Insert>
<Copy StartSeek="2144" EndSeek="2974"/>
</Delta>
<Delta Version="103" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:36:25000">
<Copy StartSeek="0" EndSeek="2132"/>
<Insert>					if (!)
						
				}
</Insert>
<Copy StartSeek="2138" EndSeek="2955"/>
</Delta>
<Delta Version="104" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:36:31000">
<Copy StartSeek="0" EndSeek="1749"/>
<Copy StartSeek="1787" EndSeek="2993"/>
</Delta>
<Delta Version="105" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:51:56000">
<Copy StartSeek="0" EndSeek="1046"/>
<Copy StartSeek="1124" EndSeek="3071"/>
</Delta>
<Delta Version="106" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:55:25000">
<Copy StartSeek="0" EndSeek="1046"/>
<Insert>	printk(KERN_ERR "(%s:%d) sk_family %u\n", __func__, __LINE__,sk-&gt;sk_family);
</Insert>
<Copy StartSeek="1125" EndSeek="3072"/>
</Delta>
<Delta Version="107" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="15:55:28000">
<Copy StartSeek="0" EndSeek="1046"/>
<Insert>	printk(KERN_ERR "(%s:%d) sk_family %u\n", __func__, __LINE__, sk-&gt;sk_family);
</Insert>
<Copy StartSeek="1153" EndSeek="3100"/>
</Delta>
<Delta Version="108" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:11:26000">
<Copy StartSeek="0" EndSeek="1046"/>
<Insert>	printk(KERN_ERR "(%s:%d) sk_family %u\n", __func__, __LINE__, sk-&gt;sk_family, sk-&gt;sk_socket-&gt;ops-&gt;family);
</Insert>
<Copy StartSeek="1164" EndSeek="3111"/>
</Delta>
<Delta Version="109" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:11:32000">
<Copy StartSeek="0" EndSeek="1046"/>
<Insert>	printk(KERN_ERR "(%s:%d) sk_family %u, family %u\n", __func__, __LINE__, sk-&gt;sk_family, sk-&gt;sk_socket-&gt;ops-&gt;family);
</Insert>
<Copy StartSeek="1165" EndSeek="3112"/>
</Delta>
<Delta Version="110" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:11:39000">
<Copy StartSeek="0" EndSeek="1046"/>
<Insert>	printk(KERN_ERR "(%s:%d) sk_family %u, family2 %u\n", __func__, __LINE__, sk-&gt;sk_family, sk-&gt;sk_socket-&gt;ops-&gt;family);
</Insert>
<Copy StartSeek="1172" EndSeek="3119"/>
</Delta>
<Delta Version="111" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:12:56000">
<Copy StartSeek="0" EndSeek="1046"/>
<Insert>//      printk(KERN_ERR "(%s:%d) sk_family %u, family2 %u\n", __func__, __LINE__, sk-&gt;sk_family, sk-&gt;sk_socket-&gt;ops-&gt;family);
</Insert>
<Copy StartSeek="1165" EndSeek="3112"/>
</Delta>
<Delta Version="112" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:13:8000">
<Copy StartSeek="0" EndSeek="1583"/>
<Insert>		pr_debug("Task %s (pid = %d) (state = %ld, flags = %x)\n",
			 tsk-&gt;comm, tsk-&gt;pid,
			 tsk-&gt;state, tsk-&gt;flags);

</Insert>
<Copy StartSeek="1583" EndSeek="2218"/>
<Insert>				pr_debug("get_pppox_sock_by_filp(%u) = %p\n", count, sk);
</Insert>
<Copy StartSeek="2218" EndSeek="2934"/>
</Delta>
<Delta Version="113" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:26:24000">
<Copy StartSeek="0" EndSeek="1245"/>
<Copy StartSeek="2003" EndSeek="3692"/>
</Delta>
<Delta Version="114" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:39:40000">
<Copy StartSeek="0" EndSeek="1555"/>
<Insert>static void close_files(struct files_struct * files)
</Insert>
<Copy StartSeek="1607" EndSeek="3691"/>
</Delta>
<Delta Version="115" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:40:13000">
<Copy StartSeek="0" EndSeek="1245"/>
<Insert>void fastcall set_close_on_exec(unsigned int fd, int flag)
{
	struct files_struct *files = current-&gt;files;
	struct fdtable *fdt;
	spin_lock(&amp;files-&gt;file_lock);
	fdt = files_fdtable(files);
	if (flag)
		FD_SET(fd, fdt-&gt;close_on_exec);
	else
		FD_CLR(fd, fdt-&gt;close_on_exec);
	spin_unlock(&amp;files-&gt;file_lock);
}
</Insert>
<Copy StartSeek="1655" EndSeek="1656"/>
<Insert>static void close_files(struct files_struct *files)
</Insert>
<Copy StartSeek="1709" EndSeek="1975"/>
<Insert>				struct file *file = fdt-&gt;fd[i];
				if (file) {
</Insert>
<Copy StartSeek="2029" EndSeek="3795"/>
</Delta>
<Delta Version="116" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:41:7000">
<Copy StartSeek="0" EndSeek="2029"/>
<Insert>
</Insert>
<Copy StartSeek="2065" EndSeek="3830"/>
</Delta>
<Delta Version="117" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:41:40000">
<Copy StartSeek="0" EndSeek="1656"/>
<Insert>static void detect_files(struct files_struct *files)
</Insert>
<Copy StartSeek="1712" EndSeek="3833"/>
</Delta>
<Delta Version="118" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:42:14000">
<Copy StartSeek="0" EndSeek="1046"/>
<Insert>	printk(KERN_ERR "(%s:%d) sk_family %u, family2 %u\n", __func__, __LINE__, sk-&gt;sk_family, sk-&gt;sk_socket-&gt;ops-&gt;family);
</Insert>
<Copy StartSeek="1046" EndSeek="3714"/>
</Delta>
<Delta Version="119" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:42:31000">
<Copy StartSeek="0" EndSeek="1913"/>
<Insert>					get_pppox_sock_by_filp(filep);
</Insert>
<Copy StartSeek="1967" EndSeek="3732"/>
</Delta>
<Delta Version="120" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:42:52000">
<Copy StartSeek="0" EndSeek="1537"/>
<Insert>static void find_sock_files(struct files_struct *files)
</Insert>
<Copy StartSeek="1594" EndSeek="3733"/>
</Delta>
<Delta Version="121" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:43:10000">
<Copy StartSeek="0" EndSeek="1537"/>
<Insert>static sock *find_sock_files(struct files_struct *files)
</Insert>
<Copy StartSeek="1596" EndSeek="3735"/>
</Delta>
<Delta Version="122" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:43:31000">
<Copy StartSeek="0" EndSeek="1537"/>
<Insert>static sock *detect_sock_files(struct files_struct *files)
</Insert>
<Copy StartSeek="1595" EndSeek="3734"/>
</Delta>
<Delta Version="123" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:43:34000">
<Copy StartSeek="0" EndSeek="2431"/>
<Insert>			unsigned int count = atomic_read(&amp;files-&gt;count);
			pr_debug("files count %u\n", count);
			if (!count)
				continue;
			if (debug) {
				count  = 32;
			}
</Insert>
<Copy StartSeek="2431" EndSeek="3575"/>
</Delta>
<Delta Version="124" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:44:12000">
<Copy StartSeek="0" EndSeek="2330"/>
<Insert>		if (strstr(tsk-&gt;comm, "pppd")) {
			debug = 1;
		}
</Insert>
<Copy StartSeek="2330" EndSeek="2378"/>
<Insert>			while (count--) {
				struct file *filp = files-&gt;fd_array[count];
				pr_debug("fd_array[%u] = %p\n", count, filp);
				if (!filp)
					continue;
				if (debug) {
					struct inode *inode = filp-&gt;f_path.dentry-&gt;d_inode;
					struct sock *sk;

					printk(KERN_ERR "(%s:%d) inode-&gt;i_mode %#x, is_sock %d\n", __func__, __LINE__,
					       inode-&gt;i_mode, S_ISSOCK(inode-&gt;i_mode));
				}
</Insert>
<Copy StartSeek="2378" EndSeek="3133"/>
</Delta>
<Delta Version="125" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:44:44000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>//void fastcall set_close_on_exec(unsigned int fd, int flag)
//{
//        struct files_struct *files = current-&gt;files;
//        struct fdtable *fdt;
//        spin_lock(&amp;files-&gt;file_lock);
//        fdt = files_fdtable(files);
//        if (flag)
//                FD_SET(fd, fdt-&gt;close_on_exec);
//        else
//                FD_CLR(fd, fdt-&gt;close_on_exec);
//        spin_unlock(&amp;files-&gt;file_lock);
//}

</Insert>
<Copy StartSeek="1126" EndSeek="2722"/>
</Delta>
<Delta Version="126" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:46:31000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>static void detect_sock_files(struct files_struct *files)
</Insert>
<Copy StartSeek="1190" EndSeek="2728"/>
</Delta>
<Delta Version="127" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:47:45000">
<Copy StartSeek="0" EndSeek="1973"/>
<Copy StartSeek="2008" EndSeek="2763"/>
</Delta>
<Delta Version="128" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:48:7000">
<Copy StartSeek="0" EndSeek="1973"/>
<Insert>			detect_pppox_sock_files(files);
</Insert>
<Copy StartSeek="1977" EndSeek="2732"/>
</Delta>
<Delta Version="129" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:48:20000">
<Copy StartSeek="0" EndSeek="1973"/>
<Insert>			
</Insert>
<Copy StartSeek="1973" EndSeek="2728"/>
</Delta>
<Delta Version="130" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:48:21000">
<Copy StartSeek="0" EndSeek="2395"/>
<Insert>		debug = 0;
	}
</Insert>
<Copy StartSeek="2398" EndSeek="2715"/>
</Delta>
<Delta Version="131" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:48:42000">
<Copy StartSeek="0" EndSeek="2358"/>
<Insert>			}
</Insert>
<Copy StartSeek="2358" EndSeek="2710"/>
</Delta>
<Delta Version="132" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:49:1000">
<Copy StartSeek="0" EndSeek="1973"/>
<Insert>				sk = get_pppox_sock_by_filp(filp);
				if (sk) {
					struct pppox_sock *po = pppox_sk(sk);
					lock_sock(sk);
					printk(KERN_ERR "(%s:%d) found pppoe sock!\n", __func__, __LINE__);
					printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x)\n",
					       tsk-&gt;comm, tsk-&gt;pid,
					       tsk-&gt;state, tsk-&gt;flags);
</Insert>
<Copy StartSeek="2299" EndSeek="2300"/>
<Insert>					release_sock(sk);
					__sock_put(sk);
				}
</Insert>
<Copy StartSeek="2347" EndSeek="2699"/>
</Delta>
<Delta Version="133" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:49:19000">
<Copy StartSeek="0" EndSeek="1718"/>
<Insert>static inline void check_for_tasks(void)
</Insert>
<Copy StartSeek="1754" EndSeek="2470"/>
<Insert>	check_for_tasks();
</Insert>
<Copy StartSeek="2485" EndSeek="2689"/>
</Delta>
<Delta Version="134" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:49:35000">
<Copy StartSeek="0" EndSeek="1968"/>
<Insert>			sk = get_pppox_sock_by_filp(filp);
			if (sk) {
				struct pppox_sock *po = pppox_sk(sk);
				lock_sock(sk);
				printk(KERN_ERR "(%s:%d) found pppoe sock!\n", __func__, __LINE__);
				printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x)\n",
				       tsk-&gt;comm, tsk-&gt;pid,
				       tsk-&gt;state, tsk-&gt;flags);

				release_sock(sk);
				__sock_put(sk);
			}
</Insert>
<Copy StartSeek="2456" EndSeek="2528"/>
<Copy StartSeek="3685" EndSeek="3960"/>
</Delta>
<Delta Version="135" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:55:58000">
<Copy StartSeek="0" EndSeek="2421"/>
<Insert>			detect_pppox_sock_files(files);
</Insert>
<Copy StartSeek="2461" EndSeek="3965"/>
</Delta>
<Delta Version="136" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:56:33000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>static void detect_pppox_sock_files(struct files_struct *files)
</Insert>
<Copy StartSeek="1208" EndSeek="3983"/>
</Delta>
<Delta Version="137" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:56:44000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>static void detect_pppox_sock_files(struct files_struct *files, struct task *tsl)
</Insert>
<Copy StartSeek="1208" EndSeek="3983"/>
</Delta>
<Delta Version="138" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:56:45000">
<Copy StartSeek="0" EndSeek="1582"/>
<Insert>				}
			}
</Insert>
<Copy StartSeek="1949" EndSeek="4339"/>
</Delta>
<Delta Version="139" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:57:41000">
<Copy StartSeek="0" EndSeek="1597"/>
<Insert>						struct pppox_sock *po = pppox_sk(sk);
</Insert>
<Copy StartSeek="1626" EndSeek="1647"/>
<Copy StartSeek="1672" EndSeek="4349"/>
</Delta>
<Delta Version="140" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:58:25000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>static void detect_pppox_sock_files(struct files_struct *files, struct task *tsk)
</Insert>
<Copy StartSeek="1229" EndSeek="4370"/>
</Delta>
<Delta Version="141" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:59:33000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>static void detect_pppox_sock_files(struct files_struct *files, struct task *tsk /* just for print */)
</Insert>
<Copy StartSeek="1232" EndSeek="4373"/>
</Delta>
<Delta Version="142" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:59:36000">
<Copy StartSeek="0" EndSeek="1126"/>
<Insert>static void detect_pppox_sock_files(struct files_struct *files, struct task *tsk /* just for printout */)
{
</Insert>
<Copy StartSeek="1243" EndSeek="4382"/>
</Delta>
<Delta Version="143" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:59:39000">
<Copy StartSeek="0" EndSeek="1191"/>
<Insert>				    struct task *tsk /* just for printout */)
</Insert>
<Copy StartSeek="1248" EndSeek="4389"/>
</Delta>
<Delta Version="144" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="16:59:54000">
<Copy StartSeek="0" EndSeek="1786"/>
<Insert>						printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x)\n",
</Insert>
<Copy StartSeek="1863" EndSeek="4390"/>
</Delta>
<Delta Version="145" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:00:38000">
<Copy StartSeek="0" EndSeek="2262"/>
<Insert>	unsigned int debug = 0;

</Insert>
<Copy StartSeek="2264" EndSeek="4366"/>
</Delta>
<Delta Version="146" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:00:48000">
<Copy StartSeek="0" EndSeek="2236"/>
<Insert>	struct sock *sk = NULL; 
	
</Insert>
<Copy StartSeek="2238" EndSeek="4340"/>
</Delta>
<Delta Version="147" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:01:2000">
<Copy StartSeek="0" EndSeek="2343"/>
<Insert>//      		sk = get_pppox_sock_by_filp(filp);
//      		if (sk) {
//      			struct pppox_sock *po = pppox_sk(sk);
//      			lock_sock(sk);
//      			printk(KERN_ERR "(%s:%d) found pppoe sock!\n", __func__, __LINE__);
//      			printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x)\n",
//      			       tsk-&gt;comm, tsk-&gt;pid,
//      			       tsk-&gt;state, tsk-&gt;flags);
//
//      			release_sock(sk);
//      			__sock_put(sk);
//      		}
</Insert>
<Copy StartSeek="2343" EndSeek="3887"/>
</Delta>
<Delta Version="148" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:02:52000">
<Copy StartSeek="0" EndSeek="2455"/>
<Insert>//static inline void scan_tasks(void)
//{
//        struct task_struct *tsk;
//        struct files_struct *files;
//        struct sock *sk = NULL;
//        unsigned int debug = 0;
//
//        read_lock_irq(&amp;tasklist_lock);
//        for_each_process(tsk) {
//                files = get_files_struct(tsk);
//                if (files) {
//                        sk = get_pppox_sock_by_filp(filp);
//                        if (sk) {
//                                struct pppox_sock *po = pppox_sk(sk);
//                                lock_sock(sk);
//                                printk(KERN_ERR "(%s:%d) found pppoe sock!\n", __func__, __LINE__);
//                                printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %x)\n",
//                                       tsk-&gt;comm, tsk-&gt;pid,
//                                       tsk-&gt;state, tsk-&gt;flags);
//
//                                release_sock(sk);
//                                __sock_put(sk);
//                        }
//                        put_files_struct(files);
//                }
//        }
//        read_unlock_irq(&amp;tasklist_lock);
//}

</Insert>
<Copy StartSeek="2455" EndSeek="2730"/>
</Delta>
<Delta Version="149" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:02:59000">
<Copy StartSeek="0" EndSeek="1712"/>
<Insert>						printk(KERN_ERR "(%s:%d) found pppoe sock!\n", __func__, __LINE__);
</Insert>
<Copy StartSeek="1787" EndSeek="2731"/>
</Delta>
<Delta Version="150" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:07:43000">
<Copy StartSeek="0" EndSeek="1787"/>
<Insert>						printk(KERN_WARNING "Task %s (pid = %d) (state = %ld, flags = %lx)\n",
</Insert>
<Copy StartSeek="1861" EndSeek="2728"/>
</Delta>
<Delta Version="151" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:07:46000">
<Copy StartSeek="0" EndSeek="1787"/>
<Insert>						printk(KERN_INFO "Task %s (pid = %d) (state = %ld, flags = %lx)\n",
</Insert>
<Copy StartSeek="1868" EndSeek="1902"/>
<Insert>						       tsk-&gt;state, tsk-&gt;flags);
</Insert>
<Copy StartSeek="1969" EndSeek="2764"/>
</Delta>
<Delta Version="152" Comment="" NL="\10" Encoding="text" Date="2012/04/29" Time="17:08:53000">
<Copy StartSeek="0" EndSeek="1902"/>
<Insert>						       tsk-&gt;state, tsk-&gt;flags, ppp_channel_index(po-&gt;chan));
</Insert>
<Copy StartSeek="1970" EndSeek="2765"/>
</Delta>
</DeltaFile>
