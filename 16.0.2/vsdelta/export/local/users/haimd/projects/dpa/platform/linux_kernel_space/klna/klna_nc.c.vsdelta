<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="337" Comment="" Date="2012/05/31" Time="16:30:13000" NL="\10" Encoding="text">
<Insert>/*
 *	Marvell Kernel Learning Agent
 *
 *      Authors:
 *	Haim Daniel
 *
 *	This program is free software; you can redistribute it and/or
 *	modify it under the terms of the GNU General Public License
 *	as published by the Free Software Foundation; either version
 *	2 of the License, or (at your option) any later version.
 */

#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/netdevice.h&gt;
#include &lt;linux/notifier.h&gt;
#include &lt;asm/cacheflush.h&gt;
#include &lt;net/netevent.h&gt;
#include &lt;net/neighbour.h&gt;
#include &lt;net/sock.h&gt;
#include &lt;vlan.h&gt;
#include &lt;br_private.h&gt;
#include &lt;linux/if_arp.h&gt;
#include &lt;net/netfilter/nf_conntrack.h&gt;
#include &lt;net/netfilter/nf_conntrack_core.h&gt;
#include &lt;net/netfilter/nf_conntrack_helper.h&gt;
#include &lt;net/netfilter/nf_conntrack_ecache.h&gt;
#include &lt;net/netfilter/nf_conntrack_l3proto.h&gt;
#include &lt;net/netfilter/nf_conntrack_l4proto.h&gt;
#include &lt;linux/version.h&gt;

#include "include/klna_pppoe_sock.h"
#include "include/klna_br.h"

#undef pr_fmt
#define pr_fmt(fmt) "klna_nc: " fmt

static int no_ct;
module_param(no_ct, int, 0644);
MODULE_PARM_DESC(no_ct, "avoid reporting conntrack events");

DEFINE_SPINLOCK(klna_lock);
#ifdef CONFIG_NF_CONNTRACK_EVENTS

static void (*death_by_timeout_org)(unsigned long);
static atomic_t en_reg_timeout_death = ATOMIC_INIT(1);

#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,26)
static inline u_int16_t nf_ct_l3num(const struct nf_conn *ct)
{
	return ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.l3num;
}
static inline u_int8_t nf_ct_protonum(const struct nf_conn *ct)
{
	return ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.protonum;
}
#endif /* KERNEL_VERSION 2.6.26 */

#ifndef NIPQUAD
	#define NIPQUAD(addr) \
	((unsigned char *)&amp;addr)[0], \
	((unsigned char *)&amp;addr)[1], \
	((unsigned char *)&amp;addr)[2], \
	((unsigned char *)&amp;addr)[3]
	#define NIPQUAD_FMT "%u.%u.%u.%u"
#endif

static void klna_print_conntrack_tuple(struct nf_conn *ct)
{
	const struct nf_conntrack_l3proto *l3proto;
	const struct nf_conntrack_l4proto *l4proto;

	struct nf_conntrack_tuple *tuple = 
		&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple;

	l3proto = __nf_ct_l3proto_find(nf_ct_l3num(ct));
	NF_CT_ASSERT(l3proto);
	l4proto = __nf_ct_l4proto_find(nf_ct_l3num(ct), nf_ct_protonum(ct));
	NF_CT_ASSERT(l4proto);

	pr_info("[%s]" NIPQUAD_FMT ":%u -&gt; " NIPQUAD_FMT ":%u\n",
		l4proto-&gt;name,
		NIPQUAD(tuple-&gt;src.u3.ip), ntohs(tuple-&gt;src.u.all),
		NIPQUAD(tuple-&gt;dst.u3.ip), ntohs(tuple-&gt;dst.u.all));
}

/* overrides ct-&gt;timeout-&gt;function() */
void klna_death_by_timeout(unsigned long ul_conntrack)
{
	struct nf_conn *ct = (void *)ul_conntrack;

	pr_info("klna_death_by_timeout:\n");
	klna_print_conntrack_tuple(ct);
//	mod_timer(&amp;ct-&gt;timeout, jiffies + 400 * HZ);
	death_by_timeout_org(ul_conntrack); /* hook the original timeout */
}

#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,24)
static void unregister_death_by_timeout(void)
{
	struct nf_conntrack_tuple_hash *h;
	struct nf_conn *ct;
	struct hlist_nulls_node *n;
	unsigned int bucket = 0;
	struct net *net = &amp;init_net;

	spin_lock_bh(&amp;nf_conntrack_lock);
	/* Go over all tuples in the Linux database */
	for (; bucket &lt; net-&gt;ct.htable_size; bucket++) {
		hlist_nulls_for_each_entry(h, n, &amp;net-&gt;ct.hash[bucket], hnnode) {
			ct = nf_ct_tuplehash_to_ctrack(h);
			if (death_by_timeout_org)
				ct-&gt;timeout.function = death_by_timeout_org;
		}
	}
	spin_unlock_bh(&amp;nf_conntrack_lock);
}
#else /* LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,6,24) */
static void unregister_death_by_timeout(void)
{
	struct nf_conntrack_tuple_hash *h;
	struct nf_conn *ct;
	unsigned int bucket = 0;

	spin_lock_bh(&amp;nf_conntrack_lock);
	/* Go over all tuples in the Linux database */
	for (; bucket &lt; nf_conntrack_htable_size; bucket++) {
		list_for_each_entry(h, &amp;nf_conntrack_hash[bucket], list) {
			ct = nf_ct_tuplehash_to_ctrack(h);
			ct-&gt;timeout.function = death_by_timeout_org;
		}
	}
	spin_unlock_bh(&amp;nf_conntrack_lock);
}
#endif

#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,31)
static int klna_nc_ct_event(struct notifier_block *this,
				     unsigned long events, void *item)
{
	struct nf_conn *ct = (struct nf_conn *)item;
#else
static int klna_nc_ct_event(unsigned int events, struct nf_ct_event *item)
{
	struct nf_conn *ct = item-&gt;ct;
#endif /* LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,31) */

	struct nf_conn_help *help = nfct_help(ct);
	/* ignore fake conntrack entry */
	if (ct == &amp;nf_conntrack_untracked)
		return 0;

	if (!death_by_timeout_org)
		death_by_timeout_org = ct-&gt;timeout.function;

	if (atomic_read(&amp;en_reg_timeout_death))
		ct-&gt;timeout.function = &amp;klna_death_by_timeout;

	if (events &amp; IPCT_DESTROY) {
		pr_info("destroyed ct\n");
	} else  if (events &amp; IPCT_NEW) {
		pr_info("new ct\n");
		if (help &amp;&amp; help-&gt;helper) {
			struct nf_conntrack_helper *hlp = help-&gt;helper;
			struct nf_conntrack_tuple *tup =
				&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple;

			pr_info("new helper ct\n");
			pr_info("(%s:%d): helper name: %s, proto %u, "
				"port %u\n", __func__, __LINE__,
			       hlp-&gt;name, tup-&gt;dst.protonum, 
				ntohs(tup-&gt;dst.u.all));
		}
	} else if (events &amp; IPCT_RELATED) {
		pr_info("related ct\n");
	} else if (events &amp; IPCT_HELPER) {
		if (help &amp;&amp; help-&gt;helper) {
			struct nf_conntrack_helper *hlp = help-&gt;helper;
			struct nf_conntrack_tuple *tup =
				&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple;

			pr_info("new helper ct\n");
			pr_info("(%s:%d): helper name: %s, proto %u, "
				"dst_port %u\n", __func__, __LINE__,
			       hlp-&gt;name, tup-&gt;dst.protonum,
				ntohs(tup-&gt;dst.u.all));
		} else {
			pr_debug("new ct\n");
		}

	} else 
		return 0;

	klna_print_conntrack_tuple(ct);
	return 0;
}

#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,31)
static struct notifier_block klna_ct_notifier = {
	.notifier_call	= klna_nc_ct_event,
};
#else
static struct nf_ct_event_notifier klna_ct_notifier = {
	.fcn = klna_nc_ct_event
};
#endif /* LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,31) */

#endif /* CONFIG_NF_CONNTRACK_EVENTS */

static int
klna_nc_br_if_event(struct notifier_block *unused, unsigned long event,
			      void *ptr)
{
	struct net_device *dev = ptr;
	struct net_bridge *br = dev-&gt;br_port-&gt;br;

	switch (event) {

	case NETDEV_REGISTER:
		pr_info("if %s up at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
		break;

	case NETDEV_UNREGISTER:
		pr_info("if %s down at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
		break;
	}
	return NOTIFY_DONE;
}

static int
klna_nc_br_dev_event(struct notifier_block *unused, unsigned long event,
			      void *ptr)
{
	struct net_device *dev = ptr;
	struct net_bridge *br = netdev_priv(dev);
	int ret = NOTIFY_DONE;

	switch (event) {

	case NETDEV_REGISTER:
		pr_info("br up [%s]\n", dev-&gt;name);
		if (klna_br_reg(br))
			ret = NOTIFY_BAD;
		break;

	case NETDEV_UNREGISTER:
		pr_info("br unreg [%s]\n", dev-&gt;name);
		klna_br_unreg(br);
		break;
	}

	return ret;
}

static int
klna_nc_eth_dev_event(struct notifier_block *unused, unsigned long event,
			     void *ptr)
{
	struct net_device *dev = ptr;

	pr_info("(%s:%d) eth dev %s event %lu\n", __func__, __LINE__,
	       dev-&gt;name, event);
	switch (event) {
	case NETDEV_REGISTER:
		pr_info("eth dev register %s\n", dev-&gt;name);
		break;
	case NETDEV_UNREGISTER:
		pr_info("eth dev unregister %s\n", dev-&gt;name);
		break;
	case NETDEV_UP:
		pr_info("eth dev %s up\n", dev-&gt;name);
	case NETDEV_DOWN:
		pr_info("eth dev %s down\n", dev-&gt;name);
	case NETDEV_CHANGE:
		pr_info("eth dev %s change\n", dev-&gt;name);

	}

	return NOTIFY_DONE;
}

static int
klna_nc_pppox_dev_event(struct notifier_block *unused, unsigned long event,
			     void *ptr)
{
	struct net_device *dev = ptr;

	pr_info("(%s:%d) pppox dev %s event %lu\n", __func__, __LINE__,
	       dev-&gt;name, event);

	switch (event) {
	case NETDEV_REGISTER:
		pr_info("dev register %s\n", dev-&gt;name);
		break;
	case NETDEV_UNREGISTER:
		pr_info("dev unregister %s\n", dev-&gt;name);
		break;
	case NETDEV_UP:
		pr_info("dev %s up\n", dev-&gt;name);
		find_dev_pppoe_socks(dev);
		break;
	case NETDEV_DOWN:
		pr_info("dev %s down\n", dev-&gt;name);
		find_dev_pppoe_socks(dev);
		break;
	case NETDEV_GOING_DOWN:
		pr_info("dev %s going down\n", dev-&gt;name);
		find_dev_pppoe_socks(dev);
		break;
	}

	return NOTIFY_DONE;
}

static int
klna_nc_vlan_dev_event(struct notifier_block *unused, unsigned long event,
			     void *ptr)
{
	struct net_device *dev = ptr;
	struct vlan_dev_info *dev_info =
		(struct vlan_dev_info *)netdev_priv(dev);

	switch (event) {
	case NETDEV_REGISTER:
		pr_info("vlan register %s vid %u\n",
			dev-&gt;name, dev_info-&gt;vlan_id);
		break;
	case NETDEV_UNREGISTER:
		pr_info("vlan unreg %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
		break;
	case NETDEV_UP:
		pr_info("vlan %s up vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
		break;
	case NETDEV_DOWN:
		pr_info("vlan %s down vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
		break;
	}

	return NOTIFY_DONE;
}

/* main dispatcher for netdev events */
static int
klna_nc_netdev_event(struct notifier_block *unused, unsigned long event,
		     void *ptr)
{
	struct net_device *dev = ptr;
	
//      pr_debug("dpa_netdev_dev %s event %lu, dev_type: %#x, flags #%x\n",dev-&gt;name, event,
//      	dev-&gt;type, dev-&gt;priv_flags);

	if (dev-&gt;priv_flags &amp; IFF_802_1Q_VLAN) {
		return klna_nc_vlan_dev_event(unused, event, ptr);
	}
	if (dev-&gt;priv_flags &amp; IFF_EBRIDGE) {
		return klna_nc_br_dev_event(unused, event, ptr);
	} else if (dev-&gt;br_port) {
		return klna_nc_br_if_event(unused, event, ptr);
	}
	if (dev-&gt;type == ARPHRD_ETHER) {
		return klna_nc_eth_dev_event(unused, event, ptr);
	}
	if (dev-&gt;type == ARPHRD_PPP) {
		return klna_nc_pppox_dev_event(unused, event, ptr);
	}

	return NOTIFY_DONE;
}

static struct notifier_block klna_netdev_notifier __read_mostly = {
	.notifier_call = klna_nc_netdev_event,
};

int klna_nc_init(void)
{
	int err = 0;

	pr_info("init\n");
	err = klna_br_fdb_init();
	if (err)
		goto exit;

	err = register_netdevice_notifier(&amp;klna_netdev_notifier);
	if (err) {
		unregister_netdevice_notifier(&amp;klna_netdev_notifier);
	}
#ifdef CONFIG_NF_CONNTRACK_EVENTS
	if (!no_ct) {
		pr_info("reg nf_conntrack\n");
		err = nf_conntrack_register_notifier(&amp;klna_ct_notifier);
		if (err) {
			nf_conntrack_unregister_notifier(&amp;klna_ct_notifier);
		}
	}
#else
	#warning "CONFIG_NF_CONNTRACK_EVENTS undefined!"
#endif
exit :
	return err;
}

void klna_nc_exit(void)
{
	pr_info("exit\n");
	unregister_netdevice_notifier(&amp;klna_netdev_notifier);
#ifdef CONFIG_NF_CONNTRACK_EVENTS
	if (!no_ct) {
		pr_info("unreg nf_ct\n");
		atomic_set(&amp;en_reg_timeout_death, 0);
		nf_conntrack_unregister_notifier(&amp;klna_ct_notifier);
		unregister_death_by_timeout();
	}
#endif
	klna_br_fdb_exit();
}
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/05/01" Time="11:53:9000">
<Copy StartSeek="0" EndSeek="2330"/>
<Copy StartSeek="2446" EndSeek="8214"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:13:56000">
<Copy StartSeek="0" EndSeek="2442"/>
<Insert>
}

</Insert>
<Copy StartSeek="2516" EndSeek="8284"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:15:14000">
<Copy StartSeek="0" EndSeek="2330"/>
<Copy StartSeek="2390" EndSeek="8344"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:17:35000">
<Copy StartSeek="0" EndSeek="2330"/>
<Insert>static void (*death_by_timeout)(unsigned long ul_conntrack)
</Insert>
<Copy StartSeek="2391" EndSeek="8345"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:17:57000">
<Copy StartSeek="0" EndSeek="2859"/>
<Copy StartSeek="2932" EndSeek="8418"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:18:38000">
<Copy StartSeek="0" EndSeek="2574"/>
<Insert>}

</Insert>
<Copy StartSeek="2610" EndSeek="8451"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:19:48000">
<Copy StartSeek="0" EndSeek="2574"/>
<Insert>	death_by_timeout(ul_conntrack);
</Insert>
<Copy StartSeek="2643" EndSeek="8487"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:20:2000">
<Copy StartSeek="0" EndSeek="2330"/>
<Insert>static void (*death_by_timeout)(unsigned long ul_conntrack);
</Insert>
<Copy StartSeek="2395" EndSeek="8491"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:20:11000">
<Copy StartSeek="0" EndSeek="2578"/>
<Insert>	death_by_timeout(ul_conntrack); /* call the original kernel func */
</Insert>
<Copy StartSeek="2651" EndSeek="8495"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:20:15000">
<Copy StartSeek="0" EndSeek="2936"/>
<Insert>	if (!death_by_timeout) {
		death_by_timeout = &amp;ct-&gt;timeout.function;
</Insert>
<Copy StartSeek="3014" EndSeek="8503"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:20:21000">
<Copy StartSeek="0" EndSeek="2507"/>
<Copy StartSeek="2552" EndSeek="8548"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:22:57000">
<Copy StartSeek="0" EndSeek="3059"/>
<Insert>	}
</Insert>
<Copy StartSeek="3112" EndSeek="8598"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:23:55000">
<Copy StartSeek="0" EndSeek="2443"/>
<Insert>static void klna_death_by_timeout(unsigned long ul_conntrack)
</Insert>
<Copy StartSeek="2514" EndSeek="8607"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:24:43000">
<Copy StartSeek="0" EndSeek="2443"/>
<Insert>static volatile void klna_death_by_timeout(unsigned long ul_conntrack)
</Insert>
<Copy StartSeek="2505" EndSeek="8598"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:25:24000">
<Copy StartSeek="0" EndSeek="3059"/>
<Insert>		ct-&gt;timeout.function = &amp;klna_death_by_timeout; 
</Insert>
<Copy StartSeek="3062" EndSeek="3065"/>
<Copy StartSeek="3114" EndSeek="8600"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:49:0000">
<Copy StartSeek="0" EndSeek="3059"/>
<Insert>		
	}
</Insert>
<Copy StartSeek="3062" EndSeek="8597"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:49:5000">
<Copy StartSeek="0" EndSeek="2443"/>
<Insert>static void klna_death_by_timeout(unsigned long ul_conntrack)
</Insert>
<Copy StartSeek="2498" EndSeek="8590"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:49:41000">
<Copy StartSeek="0" EndSeek="2330"/>
<Insert>static void (*death_by_timeout_org)(unsigned long ul_conntrack);
</Insert>
<Copy StartSeek="2402" EndSeek="8597"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:51:40000">
<Copy StartSeek="0" EndSeek="3011"/>
<Copy StartSeek="3055" EndSeek="8641"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:54:42000">
<Copy StartSeek="0" EndSeek="3011"/>
<Insert>		pr_info("updating ct-&gt;timeout.function");
</Insert>
<Copy StartSeek="3057" EndSeek="8643"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:54:49000">
<Copy StartSeek="0" EndSeek="3187"/>
<Insert>		pr_info("destroyed ct \n");
</Insert>
<Copy StartSeek="3216" EndSeek="8642"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:54:52000">
<Copy StartSeek="0" EndSeek="3011"/>
<Insert>		pr_info("updating ct-&gt;timeout.function"\n);
</Insert>
<Copy StartSeek="3057" EndSeek="8642"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:54:58000">
<Copy StartSeek="0" EndSeek="3011"/>
<Insert>		pr_info("updating ct-&gt;timeout.function\n");
</Insert>
<Copy StartSeek="3011" EndSeek="3062"/>
<Copy StartSeek="3107" EndSeek="8641"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="11:55:8000">
<Copy StartSeek="0" EndSeek="3746"/>
<Copy StartSeek="3922" EndSeek="8817"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:04:51000">
<Copy StartSeek="0" EndSeek="3156"/>
<Copy StartSeek="3157" EndSeek="3187"/>
<Insert>		pr_info("destroyed ct\n");
</Insert>
<Copy StartSeek="3217" EndSeek="8819"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:06:10000">
<Copy StartSeek="0" EndSeek="3778"/>
<Insert>		death_by_timeout_org = &amp;ct-&gt;timeout.function;
</Insert>
<Copy StartSeek="3828" EndSeek="8821"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:07:38000">
<Copy StartSeek="0" EndSeek="2330"/>
<Insert>static void (*death_by_timeout_org)(unsigned long ul_conntrack) = NULL;
</Insert>
<Copy StartSeek="2389" EndSeek="8808"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:08:49000">
<Copy StartSeek="0" EndSeek="1190"/>
<Copy StartSeek="1250" EndSeek="2390"/>
<Insert>static void (*death_by_timeout_org)(unsigned long) = NULL;
</Insert>
<Copy StartSeek="2391" EndSeek="8810"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:09:17000">
<Copy StartSeek="0" EndSeek="1056"/>
<Insert>struct sock *(*org_sk_alloc)(int family, gfp_t priority,
		      struct proto *prot, int zero_it);
</Insert>
<Copy StartSeek="1056" EndSeek="8711"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:10:32000">
<Copy StartSeek="0" EndSeek="2292"/>
<Insert>/* we override the ct-&gt;timeout with this one */
</Insert>
<Copy StartSeek="2326" EndSeek="8697"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:11:8000">
<Copy StartSeek="0" EndSeek="2292"/>
<Insert>/* overrides the ct-&gt;timeout() */
</Insert>
<Copy StartSeek="2322" EndSeek="8693"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:11:12000">
<Copy StartSeek="0" EndSeek="2292"/>
<Insert>/* overrides ct-&gt;timeout() */
</Insert>
<Copy StartSeek="2332" EndSeek="8703"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:12:29000">
<Copy StartSeek="0" EndSeek="3660"/>
<Insert>		death_by_timeout_org = &amp;(ct-&gt;timeout.function);
</Insert>
<Copy StartSeek="3707" EndSeek="8700"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:14:54000">
<Copy StartSeek="0" EndSeek="2893"/>
<Insert>		death_by_timeout_org = &amp;ct-&gt;timeout.function;
</Insert>
<Copy StartSeek="2940" EndSeek="8699"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:15:6000">
<Copy StartSeek="0" EndSeek="3709"/>
<Insert>	pr_info("updating ct-&gt;timeout.function\n");
</Insert>
<Copy StartSeek="3709" EndSeek="8654"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:16:41000">
<Copy StartSeek="0" EndSeek="2943"/>
<Insert>	pr_info("updating ct-&gt;timeout.function\n");
</Insert>
<Copy StartSeek="2943" EndSeek="8609"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:16:50000">
<Copy StartSeek="0" EndSeek="2291"/>
<Insert>
</Insert>
<Copy StartSeek="2291" EndSeek="8608"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:17:23000">
<Copy StartSeek="0" EndSeek="3382"/>
<Insert>
</Insert>
<Copy StartSeek="3531" EndSeek="3612"/>
<Insert>{
</Insert>
<Copy StartSeek="3672" EndSeek="8814"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:39:34000">
<Copy StartSeek="0" EndSeek="2580"/>
<Insert>#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,31)
static int klna_nc_ct_event(struct notifier_block *this,
				     unsigned long events, void *item)
{
	struct nf_conn *ct = (struct nf_conn *)item;

	/* ignore fake conntrack entry */
	if (ct == &amp;nf_conntrack_untracked)
		return 0;

	if (!death_by_timeout_org) {
		death_by_timeout_org = ct-&gt;timeout.function;
	}
	ct-&gt;timeout.function = &amp;klna_death_by_timeout; 

	if (events &amp; IPCT_DESTROY) {
		pr_info("destroyed ct \n");
		klna_print_conntrack_tuple(ct);
	} else  if (events &amp; IPCT_NEW) {
		pr_info("new ct\n");
		klna_print_conntrack_tuple(ct);
	} else if (events &amp; IPCT_RELATED) {
		pr_info("related ct\n");
		klna_print_conntrack_tuple(ct);
	}

	return 0;

}
</Insert>
<Copy StartSeek="2580" EndSeek="8101"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:39:44000">
<Copy StartSeek="0" EndSeek="2669"/>
<Copy StartSeek="2670" EndSeek="8102"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:39:48000">
<Copy StartSeek="0" EndSeek="7371"/>
<Copy StartSeek="7655" EndSeek="8374"/>
<Insert>	}
</Insert>
<Copy StartSeek="8378" EndSeek="8387"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:45:10000">
<Copy StartSeek="0" EndSeek="7418"/>
<Copy StartSeek="7680" EndSeek="7798"/>
<Insert>			dir = NF_CT_DIRECTION(h);
</Insert>
<Copy StartSeek="7798" EndSeek="7839"/>
<Insert>
</Insert>
<Copy StartSeek="7839" EndSeek="8619"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:46:36000">
<Copy StartSeek="0" EndSeek="7884"/>
<Insert>}

</Insert>
<Copy StartSeek="7924" EndSeek="8656"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:46:48000">
<Copy StartSeek="0" EndSeek="7679"/>
<Insert>
</Insert>
<Copy StartSeek="7679" EndSeek="8655"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:47:19000">
<Copy StartSeek="0" EndSeek="7876"/>
<Insert>		}
	}
</Insert>
<Copy StartSeek="7931" EndSeek="8703"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:48:8000">
<Copy StartSeek="0" EndSeek="1150"/>
<Insert>
</Insert>
<Copy StartSeek="1181" EndSeek="3622"/>
<Insert>#endif /* KERNEL_VERSION 2.6.31 */

</Insert>
<Copy StartSeek="3622" EndSeek="7365"/>
<Insert>static void klna_restore_death_timeout(void)
{
	struct nf_conntrack_tuple_hash *h;
	struct nf_conn *ct;
	struct nf_conntrack_tuple *tuple;
	struct hlist_nulls_node *n;
	unsigned int bucket = 0;
	struct net *net = &amp;init_net;

	spin_lock_bh(&amp;nf_conntrack_lock);
	/* Go over all tuples in the Linux database */
	for (; bucket &lt; net-&gt;ct.htable_size; bucket++) {
		hlist_nulls_for_each_entry(h, n, &amp;net-&gt;ct.hash[bucket], hnnode) {
			tuple = &amp;h[IP_CT_DIR_ORIGINAL].tuple;
			ct = nf_ct_tuplehash_to_ctrack(h);
			ct-&gt;timeout.function = death_by_timeout_org;
		}
	}
	spin_unlock_bh(&amp;nf_conntrack_lock);
}

</Insert>
<Copy StartSeek="7365" EndSeek="8097"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:52:34000">
<Copy StartSeek="0" EndSeek="1150"/>
<Insert>int update_timeout_death = 1;
</Insert>
<Copy StartSeek="1205" EndSeek="3212"/>
<Insert>	ct-&gt;timeout.function = &amp;klna_death_by_timeout; 

</Insert>
<Copy StartSeek="3290" EndSeek="8150"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="12:59:35000">
<Copy StartSeek="0" EndSeek="8141"/>
<Copy StartSeek="8179" EndSeek="8188"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="13:00:13000">
<Copy StartSeek="0" EndSeek="8141"/>
<Insert>	atomic_set(&amp;update_timeout_death,0);
</Insert>
<Copy StartSeek="8180" EndSeek="8189"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="13:00:15000">
<Copy StartSeek="0" EndSeek="8141"/>
<Insert>	atomic_set(&amp;update_timeout_death, 0);
</Insert>
<Copy StartSeek="8181" EndSeek="8190"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="13:00:23000">
<Copy StartSeek="0" EndSeek="1150"/>
<Insert>static atomic_t update_timeout_death = ATOMIC_INIT(1);
</Insert>
<Copy StartSeek="1206" EndSeek="3213"/>
<Insert>	if (update_timeout_death)
</Insert>
<Copy StartSeek="3241" EndSeek="8192"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="13:00:45000">
<Copy StartSeek="0" EndSeek="3213"/>
<Insert>	if (replace_timeout_death)
</Insert>
<Copy StartSeek="3254" EndSeek="8205"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="13:01:15000">
<Copy StartSeek="0" EndSeek="2726"/>
<Copy StartSeek="3399" EndSeek="8878"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:29:2000">
<Copy StartSeek="0" EndSeek="3395"/>
<Insert>
}

</Insert>
<Copy StartSeek="3398" EndSeek="8877"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:29:4000">
<Copy StartSeek="0" EndSeek="3271"/>
<Insert>			tuple = &amp;h[IP_CT_DIR_ORIGINAL].tuple;

</Insert>
<Copy StartSeek="3271" EndSeek="8835"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:29:27000">
<Copy StartSeek="0" EndSeek="3242"/>
<Insert>			dir = NF_CT_DIRECTION(h);
</Insert>
<Copy StartSeek="3242" EndSeek="8806"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:32:40000">
<Copy StartSeek="0" EndSeek="2828"/>
<Insert>	struct nf_conntrack_tuple *tuple;
	struct nf_conntrack_tuple target_tuple;
</Insert>
<Copy StartSeek="2828" EndSeek="8730"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:32:55000">
<Copy StartSeek="0" EndSeek="2883"/>
<Insert>	enum ip_conntrack_dir dir;
</Insert>
<Copy StartSeek="2883" EndSeek="8702"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:33:9000">
<Copy StartSeek="0" EndSeek="2913"/>
<Insert>	unsigned long status;

</Insert>
<Copy StartSeek="2914" EndSeek="8679"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:33:21000">
<Copy StartSeek="0" EndSeek="3153"/>
<Insert>		}
	}
</Insert>
<Copy StartSeek="3208" EndSeek="8727"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:36:34000">
<Copy StartSeek="0" EndSeek="2726"/>
<Insert>static void restore_death_by_timeout(void)
</Insert>
<Copy StartSeek="2772" EndSeek="8730"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:37:1000">
<Copy StartSeek="0" EndSeek="1150"/>
<Insert>static atomic_t replace_timeout_death = ATOMIC_INIT(1);
</Insert>
<Copy StartSeek="1205" EndSeek="3737"/>
<Insert>	if (atomic_read(replace_timeout_death))
</Insert>
<Copy StartSeek="3777" EndSeek="8679"/>
<Insert>	atomic_set(&amp;replace_timeout_death, 0);
</Insert>
<Copy StartSeek="8750" EndSeek="8759"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:37:39000">
<Copy StartSeek="0" EndSeek="3737"/>
<Insert>	if (atomic_read(en_reg_timeout_death))
</Insert>
<Copy StartSeek="3778" EndSeek="8760"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:38:34000">
<Copy StartSeek="0" EndSeek="2635"/>
<Insert>static struct notifier_block klna_ct_notifier = {
	.notifier_call	= klna_nc_ct_event,
};

</Insert>
<Copy StartSeek="2635" EndSeek="4039"/>
<Insert>
</Insert>
<Copy StartSeek="4129" EndSeek="8759"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:40:36000">
<Copy StartSeek="0" EndSeek="4039"/>
<Insert>static struct notifier_block klna_ct_notifier = {
	.notifier_call	= klna_nc_ct_event,
};

</Insert>
<Copy StartSeek="4089" EndSeek="4173"/>
<Copy StartSeek="4327" EndSeek="8873"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:42:26000">
<Copy StartSeek="0" EndSeek="652"/>
<Copy StartSeek="697" EndSeek="8918"/>
</Delta>
<Delta Version="66" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:42:52000">
<Copy StartSeek="0" EndSeek="3254"/>
<Copy StartSeek="3335" EndSeek="3435"/>
<Insert>#else
static int klna_nc_ct_event(unsigned int events, struct nf_ct_event *item)
</Insert>
<Copy StartSeek="3435" EndSeek="8918"/>
</Delta>
<Delta Version="67" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:44:2000">
<Copy StartSeek="0" EndSeek="3495"/>
<Insert>	struct nf_conn *ct = item-&gt;ct;
</Insert>
<Copy StartSeek="3545" EndSeek="8936"/>
</Delta>
<Delta Version="68" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:44:29000">
<Copy StartSeek="0" EndSeek="4152"/>
<Insert>static struct nf_ct_event_notifier klna_ct_notifier = {
	.fcn = klna_nc_ct_event
};
#else
</Insert>
<Copy StartSeek="4152" EndSeek="4241"/>
<Copy StartSeek="4331" EndSeek="8936"/>
</Delta>
<Delta Version="69" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:45:8000">
<Copy StartSeek="0" EndSeek="3329"/>
<Copy StartSeek="3380" EndSeek="3546"/>
<Insert>	struct nf_conn *ct = (struct nf_conn *)item-&gt;ct;
</Insert>
<Copy StartSeek="3578" EndSeek="8969"/>
</Delta>
<Delta Version="70" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:47:8000">
<Copy StartSeek="0" EndSeek="3331"/>
<Insert>	struct nf_conn *ct = (struct nf_conn*)item-&gt;ct;
</Insert>
<Copy StartSeek="3363" EndSeek="8952"/>
</Delta>
<Delta Version="71" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:47:26000">
<Copy StartSeek="0" EndSeek="3529"/>
<Insert>	struct nf_conn *ct = item-&gt;ct;
</Insert>
<Copy StartSeek="3581" EndSeek="8972"/>
</Delta>
<Delta Version="72" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:47:39000">
<Copy StartSeek="0" EndSeek="3529"/>
<Insert>	struct nf_conn *ct = (struct nf_conn *ct)item-&gt;ct;
</Insert>
<Copy StartSeek="3579" EndSeek="8970"/>
</Delta>
<Delta Version="73" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:47:59000">
<Copy StartSeek="0" EndSeek="3254"/>
<Insert>static int klna_nc_ct_event(unsigned int events, struct nf_ct_event *item)
{
	struct nf_conn *ct = item-&gt;ct;
#else
</Insert>
<Copy StartSeek="3254" EndSeek="3354"/>
<Copy StartSeek="3470" EndSeek="8971"/>
</Delta>
<Delta Version="74" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:49:52000">
<Copy StartSeek="0" EndSeek="3435"/>
<Insert>{
</Insert>
<Copy StartSeek="3435" EndSeek="8969"/>
</Delta>
<Delta Version="75" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:50:28000">
<Copy StartSeek="0" EndSeek="3354"/>
<Copy StartSeek="3406" EndSeek="3487"/>
<Copy StartSeek="3489" EndSeek="3521"/>
<Insert>
</Insert>
<Copy StartSeek="3521" EndSeek="3579"/>
<Insert>{
	struct nf_conn *ct = (struct nf_conn *)item-&gt;ct;

</Insert>
<Copy StartSeek="3580" EndSeek="8970"/>
</Delta>
<Delta Version="76" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:51:31000">
<Copy StartSeek="0" EndSeek="3254"/>
<Insert>static int klna_nc_ct_event(struct notifier_block *this,
				     unsigned long events, void *item)
{
</Insert>
<Copy StartSeek="3347" EndSeek="8961"/>
</Delta>
<Delta Version="77" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:51:44000">
<Copy StartSeek="0" EndSeek="3254"/>
<Insert>static int klna_nc_ct_event(struct notifier_block *this, unsigned long events, void *item)
{
</Insert>
<Copy StartSeek="3356" EndSeek="8970"/>
</Delta>
<Delta Version="78" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="14:51:52000">
<Copy StartSeek="0" EndSeek="2680"/>
<Copy StartSeek="2730" EndSeek="3254"/>
<Copy StartSeek="3789" EndSeek="3790"/>
<Copy StartSeek="3798" EndSeek="9563"/>
</Delta>
<Delta Version="79" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="15:58:58000">
<Copy StartSeek="0" EndSeek="3789"/>
<Insert>
</Insert>
<Copy StartSeek="3789" EndSeek="9562"/>
</Delta>
<Delta Version="80" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="15:59:2000">
<Copy StartSeek="0" EndSeek="3420"/>
<Insert>	struct net *net = &amp;init_net;

</Insert>
<Copy StartSeek="3421" EndSeek="9532"/>
</Delta>
<Delta Version="81" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="15:59:30000">
<Copy StartSeek="0" EndSeek="3504"/>
<Copy StartSeek="3509" EndSeek="3564"/>
<Insert>		hlist_nulls_for_each_entry(h, n, &amp;net-&gt;ct.hash[bucket], hnnode) {
</Insert>
<Copy StartSeek="3625" EndSeek="9530"/>
</Delta>
<Delta Version="82" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:25:37000">
<Copy StartSeek="0" EndSeek="3504"/>
<Insert>




</Insert>
<Copy StartSeek="3504" EndSeek="9525"/>
</Delta>
<Delta Version="83" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:25:41000">
<Copy StartSeek="0" EndSeek="3365"/>
<Insert>	struct hlist_nulls_node *n;
</Insert>
<Copy StartSeek="3365" EndSeek="9496"/>
</Delta>
<Delta Version="84" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:26:1000">
<Copy StartSeek="0" EndSeek="3882"/>
<Insert>	struct nf_conn *ct = (struct nf_conn *)item-&gt;ct;
</Insert>
<Copy StartSeek="3934" EndSeek="9498"/>
</Delta>
<Delta Version="85" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:27:27000">
<Copy StartSeek="0" EndSeek="4017"/>
<Insert>	struct nf_conn *ct = item-&gt;ct;
</Insert>
<Copy StartSeek="4063" EndSeek="9512"/>
</Delta>
<Delta Version="86" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:29:19000">
<Copy StartSeek="0" EndSeek="3882"/>
<Insert>	struct nf_conn *ct = ((struct nf_conn *)item)-&gt;ct;
</Insert>
<Copy StartSeek="3928" EndSeek="4011"/>
<Insert>	struct nf_conn *ct = (struct nf_conn *)item;
</Insert>
<Copy StartSeek="4043" EndSeek="9492"/>
</Delta>
<Delta Version="87" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:29:44000">
<Copy StartSeek="0" EndSeek="2680"/>
<Insert>
</Insert>
<Copy StartSeek="2680" EndSeek="9491"/>
</Delta>
<Delta Version="88" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:35:46000">
<Copy StartSeek="0" EndSeek="4306"/>
<Insert>		ct-&gt;timeout.function = &amp;klna_death_by_timeout; 
</Insert>
<Copy StartSeek="4355" EndSeek="9490"/>
</Delta>
<Delta Version="89" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:41:42000">
<Copy StartSeek="0" EndSeek="9406"/>
<Insert>
	}
</Insert>
<Copy StartSeek="9409" EndSeek="9489"/>
</Delta>
<Delta Version="90" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:42:19000">
<Copy StartSeek="0" EndSeek="2604"/>
<Insert>	death_by_timeout_org(ul_conntrack); /* call the original kernel func */
</Insert>
<Copy StartSeek="2673" EndSeek="9485"/>
</Delta>
<Delta Version="91" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:43:8000">
<Copy StartSeek="0" EndSeek="2604"/>
<Insert>	death_by_timeout_org(ul_conntrack); /* call the original timeout */
</Insert>
<Copy StartSeek="2673" EndSeek="9485"/>
</Delta>
<Delta Version="92" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:43:15000">
<Copy StartSeek="0" EndSeek="2604"/>
<Insert>	death_by_timeout_org(ul_conntrack); /* hook the original timeout */
}

</Insert>
<Copy StartSeek="2715" EndSeek="9524"/>
</Delta>
<Delta Version="93" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:47:42000">
<Copy StartSeek="0" EndSeek="2604"/>
<Insert>	mod_timer(&amp;ct-&gt;timeout, 6666);
</Insert>
<Copy StartSeek="2646" EndSeek="9534"/>
</Delta>
<Delta Version="94" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:49:11000">
<Copy StartSeek="0" EndSeek="2604"/>
<Insert>	mod_timer(&amp;ct-&gt;timeout, jiffies + 6666);
</Insert>
<Copy StartSeek="2645" EndSeek="9533"/>
</Delta>
<Delta Version="95" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="16:56:2000">
<Copy StartSeek="0" EndSeek="2604"/>
<Insert>	mod_timer(&amp;ct-&gt;timeout, jiffies + 666);
</Insert>
<Copy StartSeek="2648" EndSeek="9536"/>
</Delta>
<Delta Version="96" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="17:05:10000">
<Copy StartSeek="0" EndSeek="2604"/>
<Insert>	mod_timer(&amp;ct-&gt;timeout, jiffies + 3 * HZ);
</Insert>
<Copy StartSeek="2650" EndSeek="9538"/>
</Delta>
<Delta Version="97" Comment="" NL="\10" Encoding="text" Date="2012/05/02" Time="17:10:51000">
<Copy StartSeek="0" EndSeek="4688"/>
<Copy StartSeek="4783" EndSeek="9633"/>
</Delta>
<Delta Version="98" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="12:19:10000">
<Copy StartSeek="0" EndSeek="4465"/>
<Insert>		klna_print_conntrack_tuple(ct);
</Insert>
<Copy StartSeek="4465" EndSeek="4522"/>
<Insert>		klna_print_conntrack_tuple(ct);
</Insert>
<Copy StartSeek="4522" EndSeek="4586"/>
<Insert>		klna_print_conntrack_tuple(ct);
	else if (events &amp; IPCT_HELPER) {
</Insert>
<Copy StartSeek="4622" EndSeek="4649"/>
<Insert>		klna_print_conntrack_tuple(ct);
	}
</Insert>
<Copy StartSeek="4670" EndSeek="4671"/>
<Copy StartSeek="4704" EndSeek="9550"/>
</Delta>
<Delta Version="99" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="12:21:54000">
<Copy StartSeek="0" EndSeek="4622"/>
<Insert>		pr_info("related ct\n");
</Insert>
<Copy StartSeek="4652" EndSeek="9553"/>
</Delta>
<Delta Version="100" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="12:22:33000">
<Copy StartSeek="0" EndSeek="4435"/>
<Insert>		pr_info("destroyed ct \n");
</Insert>
<Copy StartSeek="4464" EndSeek="4498"/>
<Insert>		pr_info("new ct\n");
</Insert>
<Copy StartSeek="4521" EndSeek="4558"/>
<Insert>		pr_info("related ct\n");
</Insert>
<Copy StartSeek="4585" EndSeek="4621"/>
<Insert>		pr_info("new helper ct\n");
</Insert>
<Copy StartSeek="4651" EndSeek="9552"/>
</Delta>
<Delta Version="101" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="12:25:32000">
<Copy StartSeek="0" EndSeek="4435"/>
<Insert>		pr_info("destroyed ct: ");
</Insert>
<Copy StartSeek="4464" EndSeek="4498"/>
<Insert>		pr_info("new ct: ");
</Insert>
<Copy StartSeek="4521" EndSeek="4558"/>
<Insert>		pr_info("related ct: ");
</Insert>
<Copy StartSeek="4585" EndSeek="4621"/>
<Insert>		pr_info("new helper ct: ");
</Insert>
<Copy StartSeek="4651" EndSeek="9552"/>
</Delta>
<Delta Version="102" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="12:27:46000">
<Copy StartSeek="0" EndSeek="4621"/>
<Copy StartSeek="4645" EndSeek="9576"/>
</Delta>
<Delta Version="103" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="14:13:20000">
<Copy StartSeek="0" EndSeek="4621"/>
<Insert>		help = nfct_help(ct);
</Insert>
<Copy StartSeek="4666" EndSeek="9597"/>
</Delta>
<Delta Version="104" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="14:20:43000">
<Copy StartSeek="0" EndSeek="697"/>
<Copy StartSeek="744" EndSeek="9644"/>
</Delta>
<Delta Version="105" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="14:44:13000">
<Copy StartSeek="0" EndSeek="4713"/>
<Copy StartSeek="4759" EndSeek="9690"/>
</Delta>
<Delta Version="106" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="14:51:31000">
<Copy StartSeek="0" EndSeek="4713"/>
<Insert>		pr_info("helper: %s\n",help-&gt;helper-&gt;name);
</Insert>
<Copy StartSeek="4760" EndSeek="9691"/>
</Delta>
<Delta Version="107" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="14:51:36000">
<Copy StartSeek="0" EndSeek="4713"/>
<Insert>		pr_info("helper: %s\n", help-&gt;helper-&gt;name);
</Insert>
<Copy StartSeek="4779" EndSeek="9710"/>
</Delta>
<Delta Version="108" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="14:55:50000">
<Copy StartSeek="0" EndSeek="4668"/>
<Insert>		struct nf_conn_help *help = nfct_help(ct);
		pr_info("helper: %s\n", (help ? help-&gt;helper-&gt;name : " NULL"));
</Insert>
<Copy StartSeek="4668" EndSeek="9599"/>
</Delta>
<Delta Version="109" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="14:59:42000">
<Copy StartSeek="0" EndSeek="2651"/>
<Insert>	mod_timer(&amp;ct-&gt;timeout, jiffies + 400 * HZ);
//      death_by_timeout_org(ul_conntrack); /* hook the original timeout */
</Insert>
<Copy StartSeek="2768" EndSeek="9594"/>
</Delta>
<Delta Version="110" Comment="" NL="\10" Encoding="text" Date="2012/05/03" Time="15:56:18000">
<Copy StartSeek="0" EndSeek="2580"/>
<Insert>	pr_info("klna_death_by_timeout:\n");
	klna_print_conntrack_tuple(ct);
</Insert>
<Copy StartSeek="2665" EndSeek="9608"/>
</Delta>
<Delta Version="111" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="11:06:21000">
<Copy StartSeek="0" EndSeek="4707"/>
<Copy StartSeek="5016" EndSeek="9917"/>
</Delta>
<Delta Version="112" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="11:48:25000">
<Copy StartSeek="0" EndSeek="4205"/>
<Insert>
</Insert>
<Copy StartSeek="4233" EndSeek="9944"/>
</Delta>
<Delta Version="113" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="11:50:14000">
<Copy StartSeek="0" EndSeek="4205"/>
<Copy StartSeek="4206" EndSeek="9945"/>
</Delta>
<Delta Version="114" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="11:50:16000">
<Copy StartSeek="0" EndSeek="4705"/>
<Insert>		pr_info("new helper ct\n");
</Insert>
<Copy StartSeek="4705" EndSeek="4859"/>
<Copy StartSeek="4890" EndSeek="9946"/>
</Delta>
<Delta Version="115" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="11:51:39000">
<Copy StartSeek="0" EndSeek="4890"/>
<Insert>			printk(KERN_ERR "(%s:%d) HAIM: helper name: %s, proto %u, port %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="4978" EndSeek="9941"/>
</Delta>
<Delta Version="116" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="11:51:48000">
<Copy StartSeek="0" EndSeek="5035"/>
<Insert>		}

</Insert>
<Copy StartSeek="5075" EndSeek="9976"/>
</Delta>
<Delta Version="117" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="11:54:34000">
<Copy StartSeek="0" EndSeek="3358"/>
<Insert>#else
</Insert>
<Copy StartSeek="3414" EndSeek="10026"/>
</Delta>
<Delta Version="118" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="13:07:1000">
<Copy StartSeek="0" EndSeek="2580"/>
<Insert>//      pr_info("klna_death_by_timeout:\n");
//      klna_print_conntrack_tuple(ct);
</Insert>
<Copy StartSeek="2651" EndSeek="10012"/>
</Delta>
<Delta Version="119" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="13:10:3000">
<Copy StartSeek="0" EndSeek="4641"/>
<Copy StartSeek="4951" EndSeek="10322"/>
</Delta>
<Delta Version="120" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="15:30:32000">
<Copy StartSeek="0" EndSeek="4242"/>
<Insert>	struct nf_conn_help *help;
</Insert>
<Copy StartSeek="4286" EndSeek="10338"/>
</Delta>
<Delta Version="121" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="15:31:2000">
<Copy StartSeek="0" EndSeek="5067"/>
<Insert>		help = nfct_help(ct);
</Insert>
<Copy StartSeek="5098" EndSeek="10345"/>
</Delta>
<Delta Version="122" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="15:31:5000">
<Copy StartSeek="0" EndSeek="5067"/>
<Insert>//      	help = nfct_help(ct);
</Insert>
<Copy StartSeek="5067" EndSeek="10314"/>
</Delta>
<Delta Version="123" Comment="" NL="\10" Encoding="text" Date="2012/05/06" Time="15:32:7000">
<Copy StartSeek="0" EndSeek="5316"/>
<Insert>			       hlp-&gt;name, tup-&gt;dst.protonum, tup-&gt;dst.u.all);
</Insert>
<Copy StartSeek="5378" EndSeek="10319"/>
</Delta>
<Delta Version="124" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:25:18000">
<Copy StartSeek="0" EndSeek="5148"/>
<Insert>			struct nf_conntrack_tuple *tup = &amp;hlp-&gt;tuple;
</Insert>
<Copy StartSeek="5232" EndSeek="10354"/>
</Delta>
<Delta Version="125" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:28:12000">
<Copy StartSeek="0" EndSeek="5351"/>
<Insert>			       hlp-&gt;name, tup-&gt;dst.protonum, tup-&gt;dst.u.tcp.port);
</Insert>
<Copy StartSeek="5420" EndSeek="10361"/>
</Delta>
<Delta Version="126" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:28:59000">
<Copy StartSeek="0" EndSeek="5351"/>
<Insert>			       hlp-&gt;name, tup-&gt;dst.protonum, ntohs(tup-&gt;dst.u.tcp.port));
</Insert>
<Copy StartSeek="5415" EndSeek="10356"/>
</Delta>
<Delta Version="127" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:29:28000">
<Copy StartSeek="0" EndSeek="5263"/>
<Insert>			printk(KERN_ERR "(%s:%d): helper name: %s, proto %u, port %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="5355" EndSeek="10360"/>
</Delta>
<Delta Version="128" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:29:58000">
<Copy StartSeek="0" EndSeek="4738"/>
<Insert>			struct nf_conntrack_tuple *tup = &amp;hlp-&gt;tuple;
</Insert>
<Copy StartSeek="4822" EndSeek="5183"/>
<Insert>			struct nf_conntrack_tuple *tup = 
				&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple;

</Insert>
<Copy StartSeek="5187" EndSeek="10315"/>
</Delta>
<Delta Version="129" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:31:22000">
<Copy StartSeek="0" EndSeek="5183"/>
<Insert>			
</Insert>
<Copy StartSeek="5267" EndSeek="10395"/>
</Delta>
<Delta Version="130" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:31:37000">
<Copy StartSeek="0" EndSeek="4941"/>
<Insert>			       hlp-&gt;name, tup-&gt;dst.protonum, tup-&gt;dst.u.all);
</Insert>
<Copy StartSeek="5005" EndSeek="10402"/>
</Delta>
<Delta Version="131" Comment="" NL="\10" Encoding="text" Date="2012/05/07" Time="15:32:18000">
<Copy StartSeek="0" EndSeek="8717"/>
<Copy StartSeek="9649" EndSeek="11334"/>
</Delta>
<Delta Version="132" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:07:51000">
<Copy StartSeek="0" EndSeek="8760"/>
<Insert>int klna_br_fdb_fillbuf(struct net_bridge *br)
</Insert>
<Copy StartSeek="8804" EndSeek="11331"/>
</Delta>
<Delta Version="133" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:08:16000">
<Copy StartSeek="0" EndSeek="8806"/>
<Insert>	struct __fdb_entry *fe = buf;
</Insert>
<Copy StartSeek="8806" EndSeek="11300"/>
</Delta>
<Delta Version="134" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:08:19000">
<Copy StartSeek="0" EndSeek="9088"/>
<Insert>			memcpy(fe-&gt;mac_addr, f-&gt;addr.addr, ETH_ALEN);
</Insert>
<Copy StartSeek="9144" EndSeek="11307"/>
</Delta>
<Delta Version="135" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:08:30000">
<Copy StartSeek="0" EndSeek="9144"/>
<Insert>			fe-&gt;port_no = f-&gt;dst-&gt;port_no;
			fe-&gt;is_local = f-&gt;is_local;
</Insert>
<Copy StartSeek="9223" EndSeek="11321"/>
</Delta>
<Delta Version="136" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:08:34000">
<Copy StartSeek="0" EndSeek="9039"/>
<Insert>			/* convert from internal format to API */
			
</Insert>
<Copy StartSeek="9039" EndSeek="11272"/>
</Delta>
<Delta Version="137" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:08:42000">
<Copy StartSeek="0" EndSeek="9174"/>
<Insert>			if (!f-&gt;is_static)
				fe-&gt;ageing_timer_value = jiffies_to_clock_t(jiffies - f-&gt;ageing_timer);
</Insert>
<Copy StartSeek="9286" EndSeek="11286"/>
</Delta>
<Delta Version="138" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:08:51000">
<Copy StartSeek="0" EndSeek="9287"/>
<Insert>			printk("fdb[%u]: "MAC_FMT(f-&gt;addr.addr) ", port:%s, local:%u, "
</Insert>
<Copy StartSeek="9357" EndSeek="11289"/>
</Delta>
<Delta Version="139" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:09:3000">
<Copy StartSeek="0" EndSeek="9287"/>
<Insert>			printk("fdb[%u]: " , MAC_FMT(f-&gt;addr.addr) ", port:%s, local:%u, "
</Insert>
<Copy StartSeek="9355" EndSeek="11287"/>
</Delta>
<Delta Version="140" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:09:9000">
<Copy StartSeek="0" EndSeek="8717"/>
<Copy StartSeek="8871" EndSeek="11441"/>
</Delta>
<Delta Version="141" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:09:24000">
<Copy StartSeek="0" EndSeek="9441"/>
<Insert>			printk("fdb[%u]: " MAC_FMT(f-&gt;addr.addr) ", port:%s, local:%u, "
</Insert>
<Copy StartSeek="9495" EndSeek="11427"/>
</Delta>
<Delta Version="142" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:09:57000">
<Copy StartSeek="0" EndSeek="8741"/>
<Insert>	mac[0]), \
</Insert>
<Copy StartSeek="8763" EndSeek="11437"/>
</Delta>
<Delta Version="143" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:11:3000">
<Copy StartSeek="0" EndSeek="8741"/>
<Insert>	((char *)mac)[0]), \
</Insert>
<Copy StartSeek="8764" EndSeek="11438"/>
</Delta>
<Delta Version="144" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:11:18000">
<Copy StartSeek="0" EndSeek="8741"/>
<Insert>	((char *)&amp;mac)[0]), \
</Insert>
<Copy StartSeek="8752" EndSeek="11426"/>
</Delta>
<Delta Version="145" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:12:49000">
<Copy StartSeek="0" EndSeek="8752"/>
<Insert>	mac[1]), \
	mac[2]), \
	mac[3]), \
	mac[4]), \
	mac[5]), \
	mac[6]),
</Insert>
<Copy StartSeek="8816" EndSeek="11420"/>
</Delta>
<Delta Version="146" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:12:52000">
<Copy StartSeek="0" EndSeek="8807"/>
<Insert>	mac[6],
</Insert>
<Copy StartSeek="8815" EndSeek="11419"/>
</Delta>
<Delta Version="147" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:13:15000">
<Copy StartSeek="0" EndSeek="8807"/>
<Insert>	mac[6]
</Insert>
<Copy StartSeek="8807" EndSeek="11411"/>
</Delta>
<Delta Version="148" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:14:0000">
<Copy StartSeek="0" EndSeek="9425"/>
<Insert>			printk("fdb[%u]: " MAC_FMT ", port:%s, local:%u, "
</Insert>
<Copy StartSeek="9479" EndSeek="11411"/>
</Delta>
<Delta Version="149" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:17:45000">
<Copy StartSeek="0" EndSeek="8944"/>
<Insert>	int i;
</Insert>
<Copy StartSeek="8961" EndSeek="11420"/>
</Delta>
<Delta Version="150" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:17:52000">
<Copy StartSeek="0" EndSeek="9434"/>
<Insert>			printk("fdb[%d]: " MAC_FMT ", port:%s, local:%u, "
</Insert>
<Copy StartSeek="9488" EndSeek="11420"/>
</Delta>
<Delta Version="151" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:17:57000">
<Copy StartSeek="0" EndSeek="9672"/>
<Insert>			++fe;
			++num;
</Insert>
<Copy StartSeek="9705" EndSeek="11434"/>
</Delta>
<Delta Version="152" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:20:43000">
<Copy StartSeek="0" EndSeek="8717"/>
<Copy StartSeek="8867" EndSeek="8891"/>
<Insert>	mac[0], \
	mac[1], \
	mac[2], \
	mac[3], \
	mac[4], \
	mac[5], \
</Insert>
<Copy StartSeek="8943" EndSeek="11570"/>
</Delta>
<Delta Version="153" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:21:46000">
<Copy StartSeek="0" EndSeek="8891"/>
<Insert>	mac[0], mac[1], mac[2], \
	mac[3], mac[4], mac[5],
</Insert>
<Copy StartSeek="8940" EndSeek="11567"/>
</Delta>
<Delta Version="154" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:21:54000">
<Copy StartSeek="0" EndSeek="8867"/>
<Insert>#define MAC_ADDR(mac) \
	mac[0], mac[1], mac[2], mac[3], mac[4], mac[5],
</Insert>
<Copy StartSeek="8937" EndSeek="11564"/>
</Delta>
<Delta Version="155" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:21:59000">
<Copy StartSeek="0" EndSeek="8867"/>
<Insert>#define MAC_ADDR(mac) mac[0], mac[1], mac[2], mac[3], mac[4], mac[5],
</Insert>
<Copy StartSeek="8939" EndSeek="11566"/>
</Delta>
<Delta Version="156" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:22:9000">
<Copy StartSeek="0" EndSeek="9747"/>
<Insert>			       jiffies_to_clock_t(jiffies - f-&gt;ageing_timer))
</Insert>
<Copy StartSeek="9805" EndSeek="11567"/>
</Delta>
<Delta Version="157" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:23:17000">
<Copy StartSeek="0" EndSeek="9866"/>
<Insert>	return num;
</Insert>
<Copy StartSeek="9877" EndSeek="11565"/>
</Delta>
<Delta Version="158" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:23:24000">
<Copy StartSeek="0" EndSeek="9866"/>
<Insert>	return i;
</Insert>
<Copy StartSeek="9879" EndSeek="11567"/>
</Delta>
<Delta Version="159" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:23:47000">
<Copy StartSeek="0" EndSeek="9866"/>
<Insert>	return i-1;
</Insert>
<Copy StartSeek="9877" EndSeek="11565"/>
</Delta>
<Delta Version="160" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:23:59000">
<Copy StartSeek="0" EndSeek="8939"/>
<Insert>#define MAC_FMT "%04x:%04x:%04x:%04x:%04x:%04x"
</Insert>
<Copy StartSeek="8987" EndSeek="11565"/>
</Delta>
<Delta Version="161" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:26:47000">
<Copy StartSeek="0" EndSeek="8867"/>
<Copy StartSeek="8868" EndSeek="8940"/>
<Copy StartSeek="8956" EndSeek="11582"/>
</Delta>
<Delta Version="162" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:26:57000">
<Copy StartSeek="0" EndSeek="9004"/>
<Copy StartSeek="9011" EndSeek="11589"/>
</Delta>
<Delta Version="163" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:27:0000">
<Copy StartSeek="0" EndSeek="9342"/>
<Insert>//      		memcpy(fe-&gt;mac_addr, f-&gt;addr.addr, ETH_ALEN);
//      		fe-&gt;port_no = f-&gt;dst-&gt;port_no;
//      		fe-&gt;is_local = f-&gt;is_local;
</Insert>
<Copy StartSeek="9342" EndSeek="9694"/>
<Insert>//      		++fe;
//      		++num;
		}
	}
</Insert>
<Copy StartSeek="9701" EndSeek="11421"/>
</Delta>
<Delta Version="164" Comment="" NL="\10" Encoding="text" Date="2012/05/14" Time="10:27:22000">
<Copy StartSeek="0" EndSeek="9736"/>
<Copy StartSeek="9961" EndSeek="10844"/>
<Copy StartSeek="10845" EndSeek="11647"/>
</Delta>
<Delta Version="165" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="13:58:34000">
<Copy StartSeek="0" EndSeek="9780"/>
<Insert>	pr_info("%s:\n",__FUNC__);
</Insert>
<Copy StartSeek="9808" EndSeek="11647"/>
</Delta>
<Delta Version="166" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="13:58:45000">
<Copy StartSeek="0" EndSeek="9808"/>
<Insert>	klna_print_conntrack_tuple(ct);
//	mod_timer(&amp;ct-&gt;timeout, jiffies + 400 * HZ);
	death_by_timeout_org(ul_conntrack); /* hook the original timeout */
}

</Insert>
<Copy StartSeek="9855" EndSeek="11541"/>
</Delta>
<Delta Version="167" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="13:59:25000">
<Copy StartSeek="0" EndSeek="9736"/>
<Insert>void klna_print_fdb(unsigned long unused)
</Insert>
<Copy StartSeek="9775" EndSeek="9777"/>
<Copy StartSeek="9778" EndSeek="11539"/>
</Delta>
<Delta Version="168" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="13:59:52000">
<Copy StartSeek="0" EndSeek="9777"/>
<Insert>
</Insert>
<Copy StartSeek="9827" EndSeek="11588"/>
</Delta>
<Delta Version="169" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:00:10000">
<Copy StartSeek="0" EndSeek="9827"/>
<Copy StartSeek="9828" EndSeek="9856"/>
<Copy StartSeek="9879" EndSeek="11612"/>
</Delta>
<Delta Version="170" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:00:20000">
<Copy StartSeek="0" EndSeek="1298"/>
<Copy StartSeek="1335" EndSeek="11649"/>
</Delta>
<Delta Version="171" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:35:45000">
<Copy StartSeek="0" EndSeek="9773"/>
<Insert>void klna_print_fdb(unsigned long arg)
</Insert>
<Copy StartSeek="9812" EndSeek="9864"/>
<Insert>
</Insert>
<Copy StartSeek="9890" EndSeek="9941"/>
<Insert>	mod_timer(&amp;ct-&gt;timeout, jiffies + 5 * HZ);
</Insert>
<Copy StartSeek="9983" EndSeek="9986"/>
<Copy StartSeek="10188" EndSeek="11874"/>
</Delta>
<Delta Version="172" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:39:5000">
<Copy StartSeek="0" EndSeek="9864"/>
<Copy StartSeek="9892" EndSeek="9918"/>
<Insert>	pr_info("%s:\n",__func__);
</Insert>
<Copy StartSeek="9920" EndSeek="11876"/>
</Delta>
<Delta Version="173" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:41:54000">
<Copy StartSeek="0" EndSeek="9918"/>
<Insert>	
</Insert>
<Copy StartSeek="9918" EndSeek="11874"/>
</Delta>
<Delta Version="174" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:41:56000">
<Copy StartSeek="0" EndSeek="9864"/>
<Copy StartSeek="9865" EndSeek="11875"/>
</Delta>
<Delta Version="175" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:41:58000">
<Copy StartSeek="0" EndSeek="10054"/>
<Insert>	vp-&gt;timer.expires = jiffies + HZ;
	vp-&gt;timer.data = NULL;
	vp-&gt;timer.function = &amp;fdb_;	/* timer handler */
</Insert>
<Copy StartSeek="10183" EndSeek="11896"/>
</Delta>
<Delta Version="176" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:42:16000">
<Copy StartSeek="0" EndSeek="10054"/>
<Insert>	fdb_timer-&gt;timer.expires = jiffies + HZ;
	fdb_timer-&gt;timer.data = NULL;
	fdb_timer-&gt;timer.function = &amp;fdb_;	/* timer handler */
</Insert>
<Copy StartSeek="10162" EndSeek="11875"/>
</Delta>
<Delta Version="177" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:42:24000">
<Copy StartSeek="0" EndSeek="10189"/>
<Copy StartSeek="10190" EndSeek="11876"/>
</Delta>
<Delta Version="178" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:42:55000">
<Copy StartSeek="0" EndSeek="11544"/>
<Copy StartSeek="11563" EndSeek="11895"/>
</Delta>
<Delta Version="179" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:43:27000">
<Copy StartSeek="0" EndSeek="11544"/>
<Copy StartSeek="11545" EndSeek="11896"/>
</Delta>
<Delta Version="180" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:43:28000">
<Copy StartSeek="0" EndSeek="6220"/>
<Copy StartSeek="6258" EndSeek="11934"/>
</Delta>
<Delta Version="181" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:44:4000">
<Copy StartSeek="0" EndSeek="9811"/>
<Insert>void klna_fdb_timer(unsigned long arg)
</Insert>
<Copy StartSeek="9853" EndSeek="10154"/>
<Insert>	fdb_timer.function = &amp;fdb_;	/* timer handler */
</Insert>
<Copy StartSeek="10196" EndSeek="11930"/>
</Delta>
<Delta Version="182" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:44:44000">
<Copy StartSeek="0" EndSeek="10220"/>
<Insert>
}

</Insert>
<Copy StartSeek="10223" EndSeek="11929"/>
</Delta>
<Delta Version="183" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:44:47000">
<Copy StartSeek="0" EndSeek="6357"/>
<Copy StartSeek="6382" EndSeek="11954"/>
</Delta>
<Delta Version="184" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:45:24000">
<Copy StartSeek="0" EndSeek="11131"/>
<Insert>
</Insert>
<Copy StartSeek="11131" EndSeek="11601"/>
<Insert>
</Insert>
<Copy StartSeek="11601" EndSeek="11952"/>
</Delta>
<Delta Version="185" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:47:9000">
<Copy StartSeek="0" EndSeek="6357"/>
<Insert>		fdb_timer.data = NULL;
</Insert>
<Copy StartSeek="6397" EndSeek="11967"/>
</Delta>
<Delta Version="186" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:50:44000">
<Copy StartSeek="0" EndSeek="6357"/>
<Insert>		fdb_timer.data = (unsigned long)NULL;
</Insert>
<Copy StartSeek="6380" EndSeek="11950"/>
</Delta>
<Delta Version="187" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:51:10000">
<Copy StartSeek="0" EndSeek="6357"/>
<Insert>		fdb_timer.data = (0;
</Insert>
<Copy StartSeek="6379" EndSeek="11949"/>
</Delta>
<Delta Version="188" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:51:14000">
<Copy StartSeek="0" EndSeek="9877"/>
<Insert>	struct net_bridge *br = (sruct net_bridge *)arg;
</Insert>
<Copy StartSeek="9928" EndSeek="11950"/>
</Delta>
<Delta Version="189" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:51:23000">
<Copy StartSeek="0" EndSeek="5935"/>
<Copy StartSeek="6660" EndSeek="12675"/>
</Delta>
<Delta Version="190" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:52:38000">
<Copy StartSeek="0" EndSeek="6660"/>
<Copy StartSeek="7221" EndSeek="13236"/>
</Delta>
<Delta Version="191" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:53:21000">
<Copy StartSeek="0" EndSeek="6804"/>
<Insert>
</Insert>
<Copy StartSeek="6804" EndSeek="13235"/>
</Delta>
<Delta Version="192" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:53:24000">
<Copy StartSeek="0" EndSeek="5935"/>
<Copy StartSeek="6080" EndSeek="6805"/>
<Insert>#define MAC_ADDR(mac) \
	mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]
#ifndef MAC_FMT
#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
#endif

</Insert>
<Copy StartSeek="6805" EndSeek="13236"/>
</Delta>
<Delta Version="193" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:57:27000">
<Copy StartSeek="0" EndSeek="6078"/>
<Insert>

</Insert>
<Copy StartSeek="6078" EndSeek="13234"/>
</Delta>
<Delta Version="194" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:57:28000">
<Copy StartSeek="0" EndSeek="6844"/>
<Insert>	struct net_bridge *br = (sruct net_bridge *)arg;
</Insert>
<Copy StartSeek="6895" EndSeek="13235"/>
</Delta>
<Delta Version="195" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:57:41000">
<Copy StartSeek="0" EndSeek="7084"/>
<Insert>	vp-&gt;timer.expires = jiffies + HZ;
	vp-&gt;timer.data = NULL;
	vp-&gt;timer.function = &amp;fdb_;	/* timer handler */
</Insert>
<Copy StartSeek="7192" EndSeek="13235"/>
</Delta>
<Delta Version="196" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:58:10000">
<Copy StartSeek="0" EndSeek="6803"/>
<Insert>void klna_fdb_timer(unsigned long arg)
</Insert>
<Copy StartSeek="6845" EndSeek="13238"/>
</Delta>
<Delta Version="197" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:58:34000">
<Copy StartSeek="0" EndSeek="6803"/>
<Insert>void fdb_timer_expires(unsigned long arg)
</Insert>
<Copy StartSeek="6845" EndSeek="13238"/>
</Delta>
<Delta Version="198" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:58:36000">
<Copy StartSeek="0" EndSeek="6898"/>
<Copy StartSeek="6926" EndSeek="6952"/>
<Insert>	pr_info("%s:\n",__func__);
</Insert>
<Copy StartSeek="6954" EndSeek="13240"/>
</Delta>
<Delta Version="199" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:58:41000">
<Copy StartSeek="0" EndSeek="6926"/>
<Copy StartSeek="6927" EndSeek="7149"/>
<Insert>	fdb_timer.function = &amp;fdb_;	/* timer handler */
</Insert>
<Copy StartSeek="7211" EndSeek="13254"/>
</Delta>
<Delta Version="200" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:58:50000">
<Copy StartSeek="0" EndSeek="7149"/>
<Insert>	fdb_timer.function = &amp;fdb_timer_expired;	/* timer handler */
</Insert>
<Copy StartSeek="7191" EndSeek="13234"/>
</Delta>
<Delta Version="201" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:58:52000">
<Copy StartSeek="0" EndSeek="7215"/>
<Insert>
}

</Insert>
<Copy StartSeek="7218" EndSeek="13233"/>
</Delta>
<Delta Version="202" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:58:54000">
<Copy StartSeek="0" EndSeek="7125"/>
<Insert>	fdb_timer.data = NULL;
</Insert>
<Copy StartSeek="7146" EndSeek="13230"/>
</Delta>
<Delta Version="203" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="14:59:57000">
<Copy StartSeek="0" EndSeek="10094"/>
<Insert>#define NIPQUAD(addr) \
	((unsigned char *)&amp;addr)[0], \
	((unsigned char *)&amp;addr)[1], \
	((unsigned char *)&amp;addr)[2], \
	((unsigned char *)&amp;addr)[3]


#define MAC_ADDR(mac) \
	mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]
#ifndef MAC_FMT
#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
#endif
/* taken from br_fbd.c br_fdb_fillbuf() */
int klna_br_fdb_read(struct net_bridge *br)
{
	unsigned int i;
	struct hlist_node *h;
	struct net_bridge_fdb_entry *f;

	rcu_read_lock();
	for (i = 0; i &lt; BR_HASH_SIZE; i++) {
		hlist_for_each_entry_rcu(f, h, &amp;br-&gt;hash[i], hlist) {
//      		if (has_expired(br, f))
//      			continue;

//      		if (!f-&gt;is_static)
//      			fe-&gt;ageing_timer_value = jiffies_to_clock_t(jiffies - f-&gt;ageing_timer);

			printk("fdb[%u]: " MAC_FMT ", port:%s, local:%u, "
				"static:%u, timeout:%lu ", 
			       i, MAC_ADDR(f-&gt;addr.addr), f-&gt;dst-&gt;dev-&gt;name, 
			       f-&gt;is_local, f-&gt;is_static, 
			       jiffies_to_clock_t(jiffies - f-&gt;ageing_timer));
		}
	}
	rcu_read_unlock();

	return i;
}

void fdb_timer_expired(unsigned long arg)
{
	struct net_bridge *br = (struct net_bridge *)arg;

	pr_info("%s:\n",__func__);
	if (!arg) {
		return;
	}
	klna_br_fdb_read(br);
	mod_timer(&amp;fdb_timer, jiffies + 5 * HZ);
}

static void __init init_fdb_timer(void)
{
	init_timer(&amp;fdb_timer);
	fdb_timer.expires = jiffies + HZ;
	fdb_timer.data = NULL;
	fdb_timer.function = &amp;fdb_timer_expired;
	add_timer(&amp;fdb_timer);
}

</Insert>
<Copy StartSeek="10094" EndSeek="11798"/>
</Delta>
<Delta Version="204" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="15:00:54000">
<Copy StartSeek="0" EndSeek="6953"/>
<Insert>	
</Insert>
<Copy StartSeek="6953" EndSeek="11796"/>
</Delta>
<Delta Version="205" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="15:01:40000">
<Copy StartSeek="0" EndSeek="6976"/>
<Insert>	mod_timer(&amp;fdb_timer, jiffies + 5 * HZ);
</Insert>
<Copy StartSeek="7016" EndSeek="11794"/>
</Delta>
<Delta Version="206" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:30:54000">
<Copy StartSeek="0" EndSeek="11785"/>
<Copy StartSeek="11809" EndSeek="11818"/>
</Delta>
<Delta Version="207" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:31:25000">
<Copy StartSeek="0" EndSeek="6898"/>
<Insert>	pr_info("%s:\n",__func__);
</Insert>
<Copy StartSeek="6946" EndSeek="11838"/>
</Delta>
<Delta Version="208" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:33:28000">
<Copy StartSeek="0" EndSeek="11805"/>
<Insert>	del_timer(&amp;fdb_timer);
</Insert>
<Copy StartSeek="11805" EndSeek="11812"/>
<Insert>}
</Insert>
</Delta>
<Delta Version="209" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:35:41000">
<Copy StartSeek="0" EndSeek="11812"/>
<Insert>del_timer(&amp;fdb_timer);
</Insert>
<Copy StartSeek="11836" EndSeek="11838"/>
</Delta>
<Delta Version="210" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:35:42000">
<Copy StartSeek="0" EndSeek="11731"/>
<Insert>	}
	atomic_set(&amp;en_reg_timeout_death, 0);
	unregister_death_by_timeout();
</Insert>
<Copy StartSeek="11809" EndSeek="11842"/>
</Delta>
<Delta Version="211" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:38:33000">
<Copy StartSeek="0" EndSeek="6960"/>
<Insert>		return;
</Insert>
<Copy StartSeek="6973" EndSeek="6999"/>
<Copy StartSeek="7005" EndSeek="11851"/>
</Delta>
<Delta Version="212" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:42:12000">
<Copy StartSeek="0" EndSeek="7525"/>
<Insert>		fdb_timer.data = (unsigned long)br;
</Insert>
<Copy StartSeek="7525" EndSeek="7950"/>
<Copy StartSeek="7988" EndSeek="11851"/>
</Delta>
<Delta Version="213" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:44:22000">
<Copy StartSeek="0" EndSeek="7624"/>
<Insert>		fdb_timer.data = 0;
</Insert>
<Copy StartSeek="7627" EndSeek="8045"/>
<Copy StartSeek="8067" EndSeek="11854"/>
</Delta>
<Delta Version="214" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:44:29000">
<Copy StartSeek="0" EndSeek="7624"/>
<Insert>		
</Insert>
<Copy StartSeek="7624" EndSeek="11851"/>
</Delta>
<Delta Version="215" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:44:31000">
<Copy StartSeek="0" EndSeek="1334"/>
<Insert>
</Insert>
<Copy StartSeek="1364" EndSeek="11880"/>
</Delta>
<Delta Version="216" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:47:9000">
<Copy StartSeek="0" EndSeek="1334"/>
<Insert>static struct net_bridge *br

</Insert>
<Copy StartSeek="1335" EndSeek="11851"/>
</Delta>
<Delta Version="217" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:48:28000">
<Copy StartSeek="0" EndSeek="7048"/>
<Insert>static void __init init_fdb_timer(void)
</Insert>
<Copy StartSeek="7105" EndSeek="11868"/>
</Delta>
<Delta Version="218" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:48:57000">
<Copy StartSeek="0" EndSeek="7167"/>
<Insert>	fdb_timer.data = 0;
</Insert>
<Copy StartSeek="7189" EndSeek="11869"/>
</Delta>
<Delta Version="219" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:49:0000">
<Copy StartSeek="0" EndSeek="11490"/>
<Insert>	init_fdb_timer();
</Insert>
<Copy StartSeek="11490" EndSeek="11850"/>
</Delta>
<Delta Version="220" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:49:11000">
<Copy StartSeek="0" EndSeek="7946"/>
<Insert>		fdb_timer.data = (unsigned long)br;
</Insert>
<Copy StartSeek="7993" EndSeek="11859"/>
</Delta>
<Delta Version="221" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:50:11000">
<Copy StartSeek="0" EndSeek="8069"/>
<Insert>		fdb_timer.data = 0;
</Insert>
<Copy StartSeek="8094" EndSeek="11862"/>
</Delta>
<Delta Version="222" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:50:23000">
<Copy StartSeek="0" EndSeek="7167"/>
<Insert>	fdb_timer.data = br;
</Insert>
<Copy StartSeek="7204" EndSeek="11877"/>
</Delta>
<Delta Version="223" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:50:46000">
<Copy StartSeek="0" EndSeek="6898"/>
<Insert>	pr_info("%s: arg %p\n",__func__, (void *)arg);

</Insert>
<Copy StartSeek="6899" EndSeek="11829"/>
</Delta>
<Delta Version="224" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:51:27000">
<Copy StartSeek="0" EndSeek="6899"/>
<Insert>	if (!arg) {
</Insert>
<Copy StartSeek="6911" EndSeek="11828"/>
</Delta>
<Delta Version="225" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:51:31000">
<Copy StartSeek="0" EndSeek="6576"/>
<Insert>				"static:%u, timeout:%lu ", 
</Insert>
<Copy StartSeek="6609" EndSeek="11829"/>
</Delta>
<Delta Version="226" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:52:35000">
<Copy StartSeek="0" EndSeek="1298"/>
<Copy StartSeek="1347" EndSeek="11878"/>
</Delta>
<Delta Version="227" Comment="" NL="\10" Encoding="text" Date="2012/05/15" Time="16:55:5000">
<Copy StartSeek="0" EndSeek="36"/>
<Insert> * 
</Insert>
<Copy StartSeek="39" EndSeek="11877"/>
</Delta>
<Delta Version="228" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:31:44000">
<Copy StartSeek="0" EndSeek="1003"/>
<Insert>static int no_ct = 0;
</Insert>
<Copy StartSeek="1021" EndSeek="11873"/>
</Delta>
<Delta Version="229" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:33:12000">
<Copy StartSeek="0" EndSeek="1178"/>
<Insert>static void (*death_by_timeout_org)(unsigned long) = NULL;
</Insert>
<Copy StartSeek="1230" EndSeek="11866"/>
</Delta>
<Delta Version="230" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:33:18000">
<Copy StartSeek="0" EndSeek="3218"/>
<Insert>		hlist_nulls_for_each_entry(h, n, &amp;net-&gt;ct.hash[bucket], hnnode) {
</Insert>
<Copy StartSeek="3295" EndSeek="11875"/>
</Delta>
<Delta Version="231" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:34:22000">
<Copy StartSeek="0" EndSeek="3218"/>
<Insert>		hlist_nulls_for_each_entry(h, n, 
					   &amp;net-&gt;ct.hash[bucket], hnnode) {
</Insert>
<Copy StartSeek="3286" EndSeek="11866"/>
</Delta>
<Delta Version="232" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:34:25000">
<Copy StartSeek="0" EndSeek="4812"/>
<Insert>			struct nf_conntrack_tuple *tup = 
</Insert>
<Copy StartSeek="4848" EndSeek="11865"/>
</Delta>
<Delta Version="233" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:34:55000">
<Copy StartSeek="0" EndSeek="36"/>
<Insert> *
</Insert>
<Copy StartSeek="40" EndSeek="4813"/>
<Insert>			struct nf_conntrack_tuple *tup =
</Insert>
<Copy StartSeek="4850" EndSeek="11867"/>
</Delta>
<Delta Version="234" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:35:15000">
<Copy StartSeek="0" EndSeek="2325"/>
<Insert>	pr_info("[%s]" NIPQUAD_FMT ":%u -&gt; " NIPQUAD_FMT ":%u\n",
</Insert>
<Copy StartSeek="2385" EndSeek="2656"/>
<Insert>	pr_info("klna_death_by_timeout:\n");
</Insert>
<Copy StartSeek="2695" EndSeek="4648"/>
<Insert>		pr_info("destroyed ct\n");
</Insert>
<Copy StartSeek="4678" EndSeek="4712"/>
<Insert>		pr_info("new ct\n");
</Insert>
<Copy StartSeek="4736" EndSeek="4901"/>
<Insert>			pr_info("new helper ct\n");
</Insert>
<Copy StartSeek="4933" EndSeek="5126"/>
<Insert>		pr_info("related ct\n");
</Insert>
<Copy StartSeek="5154" EndSeek="5355"/>
<Insert>			pr_info("new helper ct\n");
</Insert>
<Copy StartSeek="5387" EndSeek="5554"/>
<Insert>			pr_info("new ct\n");
</Insert>
<Copy StartSeek="5579" EndSeek="6568"/>
<Insert>			printk("fdb[%u]: " MAC_FMT ", port:%s, local:%u, "
</Insert>
<Copy StartSeek="6624" EndSeek="7496"/>
<Insert>		pr_info("if %s up at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
</Insert>
<Copy StartSeek="7559" EndSeek="7594"/>
<Insert>		pr_info("if %s down at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
</Insert>
<Copy StartSeek="7659" EndSeek="7925"/>
<Insert>		pr_info("br up [%s]\n", dev-&gt;name);
</Insert>
<Copy StartSeek="7964" EndSeek="8046"/>
<Insert>		pr_info("br unreg [%s]\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8088" EndSeek="8428"/>
<Insert>		pr_info("eth dev register %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8476" EndSeek="8510"/>
<Insert>		pr_info("eth dev unregister %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8560" EndSeek="8586"/>
<Insert>		pr_info("eth dev %s up\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8628" EndSeek="8647"/>
<Insert>		pr_info("eth dev %s down\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8691" EndSeek="8712"/>
<Insert>		pr_info("eth dev %s change\n",dev-&gt;name);
</Insert>
<Copy StartSeek="8757" EndSeek="9069"/>
<Insert>		pr_info("dev register %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9113" EndSeek="9147"/>
<Insert>		pr_info("dev unregister %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9193" EndSeek="9219"/>
<Insert>		pr_info("dev %s up\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9257" EndSeek="9314"/>
<Insert>		pr_info("dev %s down\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9354" EndSeek="9417"/>
<Insert>		pr_info("dev %s going down\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9463" EndSeek="9786"/>
<Insert>		pr_info("vlan register %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="9857" EndSeek="9891"/>
<Insert>		pr_info("vlan unreg %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="9959" EndSeek="9985"/>
<Insert>		pr_info("vlan %s up vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="10050" EndSeek="10078"/>
<Insert>		pr_info("vlan %s down vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="10145" EndSeek="10358"/>
<Insert>//      pr_info("dpa_netdev_dev %s event %lu, dev_type: %#x, flags #%x\n",dev-&gt;name, event,
</Insert>
<Copy StartSeek="10451" EndSeek="11106"/>
<Insert>	pr_info("init\n");
</Insert>
<Copy StartSeek="11127" EndSeek="11306"/>
<Insert>		pr_info("reg nf_conntrack\n");
</Insert>
<Copy StartSeek="11340" EndSeek="11580"/>
<Insert>	pr_info("exit\n");
</Insert>
<Copy StartSeek="11601" EndSeek="11705"/>
<Insert>		pr_info("unreg nf_ct\n");
</Insert>
<Copy StartSeek="11734" EndSeek="11900"/>
</Delta>
<Delta Version="235" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:59:6000">
<Copy StartSeek="0" EndSeek="8289"/>
<Insert>	printk(KERN_ERR "(%s:%d) eth dev %s event %lu\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="8353" EndSeek="11893"/>
</Delta>
<Delta Version="236" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:59:22000">
<Copy StartSeek="0" EndSeek="4933"/>
<Insert>			printk(KERN_ERR "(%s:%d): helper name: %s, proto %u, port %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="5014" EndSeek="5380"/>
<Insert>			printk(KERN_ERR "(%s:%d): helper name: %s, proto %u, dst_port %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="5465" EndSeek="8906"/>
<Insert>	printk(KERN_ERR "(%s:%d) pppox dev %s event %lu\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="8972" EndSeek="11872"/>
</Delta>
<Delta Version="237" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="09:59:34000">
<Copy StartSeek="0" EndSeek="2325"/>
<Insert>	pr_debug("[%s]" NIPQUAD_FMT ":%u -&gt; " NIPQUAD_FMT ":%u\n",
</Insert>
<Copy StartSeek="2384" EndSeek="2655"/>
<Insert>	pr_debug("klna_death_by_timeout:\n");
</Insert>
<Copy StartSeek="2693" EndSeek="4646"/>
<Insert>		pr_debug("destroyed ct\n");
</Insert>
<Copy StartSeek="4675" EndSeek="4709"/>
<Insert>		pr_debug("new ct\n");
</Insert>
<Copy StartSeek="4732" EndSeek="4897"/>
<Insert>			pr_debug("new helper ct\n");
			pr_debug("(%s:%d): helper name: %s, proto %u, port %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="5016" EndSeek="5121"/>
<Insert>		pr_debug("related ct\n");
</Insert>
<Copy StartSeek="5148" EndSeek="5349"/>
<Insert>			pr_debug("new helper ct\n");
			pr_debug("(%s:%d): helper name: %s, proto %u, dst_port %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="5464" EndSeek="6553"/>
<Insert>			pr_debug("fdb[%u]: " MAC_FMT ", port:%s, local:%u, "
</Insert>
<Copy StartSeek="6608" EndSeek="7480"/>
<Insert>		pr_debug("if %s up at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
</Insert>
<Copy StartSeek="7542" EndSeek="7577"/>
<Insert>		pr_debug("if %s down at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
</Insert>
<Copy StartSeek="7641" EndSeek="7907"/>
<Insert>		pr_debug("br up [%s]\n", dev-&gt;name);
</Insert>
<Copy StartSeek="7945" EndSeek="8027"/>
<Insert>		pr_debug("br unreg [%s]\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8068" EndSeek="8401"/>
<Insert>		pr_debug("eth dev register %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8448" EndSeek="8482"/>
<Insert>		pr_debug("eth dev unregister %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8531" EndSeek="8557"/>
<Insert>		pr_debug("eth dev %s up\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8598" EndSeek="8617"/>
<Insert>		pr_debug("eth dev %s down\n", dev-&gt;name);
</Insert>
<Copy StartSeek="8660" EndSeek="8681"/>
<Insert>		pr_debug("eth dev %s change\n",dev-&gt;name);
</Insert>
<Copy StartSeek="8725" EndSeek="9030"/>
<Insert>		pr_debug("dev register %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9073" EndSeek="9107"/>
<Insert>		pr_debug("dev unregister %s\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9152" EndSeek="9178"/>
<Insert>		pr_debug("dev %s up\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9215" EndSeek="9272"/>
<Insert>		pr_debug("dev %s down\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9311" EndSeek="9374"/>
<Insert>		pr_debug("dev %s going down\n", dev-&gt;name);
</Insert>
<Copy StartSeek="9419" EndSeek="9742"/>
<Insert>		pr_debug("vlan register %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="9812" EndSeek="9846"/>
<Insert>		pr_debug("vlan unreg %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="9913" EndSeek="9939"/>
<Insert>		pr_debug("vlan %s up vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="10003" EndSeek="10031"/>
<Insert>		pr_debug("vlan %s down vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="10097" EndSeek="11058"/>
<Insert>	pr_debug("init\n");
</Insert>
<Copy StartSeek="11078" EndSeek="11257"/>
<Insert>		pr_debug("reg nf_conntrack\n");
</Insert>
<Copy StartSeek="11290" EndSeek="11530"/>
<Insert>	pr_debug("exit\n");
</Insert>
<Copy StartSeek="11550" EndSeek="11654"/>
<Insert>		pr_debug("unreg nf_ct\n");
</Insert>
<Copy StartSeek="11682" EndSeek="11848"/>
</Delta>
<Delta Version="238" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="11:07:32000">
<Copy StartSeek="0" EndSeek="8269"/>
<Insert>	pr_debug("(%s:%d) eth dev %s event %lu\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="8332" EndSeek="8894"/>
<Insert>	pr_debug("(%s:%d) pppox dev %s event %lu\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="8959" EndSeek="11846"/>
</Delta>
<Delta Version="239" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="11:25:24000">
<Copy StartSeek="0" EndSeek="1372"/>
<Insert>
</Insert>
<Copy StartSeek="1449" EndSeek="11922"/>
</Delta>
<Delta Version="240" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="12:51:28000">
<Copy StartSeek="0" EndSeek="1372"/>
<Insert>static struct br_list {
</Insert>
<Copy StartSeek="1399" EndSeek="8049"/>
<Copy StartSeek="8102" EndSeek="11978"/>
</Delta>
<Delta Version="241" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:46:36000">
<Copy StartSeek="0" EndSeek="1372"/>
<Insert>static struct br_element {
</Insert>
<Copy StartSeek="1401" EndSeek="1450"/>
<Insert>};
</Insert>
<Copy StartSeek="1461" EndSeek="11988"/>
</Delta>
<Delta Version="242" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:50:12000">
<Copy StartSeek="0" EndSeek="1450"/>
<Insert>} br_list;

</Insert>
<Copy StartSeek="1509" EndSeek="12035"/>
</Delta>
<Delta Version="243" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:52:16000">
<Copy StartSeek="0" EndSeek="1450"/>
<Insert>} br_list = { 
	.list = LIST_HEAD_INIT(br_list.list) 
</Insert>
<Copy StartSeek="1503" EndSeek="12034"/>
</Delta>
<Delta Version="244" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:52:35000">
<Copy StartSeek="0" EndSeek="1450"/>
<Insert>} br_list = {
	.list = LIST_HEAD_INIT(br_list.list),
	};

</Insert>
<Copy StartSeek="1506" EndSeek="12032"/>
</Delta>
<Delta Version="245" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:52:42000">
<Copy StartSeek="0" EndSeek="1372"/>
<Insert>static struct br_element_t {
</Insert>
<Copy StartSeek="1468" EndSeek="1517"/>
<Insert>} br_list = { .list = LIST_HEAD_INIT(br_list.list), };
</Insert>
<Copy StartSeek="1520" EndSeek="12047"/>
</Delta>
<Delta Version="246" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:56:30000">
<Copy StartSeek="0" EndSeek="1441"/>
<Copy StartSeek="1442" EndSeek="12048"/>
</Delta>
<Delta Version="247" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:56:35000">
<Copy StartSeek="0" EndSeek="1442"/>
<Insert>static struct br_element {
</Insert>
<Copy StartSeek="1462" EndSeek="12041"/>
</Delta>
<Delta Version="248" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:56:44000">
<Copy StartSeek="0" EndSeek="1441"/>
<Insert>
</Insert>
<Copy StartSeek="1441" EndSeek="12040"/>
</Delta>
<Delta Version="249" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:56:51000">
<Copy StartSeek="0" EndSeek="887"/>
<Copy StartSeek="911" EndSeek="12064"/>
</Delta>
<Delta Version="250" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:57:23000">
<Copy StartSeek="0" EndSeek="8188"/>
<Insert>		init_fdb_timer(br);
</Insert>
<Copy StartSeek="8197" EndSeek="12051"/>
</Delta>
<Delta Version="251" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="14:58:28000">
<Copy StartSeek="0" EndSeek="8160"/>
<Insert>		if (list_empty(br)) {
		}
		d(br);
</Insert>
<Copy StartSeek="8209" EndSeek="12063"/>
</Delta>
<Delta Version="252" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:43:26000">
<Copy StartSeek="0" EndSeek="8135"/>
<Insert>		spin_lock(&amp;klna_lock);
		spin_unlock(&amp;klna_lock);
</Insert>
<Copy StartSeek="8193" EndSeek="12069"/>
</Delta>
<Delta Version="253" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:43:38000">
<Copy StartSeek="0" EndSeek="8163"/>
<Copy StartSeek="8164" EndSeek="12070"/>
</Delta>
<Delta Version="254" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:43:39000">
<Copy StartSeek="0" EndSeek="8004"/>
<Insert>
</Insert>
<Copy StartSeek="8051" EndSeek="8209"/>
<Insert>
</Insert>
<Copy StartSeek="8212" EndSeek="12118"/>
</Delta>
<Delta Version="255" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:48:36000">
<Copy StartSeek="0" EndSeek="8209"/>
<Insert>		
</Insert>
<Copy StartSeek="8298" EndSeek="12204"/>
</Delta>
<Delta Version="256" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:50:56000">
<Copy StartSeek="0" EndSeek="8293"/>
<Insert>
		}
</Insert>
<Copy StartSeek="8325" EndSeek="12231"/>
</Delta>
<Delta Version="257" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:51:57000">
<Copy StartSeek="0" EndSeek="8050"/>
<Insert>
</Insert>
<Copy StartSeek="8073" EndSeek="12253"/>
</Delta>
<Delta Version="258" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:53:7000">
<Copy StartSeek="0" EndSeek="8050"/>
<Insert>	unsigned int dup = 1;
</Insert>
<Copy StartSeek="8073" EndSeek="12253"/>
</Delta>
<Delta Version="259" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:53:10000">
<Copy StartSeek="0" EndSeek="8073"/>
<Copy StartSeek="8074" EndSeek="12254"/>
</Delta>
<Delta Version="260" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:53:11000">
<Copy StartSeek="0" EndSeek="8339"/>
<Insert>			}
		}
</Insert>
<Copy StartSeek="8372" EndSeek="12278"/>
</Delta>
<Delta Version="261" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:54:7000">
<Copy StartSeek="0" EndSeek="8339"/>
<Insert>				dup = 1;
</Insert>
<Copy StartSeek="8339" EndSeek="12265"/>
</Delta>
<Delta Version="262" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:54:14000">
<Copy StartSeek="0" EndSeek="8050"/>
<Insert>	unsigned int dup = 0;

</Insert>
<Copy StartSeek="8052" EndSeek="12243"/>
</Delta>
<Delta Version="263" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:54:19000">
<Copy StartSeek="0" EndSeek="8317"/>
<Copy StartSeek="8332" EndSeek="12258"/>
</Delta>
<Delta Version="264" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:54:32000">
<Copy StartSeek="0" EndSeek="8317"/>
<Insert>				el = NULL;
</Insert>
<Copy StartSeek="8317" EndSeek="8337"/>
<Copy StartSeek="8338" EndSeek="12244"/>
</Delta>
<Delta Version="265" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:55:2000">
<Copy StartSeek="0" EndSeek="8294"/>
<Insert>			if (el-&gt;br == br) {
</Insert>
<Copy StartSeek="8315" EndSeek="8326"/>
<Insert>			}
		}

</Insert>
<Copy StartSeek="8331" EndSeek="12237"/>
</Delta>
<Delta Version="266" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:55:20000">
<Copy StartSeek="0" EndSeek="8294"/>
<Insert>			if (el-&gt;br == br)
</Insert>
<Copy StartSeek="8332" EndSeek="8343"/>
<Insert>		}

</Insert>
<Copy StartSeek="8369" EndSeek="12275"/>
</Delta>
<Delta Version="267" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:55:53000">
<Copy StartSeek="0" EndSeek="8317"/>
<Insert>				el = NULL;
</Insert>
<Copy StartSeek="8317" EndSeek="12260"/>
</Delta>
<Delta Version="268" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:56:18000">
<Copy StartSeek="0" EndSeek="8317"/>
<Copy StartSeek="8332" EndSeek="12275"/>
</Delta>
<Delta Version="269" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:59:2000">
<Copy StartSeek="0" EndSeek="8317"/>
<Insert>				el = NULL;
</Insert>
<Copy StartSeek="8330" EndSeek="12273"/>
</Delta>
<Delta Version="270" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:59:7000">
<Copy StartSeek="0" EndSeek="8317"/>
<Insert>				el = -1;
</Insert>
<Copy StartSeek="8330" EndSeek="8350"/>
<Insert>		if (!el) {
</Insert>
<Copy StartSeek="8363" EndSeek="12273"/>
</Delta>
<Delta Version="271" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:59:24000">
<Copy StartSeek="0" EndSeek="8317"/>
<Insert>				el = ~0;
</Insert>
<Copy StartSeek="8338" EndSeek="12281"/>
</Delta>
<Delta Version="272" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:59:29000">
<Copy StartSeek="0" EndSeek="8358"/>
<Insert>		if (el ) {
</Insert>
<Copy StartSeek="8370" EndSeek="12280"/>
</Delta>
<Delta Version="273" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:59:43000">
<Copy StartSeek="0" EndSeek="8317"/>
<Insert>				el = (void *)~0;
</Insert>
<Copy StartSeek="8340" EndSeek="12282"/>
</Delta>
<Delta Version="274" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="15:59:56000">
<Copy StartSeek="0" EndSeek="8360"/>
<Insert>		if (el) {
		}
</Insert>
<Copy StartSeek="8385" EndSeek="12291"/>
</Delta>
<Delta Version="275" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:00:11000">
<Copy StartSeek="0" EndSeek="8380"/>
<Insert>
		}
</Insert>
<Copy StartSeek="8441" EndSeek="12347"/>
</Delta>
<Delta Version="276" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:01:6000">
<Copy StartSeek="0" EndSeek="8436"/>
<Insert>
		}
</Insert>
<Copy StartSeek="8470" EndSeek="12376"/>
</Delta>
<Delta Version="277" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:01:56000">
<Copy StartSeek="0" EndSeek="8436"/>
<Insert>			INIT_LIST_HEAD(el-&gt;list)l
</Insert>
<Copy StartSeek="8465" EndSeek="12376"/>
</Delta>
<Delta Version="278" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:01:58000">
<Copy StartSeek="0" EndSeek="8465"/>
<Insert>
		}
</Insert>
<Copy StartSeek="8507" EndSeek="12413"/>
</Delta>
<Delta Version="279" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:02:34000">
<Copy StartSeek="0" EndSeek="8502"/>
<Insert>
		}
</Insert>
<Copy StartSeek="8506" EndSeek="12412"/>
</Delta>
<Delta Version="280" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:02:37000">
<Copy StartSeek="0" EndSeek="8436"/>
<Copy StartSeek="8526" EndSeek="12502"/>
</Delta>
<Delta Version="281" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:04:11000">
<Copy StartSeek="0" EndSeek="8026"/>
<Insert>	struct br_element *el;
</Insert>
<Copy StartSeek="8057" EndSeek="12509"/>
</Delta>
<Delta Version="282" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:09:44000">
<Copy StartSeek="0" EndSeek="7980"/>
<Insert>	struct net_bridge *br;
</Insert>
<Copy StartSeek="8023" EndSeek="8078"/>
<Insert>	br = netdev_priv(dev);
</Insert>
<Copy StartSeek="8080" EndSeek="12506"/>
</Delta>
<Delta Version="283" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:10:17000">
<Copy StartSeek="0" EndSeek="8076"/>
<Insert>	
	

</Insert>
<Copy StartSeek="8077" EndSeek="12502"/>
</Delta>
<Delta Version="284" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:10:20000">
<Copy StartSeek="0" EndSeek="7842"/>
<Copy StartSeek="8367" EndSeek="8682"/>
<Insert>		del_timer(&amp;fdb_timer);
		spin_lock_bh(&amp;klna_lock);
		list_for_each(p, &amp;klna_br_list) {
			el = list_entry(p, struct br_element, list);
			if (el-&gt;br == br) {
				el = (void *)~0UL;
				break;
			}
		}
		if (el != NULL) {
			el = kmalloc(sizeof(struct br_element), GFP_ATOMIC);
			if (!el) {
				pr_err("insufficient mm for br_element\n");
				return NOTIFY_BAD;
			}
			INIT_LIST_HEAD(el-&gt;list);
			list_add_tail(el, &amp;klna_br_list);
		}
		spin_unlock_bh(&amp;klna_lock);
		init_fdb_timer(br);
</Insert>
<Copy StartSeek="8682" EndSeek="12536"/>
</Delta>
<Delta Version="285" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:11:51000">
<Copy StartSeek="0" EndSeek="8682"/>
<Copy StartSeek="8704" EndSeek="12558"/>
</Delta>
<Delta Version="286" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:12:6000">
<Copy StartSeek="0" EndSeek="8682"/>
<Insert>		klna_nc_br_reg(br);
</Insert>
<Copy StartSeek="8730" EndSeek="12584"/>
</Delta>
<Delta Version="287" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:12:47000">
<Copy StartSeek="0" EndSeek="8708"/>
<Insert>			return NOTIFY_BAD;
</Insert>
<Copy StartSeek="8729" EndSeek="12583"/>
</Delta>
<Delta Version="288" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:12:59000">
<Copy StartSeek="0" EndSeek="8601"/>
<Insert>
</Insert>
<Copy StartSeek="8626" EndSeek="12607"/>
</Delta>
<Delta Version="289" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:13:13000">
<Copy StartSeek="0" EndSeek="8867"/>
<Insert>	return NOTIFY_DONE;
</Insert>
<Copy StartSeek="8880" EndSeek="12599"/>
</Delta>
<Delta Version="290" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:13:17000">
<Copy StartSeek="0" EndSeek="7893"/>
<Copy StartSeek="7947" EndSeek="8602"/>
<Insert>	struct list_head *p;
	struct br_element *el = NULL;
</Insert>
<Copy StartSeek="8602" EndSeek="12600"/>
</Delta>
<Delta Version="291" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:13:42000">
<Copy StartSeek="0" EndSeek="8418"/>
<Insert>}

</Insert>
<Copy StartSeek="8433" EndSeek="12612"/>
</Delta>
<Delta Version="292" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:14:42000">
<Copy StartSeek="0" EndSeek="8365"/>
<Insert>	}
</Insert>
<Copy StartSeek="8401" EndSeek="12645"/>
</Delta>
<Delta Version="293" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:15:0000">
<Copy StartSeek="0" EndSeek="8430"/>
<Insert>	init_fdb_timer(br);

</Insert>
<Copy StartSeek="8497" EndSeek="12690"/>
</Delta>
<Delta Version="294" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:18:34000">
<Copy StartSeek="0" EndSeek="7197"/>
<Insert>static void __init init_fdb_timer(struct net_bridge *br)
</Insert>
<Copy StartSeek="7237" EndSeek="7378"/>
<Insert>	add_timer(&amp;fdb_timer);
}

</Insert>
<Copy StartSeek="7381" EndSeek="12649"/>
</Delta>
<Delta Version="295" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:19:9000">
<Copy StartSeek="0" EndSeek="7299"/>
<Insert>	fdb_timer.data = (unsigned long)br;
</Insert>
<Copy StartSeek="7320" EndSeek="12633"/>
</Delta>
<Delta Version="296" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:19:24000">
<Copy StartSeek="0" EndSeek="7299"/>
<Insert>	fdb_timer.data = 0;
</Insert>
<Copy StartSeek="7299" EndSeek="12612"/>
</Delta>
<Delta Version="297" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:19:28000">
<Copy StartSeek="0" EndSeek="8352"/>
<Insert>//      init_fdb_timer(br);
</Insert>
<Copy StartSeek="8352" EndSeek="12224"/>
<Copy StartSeek="12243" EndSeek="12603"/>
</Delta>
<Delta Version="298" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:20:18000">
<Copy StartSeek="0" EndSeek="6274"/>
<Copy StartSeek="6275" EndSeek="12604"/>
</Delta>
<Delta Version="299" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:21:22000">
<Copy StartSeek="0" EndSeek="1311"/>
<Insert>/* HAIM FIXME : add list of monitored bridges */
static struct timer_list fdb_timer;
static struct list_head klna_br_list = LIST_HEAD_INIT(klna_br_list);
struct br_element {
	struct list_head list;
	struct net_bridge *br; 
};

</Insert>
<Copy StartSeek="1312" EndSeek="12378"/>
</Delta>
<Delta Version="300" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:29:10000">
<Copy StartSeek="0" EndSeek="887"/>
<Insert>#include &lt;linux/list.h&gt;
</Insert>
<Copy StartSeek="887" EndSeek="12354"/>
</Delta>
<Delta Version="301" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:29:22000">
<Copy StartSeek="0" EndSeek="1287"/>
<Insert>
</Insert>
<Copy StartSeek="1287" EndSeek="5880"/>
<Insert>#define MAC_ADDR(mac) \
	mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]
#ifndef MAC_FMT
#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
#endif

/* taken from br_fbd.c br_fdb_fillbuf() */
int klna_br_fdb_read(struct net_bridge *br)
{
	unsigned int i;
	struct hlist_node *h;
	struct net_bridge_fdb_entry *f;

	rcu_read_lock();
	for (i = 0; i &lt; BR_HASH_SIZE; i++) {
		hlist_for_each_entry_rcu(f, h, &amp;br-&gt;hash[i], hlist) {
//      		if (has_expired(br, f))
//      			continue;

//      		if (!f-&gt;is_static)
//      			fe-&gt;ageing_timer_value = jiffies_to_clock_t(jiffies - f-&gt;ageing_timer);

			pr_info("fdb[%u]: " MAC_FMT ", port:%s, local:%u, "
				"static:%u, timeout:%lu\n", 
			       i, MAC_ADDR(f-&gt;addr.addr), f-&gt;dst-&gt;dev-&gt;name, 
			       f-&gt;is_local, f-&gt;is_static, 
			       jiffies_to_clock_t(jiffies - f-&gt;ageing_timer));
		}
	}
	rcu_read_unlock();

	return i;
}

void fdb_timer_expired(unsigned long arg)
{
	struct net_bridge *br = (struct net_bridge *)arg;

	if (!br) {
		goto exit;
	}
	klna_br_fdb_read(br);
exit:
	mod_timer(&amp;fdb_timer, jiffies + 5*HZ);
}

static void __init init_fdb_timer(void)
{
	init_timer(&amp;fdb_timer);
	fdb_timer.expires = jiffies + HZ;
	fdb_timer.function = &amp;fdb_timer_expired;
}

</Insert>
<Copy StartSeek="5881" EndSeek="11140"/>
</Delta>
<Delta Version="302" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:29:46000">
<Copy StartSeek="0" EndSeek="5880"/>
<Insert>
</Insert>
<Copy StartSeek="5880" EndSeek="6300"/>
<Insert>static int klna_nc_br_reg(struct net_bridge *br)
{
	struct list_head *p;
	struct br_element *el = NULL;

	del_timer(&amp;fdb_timer);
	spin_lock_bh(&amp;klna_lock);
	list_for_each(p, &amp;klna_br_list) {
		el = list_entry(p, struct br_element, list);
		if (el-&gt;br == br) {
			el = (void *)~0UL;
			break;
		}
	}
	if (el != NULL) {
		el = kmalloc(sizeof(struct br_element), GFP_ATOMIC);
		if (!el) {
			pr_err("insufficient mm for br_element\n");
			return NOTIFY_BAD;
		}
		INIT_LIST_HEAD(el-&gt;list);
		list_add_tail(el, &amp;klna_br_list);
		pr_info("added br to list\n");
	}
	spin_unlock_bh(&amp;klna_lock);
	mod_timer(&amp;fdb_timer, jiffies + HZ);

	return 0;
}

</Insert>
<Copy StartSeek="6300" EndSeek="10498"/>
</Delta>
<Delta Version="303" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:31:3000">
<Copy StartSeek="0" EndSeek="6586"/>
<Insert>		if (klna_nc_br_reg(br))
</Insert>
<Copy StartSeek="6609" EndSeek="6706"/>
<Insert>		del_timer(&amp;fdb_timer);
</Insert>
<Copy StartSeek="6727" EndSeek="9702"/>
<Copy StartSeek="9749" EndSeek="10159"/>
<Insert>	init_fdb_timer();
</Insert>
<Copy StartSeek="10165" EndSeek="10499"/>
<Insert>	del_timer(&amp;fdb_timer);
</Insert>
<Copy StartSeek="10516" EndSeek="10518"/>
</Delta>
<Delta Version="304" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:33:31000">
<Copy StartSeek="0" EndSeek="9702"/>
<Insert>	err = klna_br_init();
</Insert>
<Copy StartSeek="9729" EndSeek="10522"/>
</Delta>
<Delta Version="305" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:34:35000">
<Copy StartSeek="0" EndSeek="10503"/>
<Insert>	klna_br_exit();
</Insert>
<Copy StartSeek="10524" EndSeek="10526"/>
</Delta>
<Delta Version="306" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="16:34:41000">
<Copy StartSeek="0" EndSeek="9702"/>
<Copy StartSeek="9703" EndSeek="10527"/>
</Delta>
<Delta Version="307" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="17:05:59000">
<Copy StartSeek="0" EndSeek="9681"/>
<Insert>
</Insert>
<Copy StartSeek="9681" EndSeek="10526"/>
</Delta>
<Delta Version="308" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="17:06:2000">
<Copy StartSeek="0" EndSeek="9681"/>
<Copy StartSeek="9682" EndSeek="9702"/>
<Insert>
</Insert>
<Copy StartSeek="9702" EndSeek="10526"/>
</Delta>
<Delta Version="309" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="17:06:4000">
<Copy StartSeek="0" EndSeek="952"/>
<Insert>
</Insert>
<Copy StartSeek="982" EndSeek="10555"/>
</Delta>
<Delta Version="310" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="17:24:57000">
<Copy StartSeek="0" EndSeek="10447"/>
<Insert>	
</Insert>
<Copy StartSeek="10448" EndSeek="10554"/>
</Delta>
<Delta Version="311" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="18:36:29000">
<Copy StartSeek="0" EndSeek="10447"/>
<Insert>
</Insert>
<Copy StartSeek="10447" EndSeek="10553"/>
</Delta>
<Delta Version="312" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="18:36:37000">
<Copy StartSeek="0" EndSeek="36"/>
<Insert> * 
</Insert>
<Copy StartSeek="39" EndSeek="10552"/>
</Delta>
<Delta Version="313" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="18:57:35000">
<Copy StartSeek="0" EndSeek="4755"/>
<Insert>			struct nf_conntrack_tuple *tup = 
</Insert>
<Copy StartSeek="4791" EndSeek="10551"/>
</Delta>
<Delta Version="314" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="18:58:32000">
<Copy StartSeek="0" EndSeek="4869"/>
<Insert>			printk(KERN_ERR "(%s:%d): helper name: %s, proto %u, port %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="4958" EndSeek="10552"/>
</Delta>
<Delta Version="315" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="18:58:46000">
<Copy StartSeek="0" EndSeek="4869"/>
<Insert>			pr_info(KERN_ERR "(%s:%d): helper name: %s, proto %u, port %u\n", __func__, __LINE__,
			       hlp-&gt;name, tup-&gt;dst.protonum, ntohs(tup-&gt;dst.u.all));
		}
</Insert>
<Copy StartSeek="5029" EndSeek="10555"/>
</Delta>
<Delta Version="316" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="18:59:27000">
<Copy StartSeek="0" EndSeek="5210"/>
<Insert>			struct nf_conntrack_tuple *tup = 
</Insert>
<Copy StartSeek="5246" EndSeek="10554"/>
</Delta>
<Delta Version="317" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="18:59:45000">
<Copy StartSeek="0" EndSeek="7336"/>
<Insert>		pr_info("eth dev %s change\n",dev-&gt;name);
</Insert>
<Copy StartSeek="7381" EndSeek="10555"/>
</Delta>
<Delta Version="318" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="19:00:15000">
<Copy StartSeek="0" EndSeek="9192"/>
<Insert>	} 
</Insert>
<Copy StartSeek="9195" EndSeek="10554"/>
</Delta>
<Delta Version="319" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="19:00:30000">
<Copy StartSeek="0" EndSeek="10193"/>
<Insert>exit:
</Insert>
<Copy StartSeek="10200" EndSeek="10555"/>
</Delta>
<Delta Version="320" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="19:01:4000">
<Copy StartSeek="0" EndSeek="9233"/>
<Insert>		return klna_nc_br_dev_event(unused,event,ptr);
</Insert>
<Copy StartSeek="9284" EndSeek="9312"/>
<Insert>		return klna_nc_br_if_event(unused,event,ptr);
</Insert>
<Copy StartSeek="9362" EndSeek="9399"/>
<Insert>		return klna_nc_eth_dev_event(unused,event,ptr);
</Insert>
<Copy StartSeek="9451" EndSeek="9486"/>
<Insert>		return klna_nc_pppox_dev_event(unused,event,ptr);
</Insert>
<Copy StartSeek="9540" EndSeek="10563"/>
</Delta>
<Delta Version="321" Comment="" NL="\10" Encoding="text" Date="2012/05/16" Time="19:01:32000">
<Copy StartSeek="0" EndSeek="10402"/>
<Insert>		nf_conntrack_unregister_notifier(&amp;klna_ct_notifier);
</Insert>
<Copy StartSeek="10402" EndSeek="10442"/>
<Copy StartSeek="10500" EndSeek="10566"/>
</Delta>
<Delta Version="322" Comment="" NL="\10" Encoding="text" Date="2012/05/17" Time="11:10:9000">
<Copy StartSeek="0" EndSeek="10497"/>
<Insert>		
</Insert>
<Copy StartSeek="10497" EndSeek="10563"/>
</Delta>
<Delta Version="323" Comment="" NL="\10" Encoding="text" Date="2012/05/17" Time="11:10:10000">
<Copy StartSeek="0" EndSeek="4387"/>
<Insert>	if (!death_by_timeout_org) {
</Insert>
<Copy StartSeek="4415" EndSeek="4462"/>
<Insert>	}
</Insert>
<Copy StartSeek="4463" EndSeek="10559"/>
</Delta>
<Delta Version="324" Comment="" NL="\10" Encoding="text" Date="2012/05/17" Time="11:10:49000">
<Copy StartSeek="0" EndSeek="3267"/>
<Insert>			ct-&gt;timeout.function = death_by_timeout_org;
		}
	}
</Insert>
<Copy StartSeek="3352" EndSeek="10589"/>
</Delta>
<Delta Version="325" Comment="" NL="\10" Encoding="text" Date="2012/05/17" Time="11:13:15000">
<Copy StartSeek="0" EndSeek="5350"/>
<Insert>			pr_info("(%s:%d): helper name: %s, proto %u, dst_port %u\n", __func__, __LINE__,
			       hlp-&gt;name, tup-&gt;dst.protonum, ntohs(tup-&gt;dst.u.all));
</Insert>
<Copy StartSeek="5510" EndSeek="5948"/>
<Insert>static int klna_nc_br_if_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="6033" EndSeek="6369"/>
<Insert>static int klna_nc_br_dev_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="6455" EndSeek="8319"/>
<Insert>	struct vlan_dev_info *dev_info = (struct vlan_dev_info *)netdev_priv(dev);

</Insert>
<Copy StartSeek="8399" EndSeek="8440"/>
<Insert>		pr_info("vlan register %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
</Insert>
<Copy StartSeek="8514" EndSeek="8876"/>
<Insert>static int klna_nc_netdev_event(struct notifier_block *unused, unsigned long event,
			   void *ptr)
{
</Insert>
<Copy StartSeek="8982" EndSeek="10613"/>
</Delta>
<Delta Version="326" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:25:59000">
<Copy StartSeek="0" EndSeek="5441"/>
<Insert>			       hlp-&gt;name, tup-&gt;dst.protonum, 
</Insert>
<Copy StartSeek="5481" EndSeek="10612"/>
</Delta>
<Delta Version="327" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:28:26000">
<Copy StartSeek="0" EndSeek="5947"/>
<Insert>static int 
</Insert>
<Copy StartSeek="5958" EndSeek="10611"/>
</Delta>
<Delta Version="328" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:2000">
<Copy StartSeek="0" EndSeek="6367"/>
<Insert>static int 
</Insert>
<Copy StartSeek="6378" EndSeek="10610"/>
</Delta>
<Delta Version="329" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:5000">
<Copy StartSeek="0" EndSeek="6823"/>
<Insert>static int 
</Insert>
<Copy StartSeek="6834" EndSeek="10609"/>
</Delta>
<Delta Version="330" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:7000">
<Copy StartSeek="0" EndSeek="7446"/>
<Insert>static int 
</Insert>
<Copy StartSeek="7457" EndSeek="10608"/>
</Delta>
<Delta Version="331" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:9000">
<Copy StartSeek="0" EndSeek="8175"/>
<Insert>static int 
</Insert>
<Copy StartSeek="8186" EndSeek="10607"/>
</Delta>
<Delta Version="332" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:11000">
<Copy StartSeek="0" EndSeek="8870"/>
<Insert>static int 
</Insert>
<Copy StartSeek="8881" EndSeek="10606"/>
</Delta>
<Delta Version="333" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:12000">
<Copy StartSeek="0" EndSeek="8313"/>
<Insert>	struct vlan_dev_info *dev_info = 
</Insert>
<Copy StartSeek="8347" EndSeek="10605"/>
</Delta>
<Delta Version="334" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:25000">
<Copy StartSeek="0" EndSeek="8433"/>
<Insert>		pr_info("vlan register %s vid %u\n", 
</Insert>
<Copy StartSeek="8472" EndSeek="10604"/>
</Delta>
<Delta Version="335" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:36000">
<Copy StartSeek="0" EndSeek="8879"/>
<Insert>klna_nc_netdev_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="8952" EndSeek="10603"/>
</Delta>
<Delta Version="336" Comment="" NL="\10" Encoding="text" Date="2012/05/31" Time="16:29:48000">
<Copy StartSeek="0" EndSeek="5958"/>
<Insert>klna_nc_br_if_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="6030" EndSeek="6377"/>
<Insert>klna_nc_br_dev_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="6450" EndSeek="10601"/>
</Delta>
</DeltaFile>
