<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="42" Comment="" Date="2013/06/17" Time="17:50:53000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2012, Marvell Technology Group Ltd.
* All Rights Reserved.
*
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
*
* eth.h
*
* Description:
*     Ethernet Hardware Abstraction Layer API
*
*******************************************************************************/

#ifndef _ETH_H_
#define _ETH_H_

#include &lt;dpa_basic_types.h&gt;
#include &lt;dpa_types.h&gt;
#include &lt;dpa_os.h&gt;

#ifdef __cplusplus
extern "C" {
#endif


/* Marvell header size */
#define ETH_MH_SIZE         2

/* Appended frame CRC size */
#define ETH_CRC_SIZE        4

/* Unspecified pool ID */
#define ETH_POOL_ID_UKNOWN  0xEE

/* Specifies a packet is not part of internal pool */
#define ETH_POOL_ID_FOREIGN 0xFF

/* Default MTU */
#define ETH_DEF_MTU 2000

/* Packet ogirinated in fast path */
#define ETH_IS_PKT_FAST_PATH(pkt) \
  ((pkt)-&gt;pool_id &gt;= 0 &amp;&amp; (pkt)-&gt;pool_id &lt; DPA_ETH_MAX_PORT_NUM)

/* Packet originated in the slow path */
#define ETH_IS_PKT_SLOW_PATH(pkt) \
  ((pkt)-&gt;pool_id == ETH_POOL_ID_FOREIGN)

/* Port range check */
#define ETH_PORT_VALID(port) \
  ((port) &gt;= 0 &amp;&amp; (port) &lt; DPA_ETH_MAX_PORT_NUM)

/* FIXME Make part of port struct &amp; inherit from mv_netdev actual config */
#define ETH_PORT_PON            2
#define ETH_PORT_HAS_MH(port) ((port) == ETH_PORT_PON)

/* Maximum number of supported TConts */
#define ETH_MAX_TCONT 8

/* Maximum number of physical Rx queues per port */
#define ETH_MAX_RXQ_NUM     8

/* Maximum number of physical Rx queues per port */
#define ETH_MAX_TXQ_NUM     8


#ifdef __DPA_CPU_BE__

/* Neta Rx descriptor */
typedef struct {
  uint16_t  data_size;
  uint16_t  pnc_info;
  uint32_t  status;
  uint32_t  pnc_flow_id;
  uint32_t  buf_phys_addr;
  uint16_t  csum_l4;
  uint16_t  prefetch_cmd;
  uint32_t  buf_cookie;
  uint32_t  hw_cmd;
  uint32_t  pnc_extra;
} eth_rx_desc_t;

/* Neta Tx descriptor */
typedef struct {
  uint16_t  data_size;
  uint16_t  csum_l4;
  uint32_t  command;
  uint32_t  hw_cmd;
  uint32_t  buf_phys_addr;
  uint32_t  reserved[4];
} eth_tx_desc_t;

#elif defined(__DPA_CPU_LE__)

/* Neta Rx descriptor */
typedef struct {
  uint32_t  status;
  uint16_t  pnc_info;
  uint16_t  data_size;
  uint32_t  buf_phys_addr;
  uint32_t  pnc_flow_id;
  uint32_t  buf_cookie;
  uint16_t  prefetch_cmd;
  uint16_t  csum_l4;
  uint32_t  pnc_extra;
  uint32_t  hw_cmd;
} eth_rx_desc_t;


/* Neta Tx descriptor */
typedef struct {
  uint32_t  command;
  uint16_t  csum_l4;
  uint16_t  data_size;
  uint32_t  buf_phys_addr;
  uint32_t  hw_cmd;
  uint32_t  reserved[4];
} eth_tx_desc_t;
#else

#error "Please define the endianess"

#endif /* __DPA_CPU_BE__ */


/* Packet processing status */
#define ETH_PKT_STATUS_NONE  ((uint8_t)0x00) /* Unknown status */
#define ETH_PKT_STATUS_FWD   ((uint8_t)0x01) /* Packet fast path forwarded */
#define ETH_PKT_STATUS_LCL   ((uint8_t)0x02) /* Packet relayed to slow path */
#define ETH_PKT_STATUS_DROP  ((uint8_t)0x04) /* Packet dropped */

/* Ethernet packet meta data */
typedef struct {
  eth_rx_desc_t *rx_desc; 	/* Associated rx descriptor if recved pkt */
  uint8_t       *buff; 		/* Virtual memory */
  uint32_t       buff_dma; 	/* Phys. address of the buff */
  uint8_t       *phy_hdr;	/* Phys header pointer. (virt addr space) */
  uint32_t       phy_hdr_dma;	/* Phys header ponter. (phys addr space) */
  dpa_eth_hdr_t *eth_hdr; 	/* ETH header pointer */
  dpa_ppp_hdr_t *ppp_hdr; 	/* PPPoE header pointer */
  dpa_ip_hdr_t  *ip_hdr; 	/* IP header pointer */
  dpa_l4_hdr_t  *l4_hdr; 	/* Layer 4 header pointer */
  uint32_t       hw_cmd; 		/* Tx hardware command */
  void          *os_handle; 	/* OS associated buffer, eg sk_buff */
  void          *dpa_handle; 	/* DPA entry */
  uint16_t       alloc_size; 	/* Size of allocated memory for buff */
  uint16_t       size; 		/* Data size in the buff */ 
  uint8_t        prio; 		/* pkt priority */
  uint8_t        port; 		/* Ethernet port */
  uint8_t        queue; 	/* Ethernet queue */ 
  uint8_t        pool_id;
  uint8_t        status; 	/* Current processing status */ 
  uint8_t        reserved[5]; 	/* Reserved. Must make eth_pkt_t cache-line aligned */
} eth_pkt_t;


/* Ethernet callbacks */
typedef struct { 
  eth_pkt_t *(*pkt_alloc)(uint32_t size);
  void (*pkt_free)(eth_pkt_t* pkt);
  void (*pkt_rx)(eth_pkt_t* pkt);
  void (*rx_done)(uint8_t port);
  void (*tx_done)(uint8_t port, uint32_t sent);
} eth_ops_t;


/* Ethernet port configuration */
typedef struct {
  uint8_t   port;
  uint8_t   rxq_num;
  uint8_t   txq_num;
  uint32_t  mtu;
  uint32_t  rx_desc_num;
  uint32_t  tx_desc_num;
  uint32_t  pkt_pool_size;
  eth_ops_t ops;
  bool      status;
} eth_config_t;


/* Init ethernet port. Allocate Rx &amp; Tx rings and packet buffer pools */
int32_t eth_init(eth_config_t *params);

/* Unmask Rx interrupts */
void eth_irq_enable(uint8_t port);

/* Mask Rx interrupts */
void eth_irq_disable(uint8_t port);

/* Handle port activity */
dpa_irqreturn_t eth_poll(int32_t irq, void *dev);

/* Schedule packet for transmission */
int32_t eth_pkt_tx(eth_pkt_t* pkt);

/* Transmit pending packets on all active ports */
void eth_tx_all(void);

/* Redeem buffer back to pool */
int32_t eth_pkt_put(eth_pkt_t* pkt);

/* Status of a port packet pool */
bool eth_pkt_pool_is_full(uint8_t port);

/* Get port statistics */
int32_t eth_stats_get(uint8_t port, dpa_eth_stats_t* stats);

/* Reset port statistics */
void eth_stats_reset(uint8_t port);

/* Free all port resources */
int32_t eth_shutdown(uint8_t port);

/* Remove all pkts from all ports all queues and return rx decsriptors */
void eth_recv_all(void);

/* Set port egress rate limit */
int32_t eth_egress_rate_set(uint8_t port, uint8_t txp, uint32_t rate);

/* Set port egress burst size (kbit), before port rate limit takes places */
int32_t eth_egress_burst_size_set(uint8_t port, uint8_t txp, uint32_t burst_size);

/* Set Tx queue to work in Strict Priority mode */
int32_t eth_txq_strict_pri_set(uint8_t port, uint8_t txp, uint8_t queue);

/* Set Tx queue to work in Weighted Round Robin mode */
int32_t eth_txq_wrr_pri_set(uint8_t port, uint8_t txp, uint8_t queue, uint16_t weight);

#ifdef __cplusplus
}
#endif

#endif /* _ETH_H_ */
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/08/12" Time="20:00:45000">
<Copy StartSeek="0" EndSeek="2785"/>
<Copy StartSeek="2829" EndSeek="2935"/>
<Insert>  uint8_t       *buff; /* Virtual memory */
</Insert>
<Copy StartSeek="2938" EndSeek="4926"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/08/12" Time="20:27:43000">
<Copy StartSeek="0" EndSeek="2935"/>
<Insert>  
  uint16_t      alloc_size; /* Size of allocated memory for buff */
</Insert>
<Copy StartSeek="2935" EndSeek="3147"/>
<Copy StartSeek="3215" EndSeek="4923"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/08/12" Time="20:28:50000">
<Copy StartSeek="0" EndSeek="3147"/>
<Insert>  uint16_t      alloc_size; /* Size of allocated memory for buff */
</Insert>
<Copy StartSeek="3147" EndSeek="3191"/>
<Copy StartSeek="3259" EndSeek="4923"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/08/12" Time="20:30:52000">
<Copy StartSeek="0" EndSeek="2479"/>
<Insert>  eth_rx_desc_t *rx_desc; /* Associated rx descriptor if recved pkt */
</Insert>
<Copy StartSeek="2479" EndSeek="2864"/>
<Copy StartSeek="2935" EndSeek="4923"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/08/12" Time="20:50:37000">
<Copy StartSeek="0" EndSeek="2479"/>
<Insert>  uint16_t      size; /* Data size in the buff */
  uint16_t      offset; /* Data start offset in the buff */
</Insert>
<Copy StartSeek="2479" EndSeek="2648"/>
<Copy StartSeek="2758" EndSeek="4923"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/08/12" Time="20:50:45000">
<Copy StartSeek="0" EndSeek="2479"/>
<Copy StartSeek="2660" EndSeek="2785"/>
<Insert>  uint8_t       *buff; /* Virtual memory */
  uint16_t      size; /* Data size in the buff */
  uint16_t      offset; /* Data start offset in the buff */
</Insert>
<Copy StartSeek="2785" EndSeek="2891"/>
<Insert>  eth_rx_desc_t *rx_desc; /* Associated rx descriptor if recved pkt */
</Insert>
<Copy StartSeek="3003" EndSeek="3259"/>
<Insert>  uint16_t      alloc_size; /* Size of allocated memory for buff */
</Insert>
<Copy StartSeek="3259" EndSeek="4923"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/08/12" Time="20:51:2000">
<Copy StartSeek="0" EndSeek="1904"/>
<Insert>#else
</Insert>
<Copy StartSeek="1934" EndSeek="2423"/>
<Insert>
</Insert>
<Copy StartSeek="2468" EndSeek="2498"/>
<Copy StartSeek="2770" EndSeek="2819"/>
<Insert>  eth_rx_desc_t *rx_desc; /* Associated rx descriptor if recved pkt */
  uint16_t      size; /* Data size in the buff */
  uint16_t      offset; /* Data start offset in the buff */
  uint8_t       pool_id; /* pool id */
  uint8_t       port; /* Ethernet port */
  uint8_t       queue; /* Ethernet queue */
  uint32_t      phys_addr; /* Phys. address of the buff */
  uint32_t      cmd; /* Tx hardware command */
  uint8_t       *buff; /* Virtual memory */
  uint16_t      alloc_size; /* Size of allocated memory for buff */
  void          *os_handle; /* OS associated buffer, eg sk_buff */
  void          *dpa_handle; /* DPA entry */
  dpa_eth_hdr_t *eth_hdr; /* ETH header pointer */
  dpa_ip_hdr_t  *ip_hdr; /* IP header pointer */
  uint8_t       reserved[4]; /* Reserved */
</Insert>
<Copy StartSeek="3700" EndSeek="4346"/>
<Copy StartSeek="4392" EndSeek="4408"/>
<Copy StartSeek="4409" EndSeek="4675"/>
<Insert>int32_t eth_poll(uint8_t port);
</Insert>
<Copy StartSeek="4704" EndSeek="5004"/>
<Insert>/* Notify of a buffer lease (will refill Rx descriptor) */
int32_t eth_pkt_lease(eth_pkt_t* pkt);

</Insert>
<Copy StartSeek="5004" EndSeek="5309"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/09/02" Time="15:14:29000">
<Copy StartSeek="0" EndSeek="3651"/>
<Insert>  uint8_t           reserved[18]; /* Reserved */
</Insert>
<Copy StartSeek="3699" EndSeek="5308"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/09/03" Time="10:27:37000">
<Copy StartSeek="0" EndSeek="701"/>
<Insert>/* Maximum number of physical ports */
#define ETH_MAX_PORT_NUM    3

</Insert>
<Copy StartSeek="702" EndSeek="1041"/>
<Insert>  ((pkt)-&gt;pool_id &gt;= 0 &amp;&amp; (pkt)-&gt;pool_id &lt; ETH_MAX_PORT_NUM)
</Insert>
<Copy StartSeek="1106" EndSeek="1281"/>
<Insert>  ((port) &gt;= 0 &amp;&amp; (port) &lt; ETH_MAX_PORT_NUM)
</Insert>
<Copy StartSeek="1330" EndSeek="2468"/>
<Insert>typedef enum {
  ETH_PKT_STATUS_NONE = 0x0, /* Unknown status */
  ETH_PKT_STATUS_FWD, /* Packet fast path forwarded */
  ETH_PKT_STATUS_LCL, /* Packet relayed to slow path */
  ETH_PKT_STATUS_DROP /* Packet dropped */
} eth_pkt_status_t;


</Insert>
<Copy StartSeek="2758" EndSeek="2807"/>
<Insert>  eth_rx_desc_t    *rx_desc; /* Associated rx descriptor if recved pkt */
  uint16_t          size; /* Data size in the buff */
  uint16_t          offset; /* Data start offset in the buff */
  uint8_t          *buff; /* Virtual memory */
  uint8_t           port; /* Ethernet port */
  uint8_t           queue; /* Ethernet queue */
  uint16_t          alloc_size; /* Size of allocated memory for buff */
  uint32_t          phys_addr; /* Phys. address of the buff */
  uint32_t          cmd; /* Tx hardware command */
  void             *os_handle; /* OS associated buffer, eg sk_buff */
  void             *dpa_handle; /* DPA entry */
  uint8_t           pool_id;
  dpa_eth_hdr_t    *eth_hdr; /* ETH header pointer */
  dpa_ip_hdr_t     *ip_hdr; /* IP header pointer */
  eth_pkt_status_t  status; /* Current processing status */
  uint8_t           reserved[4]; /* Reserved */
</Insert>
<Copy StartSeek="3727" EndSeek="3742"/>
<Copy StartSeek="4130" EndSeek="4285"/>
<Copy StartSeek="4318" EndSeek="4603"/>
<Copy StartSeek="4623" EndSeek="4640"/>
<Insert>/* Ethernet port statistics */
typedef struct {
  uint32_t rx_pkts;
  uint32_t tx_pkts;
  uint32_t rx_bytes;
  uint32_t tx_bytes;
  uint32_t rx_errors;
  uint32_t tx_errors;
  uint32_t rx_dropped;
  uint32_t tx_dropped;
} eth_stats_t;


</Insert>
<Copy StartSeek="4641" EndSeek="5262"/>
<Insert>int32_t eth_get_stats(uint8_t port, eth_stats_t* stats);
</Insert>
<Copy StartSeek="5323" EndSeek="5324"/>
<Copy StartSeek="5389" EndSeek="5610"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="17:59:15000">
<Copy StartSeek="0" EndSeek="3641"/>
<Insert>  uint8_t        reserved[22]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3727" EndSeek="5610"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="18:00:3000">
<Copy StartSeek="0" EndSeek="3641"/>
<Insert>  uint8_t        reserved[19]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3727" EndSeek="5610"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="18:02:36000">
<Copy StartSeek="0" EndSeek="3641"/>
<Insert>  uint8_t        reserved[22]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3727" EndSeek="5610"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="18:02:37000">
<Copy StartSeek="0" EndSeek="3316"/>
<Insert>  uint32_t       prio; /* pkt priority */
</Insert>
<Copy StartSeek="3357" EndSeek="5609"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="18:02:42000">
<Copy StartSeek="0" EndSeek="3208"/>
<Copy StartSeek="3249" EndSeek="3357"/>
<Insert>  uint8_t       prio; /* pkt priority */
</Insert>
<Copy StartSeek="3357" EndSeek="5609"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="18:02:47000">
<Copy StartSeek="0" EndSeek="3208"/>
<Insert>  uint8_t       prio; /* pkt priority */
</Insert>
<Copy StartSeek="3250" EndSeek="5610"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="18:02:50000">
<Copy StartSeek="0" EndSeek="3641"/>
<Insert>  uint8_t        reserved[21]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3727" EndSeek="5610"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/10/15" Time="18:03:38000">
<Copy StartSeek="0" EndSeek="3208"/>
<Insert>  uint8_t        prio; /* pkt priority */
</Insert>
<Copy StartSeek="3250" EndSeek="5610"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="09:30:29000">
<Copy StartSeek="0" EndSeek="3641"/>
<Insert>  uint8_t        reserved[22]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3727" EndSeek="5610"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="09:30:34000">
<Copy StartSeek="0" EndSeek="3727"/>
<Insert>} eth_pkt_t;
</Insert>
<Copy StartSeek="3764" EndSeek="5634"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="09:30:51000">
<Copy StartSeek="0" EndSeek="3208"/>
<Insert>  uint32_t       prio; /* pkt priority */
</Insert>
<Copy StartSeek="3249" EndSeek="3640"/>
<Insert>  uint8_t        reserved[18]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3726" EndSeek="5633"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="10:07:23000">
<Copy StartSeek="0" EndSeek="3208"/>
<Insert>  uint8_t       prio; /* pkt priority */
</Insert>
<Copy StartSeek="3250" EndSeek="5634"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="10:29:0000">
<Copy StartSeek="0" EndSeek="2878"/>
<Copy StartSeek="3144" EndSeek="3256"/>
<Insert>  uint8_t       *buff; /* Virtual memory */ 
</Insert>
<Copy StartSeek="3257" EndSeek="3472"/>
<Insert>  uint32_t       phys_addr; /* Phys. address of the buff */
  uint32_t       cmd; /* Tx hardware command */
  void          *os_handle; /* OS associated buffer, eg sk_buff */
  void          *dpa_handle; /* DPA entry */
</Insert>
<Copy StartSeek="3472" EndSeek="5636"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/10/17" Time="11:04:49000">
<Copy StartSeek="0" EndSeek="3143"/>
<Insert>
</Insert>
<Copy StartSeek="3246" EndSeek="3358"/>
<Insert>
</Insert>
<Copy StartSeek="3427" EndSeek="3642"/>
<Insert>  dpa_eth_hdr_t *eth_hdr; /* ETH header pointer */
  dpa_ip_hdr_t  *ip_hdr; /* IP header pointer */  
  uint16_t       alloc_size; /* Size of allocated memory for buff */
</Insert>
<Copy StartSeek="3643" EndSeek="5636"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/10/17" Time="11:05:5000">
<Copy StartSeek="0" EndSeek="3427"/>
<Copy StartSeek="3428" EndSeek="5637"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/10/17" Time="11:05:7000">
<Copy StartSeek="0" EndSeek="2878"/>
<Copy StartSeek="2990" EndSeek="3035"/>
<Copy StartSeek="3208" EndSeek="3530"/>
<Insert>
  uint16_t       size; /* Data size in the buff */
  uint16_t       offset; /* Data start offset in the buff */
</Insert>
<Copy StartSeek="3530" EndSeek="3599"/>
<Insert>
  uint8_t        port; /* Ethernet port */
  uint8_t        queue; /* Ethernet queue */ 
  uint8_t        pool_id;
  uint8_t        status; /* Current processing status */ 
</Insert>
<Copy StartSeek="3599" EndSeek="3641"/>
<Insert>
</Insert>
<Copy StartSeek="3641" EndSeek="5634"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/10/18" Time="15:19:32000">
<Copy StartSeek="0" EndSeek="3727"/>
<Insert>} __attribute__((packed)) eth_pkt_t;
</Insert>
<Copy StartSeek="3740" EndSeek="5610"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/10/18" Time="15:19:45000">
<Copy StartSeek="0" EndSeek="4366"/>
<Copy StartSeek="4385" EndSeek="5629"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/10/22" Time="11:04:16000">
<Copy StartSeek="0" EndSeek="3530"/>
<Copy StartSeek="3581" EndSeek="4417"/>
<Insert>  bool irq_enable;
</Insert>
<Copy StartSeek="4417" EndSeek="5661"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/11/21" Time="09:50:42000">
<Copy StartSeek="0" EndSeek="3692"/>
<Insert>  uint8_t        reserved[21]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3778" EndSeek="5661"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/11/21" Time="09:51:13000">
<Copy StartSeek="0" EndSeek="3692"/>
<Insert>  uint8_t        reserved[17]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3778" EndSeek="5661"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/12/12" Time="16:32:34000">
<Copy StartSeek="0" EndSeek="3692"/>
<Insert>//uint8_t        reserved[17]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3778" EndSeek="5661"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/12/12" Time="16:52:11000">
<Copy StartSeek="0" EndSeek="968"/>
<Insert>/* PAcket ogirinated in fast path */
</Insert>
<Copy StartSeek="1005" EndSeek="2878"/>
<Insert>  uint16_t       size; /* Data size in the buff */
  uint16_t       offset; /* Data start offset in the buff */
  uint8_t       *buff; /* Virtual memory */ 
  uint8_t        port; /* Ethernet port */
  uint8_t        queue; /* Ethernet queue */ 
  uint8_t        pool_id;
  uint8_t        status; /* Current processing status */ 
  uint32_t       phys_addr; /* Phys. address of the buff */
</Insert>
<Copy StartSeek="3191" EndSeek="3351"/>
<Insert>  dpa_eth_hdr_t *eth_hdr; /* ETH header pointer */
  dpa_ip_hdr_t  *ip_hdr; /* IP header pointer */  
  dpa_l4_hdr_t  *l4_hdr;  /* generic l4 pointer */
</Insert>
<Copy StartSeek="3351" EndSeek="3420"/>
<Copy StartSeek="3472" EndSeek="3514"/>
<Insert>  uint8_t        reserved[17]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3772" EndSeek="5655"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="09:07:34000">
<Copy StartSeek="0" EndSeek="3137"/>
<Insert>  void          *l4_hdr; /* Layer 4 header pointer */
</Insert>
<Copy StartSeek="3191" EndSeek="5655"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="10:31:45000">
<Copy StartSeek="0" EndSeek="2807"/>
<Insert>  eth_rx_desc_t *rx_desc; /* Associated rx descriptor if recved pkt */
  uint8_t       *buff; /* Virtual memory */
  uint32_t       buff_dma; /* Phys. address of the buff */
  uint8_t       *phy_hdr;
  uint32_t       phy_hdr_dma;
  dpa_eth_hdr_t *eth_hdr; /* ETH header pointer */
  dpa_ip_hdr_t  *ip_hdr; /* IP header pointer */
  dpa_l4_hdr_t  *l4_hdr; /* Layer 4 header pointer */
  uint32_t       cmd; /* Tx hardware command */
  void          *os_handle; /* OS associated buffer, eg sk_buff */
  void          *dpa_handle; /* DPA entry */
  uint16_t       alloc_size; /* Size of allocated memory for buff */
  uint16_t       size; /* Data size in the buff */ 
  uint8_t        prio; /* pkt priority */
  uint8_t        port; /* Ethernet port */
  uint8_t        queue; /* Ethernet queue */ 
</Insert>
<Copy StartSeek="3711" EndSeek="3737"/>
<Insert>  uint8_t        status; /* Current processing status */ 
  uint8_t        reserved[9]; /* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="3882" EndSeek="5765"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="10:34:12000">
<Copy StartSeek="0" EndSeek="660"/>
<Insert>
</Insert>
<Copy StartSeek="681" EndSeek="1351"/>
<Insert>
</Insert>
<Copy StartSeek="1518" EndSeek="3473"/>
<Copy StartSeek="3531" EndSeek="5306"/>
<Insert>void eth_poll(uint8_t port);
</Insert>
<Copy StartSeek="5356" EndSeek="5357"/>
<Copy StartSeek="5478" EndSeek="6151"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:06:6000">
<Copy StartSeek="0" EndSeek="3473"/>
<Insert>  queue_t        *pkt_pool; 	/* Layer 4 header pointer */
</Insert>
<Copy StartSeek="3473" EndSeek="6093"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2013/04/21" Time="16:09:32000">
<Copy StartSeek="0" EndSeek="1351"/>
<Insert>/* FIXME Make part of port struct &amp; inherit from mv_netdev actual config */
#define ETH_PORT_PON            2
#define ETH_PORT_HAS_MH(port) ((port) == ETH_PORT_PON)


</Insert>
<Copy StartSeek="1352" EndSeek="5082"/>
<Insert>dpa_irqreturn_t eth_poll(int32_t irq, void *dev);
</Insert>
<Copy StartSeek="5131" EndSeek="5926"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:08:10000">
<Copy StartSeek="0" EndSeek="5082"/>
<Insert>dpa_irqreturn_t eth_irq(int32_t irq, void *dev);
</Insert>
<Copy StartSeek="5132" EndSeek="5927"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2013/06/02" Time="17:41:30000">
<Copy StartSeek="0" EndSeek="988"/>
<Copy StartSeek="1032" EndSeek="1395"/>
<Insert>
</Insert>
<Copy StartSeek="1794" EndSeek="3644"/>
<Copy StartSeek="3698" EndSeek="3803"/>
<Insert>  uint32_t       cmd; 		/* Tx hardware command */
</Insert>
<Copy StartSeek="3856" EndSeek="4416"/>
<Insert>/* Ethernet meta data timestamp counters */
typedef struct {
  uint32_t ts_dpa_rx;
  uint32_t ts_spa_rx;
  uint32_t ts_spa_tx;
  uint32_t ts_dpa_tx;
  uint32_t pkts;
} eth_pkt_dbg_t;


#define ETH_PKT_DBG(pkt) ((eth_pkt_dbg_t*) &amp;(pkt)-&gt;reserved[2])

#define ETH_PKT_TS(pkt,counter)  \
  do { eth_pkt_dbg_t* d = ETH_PKT_DBG(pkt); \
       PERF_COUNTER_GET(0, d-&gt;counter); } \
  while(0)


</Insert>
<Copy StartSeek="4416" EndSeek="5244"/>
<Insert>void eth_rx_port(uint8_t port, uint8_t rx_queue);
void eth_rx_desc_return_all_ports(void);
void eth_tx_all_ports(void);

</Insert>
<Copy StartSeek="5244" EndSeek="5863"/>
<Insert>
</Insert>
<Copy StartSeek="6400" EndSeek="6450"/>
<Insert>


</Insert>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="17:50:21000">
<Copy StartSeek="0" EndSeek="3644"/>
<Insert>  dpa_pppoe_hdr_t *eth_hdr; 	/* ETH header pointer */
</Insert>
<Copy StartSeek="3700" EndSeek="6452"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="17:50:30000">
<Copy StartSeek="0" EndSeek="3644"/>
<Insert>  dpa_pppoe_hdr_t *ppp_hdr; 	/* PPPoE header pointer */
</Insert>
<Copy StartSeek="3698" EndSeek="6450"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="17:50:48000">
<Copy StartSeek="0" EndSeek="4315"/>
<Insert>  uint8_t        reserved[9]; 	/* Reserved. Must make eth_pkt_t cache-line aligned */
</Insert>
<Copy StartSeek="4401" EndSeek="6450"/>
</Delta>
</DeltaFile>
