<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="79" Comment="" Date="2013/06/26" Time="20:29:9000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2013, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
* dpa_types.h
*
* Description:
*       DPA types definitions
*
*******************************************************************************/

#ifndef _DPA_TYPES_H_
#define _DPA_TYPES_H_

#ifdef __cplusplus
extern "C" {
#endif

#include &lt;dpa_basic_types.h&gt;
#include &lt;dpa_errors.h&gt;
#include &lt;dpa_event_types.h&gt;


/* Number of physical ports */
#define DPA_ETH_MAX_PORT_NUM    (3)


#define __DPA_CPU_LE__

/*
 * typedef: enum dpa_addr_type_t
 *
 * Description: 
 *
 * Represents IPv4 or IPv6 network address.
 *
 * Enumerations:
 *
 *     DPA_IPV4 - IPv4 network address.
 *     DPA_IPV6 - IPv6 network address.
 */
typedef enum
{
  DPA_IPV4,
  DPA_IPV6
} dpa_addr_type_t;


/*
 * typedef: struct dpa_ipaddr_t
 *
 * Description: 
 *
 * Represents IPv4 or IPv6 network address.
 *
 * Fields:
 *
 *     addr_type - Type of internet address present in the structure.
 *     ipv4      - IPv4 network address.
 *     ipv6      - IPv6 network address.
 */
typedef struct
{
  dpa_addr_type_t addr_type;
  uint32_t ipv4;
  uint32_t ipv6[4];
} dpa_ipaddr_t;


/*
 * typedef: dpa_macaddr_t
 *
 * Description: 
 *
 * Represents MAC address.
 *
 */
typedef uint8_t dpa_macaddr_t[6];

/* 
 * typedef: struct dpa_log_params_t
 *
 * Description:
 *
 * Specifies Parameters for logging.
 *
 * Fields:
 * local_status               - Print log locally.
 * stats_logging_interval_sec - Statistics reporting interval, 0 to disable.
 * log_api                    - Log api calls.
 * syslog                     - syslog parameters.
 *
 */
typedef struct
{
  bool         local_status;
  uint32_t     stats_logging_interval_sec;
  bool         log_api;
  struct {
    dpa_ipaddr_t remote_addr;
    uint16_t     remote_port;
    bool         status;
  } syslog;
} dpa_log_params_t;


/*
 * typedef: struct dpa_eth_stats_t
 *
 * Description: 
 *
 *  Ethernet port statistics.
 *
 * Fields:
 *
 *  rx_pkts    - Total number of received packets.
 *  tx_pkts    - Total number of transmitted packets.
 *  rx_bytes   - Total number of received bytes.
 *  tx_bytes   - Total number of transmitted bytes.
 *  rx_errors  - Number of reception errors.
 *  tx_errors  - Number of transmission errors.
 *  rx_dropped - Number of packets dropped on reception.
 *  tx_dropped - Number of packets dropped on transmission.
 */
typedef struct {
  uint32_t rx_pkts;
  uint32_t tx_pkts;
  uint32_t rx_bytes;
  uint32_t tx_bytes;
  uint32_t rx_errors;
  uint32_t tx_errors;
  uint32_t rx_dropped;
  uint32_t tx_dropped;
} dpa_eth_stats_t;


/*
 * typedef: struct dpa_flow_stats_t
 *
 * Description: 
 *
 *  Flow packet statistics.
 *
 * Fields:
 *
 *  rx_pkts[0]    - Total number of received packets. (low)
 *  rx_pkts[1]    - Total number of received packets. (high)
 *  tx_pkts[0]    - Total number of transmitted packets. (low)
 *  tx_pkts[1]    - Total number of transmitted packets. (high)
 *  rx_bytes[0]   - Total number of received bytes.  (low)
 *  rx_bytes[1]   - Total number of received bytes.  (high)
 *  tx_bytes[0]   - Total number of transmitted bytes. (low)
 *  tx_bytes[1]   - Total number of transmitted bytes. (high)
 *  rx_errors     - Number of reception errors.
 *  tx_errors     - Number of transmission errors.
 */
typedef struct {
  uint32_t rx_pkts[2];
  uint32_t tx_pkts[2];
  uint32_t rx_bytes[2];
  uint32_t tx_bytes[2];
  uint32_t rx_errors;
  uint32_t tx_errors;
} dpa_flow_stats_t;


/* manual handling of 64 bit counters as 2 regs x 32bit */
static inline void uint64split_sum(uint32_t *val, uint32_t increment)
{
  uint32_t low = val[0];
  uint32_t low_new = val[0] + increment;
  if (low_new &lt; low) {
    val[1] += 1; /* wraparound - increment high reg */
  }
  val[0] = low_new;
}

static inline void uint64split_reset(uint32_t *val) 
{
  val[0] = val[1] = 0;
}

static inline uint64_t uint64split_to_uint64(uint32_t *val)
{
  uint64_t tmp = (uint64_t) val[1];

  return ((tmp &lt;&lt; 32) + val[0]);
}


/*
 * typedef: struct dpa_pkt_stats_t
 *
 * Description: 
 *
 *  Holds DPA traffic statistics.
 *
 * Fields:
 *
 *  dropped_pkts - Number of packets dropped on reception.
 *  fwd_pkts     - Number of fast forwarded packets.
 *  lcl_rx_pkts  - Number of packets received by slow path network stack.
 *  lcl_tx_pkts  - Number of packets transmitted by slow path network stack.
 */
typedef struct {
  uint32_t dropped_pkts;
  uint32_t fwd_pkts;
  uint32_t lcl_rx_pkts;
  uint32_t lcl_tx_pkts;
} dpa_pkt_stats_t;


/*
 * typedef: struct dpa_pkt_alloc_stats_t
 *
 * Description: 
 *
 *  Holds DPA packet allocation statistics.
 *
 * Fields:
 *
 * alloc_pkts            - Total number of allocated packets. 
 * free_pkts             - Total number of freed packets.
 * fast_path_alloc_pkts  - Number of packets allocated in the fast path context.
 * fast_path_free_pkts   - Number of packets freed in the fast path context.
 * slow_path_alloc_pkts  - Number of packets allocated in the slow path context.
 * slow_path_free_pkts   - Number of packets freed in the slow path context.
 *
 */
typedef struct {
  uint32_t alloc_pkts;
  uint32_t free_pkts;
  uint32_t fast_path_alloc_pkts;
  uint32_t fast_path_free_pkts;
  uint32_t slow_path_alloc_pkts;
  uint32_t slow_path_free_pkts;
} dpa_pkt_alloc_stats_t;

/*
 * typedef: struct dpa_stats_t
 *
 * Description: 
 *
 *  Holds DPA system statistics. 
 *
 * Fields:
 *
 *  eth_stats       - Ethernet port statistics.
 *  pkt_stats       - Packet statistics.
 *  pkt_alloc_stats - Packet allocation statistics.
 *
 */
typedef struct
{
  dpa_eth_stats_t       eth[DPA_ETH_MAX_PORT_NUM];
  dpa_pkt_stats_t       pkt;
  dpa_pkt_alloc_stats_t pkt_alloc;
} dpa_stats_t;


typedef struct {
#if defined(__DPA_CPU_LE__)
  uint8_t  ihl:4,
    version:4;
#elif defined (__DPA_CPU_BE__)
  uint8_t  version:4,
      ihl:4;
#else
#error "Please fix byte order"
#endif
  uint8_t  tos;
  uint16_t  tot_len;
  uint16_t  id;
  uint16_t  frag_off;
  uint8_t  ttl;
  uint8_t  protocol;
  uint16_t check;
  uint32_t  saddr;
  uint32_t  daddr;
  /*The options start here. */
} dpa_ip_hdr_t;

typedef struct {
  uint16_t source;
  uint16_t dest;
} dpa_l4_hdr_t;

typedef struct {
  uint16_t source;
  uint16_t dest;
  uint16_t len;
  uint16_t check;
} dpa_udp_hdr_t;

typedef struct {
  uint16_t  source;
  uint16_t  dest;
  uint32_t  seq;
  uint32_t  ack_seq;
#if defined(__DPA_CPU_LE__)
  uint16_t res1:4,
    doff:4,
    fin:1,
    syn:1,
    rst:1,
    psh:1,
    ack:1,
    urg:1,
    ece:1,
    cwr:1;
#elif defined(__DPA_CPU_BE__)
  uint16_t doff:4,
    res1:4,
    cwr:1,
    ece:1,
    urg:1,
    ack:1,
    psh:1,
    rst:1,
    syn:1,
    fin:1;
#else
#error "Please fix byte order"
#endif
  uint16_t window;
  uint16_t check;
  uint16_t urg_ptr;
} dpa_tcp_hdr_t;

#define DPA_ETH_P_IP	  0x0800  /* IPv4 */
#define DPA_ETH_P_IPV6	  0x86DD  /* IPv6 */
#define DPA_ETH_P_ARP     0x0806
#define DPA_ETH_P_8021Q	  0x8100 /* 802.1Q VLAN Extended Header  */
#define DPA_ETH_P_PPP_SES 0x8864 /* PPPoE session messages	*/

#define DPA_VLAN_HLEN   4 /* VLAN header length */
#define DPA_ETH_HLEN    14 /* Ethernet header length */
typedef struct {
  uint8_t  h_dest[6]; /* destination eth addr */
  uint8_t  h_source[6]; /* source ether addr  */
  uint16_t h_proto; /* packet type ID field */
} dpa_eth_hdr_t;

#define VLAN_VID_MASK	0xfff
typedef struct {
  uint8_t  h_dest[6];     /* destination eth addr */
  uint8_t  h_source[6];   /* source ether addr  */
  uint16_t h_vlan_proto;  /* h_vlan_proto: eth proto (always 0x8100) */
  uint16_t h_vlan_TCI;
  uint16_t h_vlan_encapsulated_proto;
} dpa_vlan_ethhdr_t;

typedef struct {
#if defined(__DPA_CPU_LE__)
	uint8_t ver:4;
	uint8_t type:4;
#elif defined(__DPA_CPU_BE__)
	uint8_t type:4;
	uint8_t ver:4;
#else
#error "Please fix byte order"
#endif
	uint8_t code;
	uint16_t sid;
	uint16_t length;
	uint16_t ppp_proto;
} __attribute__((packed)) dpa_ppp_hdr_t;

typedef enum {
  DPA_IP_PROTO_NULL = 0, /* Dummy protocol for TCP               */
  DPA_IP_PROTO_ICMP = 1, /* Internet Control Message Protocol    */
  DPA_IP_PROTO_IGMP = 2, /* Internet Group Management Protocol   */
  DPA_IP_PROTO_IPIP = 4, /* IPIP tunnels (older KA9Q tunnels use 94) */
  DPA_IP_PROTO_TCP = 6,  /* Transmission Control Protocol        */
  DPA_IP_PROTO_EGP = 8,  /* Exterior Gateway Protocol            */
  DPA_IP_PROTO_PUP = 12, /* PUP protocol                         */
  DPA_IP_PROTO_UDP = 17, /* User Datagram Protocol               */
  DPA_IP_PROTO_IDP = 22, /* XNS IDP protocol                     */
  DPA_IP_PROTO_DCCP = 33,  /* Datagram Congestion Control Protocol */
  DPA_IP_PROTO_IPV6 = 41,  /* IPv6-in-IPv4 tunnelling              */
  DPA_IP_PROTO_RSVP = 46,  /* RSVP protocol                        */
  DPA_IP_PROTO_GRE = 47, /* Cisco GRE tunnels (rfc 1701,1702)    */
  DPA_IP_PROTO_ESP = 50, /* Encapsulation Security Payload protocol */
  DPA_IP_PROTO_AH = 51,  /* Authentication Header protocol       */
  DPA_IP_PROTO_BEETPH = 94,  /* IP option pseudo header for BEET     */
  DPA_IP_PROTO_PIM = 103,
  DPA_IP_PROTO_COMP = 108, /* Compression Header protocol          */
  DPA_IP_PROTO_ZERO_HOP = 114, /* Any 0 hop protocol (IANA)            */
  DPA_IP_PROTO_SCTP = 132, /* Stream Control Transport Protocol    */
  DPA_IP_PROTO_UDPLITE = 136,  /* UDP-Lite (RFC 3828)                  */

  DPA_IP_PROTO_RAW = 255,  /* Raw IP packets                       */
  DPA_IP_PROTO_MAX
} dpa_ip_proto_t;

/* Packet Rx/Tx priorities */
typedef enum {
  DPA_PKT_PRI_MIN = 0,
  DPA_PKT_PRI_MAX = 1,
  DPA_PKT_PRI_NUM = 2,
} dpa_pkt_prio_t;

#ifdef __cplusplus
}
#endif


#endif 
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/09/03" Time="10:33:44000">
<Copy StartSeek="0" EndSeek="5085"/>
<Insert>
</Insert>
<Copy StartSeek="5194" EndSeek="7466"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/09/04" Time="10:44:59000">
<Copy StartSeek="0" EndSeek="5102"/>
<Insert>  u_int16_t source;
  u_int16_t dest;
  u_int16_t len;
  u_int16_t check;
</Insert>
<Copy StartSeek="5172" EndSeek="7462"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/09/04" Time="10:46:37000">
<Copy StartSeek="0" EndSeek="775"/>
<Insert>#define DPA_ETH_MAX_PORT_NUM    (3)
</Insert>
<Copy StartSeek="811" EndSeek="4531"/>
<Insert>  dpa_eth_stats_t       eth_stats[DPA_ETH_MAX_PORT_NUM];
  dpa_pkt_stats_t       pkt_stats;
  dpa_pkt_alloc_stats_t pkt_alloc_stats;
</Insert>
<Copy StartSeek="4646" EndSeek="7405"/>
<Insert>
</Insert>
<Copy StartSeek="7538" EndSeek="7576"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="12:05:3000">
<Copy StartSeek="0" EndSeek="7405"/>
<Copy StartSeek="7492" EndSeek="7663"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="15:04:52000">
<Copy StartSeek="0" EndSeek="7420"/>
<Insert>  DPA_ETH_P_ARP	0x0806		/* Address Resolution packet	*/
</Insert>
<Copy StartSeek="7478" EndSeek="7665"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="15:05:41000">
<Copy StartSeek="0" EndSeek="7420"/>
<Insert>  DPA_ETH_P_ARP	= 0x0806		/* Address Resolution packet	*/
</Insert>
<Copy StartSeek="7479" EndSeek="7666"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="15:05:43000">
<Copy StartSeek="0" EndSeek="7405"/>
<Insert>typedef enum {
  DPA_ETH_P_ARP	= 0x0806,		/* Address Resolution packet	*/
} dpa_eth_p_t;

</Insert>
<Copy StartSeek="7405" EndSeek="7576"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="15:08:18000">
<Copy StartSeek="0" EndSeek="5680"/>
<Insert>
</Insert>
<Copy StartSeek="5777" EndSeek="7672"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="11:53:34000">
<Copy StartSeek="0" EndSeek="5680"/>
<Copy StartSeek="5708" EndSeek="7700"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="11:56:30000">
<Copy StartSeek="0" EndSeek="5708"/>
<Copy StartSeek="5882" EndSeek="5899"/>
<Insert>	uint16_t  h_vlan_TCI;
	uint16_t  h_vlan_encapsulated_proto;
} dpa_vlan_hdr_t;

typedef struct {
</Insert>
<Copy StartSeek="5899" EndSeek="7777"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="12:00:43000">
<Copy StartSeek="0" EndSeek="5708"/>
<Insert>
</Insert>
<Copy StartSeek="5708" EndSeek="7776"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="12:00:44000">
<Copy StartSeek="0" EndSeek="5708"/>
<Insert>struct vlan_ethhdr {
</Insert>
<Copy StartSeek="5724" EndSeek="5872"/>
<Insert>};
</Insert>
<Copy StartSeek="5891" EndSeek="7787"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="12:01:2000">
<Copy StartSeek="0" EndSeek="5680"/>
<Copy StartSeek="5860" EndSeek="5888"/>
<Insert>typdef struct {
</Insert>
<Copy StartSeek="5905" EndSeek="6073"/>
<Insert>typedef struct {
  uint8_t  h_dest[6]; /* destination eth addr */
  uint8_t  h_source[6]; /* source ether addr  */
  uint16_t h_proto; /* packet type ID field */
} dpa_eth_hdr_t;


</Insert>
<Copy StartSeek="6074" EndSeek="7788"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:32:14000">
<Copy StartSeek="0" EndSeek="5905"/>
<Insert>	unsigned char	h_dest[ETH_ALEN];
	unsigned char	h_source[ETH_ALEN];
	__be16		h_vlan_proto;
	__be16		h_vlan_TCI;
	__be16		h_vlan_encapsulated_proto;
} dpa_vlan_ethhdr;


</Insert>
<Copy StartSeek="6012" EndSeek="7726"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:33:10000">
<Copy StartSeek="0" EndSeek="5680"/>
<Copy StartSeek="5681" EndSeek="6012"/>
<Insert>
</Insert>
<Copy StartSeek="6012" EndSeek="7726"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:34:55000">
<Copy StartSeek="0" EndSeek="5861"/>
<Insert>#define VLAN_VID_MASK	0xfff
</Insert>
<Copy StartSeek="5861" EndSeek="5903"/>
<Copy StartSeek="5933" EndSeek="7728"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:35:7000">
<Copy StartSeek="0" EndSeek="5861"/>
<Copy StartSeek="5889" EndSeek="5931"/>
<Insert>  #define VLAN_VID_MASK	0xfff
</Insert>
<Copy StartSeek="5931" EndSeek="7726"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:35:19000">
<Copy StartSeek="0" EndSeek="5906"/>
<Insert>  dpa_eth_hdr_t eth_hdr;
</Insert>
<Copy StartSeek="6057" EndSeek="7852"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:36:27000">
<Copy StartSeek="0" EndSeek="6006"/>
<Insert>  uint16_t h_proto;     /* packet type ID field */
</Insert>
<Copy StartSeek="6062" EndSeek="7857"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:40:25000">
<Copy StartSeek="0" EndSeek="6006"/>
<Insert>  uint16_t	h_vlan_proto;     /* packet type ID field */
	uint16_t	h_vlan_TCI;
	uint16_t	h_vlan_encapsulated_proto;
</Insert>
<Copy StartSeek="6121" EndSeek="7857"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:40:31000">
<Copy StartSeek="0" EndSeek="6006"/>
<Insert>  uint16_t h_vlan_proto;     /* packet type ID field */
</Insert>
<Copy StartSeek="6031" EndSeek="7826"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:40:41000">
<Copy StartSeek="0" EndSeek="6006"/>
<Insert>  uint16_t h_vlan_proto;
</Insert>
<Copy StartSeek="6085" EndSeek="7880"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:41:18000">
<Copy StartSeek="0" EndSeek="5906"/>
<Insert>  uint8_t  h_dest[6];   /* destination eth addr */
  uint8_t  h_source[6]; /* source ether addr  */
</Insert>
<Copy StartSeek="6010" EndSeek="7884"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:41:22000">
<Copy StartSeek="0" EndSeek="6010"/>
<Insert>  uint16_t h_vlan_proto; /* h_vlan_proto: ethernet protocol (always 0x8100) */
</Insert>
<Copy StartSeek="6090" EndSeek="7885"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:41:24000">
<Copy StartSeek="0" EndSeek="6010"/>
<Insert>  uint16_t h_vlan_proto;  /* h_vlan_proto: ethernet protocol (always 0x8100) */
</Insert>
<Copy StartSeek="6085" EndSeek="7880"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:41:30000">
<Copy StartSeek="0" EndSeek="6010"/>
<Insert>  uint16_t h_vlan_proto;  /* h_vlan_proto: eth protocol (always 0x8100) */
</Insert>
<Copy StartSeek="6082" EndSeek="7877"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/11/20" Time="13:41:34000">
<Copy StartSeek="0" EndSeek="5154"/>
<Copy StartSeek="5258" EndSeek="7981"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/11/21" Time="09:48:57000">
<Copy StartSeek="0" EndSeek="5120"/>
<Insert>  uint16_t len;
  uint16_t check;
</Insert>
<Copy StartSeek="5120" EndSeek="7947"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/11/21" Time="09:50:8000">
<Copy StartSeek="0" EndSeek="5750"/>
<Insert>
</Insert>
<Copy StartSeek="5779" EndSeek="6180"/>
<Insert>	uint16_t h_vlan_TCI;
	uint16_t h_vlan_encapsulated_proto;
</Insert>
<Copy StartSeek="6241" EndSeek="7977"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/11/27" Time="12:26:23000">
<Copy StartSeek="0" EndSeek="5779"/>
<Copy StartSeek="5854" EndSeek="8052"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/11/28" Time="18:37:6000">
<Copy StartSeek="0" EndSeek="5750"/>
<Insert>#define DPA_ETH_P_ARP 0x0806
</Insert>
<Copy StartSeek="5781" EndSeek="8054"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/11/28" Time="18:37:10000">
<Copy StartSeek="0" EndSeek="5781"/>
<Insert>#define DPA_ETH_P_8021Q	0x8100          /* 802.1Q VLAN Extended Header  */
</Insert>
<Copy StartSeek="5847" EndSeek="8045"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/11/28" Time="18:37:15000">
<Copy StartSeek="0" EndSeek="5750"/>
<Copy StartSeek="5813" EndSeek="8108"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/12/13" Time="11:25:55000">
<Copy StartSeek="0" EndSeek="5750"/>
<Insert>#define DPA_ETH_P_IP	0x8000 /* 802.1Q VLAN Extended Header  */
</Insert>
<Copy StartSeek="5815" EndSeek="8110"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/12/13" Time="11:26:12000">
<Copy StartSeek="0" EndSeek="5750"/>
<Insert>#define DPA_ETH_P_IP	  0x0800 /* 802.1Q VLAN Extended Header  */
</Insert>
<Copy StartSeek="5813" EndSeek="8108"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/12/27" Time="16:04:42000">
<Copy StartSeek="0" EndSeek="1105"/>
<Insert>
</Insert>
<Copy StartSeek="1169" EndSeek="8171"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:30:37000">
<Copy StartSeek="0" EndSeek="1105"/>
<Insert>typdef enum
{
</Insert>
<Copy StartSeek="1356" EndSeek="1394"/>
<Insert>} dpa_mode;
</Insert>
<Copy StartSeek="1409" EndSeek="8411"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:31:59000">
<Copy StartSeek="0" EndSeek="1215"/>
<Insert> *     DPA_MODE_DPA - learn from linux and fast forward accordinly.
 *     DPA_MODE_SLOW_PATH - forward all to slow path.
</Insert>
<Copy StartSeek="1343" EndSeek="1362"/>
<Insert>  DPA_MODE_DPA,
  DPA_MODE_SLOW_PATH,
</Insert>
<Copy StartSeek="1406" EndSeek="8423"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2013/02/24" Time="15:41:3000">
<Copy StartSeek="0" EndSeek="74"/>
<Insert>* Copyright (C) 2010, Marvell Technology Group Ltd.
</Insert>
<Copy StartSeek="126" EndSeek="775"/>
<Insert>#define DPA_ETH_MAX_PORT_NUM    (2)
</Insert>
<Copy StartSeek="811" EndSeek="1105"/>
<Copy StartSeek="1106" EndSeek="1109"/>
<Insert> * typedef: enum dpa_mode
 *
 * Description: 
 *
 * Represents DPA forwarding mode.
 *
 * Enumerations:
 *
 *     DPA_FWD_MODE_FAST - learn from linux and fast forward accordinly.
 *     DPA_FWD_MODE_S_PATH - forward all to slow path.
 */
typedef enum
{
  DPA_FWD_MODE_FAST,
  DPA_FWD_MODE_S_PATH,
} dpa_mode_t;

/*
</Insert>
<Copy StartSeek="1109" EndSeek="2038"/>
<Insert>  bool         log_api;               
</Insert>
<Copy StartSeek="2062" EndSeek="2253"/>
<Insert> *  Holds ethernet port packet statistics.
</Insert>
<Copy StartSeek="2283" EndSeek="2933"/>
<Copy StartSeek="3508" EndSeek="3566"/>
<Insert> *  Holds DPA packet statistics.
</Insert>
<Copy StartSeek="3600" EndSeek="6298"/>
<Insert>#define DPA_ETH_P_IP	0x0800 /* 802.1Q VLAN Extended Header  */
</Insert>
<Copy StartSeek="6363" EndSeek="6460"/>
<Copy StartSeek="6567" EndSeek="7051"/>
<Copy StartSeek="7353" EndSeek="9067"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2013/06/16" Time="18:48:5000">
<Copy StartSeek="0" EndSeek="7070"/>
<Insert>#if defined(__LITTLE_ENDIAN_BITFIELD)
</Insert>
<Copy StartSeek="7098" EndSeek="7129"/>
<Insert>#elif defined(__BIG_ENDIAN_BITFIELD)
</Insert>
<Copy StartSeek="7159" EndSeek="9050"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2013/06/16" Time="18:48:29000">
<Copy StartSeek="0" EndSeek="7098"/>
<Insert>	__u8 ver : 4;
	__u8 type : 4;
</Insert>
<Copy StartSeek="7125" EndSeek="7155"/>
<Insert>	__u8 type : 4;
	__u8 ver : 4;
</Insert>
<Copy StartSeek="7182" EndSeek="9042"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2013/06/16" Time="18:48:46000">
<Copy StartSeek="0" EndSeek="7188"/>
<Insert>#error	"Please fix &lt;asm/byteorder.h&gt;"
</Insert>
<Copy StartSeek="7219" EndSeek="9035"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2013/06/16" Time="18:48:54000">
<Copy StartSeek="0" EndSeek="7051"/>
<Insert>struct pppoe_hdr {
</Insert>
<Copy StartSeek="7074" EndSeek="9039"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2013/06/16" Time="18:49:17000">
<Copy StartSeek="0" EndSeek="6460"/>
<Copy StartSeek="6526" EndSeek="9105"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="10:41:46000">
<Copy StartSeek="0" EndSeek="6526"/>
<Copy StartSeek="6590" EndSeek="9169"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="10:43:27000">
<Copy StartSeek="0" EndSeek="6298"/>
<Insert>#define DPA_ETH_P_IP	  0x0800 /* 802.1Q VLAN Extended Header  */
#define DPA_ETH_P_ARP   0x0806
#define DPA_ETH_P_8021Q	0x8100 /* 802.1Q VLAN Extended Header  */
#define DPA_ETH_P_PPPOX	0x8100 /* 802.1Q VLAN Extended Header  */
</Insert>
<Copy StartSeek="6534" EndSeek="9177"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="10:43:58000">
<Copy StartSeek="0" EndSeek="7189"/>
<Insert>struct dpa_pppoe_hdr {
</Insert>
<Copy StartSeek="7206" EndSeek="7429"/>
<Insert>} __attribute__((packed));
</Insert>
<Copy StartSeek="7472" EndSeek="9187"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="17:49:59000">
<Copy StartSeek="0" EndSeek="7429"/>
<Insert>} __attribute__((packed)) dpa_pppoe_hdr_t;
</Insert>
<Copy StartSeek="7473" EndSeek="9188"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="17:50:3000">
<Copy StartSeek="0" EndSeek="7429"/>
<Insert>} dpa_pppoe_hdr_t __attribute__((packed)) ;
</Insert>
<Copy StartSeek="7472" EndSeek="9187"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="17:50:9000">
<Copy StartSeek="0" EndSeek="7429"/>
<Insert>} __attribute__((packed)) dpa_pppoe_hdr_t;
</Insert>
<Copy StartSeek="7470" EndSeek="9185"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2013/06/17" Time="17:50:43000">
<Copy StartSeek="0" EndSeek="6365"/>
<Copy StartSeek="6397" EndSeek="9217"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:05:23000">
<Copy StartSeek="0" EndSeek="6298"/>
<Insert>#define DPA_ETH_P_IP	    0x0800 /* 802.1Q VLAN Extended Header  */
#define DPA_ETH_P_IPV6	  0x86DD
</Insert>
<Copy StartSeek="6405" EndSeek="9225"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:06:5000">
<Copy StartSeek="0" EndSeek="6298"/>
<Insert>#define DPA_ETH_P_IP	    0x0800		/* Internet Protocol packet	*/
#define DPA_ETH_P_IPV6	  0x86DD /* IPv6 */
</Insert>
<Copy StartSeek="6405" EndSeek="9225"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:06:18000">
<Copy StartSeek="0" EndSeek="6298"/>
<Insert>#define DPA_ETH_P_IP	    0x0800	/* Internet Protocol packet	*/
</Insert>
<Copy StartSeek="6341" EndSeek="9205"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:06:23000">
<Copy StartSeek="0" EndSeek="7226"/>
<Copy StartSeek="7342" EndSeek="7370"/>
<Insert>	__u8 ver:4;
	__u8 type:4;
</Insert>
<Copy StartSeek="7403" EndSeek="7433"/>
<Insert>	__u8 type:4;
	__u8 ver:4;
</Insert>
<Copy StartSeek="7466" EndSeek="7510"/>
<Insert>	__u8 code;
	__be16 sid;
	__be16 length;
</Insert>
<Copy StartSeek="7558" EndSeek="9340"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:24:39000">
<Copy StartSeek="0" EndSeek="7265"/>
<Insert>	char tag_data[0];
</Insert>
<Copy StartSeek="7288" EndSeek="9344"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:24:51000">
<Copy StartSeek="0" EndSeek="7562"/>
<Insert>	struct pppoe_tag tag[0];
</Insert>
<Copy StartSeek="7583" EndSeek="9339"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="11:25:7000">
<Copy StartSeek="0" EndSeek="7562"/>
<Insert>	pppoe_tag_t tag[0];
</Insert>
<Copy StartSeek="7583" EndSeek="9339"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="16:31:19000">
<Copy StartSeek="0" EndSeek="7226"/>
<Insert>	uint16_t tag_type;
	uint16_t tag_len;
	uint8_t  tag_data[0];
} __attribute__ ((packed)) pppoe_tag_t;

typedef struct {
</Insert>
<Copy StartSeek="7226" EndSeek="9219"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="16:31:40000">
<Copy StartSeek="0" EndSeek="6298"/>
<Insert>#define DPA_ETH_P_IP	    0x0800	/* IPv4	*/
</Insert>
<Copy StartSeek="6340" EndSeek="6485"/>
<Insert>#define DPA_ETH_P_PPPOX	  0x8100 /* 802.1Q VLAN Extended Header  */
#define DPA_ETH_P_PPP_SES	0x8864		/* PPPoE session messages	*/

</Insert>
<Copy StartSeek="6548" EndSeek="9149"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="23:19:43000">
<Copy StartSeek="0" EndSeek="736"/>
<Insert>/* Maximum number of physical ports */
</Insert>
<Copy StartSeek="767" EndSeek="3349"/>
<Insert>  uint32_t rx_pkts;
  uint32_t tx_pkts;
  uint32_t rx_bytes;
  uint32_t tx_bytes;
</Insert>
<Copy StartSeek="3443" EndSeek="9153"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:16:29000">
<Copy StartSeek="0" EndSeek="3029"/>
<Insert> *  rx_pkts    - Total number of received packets.
 *  tx_pkts    - Total number of transmitted packets.
 *  rx_bytes   - Total number of received bytes.
 *  tx_bytes   - Total number of transmitted bytes.
 *  rx_errors  - Number of reception errors.
 *  tx_errors  - Number of transmission errors.
</Insert>
<Copy StartSeek="3578" EndSeek="9403"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:18:27000">
<Copy StartSeek="0" EndSeek="3150"/>
<Insert> *  tx_pkts[0]    - Total number of transmitted packets.
 *  tx_pkts[1]    - Total number of transmitted packets.
 *  rx_bytes[0]   - Total number of received bytes.
 *  rx_bytes[1]   - Total number of received bytes. 
 *  tx_bytes[0]   - Total number of transmitted bytes.
 *  tx_bytes[1]   - Total number of transmitted bytes.
</Insert>
<Copy StartSeek="3519" EndSeek="9443"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:18:47000">
<Copy StartSeek="0" EndSeek="3799"/>
<Copy StartSeek="3878" EndSeek="9522"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:23:6000">
<Copy StartSeek="0" EndSeek="3799"/>
<Insert>inline void sum_split_uint64(uint32_t *val, uint32_t incr)
</Insert>
<Copy StartSeek="3863" EndSeek="3865"/>
<Copy StartSeek="3931" EndSeek="9593"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:24:53000">
<Copy StartSeek="0" EndSeek="3931"/>
<Insert>  if () {
  }
}

</Insert>
<Copy StartSeek="4015" EndSeek="4016"/>
<Copy StartSeek="4017" EndSeek="9661"/>
</Delta>
<Delta Version="66" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:26:38000">
<Copy StartSeek="0" EndSeek="3890"/>
<Insert>  uint32_t low_new = val[0] + increment;
</Insert>
<Copy StartSeek="3940" EndSeek="4022"/>
<Insert>}

</Insert>
<Copy StartSeek="4025" EndSeek="4026"/>
<Copy StartSeek="4027" EndSeek="9671"/>
</Delta>
<Delta Version="67" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:26:56000">
<Copy StartSeek="0" EndSeek="3890"/>
<Insert>  uint32_t low_new = val[0] = val[0] + increment;
</Insert>
<Copy StartSeek="3931" EndSeek="4013"/>
<Insert>
</Insert>
<Copy StartSeek="4033" EndSeek="9681"/>
</Delta>
<Delta Version="68" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:27:23000">
<Copy StartSeek="0" EndSeek="3799"/>
<Insert>inline void sum_split_uint64(uint32_t *val, uint32_t increment)
</Insert>
<Copy StartSeek="3870" EndSeek="9688"/>
</Delta>
<Delta Version="69" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:54:8000">
<Copy StartSeek="0" EndSeek="3799"/>
<Insert>static inline void sum_split_uint64(uint32_t *val, uint32_t increment)
</Insert>
<Copy StartSeek="3870" EndSeek="4043"/>
<Insert>
</Insert>
<Copy StartSeek="4126" EndSeek="9770"/>
</Delta>
<Delta Version="70" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:56:10000">
<Copy StartSeek="0" EndSeek="3799"/>
<Insert>static inline void uint64_split_sum(uint32_t *val, uint32_t increment)
</Insert>
<Copy StartSeek="3869" EndSeek="4042"/>
<Insert>static inline void uint64_split_reset(uint32_t *val) 
</Insert>
<Copy StartSeek="4095" EndSeek="9768"/>
</Delta>
<Delta Version="71" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="19:59:14000">
<Copy StartSeek="0" EndSeek="3799"/>
<Copy StartSeek="3847" EndSeek="4171"/>
<Insert>
</Insert>
<Copy StartSeek="4319" EndSeek="9963"/>
</Delta>
<Delta Version="72" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="20:04:3000">
<Copy StartSeek="0" EndSeek="3799"/>
<Insert>/* sthandling 64 bit counters as split array */
</Insert>
<Copy StartSeek="3845" EndSeek="9961"/>
</Delta>
<Delta Version="73" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="20:04:9000">
<Copy StartSeek="0" EndSeek="3799"/>
<Insert>/* handling 64 bit counters as split array */
</Insert>
<Copy StartSeek="3855" EndSeek="9971"/>
</Delta>
<Delta Version="74" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="20:04:15000">
<Copy StartSeek="0" EndSeek="3799"/>
<Insert>/* manual handling of 64 bit counters as split array */
</Insert>
<Copy StartSeek="3858" EndSeek="9974"/>
</Delta>
<Delta Version="75" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="20:04:31000">
<Copy StartSeek="0" EndSeek="4179"/>
<Insert>}

</Insert>
<Copy StartSeek="4199" EndSeek="9991"/>
</Delta>
<Delta Version="76" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="20:18:12000">
<Copy StartSeek="0" EndSeek="4179"/>
<Insert>  val[0] = -1UL;
</Insert>
<Copy StartSeek="4196" EndSeek="9991"/>
</Delta>
<Delta Version="77" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="20:18:17000">
<Copy StartSeek="0" EndSeek="4179"/>
<Insert>  val[0] = ~0UL;
}

</Insert>
<Copy StartSeek="4182" EndSeek="9974"/>
</Delta>
<Delta Version="78" Comment="" NL="\10" Encoding="text" Date="2013/06/26" Time="20:28:47000">
<Copy StartSeek="0" EndSeek="4244"/>
<Insert>        uint64_t tmp = (uint64_t) val[1];
</Insert>
<Copy StartSeek="4280" EndSeek="4281"/>
<Insert>        return ((tmp &lt;&lt; 32) + val[0]);
</Insert>
<Copy StartSeek="4314" EndSeek="9962"/>
</Delta>
</DeltaFile>
