<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="26" Comment="" Date="2013/05/27" Time="14:37:44000" NL="\10" Encoding="text">
<Insert>#!/usr/bin/python

import sys
import os
import os.path
import subprocess
import re
import filecmp
import optparse
import shutil
import string
import datetime
import tempfile
import xml.etree.ElementTree


def get_function_names(header_file):
    def hdr2swigxml(header_file):
        tmpdirname=tempfile.mkdtemp()
        oname='%s/x.xml' % tmpdirname
        iname='%s/x.i' % tmpdirname

        h_i=open(iname,'w')
        h_i.write('''
// %s swig interface
%%module xxx
%%include %s
''' % (header_file,header_file))
        h_i.close()
        os.system('swig -xml -o %s %s ' % (oname,iname))
        return (tmpdirname,oname)

    def swigxml2functions(swigxml):
        function_names=[]
        etree = xml.etree.ElementTree.parse(swigxml)
        alists = etree.findall('./include/include/cdecl/attributelist')
        for alist in alists:
            attribute_tags = alist.findall('attribute')
            for attribute_tag in attribute_tags:
                if attribute_tag.attrib['name'] == 'name':
                    name_attr=attribute_tag.attrib['value']
                if attribute_tag.attrib['name'] == 'kind' and attribute_tag.attrib['value'] == 'function':
                    function_names.append(name_attr)
        return function_names

    (tmpdirname,swigxml)=hdr2swigxml(header_file)
    function_names=swigxml2functions(swigxml)
    shutil.rmtree(tmpdirname)
    return function_names            

    

    

class BinUtil:
    def __init__(self,cmd,cross_compile=None):
        self.cmd = cmd
        if not cross_compile:
            try:
                self.cross_compile = os.environ['CROSS_COMPILE']
            except:
                self.cross_compile = ''

        self.full_cmd='%s%s' % (self.cross_compile,self.cmd)        


    def run(self,*args):
        cmdline = self.full_cmd
        for a in args:
            cmdline = cmdline + ' %s' % a

        print 'Running cmd: %s' % cmdline    
        p = subprocess.Popen([cmdline], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        s=''
        if p.stdout:
            s=s+p.stdout.read()
        return s    
        
        

class Objcopy(BinUtil):
    def __init__(self,cross_compile=None):
        BinUtil.__init__(self,'objcopy',cross_compile)



    
class NmLine:
    def __init__(self,line):
        l=line[9:].split(' ')
        self.type=l[0] 
        self.addr = line[:9]
        self.symbol = l[1]
  


class Nm(BinUtil):
    def __init__(self,cross_compile=None):
        BinUtil.__init__(self,'nm',cross_compile)

    def parse(self,nm_output):
        lines = nm_output.split('\n')
        result=[]
        for line in lines:
            if not line or len(line) == 0:
                continue
            result.append(NmLine(line))
        return result


    

        
class Obfuscator:
    def __init__(self,input_file,output_file,redefine_file,backup_file,functions_to_keep=[]):
        self.input_file = input_file
        self.output_file = output_file
        self.redefine_file = redefine_file
        self.backup_file = backup_file
        self.symbols_to_keep='dpa_'
        self.symbol_replacement='__dpasdk_'
        self.functions_to_keep=functions_to_keep



    def is_symbol_to_keep(self,s):
        if self.functions_to_keep and len(self.functions_to_keep) &gt; 0:
            if s in self.functions_to_keep:
                return 1
            return 0
        if s.startswith(self.symbols_to_keep):
            return 1
        return 0

    def create_sym_replacement(self,s,count):
        return '%s%d' % (self.symbol_replacement,count)


    def write_redefines(self):
        print 'Creating symbol renaming file %s' % self.redefine_file
        count=0
        f = open(self.redefine_file,'w')
        f.write('''#
#
# File automatically generated by obfuscate.py
# %s
#
#
''' % str(datetime.datetime.now()))
                
        nm = Nm()
        s = nm.run('--defined-only',self.input_file)
        symbol_list = nm.parse(s)
        symbol_map={}
        for l in symbol_list:
            if self.is_symbol_to_keep(l.symbol):
                continue
            old_sym = l.symbol
            if symbol_map.has_key(old_sym):
                continue
            else:
                symbol_map[old_sym] = l
            new_sym = self.create_sym_replacement(old_sym,count)
            count = count+1
            line = '%s %s\n' % (old_sym,new_sym)
            f.write(line)
        f.close()            


    def save_backup(self):
        print 'Saving backup copy of %s into %s' % (self.input_file,self.backup_file)
        shutil.copyfile(self.input_file,self.backup_file)



    def redefine(self):
        objcopy=Objcopy()
        objcopy.run('--strip-debug --redefine-syms=%s' % self.redefine_file,self.input_file,self.output_file)





if __name__ == '__main__':
    input_file=None
    output_file=None
    backup_file=None
    output = None
    input = None
    redefinition_file=None
    dpa_api=None
    
    op=optparse.OptionParser()	
    op.add_option("-o","--ofile",dest="output_file",default=output_file,type='string',help="output_file")
    op.add_option("-i","--ifile",dest="input_file",default=input_file,type='string',help="input_file")
    op.add_option("-b","--bfile",dest="backup_file",default=backup_file,type='string',help="backup_file")
    op.add_option("-r","--rfile",dest="redefinition_file",default=redefinition_file,type='string',help="redefinition_file")
    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file")


	
    (options,args) = op.parse_args()

    if options.output_file:
        output_file=options.output_file

    if options.input_file:
        input_file=options.input_file

    if options.backup_file:
        backup_file=options.backup_file

    if options.redefinition_file:
        redefinition_file=options.redefinition_file
    else:
        redefinition_file=os.path.join(os.path.dirname(input_file),'redefines.txt')

    if options.dpa_api:
        dpa_api=options.dpa_api

    if not input_file or not output_file or not backup_file or not redefinition_file:
        print 'Input/Output not specified'
        sys.exit(1)

    if dpa_api:
        functions_to_keep=get_function_names(dpa_api)
        
    
    o = Obfuscator(input_file,output_file,redefinition_file,backup_file,functions_to_keep)
    o.save_backup()
    o.write_redefines()
    o.redefine()
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/06/18" Time="07:58:36000">
<Copy StartSeek="0" EndSeek="6212"/>
<Copy StartSeek="6234" EndSeek="6454"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:11:58000">
<Copy StartSeek="0" EndSeek="6212"/>
<Insert>        print dpa_api
</Insert>
<Copy StartSeek="6271" EndSeek="6491"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:12:12000">
<Copy StartSeek="0" EndSeek="6212"/>
<Insert>        print "==========================dpa_api:" dpa_api
</Insert>
<Copy StartSeek="6285" EndSeek="6505"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:12:39000">
<Copy StartSeek="0" EndSeek="6212"/>
<Insert>        print "==========================dpa_api:"
</Insert>
<Copy StartSeek="6322" EndSeek="6564"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:13:13000">
<Copy StartSeek="0" EndSeek="6322"/>
<Insert>        print dpa_api
</Insert>
<Copy StartSeek="6322" EndSeek="6542"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:13:15000">
<Copy StartSeek="0" EndSeek="6212"/>
<Insert>        print 'Running cmd: %s' % cmdline    
</Insert>
<Copy StartSeek="6212" EndSeek="6496"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:13:18000">
<Copy StartSeek="0" EndSeek="6212"/>
<Insert>        print '========================== dpa_api %s' % dpa_api
</Insert>
<Copy StartSeek="6212" EndSeek="6432"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:15:56000">
<Copy StartSeek="0" EndSeek="6013"/>
<Copy StartSeek="6077" EndSeek="6496"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:16:1000">
<Copy StartSeek="0" EndSeek="6013"/>
<Insert>        print '========================== dpa_api %s' % dpa_api
</Insert>
<Copy StartSeek="6013" EndSeek="6432"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:17:22000">
<Copy StartSeek="0" EndSeek="6212"/>
<Copy StartSeek="6276" EndSeek="6496"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:20:33000">
<Copy StartSeek="0" EndSeek="4809"/>
<Insert>

</Insert>
<Copy StartSeek="4916" EndSeek="5089"/>
<Insert>    op=optparse.OptionParser()	
</Insert>
<Copy StartSeek="5122" EndSeek="5561"/>
<Insert>    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file")
</Insert>
<Copy StartSeek="5695" EndSeek="6629"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:28:45000">
<Copy StartSeek="0" EndSeek="4859"/>
<Insert>  setattr(parser.values, option.dest, value.split(','))
</Insert>
<Copy StartSeek="4915" EndSeek="6629"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:28:51000">
<Copy StartSeek="0" EndSeek="6345"/>
<Insert>        print '--------------------------- dpa_api %s' %dpa_api
</Insert>
<Copy StartSeek="6401" EndSeek="6621"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:29:34000">
<Copy StartSeek="0" EndSeek="6345"/>
<Insert>        print '=================== dpa_api %s' %dpa_api
</Insert>
<Copy StartSeek="6402" EndSeek="6622"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:29:36000">
<Copy StartSeek="0" EndSeek="4915"/>
<Insert>
</Insert>
<Copy StartSeek="4919" EndSeek="6625"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:30:1000">
<Copy StartSeek="0" EndSeek="5564"/>
<Insert>    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file", callback=api_opt_callback)
</Insert>
<Copy StartSeek="5715" EndSeek="6642"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:32:22000">
<Copy StartSeek="0" EndSeek="5092"/>
<Insert>    op=optparse.OptionParserd()	
</Insert>
<Copy StartSeek="5124" EndSeek="6641"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:33:3000">
<Copy StartSeek="0" EndSeek="5563"/>
<Insert>    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file", action=callback, callback=api_opt_callback)
</Insert>
<Copy StartSeek="5696" EndSeek="6623"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:33:28000">
<Copy StartSeek="0" EndSeek="5563"/>
<Insert>    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file",callback=api_opt_callback)
</Insert>
<Copy StartSeek="5714" EndSeek="6641"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:33:42000">
<Copy StartSeek="0" EndSeek="5563"/>
<Insert>    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file", action=callback, callback=api_opt_callback)
</Insert>
<Copy StartSeek="5716" EndSeek="6643"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:34:8000">
<Copy StartSeek="0" EndSeek="4915"/>
<Insert>  

</Insert>
<Copy StartSeek="5484" EndSeek="7208"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:35:25000">
<Copy StartSeek="0" EndSeek="4926"/>
<Insert>    value = []
    rargs = parser.rargs
    while rargs:
</Insert>
<Copy StartSeek="4977" EndSeek="7202"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:35:39000">
<Copy StartSeek="0" EndSeek="4915"/>
<Insert>  done = 0
  value = []
  rargs = parser.rargs
  while rargs:
        arg = rargs[0]

        # Stop if we hit an arg like "--foo", "-a", "-fx", "--file=f",
        # etc.  Note that this also stops on "-3" or "-3.0", so if
        # your option takes numeric values, you will need to handle
        # this.
        if ((arg[:2] == "--" and len(arg) &gt; 2) or
            (arg[:1] == "-" and len(arg) &gt; 1 and arg[1] != "-")):
            break
        else:
            value.append(arg)
            del rargs[0]

     setattr(parser.values, option.dest, value)



</Insert>
<Copy StartSeek="4917" EndSeek="6641"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:36:38000">
<Copy StartSeek="0" EndSeek="4915"/>
<Insert>
</Insert>
<Copy StartSeek="4928" EndSeek="6653"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:36:52000">
<Copy StartSeek="0" EndSeek="4915"/>
<Insert>  value = []
</Insert>
<Copy StartSeek="4959" EndSeek="6684"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:37:24000">
<Copy StartSeek="0" EndSeek="4809"/>
<Insert>def api_opt_callback(option, opt, value, parser):
  setattr(parser.values, option.dest, value.split(' '))
  print '============= %s' % option.dest[0]

</Insert>
<Copy StartSeek="4811" EndSeek="5455"/>
<Insert>    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file", action="callback", callback=api_opt_callback)
</Insert>
<Copy StartSeek="5562" EndSeek="6212"/>
<Insert>        print '=================== dpa_api %s' % dpa_api
</Insert>
<Copy StartSeek="6212" EndSeek="6432"/>
</Delta>
</DeltaFile>
