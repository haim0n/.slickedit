<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="46" Comment="" Date="2013/06/20" Time="00:43:14000" NL="\10" Encoding="text">
<Insert>#include &lt;dpa_types.h&gt;
#include &lt;log/log.h&gt;
#include &lt;util/string.h&gt;
#include &lt;eth/eth_regs.h&gt;

#include &lt;util/xxhash.h&gt;
#include &lt;util/byte_order.h&gt;
#include &lt;util/string.h&gt;

#include "dpa_frwd.h"
#include "dpa_frwd_mm.h"
#include "dpa_mdf.h"

#ifdef __DPA_DEBUG__
int printk(const char * fmt, ...);
#define DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)
#else
#define DPA_FRWD_DBG(format, args...)
#endif

#define DPA_FRWD_ERR(format, args...) DPA_ERROR(format, ##args)

#define DPA_FRWD_TBL_SZ (1&lt;&lt;13)

char *dpa_flow_state_names[]  = {
	"NEW",
	"LRN",
	"FWD",
	"LCL",
  "DROP"
};

/* HAIM FIXME : rw protection is needed ! */
static struct dpa_flow *dpa_flow_tbl[DPA_FRWD_TBL_SZ];

static uint32_t dpa_frwd_cmd;

void dpa_dump_pkt(uint8_t *data, int len) {
#ifdef __DPA_DEBUG__
  int i;
  
  printk("&lt;0&gt;******************* LEN %d\n", len);
  for (i = 0; i &lt; len; i++) {
    printk("%02x ", data[i]);
  }
  printk("&lt;0&gt;****************************\n");
#endif
}

static void dpa_flow_dump(struct dpa_flow *dpf)
{
#ifdef __DPA_DEBUG__
	struct dpa_pri_key *tup = &amp;dpf-&gt;key;
	struct dpa_pri_key *mod_tup = &amp;dpf-&gt;mod.mod_tuple;
	struct dpa_frwd_l2 *l2_mod = &amp;dpf-&gt;mod.l2;

  DPA_FRWD_DBG("--------------------------------------\n");

	DPA_FRWD_DBG("orig tup ipv4:proto %u "DPA_NIPQUAD_FMT":%d-&gt;"DPA_NIPQUAD_FMT":%d\n",
		 tup-&gt;protocol,
		 DPA_NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
		 DPA_NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));

	DPA_FRWD_DBG("mod dmac= "DPA_MAC_FMT" smac= "DPA_MAC_FMT " eth_type:%#x vlan:%u",
	  DPA_MAC_PFMT(l2_mod-&gt;dmac), DPA_MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
		    dpa_ntohs(l2_mod-&gt;vlan_id));

	DPA_FRWD_DBG("mod tup ipv4:proto %u "DPA_NIPQUAD_FMT":%d-&gt;"DPA_NIPQUAD_FMT":%d\n",
	  mod_tup-&gt;protocol,
	  DPA_NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
	  DPA_NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));

	DPA_FRWD_DBG("state:%s rx:%u fwd:%u mod_ops:%#x\n", 
		 dpa_flow_state_names[dpf-&gt;state],
		 dpf-&gt;stats.rx_pkts, dpf-&gt;stats.tx_pkts, 
		 dpf-&gt;mod.ops);
#endif
}

static void dpa_dump_rx_desc(eth_rx_desc_t *rx_desc)
{
#ifdef __DPA_DEBUG__
	uint32_t rx_status = rx_desc-&gt;status;

	DPA_DBG("(%s:%d)status:%#x, ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
		 __func__, __LINE__,
		rx_status,
	       NETA_RX_L3_IS_IP4(rx_status), 
	       NETA_RX_L4_IS_TCP(rx_status),
	       NETA_RX_L4_IS_UDP(rx_status),
	      NETA_PNC_RX_IS_DA_UC(rx_desc),
		 (rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) != 0,
		 NETA_RX_GET_IPHDR_OFFSET(rx_desc));
#endif
}

static inline void dpa_frwd_memcpy_14b_16a(void *a, const void *b)
{
	register uint16_t *a16 ,*b16;
	a16 = (uint16_t *)a;
	b16 = (uint16_t *)b;

	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16++ = *b16++;
	*a16 = *b16;
}

static inline uint32_t
is_pri_key_match(struct dpa_pri_key *a, struct dpa_pri_key *b)
{
	register uint32_t *a32, *b32;
	a32 = (uint32_t *)a;
	b32 = (uint32_t *)b;

	return (*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32 == *b32);

//      return (a-&gt;dip == b-&gt;dip) &amp;&amp;
//      	(a-&gt;sip == b-&gt;sip) &amp;&amp;
//      	(a-&gt;protocol == b-&gt;protocol) &amp;&amp;
//      	(a-&gt;sport == b-&gt;sport) &amp;&amp;
//      	(a-&gt;dport == b-&gt;dport);
}

struct dpa_flow *dpa_frwd_flow_alloc(void)
{
	struct dpa_flow *tmp;

  tmp = dcm_alloc();
  if (!tmp) {
      DPA_FRWD_DBG("Failed to alloc dpf entry\n");
      return NULL;
  }

  tmp-&gt;state = DPF_NEW;
  tmp-&gt;stats.rx_pkts = 0;
  tmp-&gt;stats.tx_pkts = 0;
  tmp-&gt;mod.ops = 0;
  tmp-&gt;mod.tx_port = ~0;
  tmp-&gt;next = NULL;
 	
  return tmp;
}


void dpa_frwd_flow_free(struct dpa_flow *dpf)
{
  dcm_free(dpf);
}

#define SEED 	0
#define LEN	12
#define PRIME1   2654435761U
#define PRIME2   2246822519U
#define PRIME3   3266489917U
#define PRIME4   668265263U
#define PRIME5   0x165667b1
#define _rotl(x,r) (((x) &lt;&lt; (r)) | ((x) &gt;&gt; (32 - (r))))

static inline unsigned int dpa_frwd_XXH_small32_12b(const void* key)
{
	register const unsigned char* p = (unsigned char*)key;
	register int idx = SEED + PRIME1;
	register unsigned int crc  = PRIME5;


	crc += ((*(unsigned int*)p) + idx++);
	p+=4;
	crc += _rotl(crc, 17) * PRIME4;
	crc *= PRIME1;
	crc += ((*(unsigned int*)p) + idx++);
	p+=4;
	crc += _rotl(crc, 17) * PRIME4;
	crc *= PRIME1;

	crc += ((*p) + idx++);
	crc *= PRIME1;
	p++;
	crc += ((*p) + idx++);
	crc *= PRIME1;
	p++;
	crc += ((*p) + idx++);
	crc *= PRIME1;
	p++;
	crc += ((*p) + idx++);
	crc *= PRIME1;

	crc += LEN;

	crc ^= crc &gt;&gt; 15;
	crc *= PRIME2;
	crc ^= crc &gt;&gt; 13;
	crc *= PRIME3;
	crc ^= crc &gt;&gt; 16;

	return crc;
}

static inline uint32_t dpa_key_hash(struct dpa_pri_key *key)
{
	register uint32_t idx = 0;
//	idx = dpa_key_XXH_small32_12b(key);
#if 0
	idx = key-&gt;sip ^ (_rotl(key-&gt;dip,7));
	idx += key-&gt;sport;
	idx *= PRIME1;
	idx += key-&gt;dport;
#else
	idx = key-&gt;dport;
#endif 
	idx &amp;= (DPA_FRWD_TBL_SZ - 1);
  
  return idx;
}

struct dpa_flow *dpa_frwd_flow_find(struct dpa_pri_key *key)
{
	struct dpa_flow **dpe_list, *dpf;

	dpe_list = &amp;dpa_flow_tbl[dpa_key_hash(key)]; /* head of the chain */
	dpf = *dpe_list;

	if (!dpf)
		return dpf;

	do {
		if (is_pri_key_match(&amp;dpf-&gt;key, key)) {
			DPA_FRWD_DBG("match dpf found");
			return dpf;
		}
		dpf = dpf-&gt;next;
	} while (dpf);

	return dpf;
}

static inline void dpa_pri_key_init(dpa_ip_hdr_t *iph, dpa_l4_hdr_t *l4,
		struct dpa_pri_key *tup)
{
	tup-&gt;sip = iph-&gt;saddr;
	tup-&gt;dip = iph-&gt;daddr;
	tup-&gt;protocol = iph-&gt;protocol;
	tup-&gt;sport = l4-&gt;source;
	tup-&gt;dport = l4-&gt;dest;
}



void dpa_frwd_flow_add(struct dpa_flow *dpf)
{
  struct dpa_flow **dpe_list, *tmp;

  dpe_list = &amp;dpa_flow_tbl[dpa_key_hash(&amp;dpf-&gt;key)]; /* head of the chain */
  tmp = *dpe_list;

  if (!tmp) {
       *dpe_list = dpf;
       return;
  }
  
  dpf-&gt;next = tmp;
  *dpe_list = dpf;
  
  dpa_flow_dump(dpf);
}


/* FIXME Non-SMP safe */
int32_t dpa_frwd_flow_remove(struct dpa_pri_key *key)
{
  struct dpa_flow **dpe_list, *dpf, *prev;

  dpe_list = &amp;dpa_flow_tbl[dpa_key_hash(key)]; /* head of the chain */
  dpf = *dpe_list;

  if (!dpf)
        return -1;

  prev = dpf;
  do {
    if (is_pri_key_match(&amp;dpf-&gt;key, key)) {
        DPA_FRWD_DBG("match dpf found for remove");

        /* First entry in list */
        if (prev == dpf) {
            /* Single element in list */
            if (!dpf-&gt;next) {
                *dpe_list = NULL;
            } else {
                *dpe_list = dpf-&gt;next;
            }
        } else {
            prev-&gt;next = dpf-&gt;next;
        }

        dpa_flow_dump(dpf);
        dpf-&gt;next = NULL;
        dcm_free(dpf);
        return 0;
    }
    prev = dpf;
    dpf = dpf-&gt;next;
  } while (dpf);
  
  return -1;
}


bool dpa_frwd_flow_is_alive(struct dpa_pri_key *key) {
  struct dpa_flow *dpf;
  bool is_alive;
  
  dpf = dpa_frwd_flow_find(key);
  if (!dpf) {
        return false;
  }

  is_alive = dpf-&gt;is_alive;
  if (is_alive) {
        dpf-&gt;is_alive = false;
  }

  return is_alive;
}


int32_t dpa_frwd_flow_get_stats(struct dpa_pri_key *key, dpa_flow_stats_t *stats) 
{
  struct dpa_flow *dpf = dpa_frwd_flow_find(key);

  if (!dpf) {
        return DPA_FLOW_UNKNOWN;
  }

  *stats = dpf-&gt;stats;
  
  return DPA_OK;
}


void dpa_frwd_clean_all(void)
{
	unsigned int idx;
	struct dpa_flow *e, *next;

  dpa_frwd_cmd = 1; /* FIXME Make proper in-context implementation */
  
	for (idx = 0; idx &lt; DPA_FRWD_TBL_SZ; idx++) {
		e = dpa_flow_tbl[idx];
		while (e) {
			next = e-&gt;next;
			e-&gt;next = NULL;
			/* dpa_memset(e, 0, sizeof(struct dpa_flow)); */
			dcm_free(e);
			e = next;
		}
		dpa_flow_tbl[idx] = NULL;
	}
  
  dpa_frwd_cmd = 0;
}


/* dpa forwarder entry point */
dpa_flow_states dpa_frwd_rx(eth_pkt_t *pkt)
{
	dpa_ip_hdr_t *iph;
	dpa_l4_hdr_t *l4;
	struct dpa_pri_key tup;
	struct dpa_flow *dpf;
	dpa_eth_hdr_t *eth = pkt-&gt;eth_hdr;
	eth_rx_desc_t *rx_desc = pkt-&gt;rx_desc;
	uint32_t rx_status = rx_desc-&gt;status;
	uint8_t mh;
  
  if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
        return DPF_LCL;

  if (!NETA_RX_L3_IS_IP4(rx_status)) {
		if (eth-&gt;h_proto == dpa_ntohs(DPA_ETH_P_ARP)) {
			pkt-&gt;prio = DPA_PKT_PRI_MAX;
		}
		return DPF_LCL;
	}
	pkt-&gt;prio = DPA_PKT_PRI_MIN;

	if (!(NETA_RX_L4_IS_TCP(rx_status) || NETA_RX_L4_IS_UDP(rx_status)) ||
	    NETA_RX_IP_IS_FRAG(rx_status) ||
	    !(rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) ||
	    !NETA_PNC_RX_IS_DA_UC(rx_desc)) {
		return DPF_LCL;
	}
	dpa_dump_rx_desc(rx_desc);
	iph = pkt-&gt;ip_hdr;
	l4 = (dpa_l4_hdr_t*)((uint8_t* )iph + (iph-&gt;ihl &lt;&lt; 2));
	pkt-&gt;l4_hdr = l4;

	dpa_pri_key_init(iph, l4, &amp;tup); 
	dpf = dpa_frwd_flow_find(&amp;tup);
	if (!dpf) {
        return DPF_LCL;
	}
  dpf-&gt;is_alive = true; 
	pkt-&gt;dpa_handle = (void *)dpf; /* mark the packet as ours */

  if (dpf-&gt;state == DPF_FWD) {
        dpa_modify_pkt(pkt);

        /* Eth egress port */
        pkt-&gt;port = dpf-&gt;mod.tx_port;

        /* Eth Tx queue */
        pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */

        /* Eth Tx cmd */
        mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
        pkt-&gt;size += mh;
        if (dpf-&gt;mod.ops) {
              uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
              pkt-&gt;hw_cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
                  ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
                  ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
                  (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);

              if (dpf-&gt;key.protocol == DPA_IP_PROTO_UDP)
                    pkt-&gt;hw_cmd |= NETA_TX_L4_UDP;
              else
                    pkt-&gt;hw_cmd &amp;= ~NETA_TX_L4_UDP;

              pkt-&gt;hw_cmd |= NETA_TX_L4_CSUM_FULL;
              dpf-&gt;stats.tx_pkts++;
        } else {
          /* No modification, so just indicate pkt start. If no mh, skip it since
          it's always present from Rx */
          pkt-&gt;hw_cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
        }

        DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;hw_cmd);
  }

  DPA_FRWD_DBG("state %s\n",dpa_flow_state_names[dpf-&gt;state]);
  dpf-&gt;stats.rx_pkts++;

  return dpf-&gt;state;
}


int32_t dpa_frwd_init(void)
{
	void *pool = dcm_init(DPA_FRWD_TBL_SZ, 
			      sizeof(struct dpa_flow));
	if (!pool)
		return DPA_OUT_OF_MEMORY;
	
	if (dpa_mdf_init())
		return DPA_CONFIG_ERROR;

  DPA_FRWD_DBG("DPA forwarder init OK.");

	return DPA_OK;
}

void dpa_frwd_exit(void)
{
	dpa_frwd_clean_all();
}
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2013/05/22" Time="14:39:11000">
<Copy StartSeek="0" EndSeek="359"/>
<Insert>#define DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="425" EndSeek="431"/>
<Insert>#define DPA_FRWD_DBG(format, args...)
</Insert>
<Copy StartSeek="470" EndSeek="642"/>
<Insert>  "DROP"
</Insert>
<Copy StartSeek="650" EndSeek="851"/>
<Insert>  int i;
  
  printk("&lt;0&gt;******************* LEN %d\n", len);
  for (i = 0; i &lt; len; i++) {
    printk("%02x ", data[i]);
  }
  printk("&lt;0&gt;****************************\n");
</Insert>
<Copy StartSeek="1015" EndSeek="1231"/>
<Insert>  DPA_FRWD_DBG("--------------------------------------\n");
</Insert>
<Copy StartSeek="1290" EndSeek="1376"/>
<Insert>		 tup-&gt;protocol,
		 DPA_NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
		 DPA_NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="1505" EndSeek="1589"/>
<Insert>	  DPA_MAC_PFMT(l2_mod-&gt;dmac), DPA_MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
		    dpa_ntohs(l2_mod-&gt;vlan_id));
</Insert>
<Copy StartSeek="1717" EndSeek="1802"/>
<Insert>	  mod_tup-&gt;protocol,
	  DPA_NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
	  DPA_NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));
</Insert>
<Copy StartSeek="1951" EndSeek="2006"/>
<Insert>		 dpa_flow_state_names[dpf-&gt;state],
		 dpf-&gt;stats.rx_pkts, dpf-&gt;stats.tx_pkts, 
		 dpf-&gt;mod.ops);
</Insert>
<Copy StartSeek="2117" EndSeek="2329"/>
<Insert>		 __func__, __LINE__,
</Insert>
<Copy StartSeek="2351" EndSeek="2364"/>
<Insert>	       NETA_RX_L3_IS_IP4(rx_status), 
	       NETA_RX_L4_IS_TCP(rx_status),
	       NETA_RX_L4_IS_UDP(rx_status),
	      NETA_PNC_RX_IS_DA_UC(rx_desc),
		 (rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) != 0,
		 NETA_RX_GET_IPHDR_OFFSET(rx_desc));
</Insert>
<Copy StartSeek="2578" EndSeek="3022"/>
<Insert>	return (*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32 == *b32);
</Insert>
<Copy StartSeek="3114" EndSeek="3295"/>
<Insert>struct dpa_flow *dpa_frwd_flow_alloc(void)
{
</Insert>
<Copy StartSeek="3340" EndSeek="3364"/>
<Insert>  tmp = dcm_alloc();
  if (!tmp) {
      DPA_FRWD_DBG("Failed to alloc dpf entry\n");
      return NULL;
  }
</Insert>
<Copy StartSeek="3462" EndSeek="3463"/>
<Insert>  tmp-&gt;state = DPF_NEW;
  tmp-&gt;stats.rx_pkts = 0;
  tmp-&gt;stats.tx_pkts = 0;
  tmp-&gt;mod.ops = 0;
  tmp-&gt;mod.tx_port = ~0;
  tmp-&gt;next = NULL;
 	
  return tmp;
</Insert>
<Copy StartSeek="3612" EndSeek="3664"/>
<Insert>  dcm_free(dpf);
</Insert>
<Copy StartSeek="3680" EndSeek="4901"/>
<Insert>  
  return idx;
</Insert>
<Copy StartSeek="4915" EndSeek="4918"/>
<Insert>struct dpa_flow *dpa_frwd_flow_find(struct dpa_pri_key *key)
{
</Insert>
<Copy StartSeek="4981" EndSeek="5138"/>
<Insert>    dpa_flow_dump(dpf); 
</Insert>
<Copy StartSeek="5161" EndSeek="5383"/>
<Insert>		struct dpa_pri_key *tup)
</Insert>
<Copy StartSeek="5416" EndSeek="5600"/>
<Insert>  struct dpa_flow **dpe_list, *tmp;
</Insert>
<Copy StartSeek="5635" EndSeek="5636"/>
<Insert>  dpe_list = &amp;dpa_flow_tbl[dpa_key_hash(&amp;dpf-&gt;key)]; /* head of the chain */
  tmp = *dpe_list;
</Insert>
<Copy StartSeek="5730" EndSeek="5731"/>
<Insert>  if (!tmp) {
       *dpe_list = dpf;
       return;
  }
  
  dpf-&gt;next = tmp;
  *dpe_list = dpf;
  
  dpa_flow_dump(dpf);
</Insert>
<Copy StartSeek="5835" EndSeek="5920"/>
<Insert>  struct dpa_flow **dpe_list, *dpf, *prev;
</Insert>
<Copy StartSeek="5962" EndSeek="5963"/>
<Insert>  dpe_list = &amp;dpa_flow_tbl[dpa_key_hash(key)]; /* head of the chain */
  dpf = *dpe_list;
</Insert>
<Copy StartSeek="6051" EndSeek="6052"/>
<Insert>  if (!dpf)
        return -1;
</Insert>
<Copy StartSeek="6076" EndSeek="6077"/>
<Insert>  prev = dpf;
  do {
    if (is_pri_key_match(&amp;dpf-&gt;key, key)) {
        DPA_FRWD_DBG("match dpf found for remove");
</Insert>
<Copy StartSeek="6185" EndSeek="6186"/>
<Insert>        /* First entry in list */
        if (prev == dpf) {
            /* Single element in list */
            if (!dpf-&gt;next) {
                *dpe_list = NULL;
            } else {
                *dpe_list = dpf-&gt;next;
            }
        } else {
            prev-&gt;next = dpf-&gt;next;
        }
</Insert>
<Copy StartSeek="6407" EndSeek="6408"/>
<Insert>        dpa_flow_dump(dpf);
        dpf-&gt;next = NULL;
        dcm_free(dpf);
        return 0;
    }
    prev = dpf;
    dpf = dpf-&gt;next;
  } while (dpf);
  
  return -1;
</Insert>
<Copy StartSeek="6549" EndSeek="6608"/>
<Insert>  struct dpa_flow *dpf;
  bool is_alive;
  
  dpf = dpa_frwd_flow_find(key);
  if (!dpf) {
        return false;
  }
</Insert>
<Copy StartSeek="6712" EndSeek="6713"/>
<Insert>  is_alive = dpf-&gt;is_alive;
  if (is_alive) {
        dpf-&gt;is_alive = false;
  }
</Insert>
<Copy StartSeek="6785" EndSeek="6786"/>
<Insert>  return is_alive;
</Insert>
<Copy StartSeek="6804" EndSeek="6893"/>
<Insert>  struct dpa_flow *dpf = dpa_frwd_flow_find(key);
</Insert>
<Copy StartSeek="6942" EndSeek="6943"/>
<Insert>  if (!dpf) {
        return DPA_FLOW_UNKNOWN;
  }
</Insert>
<Copy StartSeek="6986" EndSeek="6987"/>
<Insert>  *stats = dpf-&gt;stats;
  
  return DPA_OK;
</Insert>
<Copy StartSeek="7026" EndSeek="7110"/>
<Insert>  dpa_frwd_cmd = 1; /* FIXME Make proper in-context implementation */
  
</Insert>
<Copy StartSeek="7180" EndSeek="7420"/>
<Insert>  
  dpa_frwd_cmd = 0;
</Insert>
<Copy StartSeek="7440" EndSeek="7737"/>
<Insert>  
  DPA_FRWD_DBG("dpa_frwd_rx: Recved pkt len %d\n", pkt-&gt;size);
  
  if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
        return DPF_LCL;
</Insert>
<Copy StartSeek="7888" EndSeek="7889"/>
<Insert>  if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="7927" EndSeek="8488"/>
<Insert>        return DPF_LCL;
</Insert>
<Copy StartSeek="8506" EndSeek="8509"/>
<Insert>  dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8533" EndSeek="8596"/>
<Insert>  if (dpf-&gt;state == DPF_FWD) {
        dpa_dump_pkt((uint8_t *)eth, 40);
        dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="8685" EndSeek="8686"/>
<Insert>        /* Eth egress port */
        pkt-&gt;port = dpf-&gt;mod.tx_port;
</Insert>
<Copy StartSeek="8742" EndSeek="8743"/>
<Insert>        /* Eth Tx queue */
        pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="8809" EndSeek="8810"/>
<Insert>        /* Eth Tx cmd */
        mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
        pkt-&gt;size += mh;
        if (dpf-&gt;mod.ops) {
              uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
              pkt-&gt;cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
                  ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
                  ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
                  (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9211" EndSeek="9212"/>
<Insert>              if (dpf-&gt;key.protocol == DPA_IP_PROTO_UDP)
                    pkt-&gt;cmd |= NETA_TX_L4_UDP;
              else
                    pkt-&gt;cmd &amp;= ~NETA_TX_L4_UDP;
</Insert>
<Copy StartSeek="9331" EndSeek="9332"/>
<Insert>              pkt-&gt;cmd |= NETA_TX_L4_CSUM_FULL;
              dpf-&gt;stats.tx_pkts++;
        } else {
          /* No modification, so just indicate pkt start. If no mh, skip it since
          it's always present from Rx */
          pkt-&gt;cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
        }
</Insert>
<Copy StartSeek="9572" EndSeek="9573"/>
<Insert>        DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
  }
</Insert>
<Copy StartSeek="9694" EndSeek="9695"/>
<Insert>  DPA_FRWD_DBG("state %s\n",dpa_flow_state_names[dpf-&gt;state]);
  dpf-&gt;stats.rx_pkts++;
</Insert>
<Copy StartSeek="9780" EndSeek="9781"/>
<Insert>  return dpf-&gt;state;
</Insert>
<Copy StartSeek="9801" EndSeek="9951"/>
<Insert>	
</Insert>
<Copy StartSeek="9952" EndSeek="10001"/>
<Insert>  DPA_FRWD_DBG("DPA forwarder init OK.");
</Insert>
<Copy StartSeek="10042" EndSeek="10114"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2013/05/22" Time="14:41:47000">
<Copy StartSeek="0" EndSeek="359"/>
<Insert>	#define DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="424" EndSeek="430"/>
<Insert>	#define DPA_FRWD_DBG(format, args...)
</Insert>
<Copy StartSeek="468" EndSeek="10112"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2013/05/22" Time="14:42:7000">
<Copy StartSeek="0" EndSeek="359"/>
<Insert>#define DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="425" EndSeek="431"/>
<Insert>#define DPA_FRWD_DBG(format, args...)
</Insert>
<Copy StartSeek="470" EndSeek="10114"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2013/05/22" Time="14:44:21000">
<Copy StartSeek="0" EndSeek="359"/>
<Insert>	#define DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="424" EndSeek="430"/>
<Insert>	#define DPA_FRWD_DBG(format, args...)
</Insert>
<Copy StartSeek="468" EndSeek="1374"/>
<Insert>		     tup-&gt;protocol,
		     DPA_NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
		     DPA_NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="1491" EndSeek="1575"/>
<Insert>		     DPA_MAC_PFMT(l2_mod-&gt;dmac), DPA_MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
		     dpa_ntohs(l2_mod-&gt;vlan_id));
</Insert>
<Copy StartSeek="1698" EndSeek="1783"/>
<Insert>		     mod_tup-&gt;protocol,
		     DPA_NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
		     DPA_NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));
</Insert>
<Copy StartSeek="1920" EndSeek="1975"/>
<Insert>		     dpa_flow_state_names[dpf-&gt;state],
		     dpf-&gt;stats.rx_pkts, dpf-&gt;stats.tx_pkts, 
		     dpf-&gt;mod.ops);
</Insert>
<Copy StartSeek="2074" EndSeek="2979"/>
<Insert>	return(*a32++ == *b32++) &amp;&amp;
	(*a32++ == *b32++) &amp;&amp;
	(*a32++ == *b32++) &amp;&amp;
	(*a32 == *b32);
</Insert>
<Copy StartSeek="3075" EndSeek="3256"/>
<Insert>struct dpa_flow *dpa_frwd_flow_alloc(void) {
</Insert>
<Copy StartSeek="3301" EndSeek="4879"/>
<Insert>struct dpa_flow *dpa_frwd_flow_find(struct dpa_pri_key *key) {
</Insert>
<Copy StartSeek="4942" EndSeek="5344"/>
<Insert>				    struct dpa_pri_key *tup)
</Insert>
<Copy StartSeek="5371" EndSeek="10069"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2013/05/22" Time="14:46:37000">
<Copy StartSeek="0" EndSeek="359"/>
<Insert>#define DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="425" EndSeek="431"/>
<Insert>#define DPA_FRWD_DBG(format, args...)
</Insert>
<Copy StartSeek="470" EndSeek="1376"/>
<Insert>		 tup-&gt;protocol,
		 DPA_NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
		 DPA_NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="1505" EndSeek="1589"/>
<Insert>	  DPA_MAC_PFMT(l2_mod-&gt;dmac), DPA_MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
		    dpa_ntohs(l2_mod-&gt;vlan_id));
</Insert>
<Copy StartSeek="1717" EndSeek="1802"/>
<Insert>	  mod_tup-&gt;protocol,
	  DPA_NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
	  DPA_NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));
</Insert>
<Copy StartSeek="1951" EndSeek="2006"/>
<Insert>		 dpa_flow_state_names[dpf-&gt;state],
		 dpf-&gt;stats.rx_pkts, dpf-&gt;stats.tx_pkts, 
		 dpf-&gt;mod.ops);
</Insert>
<Copy StartSeek="2117" EndSeek="3022"/>
<Insert>	return (*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32++ == *b32++) &amp;&amp;
		(*a32 == *b32);
</Insert>
<Copy StartSeek="3114" EndSeek="3295"/>
<Insert>struct dpa_flow *dpa_frwd_flow_alloc(void)
{
</Insert>
<Copy StartSeek="3340" EndSeek="4918"/>
<Insert>struct dpa_flow *dpa_frwd_flow_find(struct dpa_pri_key *key)
{
</Insert>
<Copy StartSeek="4981" EndSeek="5138"/>
<Insert>		dpa_flow_dump(dpf); 
</Insert>
<Copy StartSeek="5138" EndSeek="5360"/>
<Insert>		struct dpa_pri_key *tup)
</Insert>
<Copy StartSeek="5393" EndSeek="7420"/>
<Copy StartSeek="7421" EndSeek="8604"/>
<Insert>		dpa_dump_pkt((uint8_t *)eth, 40);
</Insert>
<Copy StartSeek="8604" EndSeek="10056"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="11:38:2000">
<Copy StartSeek="0" EndSeek="359"/>
<Insert>	#define DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)
</Insert>
<Copy StartSeek="424" EndSeek="430"/>
<Insert>	#define DPA_FRWD_DBG(format, args...)
</Insert>
<Copy StartSeek="468" EndSeek="640"/>
<Insert>	"DROP"
</Insert>
<Copy StartSeek="649" EndSeek="850"/>
<Insert>	int i;

	printk("&lt;0&gt;******************* LEN %d\n", len);
	for (i = 0; i &lt; len; i++) {
		printk("%02x ", data[i]);
	}
	printk("&lt;0&gt;****************************\n");
</Insert>
<Copy StartSeek="1023" EndSeek="1239"/>
<Insert>	DPA_FRWD_DBG("--------------------------------------\n");
</Insert>
<Copy StartSeek="1299" EndSeek="1385"/>
<Insert>		     tup-&gt;protocol,
		     DPA_NIPQUAD(tup-&gt;sip), dpa_ntohs(tup-&gt;sport),
		     DPA_NIPQUAD(tup-&gt;dip), dpa_ntohs(tup-&gt;dport));
</Insert>
<Copy StartSeek="1502" EndSeek="1586"/>
<Insert>		     DPA_MAC_PFMT(l2_mod-&gt;dmac), DPA_MAC_PFMT(l2_mod-&gt;smac), dpa_ntohs(l2_mod-&gt;eth_type),
		     dpa_ntohs(l2_mod-&gt;vlan_id));
</Insert>
<Copy StartSeek="1709" EndSeek="1794"/>
<Insert>		     mod_tup-&gt;protocol,
		     DPA_NIPQUAD(mod_tup-&gt;sip), dpa_ntohs(mod_tup-&gt;sport),
		     DPA_NIPQUAD(mod_tup-&gt;dip), dpa_ntohs(mod_tup-&gt;dport));
</Insert>
<Copy StartSeek="1931" EndSeek="1986"/>
<Insert>		     dpa_flow_state_names[dpf-&gt;state],
		     dpf-&gt;stats.rx_pkts, dpf-&gt;stats.tx_pkts, 
		     dpf-&gt;mod.ops);
</Insert>
<Copy StartSeek="2085" EndSeek="2297"/>
<Insert>		__func__, __LINE__,
</Insert>
<Copy StartSeek="2320" EndSeek="2333"/>
<Insert>		NETA_RX_L3_IS_IP4(rx_status), 
		NETA_RX_L4_IS_TCP(rx_status),
		NETA_RX_L4_IS_UDP(rx_status),
		NETA_PNC_RX_IS_DA_UC(rx_desc),
		(rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) != 0,
		NETA_RX_GET_IPHDR_OFFSET(rx_desc));
</Insert>
<Copy StartSeek="2572" EndSeek="3016"/>
<Insert>	return(*a32++ == *b32++) &amp;&amp;
	(*a32++ == *b32++) &amp;&amp;
	(*a32++ == *b32++) &amp;&amp;
	(*a32 == *b32);
</Insert>
<Copy StartSeek="3112" EndSeek="3293"/>
<Insert>struct dpa_flow *dpa_frwd_flow_alloc(void) {
</Insert>
<Copy StartSeek="3338" EndSeek="3362"/>
<Insert>	tmp = dcm_alloc();
	if (!tmp) {
		DPA_FRWD_DBG("Failed to alloc dpf entry\n");
		return NULL;
	}
</Insert>
<Copy StartSeek="3471" EndSeek="3472"/>
<Insert>	tmp-&gt;state = DPF_NEW;
	tmp-&gt;stats.rx_pkts = 0;
	tmp-&gt;stats.tx_pkts = 0;
	tmp-&gt;mod.ops = 0;
	tmp-&gt;mod.tx_port = ~0;
	tmp-&gt;next = NULL;

	return tmp;
</Insert>
<Copy StartSeek="3630" EndSeek="3682"/>
<Insert>	dcm_free(dpf);
</Insert>
<Copy StartSeek="3699" EndSeek="4920"/>
<Insert>
	return idx;
</Insert>
<Copy StartSeek="4937" EndSeek="4940"/>
<Insert>struct dpa_flow *dpa_frwd_flow_find(struct dpa_pri_key *key) {
</Insert>
<Copy StartSeek="5003" EndSeek="5382"/>
<Insert>				    struct dpa_pri_key *tup)
</Insert>
<Copy StartSeek="5409" EndSeek="5593"/>
<Insert>	struct dpa_flow **dpe_list, *tmp;
</Insert>
<Copy StartSeek="5629" EndSeek="5630"/>
<Insert>	dpe_list = &amp;dpa_flow_tbl[dpa_key_hash(&amp;dpf-&gt;key)]; /* head of the chain */
	tmp = *dpe_list;
</Insert>
<Copy StartSeek="5726" EndSeek="5727"/>
<Insert>	if (!tmp) {
		*dpe_list = dpf;
		return;
	}

	dpf-&gt;next = tmp;
	*dpe_list = dpf;

	dpa_flow_dump(dpf);
</Insert>
<Copy StartSeek="5850" EndSeek="5935"/>
<Insert>	struct dpa_flow **dpe_list, *dpf, *prev;
</Insert>
<Copy StartSeek="5978" EndSeek="5979"/>
<Insert>	dpe_list = &amp;dpa_flow_tbl[dpa_key_hash(key)]; /* head of the chain */
	dpf = *dpe_list;
</Insert>
<Copy StartSeek="6069" EndSeek="6070"/>
<Insert>	if (!dpf)
		return -1;
</Insert>
<Copy StartSeek="6101" EndSeek="6102"/>
<Insert>	prev = dpf;
	do {
		if (is_pri_key_match(&amp;dpf-&gt;key, key)) {
			DPA_FRWD_DBG("match dpf found for remove");
</Insert>
<Copy StartSeek="6219" EndSeek="6220"/>
<Insert>			/* First entry in list */
			if (prev == dpf) {
				/* Single element in list */
				if (!dpf-&gt;next) {
					*dpe_list = NULL;
				} else {
					*dpe_list = dpf-&gt;next;
				}
			} else {
				prev-&gt;next = dpf-&gt;next;
			}
</Insert>
<Copy StartSeek="6523" EndSeek="6524"/>
<Insert>			dpa_flow_dump(dpf);
			dpf-&gt;next = NULL;
			dcm_free(dpf);
			return 0;
		}
		prev = dpf;
		dpf = dpf-&gt;next;
	} while (dpf);

	return -1;
</Insert>
<Copy StartSeek="6695" EndSeek="6754"/>
<Insert>	struct dpa_flow *dpf;
	bool is_alive;

	dpf = dpa_frwd_flow_find(key);
	if (!dpf) {
		return false;
	}
</Insert>
<Copy StartSeek="6871" EndSeek="6872"/>
<Insert>	is_alive = dpf-&gt;is_alive;
	if (is_alive) {
		dpf-&gt;is_alive = false;
	}
</Insert>
<Copy StartSeek="6953" EndSeek="6954"/>
<Insert>	return is_alive;
</Insert>
<Copy StartSeek="6973" EndSeek="7062"/>
<Insert>	struct dpa_flow *dpf = dpa_frwd_flow_find(key);
</Insert>
<Copy StartSeek="7112" EndSeek="7113"/>
<Insert>	if (!dpf) {
		return DPA_FLOW_UNKNOWN;
	}
</Insert>
<Copy StartSeek="7164" EndSeek="7165"/>
<Insert>	*stats = dpf-&gt;stats;

	return DPA_OK;
</Insert>
<Copy StartSeek="7208" EndSeek="7292"/>
<Insert>	dpa_frwd_cmd = 1; /* FIXME Make proper in-context implementation */

</Insert>
<Copy StartSeek="7365" EndSeek="7605"/>
<Insert>
	dpa_frwd_cmd = 0;
</Insert>
<Copy StartSeek="7628" EndSeek="7926"/>
<Copy StartSeek="8089" EndSeek="8090"/>
<Insert>	DPA_FRWD_DBG("dpa_frwd_rx: Recved pkt len %d\n", pkt-&gt;size);

	if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
		return DPF_LCL;

	if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="8129" EndSeek="9739"/>
<Insert>		DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
	}
</Insert>
<Copy StartSeek="9867" EndSeek="9868"/>
<Insert>	DPA_FRWD_DBG("state %s\n",dpa_flow_state_names[dpf-&gt;state]);
	dpf-&gt;stats.rx_pkts++;
</Insert>
<Copy StartSeek="9955" EndSeek="9956"/>
<Insert>	return dpf-&gt;state;
</Insert>
<Copy StartSeek="9977" EndSeek="10127"/>
<Insert>
</Insert>
<Copy StartSeek="10129" EndSeek="10291"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="12:03:16000">
<Copy StartSeek="0" EndSeek="9739"/>
<Insert>        DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
  }
</Insert>
<Copy StartSeek="9860" EndSeek="10284"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="12:03:31000">
<Copy StartSeek="0" EndSeek="7995"/>
<Insert>  if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
        return DPF_LCL;
</Insert>
<Copy StartSeek="8082" EndSeek="8083"/>
<Insert>  if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="8121" EndSeek="10276"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="12:04:49000">
<Copy StartSeek="0" EndSeek="7929"/>
<Insert>  DPA_FRWD_DBG("dpa_frwd_rx: Recved pkt len %d\n", pkt-&gt;size);
</Insert>
<Copy StartSeek="7991" EndSeek="10275"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="12:04:52000">
<Copy StartSeek="0" EndSeek="7292"/>
<Insert>  dpa_frwd_cmd = 1; /* FIXME Make proper in-context implementation */
</Insert>
<Copy StartSeek="7361" EndSeek="10274"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="12:05:14000">
<Copy StartSeek="0" EndSeek="7607"/>
<Insert>  dpa_frwd_cmd = 0;
</Insert>
<Copy StartSeek="7626" EndSeek="10273"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="12:05:16000">
<Copy StartSeek="0" EndSeek="640"/>
<Insert>  "DROP"
</Insert>
<Copy StartSeek="648" EndSeek="10272"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2013/06/03" Time="12:06:27000">
<Copy StartSeek="0" EndSeek="69"/>
<Insert>#include &lt;dpa/../../platform/linux_kernel_space_zte/mod/eth/eth_regs.h&gt; /* FIXME */
</Insert>
<Copy StartSeek="95" EndSeek="7233"/>
<Insert>	dpa_frwd_cmd = 1; /* FIXME Make proper in-context implementation */
</Insert>
<Copy StartSeek="7303" EndSeek="7549"/>
<Insert>	dpa_frwd_cmd = 0;
</Insert>
<Copy StartSeek="7569" EndSeek="7853"/>
<Insert>	uint8_t mh; 
</Insert>
<Copy StartSeek="7866" EndSeek="7869"/>
<Insert>	DPA_FRWD_DBG("dpa_frwd_rx: Recved pkt len %d\n", pkt-&gt;size);
  
	if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
		return DPF_LCL;

	if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="8003" EndSeek="8564"/>
<Insert>		return DPF_LCL;
</Insert>
<Copy StartSeek="8588" EndSeek="8591"/>
<Insert>	dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8616" EndSeek="8679"/>
<Insert>	if (dpf-&gt;state == DPF_FWD) {
		dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="8739" EndSeek="8740"/>
<Insert>		/* Eth egress port */
		pkt-&gt;port = dpf-&gt;mod.tx_port;
</Insert>
<Copy StartSeek="8808" EndSeek="8809"/>
<Insert>		/* Eth Tx queue */
		pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="8887" EndSeek="8888"/>
<Insert>		/* Eth Tx cmd */
		mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
		pkt-&gt;size += mh;
		if (dpf-&gt;mod.ops) {
			uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
			pkt-&gt;cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
				   ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
				   ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
				   (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9371" EndSeek="9372"/>
<Insert>			if (dpf-&gt;key.protocol == DPA_IP_PROTO_UDP)
				pkt-&gt;cmd |= NETA_TX_L4_UDP;
			else
				pkt-&gt;cmd &amp;= ~NETA_TX_L4_UDP;
</Insert>
<Copy StartSeek="9551" EndSeek="9552"/>
<Insert>			pkt-&gt;cmd |= NETA_TX_L4_CSUM_FULL;
			dpf-&gt;stats.tx_pkts++;
		} else {
			/* No modification, so just indicate pkt start. If no mh, skip it since
			it's always present from Rx */
			pkt-&gt;cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
		}
</Insert>
<Copy StartSeek="9853" EndSeek="9854"/>
<Insert>		DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;cmd);
	}
</Insert>
<Copy StartSeek="9985" EndSeek="10296"/>
<Insert>	DPA_FRWD_DBG("DPA forwarder init OK.");
</Insert>
<Copy StartSeek="10338" EndSeek="10410"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2013/06/18" Time="15:15:3000">
<Copy StartSeek="0" EndSeek="582"/>
<Insert>	"DROP"
</Insert>
<Copy StartSeek="591" EndSeek="7870"/>
<Insert>  if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
        return DPF_LCL;
</Insert>
<Copy StartSeek="7957" EndSeek="7958"/>
<Insert>  if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="7996" EndSeek="8557"/>
<Insert>        return DPF_LCL;
</Insert>
<Copy StartSeek="8575" EndSeek="8578"/>
<Insert>  dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8602" EndSeek="8665"/>
<Insert>  if (dpf-&gt;state == DPF_FWD) {
        dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="8718" EndSeek="8719"/>
<Insert>        /* Eth egress port */
        pkt-&gt;port = dpf-&gt;mod.tx_port;
</Insert>
<Copy StartSeek="8775" EndSeek="8776"/>
<Insert>        /* Eth Tx queue */
        pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="8842" EndSeek="8843"/>
<Insert>        /* Eth Tx cmd */
        mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
        pkt-&gt;size += mh;
        if (dpf-&gt;mod.ops) {
              uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
              pkt-&gt;hw_cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
                  ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
                  ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
                  (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9256" EndSeek="9257"/>
<Insert>              if (dpf-&gt;key.protocol == DPA_IP_PROTO_UDP)
                    pkt-&gt;hw_cmd |= NETA_TX_L4_UDP;
              else
                    pkt-&gt;hw_cmd &amp;= ~NETA_TX_L4_UDP;
</Insert>
<Copy StartSeek="9382" EndSeek="9383"/>
<Insert>              pkt-&gt;hw_cmd |= NETA_TX_L4_CSUM_FULL;
              dpf-&gt;stats.tx_pkts++;
        } else {
          /* No modification, so just indicate pkt start. If no mh, skip it since
          it's always present from Rx */
          pkt-&gt;hw_cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
        }
</Insert>
<Copy StartSeek="9629" EndSeek="10186"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="11:47:10000">
<Copy StartSeek="0" EndSeek="9630"/>
<Insert>        DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;hw_cmd);
  }
</Insert>
<Copy StartSeek="9754" EndSeek="10179"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="11:48:4000">
<Copy StartSeek="0" EndSeek="7870"/>
<Insert>	if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
		return DPF_LCL;
</Insert>
<Copy StartSeek="7964" EndSeek="7965"/>
<Insert>	if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="8004" EndSeek="8565"/>
<Insert>		return DPF_LCL;
</Insert>
<Copy StartSeek="8589" EndSeek="8592"/>
<Insert>	dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8617" EndSeek="8680"/>
<Insert>	if (dpf-&gt;state == DPF_FWD) {
		dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="8740" EndSeek="8741"/>
<Insert>		/* Eth egress port */
		pkt-&gt;port = dpf-&gt;mod.tx_port;
</Insert>
<Copy StartSeek="8809" EndSeek="8810"/>
<Insert>		/* Eth Tx queue */
		pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="8888" EndSeek="8889"/>
<Insert>		/* Eth Tx cmd */
		mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
		pkt-&gt;size += mh;
		if (dpf-&gt;mod.ops) {
			uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
			pkt-&gt;hw_cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
				      ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
				      ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
				      (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9372" EndSeek="9373"/>
<Insert>			if (dpf-&gt;key.protocol == DPA_IP_PROTO_UDP)
				pkt-&gt;hw_cmd |= NETA_TX_L4_UDP;
			else
				pkt-&gt;hw_cmd &amp;= ~NETA_TX_L4_UDP;
</Insert>
<Copy StartSeek="9552" EndSeek="9553"/>
<Insert>			pkt-&gt;hw_cmd |= NETA_TX_L4_CSUM_FULL;
			dpf-&gt;stats.tx_pkts++;
		} else {
			/* No modification, so just indicate pkt start. If no mh, skip it since
			it's always present from Rx */
			pkt-&gt;hw_cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
		}
</Insert>
<Copy StartSeek="9854" EndSeek="9855"/>
<Insert>		DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;hw_cmd);
	}
</Insert>
<Copy StartSeek="9986" EndSeek="10411"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="11:48:33000">
<Copy StartSeek="0" EndSeek="245"/>
<Copy StartSeek="281" EndSeek="2128"/>
<Insert>#ifdef __DPA_DEBUG__
</Insert>
<Copy StartSeek="2151" EndSeek="2552"/>
<Insert>#endif
</Insert>
<Copy StartSeek="2561" EndSeek="10451"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="14:39:18000">
<Copy StartSeek="0" EndSeek="280"/>
<Insert>
</Insert>
<Copy StartSeek="347" EndSeek="2257"/>
<Insert>	DPA_DBG("(%s:%d)status:%#x, ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2349" EndSeek="10523"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="14:40:6000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>}
</Insert>
<Copy StartSeek="2142" EndSeek="10527"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="14:40:49000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>}asdf
</Insert>
<Copy StartSeek="2138" EndSeek="10523"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="14:40:52000">
<Copy StartSeek="0" EndSeek="7982"/>
<Insert>  if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
        return DPF_LCL;
</Insert>
<Copy StartSeek="8069" EndSeek="8070"/>
<Insert>  if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="8136" EndSeek="8491"/>
<Insert>	dpa_dump_rx_desc(rx_desc);
</Insert>
<Copy StartSeek="8493" EndSeek="10517"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="14:45:41000">
<Copy StartSeek="0" EndSeek="2385"/>
<Copy StartSeek="2420" EndSeek="10552"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="15:43:44000">
<Copy StartSeek="0" EndSeek="2257"/>
<Insert>	_DPA_FRWD_DBG("(%s:%d)status:%#x, ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2358" EndSeek="10561"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="15:44:11000">
<Copy StartSeek="0" EndSeek="2257"/>
<Insert>	_DPA_FRWD_DBG("(%s:%d)status:%#x, pppoe%#x ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2359" EndSeek="10562"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="15:44:14000">
<Copy StartSeek="0" EndSeek="2545"/>
<Copy StartSeek="2584" EndSeek="10601"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="15:47:52000">
<Copy StartSeek="0" EndSeek="2257"/>
<Insert>	_DPA_FRWD_DBG("(%s:%d)status:%#x, pppoe:%#x ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2366" EndSeek="2552"/>
<Insert>	       NETA_PNC_RX_IS_DA_MC(rx_desc),
</Insert>
<Copy StartSeek="2552" EndSeek="10569"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="15:48:22000">
<Copy StartSeek="0" EndSeek="2552"/>
<Copy StartSeek="2591" EndSeek="10608"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="17:02:40000">
<Copy StartSeek="0" EndSeek="2552"/>
<Insert>	       NETA_PNC_RX_IS_DA_UC(rx_desc),
</Insert>
<Copy StartSeek="2594" EndSeek="10611"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="17:06:58000">
<Copy StartSeek="0" EndSeek="2257"/>
<Insert>	_DPA_FRWD_DBG("(%s:%d)status:%#x, pppoe:%#x ipv4:%#x tcp:%#x, udp:%x uc:%lu mc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2366" EndSeek="10611"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="17:07:17000">
<Copy StartSeek="0" EndSeek="2632"/>
<Insert>		 (rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) != 0,
</Insert>
<Copy StartSeek="2678" EndSeek="10610"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="17:08:19000">
<Copy StartSeek="0" EndSeek="2552"/>
<Insert>	       (rxd)-&gt;pnc_info &amp; NETA_PNC_DA_MC,
</Insert>
<Copy StartSeek="2598" EndSeek="10614"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="17:09:58000">
<Copy StartSeek="0" EndSeek="8795"/>
<Insert>  dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8819" EndSeek="10613"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2013/06/19" Time="17:24:38000">
<Copy StartSeek="0" EndSeek="245"/>
<Insert>int printk(const char * fmt, ...);
#define _DPA_FRWD_DBG(format, args...) printk(format"\n", ##args)

</Insert>
<Copy StartSeek="245" EndSeek="2092"/>
<Insert>//#ifdef __DPA_DEBUG__
</Insert>
<Copy StartSeek="2113" EndSeek="2153"/>
<Insert>	_DPA_FRWD_DBG("(%s:%d)status:%#x, pppoe:%#x ipv4:%#x tcp:%#x, udp:%x mc:%lu uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2239" EndSeek="2275"/>
<Insert>	       NETA_RX_IS_PPPOE(rx_desc),
</Insert>
<Copy StartSeek="2275" EndSeek="2390"/>
<Insert>	       (rx_desc)-&gt;pnc_info &amp; NETA_PNC_DA_MC,
</Insert>
<Copy StartSeek="2390" EndSeek="2428"/>
<Insert>		(rx_status &amp; NETA_RX_L4_CSUM_OK_MASK) != 0,
</Insert>
<Copy StartSeek="2475" EndSeek="2514"/>
<Insert>//#endif
</Insert>
<Copy StartSeek="2521" EndSeek="7870"/>
<Insert>	if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
		return DPF_LCL;
</Insert>
<Copy StartSeek="7964" EndSeek="7965"/>
<Insert>	dpa_dump_rx_desc(rx_desc);
	if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="8004" EndSeek="8359"/>
<Insert>	
</Insert>
<Copy StartSeek="8387" EndSeek="8592"/>
<Insert>	dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8617" EndSeek="8711"/>
<Copy StartSeek="8741" EndSeek="8770"/>
<Insert>
</Insert>
<Copy StartSeek="8799" EndSeek="10469"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:30:19000">
<Copy StartSeek="0" EndSeek="8711"/>
<Insert>	  dump_pkt(pkt-&gt;phy_hdr,40);
</Insert>
<Copy StartSeek="8745" EndSeek="8774"/>
<Insert>	dump_pkt(pkt-&gt;phy_hdr,40);
</Insert>
<Copy StartSeek="8806" EndSeek="10477"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:30:32000">
<Copy StartSeek="0" EndSeek="8565"/>
<Insert>        return DPF_LCL;
</Insert>
<Copy StartSeek="8583" EndSeek="8586"/>
<Insert>  dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8610" EndSeek="10470"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:31:13000">
<Copy StartSeek="0" EndSeek="801"/>
<Insert>  
</Insert>
<Copy StartSeek="806" EndSeek="10472"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:32:9000">
<Copy StartSeek="0" EndSeek="801"/>
<Insert>as  
</Insert>
<Copy StartSeek="804" EndSeek="10470"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:32:23000">
<Copy StartSeek="0" EndSeek="7870"/>
<Insert>  if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
        return DPF_LCL;
</Insert>
<Copy StartSeek="7957" EndSeek="7958"/>
<Insert>  if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="7996" EndSeek="10462"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:32:51000">
<Copy StartSeek="0" EndSeek="8665"/>
<Insert>  if (dpf-&gt;state == DPF_FWD) {
	  dpa_dump_pkt(pkt-&gt;phy_hdr,40);
        dpa_modify_pkt(pkt);
	dpa_dump_pkt(pkt-&gt;phy_hdr,40);
</Insert>
<Copy StartSeek="8784" EndSeek="8785"/>
<Insert>        /* Eth egress port */
        pkt-&gt;port = dpf-&gt;mod.tx_port;
</Insert>
<Copy StartSeek="8841" EndSeek="8842"/>
<Insert>        /* Eth Tx queue */
        pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="8908" EndSeek="8909"/>
<Insert>        /* Eth Tx cmd */
        mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
        pkt-&gt;size += mh;
        if (dpf-&gt;mod.ops) {
              uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
              pkt-&gt;hw_cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
                  ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
                  ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
                  (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9322" EndSeek="9323"/>
<Insert>              if (dpf-&gt;key.protocol == DPA_IP_PROTO_UDP)
                    pkt-&gt;hw_cmd |= NETA_TX_L4_UDP;
              else
                    pkt-&gt;hw_cmd &amp;= ~NETA_TX_L4_UDP;
</Insert>
<Copy StartSeek="9448" EndSeek="9449"/>
<Insert>              pkt-&gt;hw_cmd |= NETA_TX_L4_CSUM_FULL;
              dpf-&gt;stats.tx_pkts++;
        } else {
          /* No modification, so just indicate pkt start. If no mh, skip it since
          it's always present from Rx */
          pkt-&gt;hw_cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
        }
</Insert>
<Copy StartSeek="9695" EndSeek="9696"/>
<Insert>        DPA_FRWD_DBG("################ pkt forwarded to port %d, %d bytes, pkt-&gt;cmd 0x%x", pkt-&gt;port, pkt-&gt;size, pkt-&gt;hw_cmd);
  }

</Insert>
<Copy StartSeek="9840" EndSeek="10264"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:33:34000">
<Copy StartSeek="0" EndSeek="7957"/>
<Insert>
</Insert>
<Copy StartSeek="7989" EndSeek="10295"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:33:49000">
<Copy StartSeek="0" EndSeek="2153"/>
<Insert>	DPA_DBG("(%s:%d)status:%#x, ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2244" EndSeek="10300"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:35:8000">
<Copy StartSeek="0" EndSeek="8118"/>
<Copy StartSeek="8155" EndSeek="10337"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:35:42000">
<Copy StartSeek="0" EndSeek="8403"/>
<Copy StartSeek="8441" EndSeek="10375"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:35:56000">
<Copy StartSeek="0" EndSeek="7994"/>
<Copy StartSeek="8022" EndSeek="8490"/>
<Insert>	dpa_dump_rx_desc(rx_desc);
</Insert>
<Copy StartSeek="8492" EndSeek="10377"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:36:2000">
<Copy StartSeek="0" EndSeek="2153"/>
<Insert>	DPA_FRWD_DBG("(%s:%d)status:%#x, ipv4:%#x tcp:%#x, udp:%x uc:%lu l4_csum:%u l3_off:%u\n",
</Insert>
<Copy StartSeek="2239" EndSeek="7957"/>
<Insert>	dpa_dump_pkt(pkt-&gt;phy_hdr,40);
	dpa_dump_rx_desc(rx_desc);
</Insert>
<Copy StartSeek="7957" EndSeek="8081"/>
<Insert>		DPA_FRWD_DBG("not valid pkt !!!");
</Insert>
<Copy StartSeek="8081" EndSeek="8329"/>
<Insert>		DPA_FRWD_DBG("not valid pkt2 !!!");
</Insert>
<Copy StartSeek="8329" EndSeek="8350"/>
<Insert>	
</Insert>
<Copy StartSeek="8378" EndSeek="8694"/>
<Insert>		dpa_dump_pkt(pkt-&gt;phy_hdr,40);
</Insert>
<Copy StartSeek="8694" EndSeek="8717"/>
<Insert>		dpa_dump_pkt(pkt-&gt;phy_hdr,40);

</Insert>
<Copy StartSeek="8718" EndSeek="10197"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2013/06/20" Time="00:42:47000">
<Copy StartSeek="0" EndSeek="7870"/>
<Insert>	if (dpa_frwd_cmd) /* FIXME Make proper in-context implementation */
		return DPF_LCL;
	if (!NETA_RX_L3_IS_IP4(rx_status)) {
</Insert>
<Copy StartSeek="8004" EndSeek="8565"/>
<Insert>		return DPF_LCL;
</Insert>
<Copy StartSeek="8589" EndSeek="8592"/>
<Insert>	dpf-&gt;is_alive = true; 
</Insert>
<Copy StartSeek="8617" EndSeek="8680"/>
<Insert>	if (dpf-&gt;state == DPF_FWD) {
		dpa_modify_pkt(pkt);
</Insert>
<Copy StartSeek="8740" EndSeek="8741"/>
<Insert>		/* Eth egress port */
		pkt-&gt;port = dpf-&gt;mod.tx_port;
</Insert>
<Copy StartSeek="8809" EndSeek="8810"/>
<Insert>		/* Eth Tx queue */
		pkt-&gt;queue = 0;	/* FIXME qos2queue(pkt) */
</Insert>
<Copy StartSeek="8888" EndSeek="8889"/>
<Insert>		/* Eth Tx cmd */
		mh = ETH_PORT_HAS_MH(pkt-&gt;port) ? 2 : 0; /* FIXME Make calc more generic */
		pkt-&gt;size += mh;
		if (dpf-&gt;mod.ops) {
			uint8_t ip_off =(uint8_t *)pkt-&gt;ip_hdr - (uint8_t *)pkt-&gt;eth_hdr;
			pkt-&gt;hw_cmd = NETA_TX_L3_IP4 | NETA_TX_IP_CSUM_MASK |
				      ((ip_off+mh) &lt;&lt; NETA_TX_L3_OFFSET_OFFS) |
				      ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS) |
				      (iph-&gt;ihl &lt;&lt; NETA_TX_IP_HLEN_OFFS);
</Insert>
<Copy StartSeek="9372" EndSeek="9373"/>
<Insert>			if (dpf-&gt;key.protocol == DPA_IP_PROTO_UDP)
				pkt-&gt;hw_cmd |= NETA_TX_L4_UDP;
			else
				pkt-&gt;hw_cmd &amp;= ~NETA_TX_L4_UDP;
</Insert>
<Copy StartSeek="9552" EndSeek="9553"/>
<Insert>			pkt-&gt;hw_cmd |= NETA_TX_L4_CSUM_FULL;
			dpf-&gt;stats.tx_pkts++;
		} else {
			/* No modification, so just indicate pkt start. If no mh, skip it since
			it's always present from Rx */
			pkt-&gt;hw_cmd = ((mh^0x02) &lt;&lt; NETA_TX_PKT_OFFSET_OFFS);
		}
</Insert>
<Copy StartSeek="9854" EndSeek="9855"/>
<Insert>		DPA_FRWD_DBG("################ pkt forwarded to port %d,"
			     "%d bytes, pkt-&gt;cmd 0x%x", 
			     pkt-&gt;port, pkt-&gt;size, pkt-&gt;hw_cmd);
	}

</Insert>
<Copy StartSeek="9987" EndSeek="10411"/>
</Delta>
</DeltaFile>
