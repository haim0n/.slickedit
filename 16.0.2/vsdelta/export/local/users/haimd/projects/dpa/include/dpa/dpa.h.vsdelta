<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="8" Comment="" Date="2012/12/25" Time="09:06:15000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2012, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
* dpa.h
*
* Description:
*     Internal DPA interface.
*
*/

#ifndef _DPA_H_
#define _DPA_H_

#include &lt;dpa_types.h&gt;
#include &lt;eth/eth.h&gt;

#ifdef __cplusplus
extern "C" {
#endif

/*
 * dpa_pkt_tx
 *
 * Description: 
 *
 * Schedule packet for transmission via DPA engine.
 *
 * Parameters:
 *
 *   pkt      - Ethernet packet buffer to transmit.
 *   priority - Priority specificiation.
 *
 * Returns:
 *
 *   DPA_OK on success, or error code on failure.
 *
 */
int32_t dpa_pkt_tx(eth_pkt_t *pkt, uint32_t priority);


/*
 * dpa_tx_start
 *
 * Description: 
 *
 * Wake-up DPA for packet batch transmission.
 *
 * Parameters:
 *
 *  None
 *
 * Returns:
 *
 *   DPA_OK on success, or error code on failure.
 *
 */
int32_t dpa_tx_start(void);


/*
 * dpa_tx_queue_ready
 *
 * Description:
 *
 * DPA queue transmission status.
 *
 * Parameters:
 *
 *   priority - Queue priority specificiation.
 *
 * Returns:
 *
 *   true if the queue is ready to transmit, false otherwise.
 *   If true, dpa_pkt_tx is guaranteed to succeed.
 *
 */
bool dpa_tx_queue_ready(uint32_t priority);


/*
 * dpa_pkt_reclaim
 *
 * Description:
 *
 * Allocate new empty packet in DPA.
 *
 * Parameters:
 *
 *   pkt - Ethernet packet whose attributes to use for a new packet.
 *
 * Returns:
 *
 *   DPA_OK on success, or error code on failure.
 *
 */
int32_t dpa_pkt_reclaim(eth_pkt_t *pkt);


/*
 * dpa_pkt_alloc
 *
 * Description: 
 *
 * Allocate ethernet packet buffer.
 *
 * Parameters:
 *
 *   size - Size of the buffer to hold a packet body and additional fields
 *          (Marvell header and crc), bytes.
 *
 * Returns:
 *
 *   Pointer to the allocated packet buffer or NULL if out of memory.
 *
 */
eth_pkt_t *dpa_pkt_alloc(uint32_t size);

/*
 * dpa_pkt_wrap
 *
 * Description: 
 *
 * Wrap up existing memory block with a packet buffer.
 *
 * Parameters:
 *
 *   data      - Pointer to data buffer.
 *   size      - Size of data block.
 *   os_handle - Associated OS object (skb).
 *
 * Returns:
 *
 *   Pointer to the allocated packet buffer or NULL if out of memory.
 *
 */
eth_pkt_t *dpa_pkt_wrap(void *data, uint32_t size, void *os_handle);

/*
 * dpa_pkt_free
 *
 * Description: 
 *
 * Free ethernet packet buffer.
 *
 * Parameters:
 *
 *   pkt - Packet buffer to free.
 *
 * Returns:
 *
 *   None.
 *
 */
void dpa_pkt_free(eth_pkt_t *pkt);


#ifdef __cplusplus
}
#endif

#endif /* _DPA_H_ */</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/08/27" Time="12:49:30000">
<Copy StartSeek="0" EndSeek="2773"/>
<Copy StartSeek="2808" EndSeek="2827"/>
<Insert>}
</Insert>
<Copy StartSeek="2827" EndSeek="2855"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="15:45:5000">
<Copy StartSeek="0" EndSeek="2773"/>
<Insert>
</Insert>
<Copy StartSeek="2773" EndSeek="2806"/>
<Insert>
</Insert>
<Copy StartSeek="2806" EndSeek="2825"/>
<Copy StartSeek="2827" EndSeek="2855"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/09/10" Time="15:57:52000">
<Copy StartSeek="0" EndSeek="601"/>
<Insert>/* Packet Rx/Tx priorities */
#define DPA_PKT_PRI_MIN  0
#define DPA_PKT_PRI_MAX  1
#define DPA_PKT_PRI_NUM  2


</Insert>
<Copy StartSeek="601" EndSeek="942"/>
<Copy StartSeek="1165" EndSeek="1498"/>
<Insert> * dpa_pkt_rx_done
</Insert>
<Copy StartSeek="1517" EndSeek="1539"/>
<Insert> * Notify engine that handling of a packet originated from DPA engine has completed.
</Insert>
<Copy StartSeek="1576" EndSeek="1597"/>
<Insert> *   pkt - Ethernet packet for which the handling completed.
</Insert>
<Copy StartSeek="1666" EndSeek="1741"/>
<Insert>int32_t dpa_pkt_rx_done(eth_pkt_t *pkt);
</Insert>
<Copy StartSeek="1782" EndSeek="2843"/>
<Insert>void dpa_pkt_rx(eth_pkt_t* pkt);
</Insert>
<Copy StartSeek="2843" EndSeek="2892"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="12:05:17000">
<Copy StartSeek="0" EndSeek="882"/>
<Insert>int32_t dpa_pkt_tx(eth_pkt_t *pkt, uint32_t priority);
</Insert>
<Copy StartSeek="943" EndSeek="1455"/>
<Insert>bool dpa_tx_queue_ready(uint32_t priority);
</Insert>
<Copy StartSeek="1505" EndSeek="2904"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="12:05:36000">
<Copy StartSeek="0" EndSeek="882"/>
<Insert>int32_t dpa_pkt_tx(eth_pkt_t *pkt, dpa_pkt_prio_t priority);
</Insert>
<Copy StartSeek="937" EndSeek="1449"/>
<Insert>bool dpa_tx_queue_ready(dpa_pkt_prio_t priority);
</Insert>
<Copy StartSeek="1493" EndSeek="2892"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/10/16" Time="12:06:15000">
<Copy StartSeek="0" EndSeek="2554"/>
<Insert>eth_pkt_t *dpa_pkt_wrap(void *data, uint32_t size, uint32_t offset, void *os_handle);
</Insert>
<Copy StartSeek="2623" EndSeek="2875"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="09:05:33000">
<Copy StartSeek="0" EndSeek="2554"/>
<Insert>eth_pkt_t *dpa_pkt_wrap(void *data, uint32_t size, void *os_handle);
</Insert>
<Copy StartSeek="2640" EndSeek="2892"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/12/25" Time="09:05:44000">
<Copy StartSeek="0" EndSeek="2337"/>
<Insert> *   offset    - Offset, bytes, from data buffer to beginning of MAC header.
</Insert>
<Copy StartSeek="2337" EndSeek="2477"/>
<Insert>eth_pkt_t *dpa_pkt_wrap(void *data, uint32_t size, uint32_t offset, void *os_handle);
</Insert>
<Copy StartSeek="2546" EndSeek="2798"/>
</Delta>
</DeltaFile>
