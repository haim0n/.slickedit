<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="139" Comment="" Date="2012/08/06" Time="09:49:20000" NL="\10" Encoding="text">
<Insert>// Shell.

#include "types.h"
#include "user.h"
#include "fcntl.h"

// Parsed command representation
#define EXEC  1
#define REDIR 2
#define PIPE  3
#define LIST  4
#define BACK  5

#define MAXARGS 10
#define MAXPWD 256

struct pwd_s {
	char dir[MAXPWD];
	int len;
};

struct cmd {
  int type;
};

struct execcmd {
  int type;
  char *argv[MAXARGS];
  char *eargv[MAXARGS];
};

struct redircmd {
  int type;
  struct cmd *cmd;
  char *file;
  char *efile;
  int mode;
  int fd;
};

struct pipecmd {
  int type;
  struct cmd *left;
  struct cmd *right;
};

struct listcmd {
  int type;
  struct cmd *left;
  struct cmd *right;
};

struct backcmd {
  int type;
  struct cmd *cmd;
};

int fork1(void);  // Fork but panics on failure.
void panic(char*);
struct cmd *parsecmd(char*);

// Execute cmd.  Never returns.
void
runcmd(struct cmd *cmd)
{
  int p[2];
  struct backcmd *bcmd;
  struct execcmd *ecmd;
  struct listcmd *lcmd;
  struct pipecmd *pcmd;
  struct redircmd *rcmd;

  if(cmd == 0)
    exit();
  
  switch(cmd-&gt;type){
  default:
    panic("runcmd");

  case EXEC:
    ecmd = (struct execcmd*)cmd;
    if(ecmd-&gt;argv[0] == 0)
      exit();
    exec(ecmd-&gt;argv[0], ecmd-&gt;argv);
    printf(2, "exec %s failed\n", ecmd-&gt;argv[0]);
    break;

  case REDIR:
    rcmd = (struct redircmd*)cmd;
    close(rcmd-&gt;fd);
    if(open(rcmd-&gt;file, rcmd-&gt;mode) &lt; 0){
      printf(2, "open %s failed\n", rcmd-&gt;file);
      exit();
    }
    runcmd(rcmd-&gt;cmd);
    break;

  case LIST:
    lcmd = (struct listcmd*)cmd;
    if(fork1() == 0)
      runcmd(lcmd-&gt;left);
    wait();
    runcmd(lcmd-&gt;right);
    break;

  case PIPE:
    pcmd = (struct pipecmd*)cmd;
    if(pipe(p) &lt; 0)
      panic("pipe");
    if(fork1() == 0){
      close(1);
      dup(p[1]);
      close(p[0]);
      close(p[1]);
      runcmd(pcmd-&gt;left);
    }
    if(fork1() == 0){
      close(0);
      dup(p[0]);
      close(p[0]);
      close(p[1]);
      runcmd(pcmd-&gt;right);
    }
    close(p[0]);
    close(p[1]);
    wait();
    wait();
    break;
    
  case BACK:
    bcmd = (struct backcmd*)cmd;
    if(fork1() == 0)
      runcmd(bcmd-&gt;cmd);
    break;
  }
  exit();
}

//void pwd_pop(struct pwd_s *pwd)
//{
//  char *end = &amp;pwd-&gt;dir[pwd-&gt;len -1];
//  int i = pwd-&gt;len;
//
//  while((*end != '/') &amp;&amp; (end != pwd-&gt;dir + 2)) {
//    i--;
//    *(end--)= '\0';
//  }
//  pwd-&gt;len = i;
//}
//
//void pwd_push(char *dir, nbuf)
//{
//  pwd-&gt;dir[pwd-&gt;len] = '\0';
//}

//void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
//{
//  char *end = buf;
//
//  /* absolute path */
//  if(*buf == '/') {
//    /* skip consecutive /////// */
//    while(*buf == '/') {
//      buf++;
//      nbuf--;
//    }
//    memcpy(&amp;pwd-&gt;dir, buf, nbuf)
//    pwd-&gt;len = nbuf;
//    memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
//    return 0;
//  }
//
//  /* relative path */
//  while(*buf) {
////	buf = strchr('/', buf);
//    if(*buf == '.') {
//      if (*(buf + 1) == '.') {
//        pwd_pop(pwd);
//        buf++;
//      }
//      buf++;
//    } else {
//      end = strchr('/', buf);
//      if(*end) {
//        pwd_push(buf, buf - end);
//        /* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
//        while(*end == '/') {
//          end++;
//        }
//        buf = end;
//      } else if(strlen(buf)) {
//          pwd_push(buf, srlen(buf));
//      }
//    }
//  }
//}

int
getcmd(char *buf, int nbuf)
{
  printf(2, "&gt; ");
  memset(buf, 0, nbuf);
  gets(buf, nbuf);
  if(buf[0] == 0) // EOF
    return -1;
  return 0;
}

int
main(void)
{
  static char buf[100];
//static struct pwd_s pwd = { .dir = '/', .len = 2 };
  int fd;
  
  // Assumes three file descriptors open.
  while((fd = open("console", O_RDWR)) &gt;= 0){
    if(fd &gt;= 3){
      close(fd);
      break;
    }
  }
  
  // Read and run input commands.
  while(getcmd(buf, sizeof(buf)) &gt;= 0){
    if(buf[0] == 'c' &amp;&amp; buf[1] == 'd' &amp;&amp; buf[2] == ' '){
      // Clumsy but will have to do for now.
      // Chdir has no effect on the parent if run in the child.
      buf[strlen(buf)-1] = 0;  // chop \n
      if(chdir(buf+3) &lt; 0)
        printf(2, "cannot cd %s\n", buf+3);
      continue;
    }
    if(fork1() == 0)
      runcmd(parsecmd(buf));
    wait();
  }
  exit();
}

void
panic(char *s)
{
  printf(2, "%s\n", s);
  exit();
}

int
fork1(void)
{
  int pid;
  
  pid = fork();
  if(pid == -1)
    panic("fork");
  return pid;
}

//PAGEBREAK!
// Constructors

struct cmd*
execcmd(void)
{
  struct execcmd *cmd;

  cmd = malloc(sizeof(*cmd));
  memset(cmd, 0, sizeof(*cmd));
  cmd-&gt;type = EXEC;
  return (struct cmd*)cmd;
}

struct cmd*
redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
{
  struct redircmd *cmd;

  cmd = malloc(sizeof(*cmd));
  memset(cmd, 0, sizeof(*cmd));
  cmd-&gt;type = REDIR;
  cmd-&gt;cmd = subcmd;
  cmd-&gt;file = file;
  cmd-&gt;efile = efile;
  cmd-&gt;mode = mode;
  cmd-&gt;fd = fd;
  return (struct cmd*)cmd;
}

struct cmd*
pipecmd(struct cmd *left, struct cmd *right)
{
  struct pipecmd *cmd;

  cmd = malloc(sizeof(*cmd));
  memset(cmd, 0, sizeof(*cmd));
  cmd-&gt;type = PIPE;
  cmd-&gt;left = left;
  cmd-&gt;right = right;
  return (struct cmd*)cmd;
}

struct cmd*
listcmd(struct cmd *left, struct cmd *right)
{
  struct listcmd *cmd;

  cmd = malloc(sizeof(*cmd));
  memset(cmd, 0, sizeof(*cmd));
  cmd-&gt;type = LIST;
  cmd-&gt;left = left;
  cmd-&gt;right = right;
  return (struct cmd*)cmd;
}

struct cmd*
backcmd(struct cmd *subcmd)
{
  struct backcmd *cmd;

  cmd = malloc(sizeof(*cmd));
  memset(cmd, 0, sizeof(*cmd));
  cmd-&gt;type = BACK;
  cmd-&gt;cmd = subcmd;
  return (struct cmd*)cmd;
}
//PAGEBREAK!
// Parsing

char whitespace[] = " \t\r\n\v";
char symbols[] = "&lt;|&gt;&amp;;()";

int
gettoken(char **ps, char *es, char **q, char **eq)
{
  char *s;
  int ret;
  
  s = *ps;
  while(s &lt; es &amp;&amp; strchr(whitespace, *s))
    s++;
  if(q)
    *q = s;
  ret = *s;
  switch(*s){
  case 0:
    break;
  case '|':
  case '(':
  case ')':
  case ';':
  case '&amp;':
  case '&lt;':
    s++;
    break;
  case '&gt;':
    s++;
    if(*s == '&gt;'){
      ret = '+';
      s++;
    }
    break;
  default:
    ret = 'a';
    while(s &lt; es &amp;&amp; !strchr(whitespace, *s) &amp;&amp; !strchr(symbols, *s))
      s++;
    break;
  }
  if(eq)
    *eq = s;
  
  while(s &lt; es &amp;&amp; strchr(whitespace, *s))
    s++;
  *ps = s;
  return ret;
}

int
peek(char **ps, char *es, char *toks)
{
  char *s;
  
  s = *ps;
  while(s &lt; es &amp;&amp; strchr(whitespace, *s))
    s++;
  *ps = s;
  return *s &amp;&amp; strchr(toks, *s);
}

struct cmd *parseline(char**, char*);
struct cmd *parsepipe(char**, char*);
struct cmd *parseexec(char**, char*);
struct cmd *nulterminate(struct cmd*);

struct cmd*
parsecmd(char *s)
{
  char *es;
  struct cmd *cmd;

  es = s + strlen(s);
  cmd = parseline(&amp;s, es);
  peek(&amp;s, es, "");
  if(s != es){
    printf(2, "leftovers: %s\n", s);
    panic("syntax");
  }
  nulterminate(cmd);
  return cmd;
}

struct cmd*
parseline(char **ps, char *es)
{
  struct cmd *cmd;

  cmd = parsepipe(ps, es);
  while(peek(ps, es, "&amp;")){
    gettoken(ps, es, 0, 0);
    cmd = backcmd(cmd);
  }
  if(peek(ps, es, ";")){
    gettoken(ps, es, 0, 0);
    cmd = listcmd(cmd, parseline(ps, es));
  }
  return cmd;
}

struct cmd*
parsepipe(char **ps, char *es)
{
  struct cmd *cmd;

  cmd = parseexec(ps, es);
  if(peek(ps, es, "|")){
    gettoken(ps, es, 0, 0);
    cmd = pipecmd(cmd, parsepipe(ps, es));
  }
  return cmd;
}

struct cmd*
parseredirs(struct cmd *cmd, char **ps, char *es)
{
  int tok;
  char *q, *eq;

  while(peek(ps, es, "&lt;&gt;")){
    tok = gettoken(ps, es, 0, 0);
    if(gettoken(ps, es, &amp;q, &amp;eq) != 'a')
      panic("missing file for redirection");
    switch(tok){
    case '&lt;':
      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
      break;
    case '&gt;':
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
      break;
    case '+':  // &gt;&gt;
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
      break;
    }
  }
  return cmd;
}

struct cmd*
parseblock(char **ps, char *es)
{
  struct cmd *cmd;

  if(!peek(ps, es, "("))
    panic("parseblock");
  gettoken(ps, es, 0, 0);
  cmd = parseline(ps, es);
  if(!peek(ps, es, ")"))
    panic("syntax - missing )");
  gettoken(ps, es, 0, 0);
  cmd = parseredirs(cmd, ps, es);
  return cmd;
}

struct cmd*
parseexec(char **ps, char *es)
{
  char *q, *eq;
  int tok, argc;
  struct execcmd *cmd;
  struct cmd *ret;
  
  if(peek(ps, es, "("))
    return parseblock(ps, es);

  ret = execcmd();
  cmd = (struct execcmd*)ret;

  argc = 0;
  ret = parseredirs(ret, ps, es);
  while(!peek(ps, es, "|)&amp;;")){
    if((tok=gettoken(ps, es, &amp;q, &amp;eq)) == 0)
      break;
    if(tok != 'a')
      panic("syntax");
    cmd-&gt;argv[argc] = q;
    cmd-&gt;eargv[argc] = eq;
    argc++;
    if(argc &gt;= MAXARGS)
      panic("too many args");
    ret = parseredirs(ret, ps, es);
  }
  cmd-&gt;argv[argc] = 0;
  cmd-&gt;eargv[argc] = 0;
  return ret;
}

// NUL-terminate all the counted strings.
struct cmd*
nulterminate(struct cmd *cmd)
{
  int i;
  struct backcmd *bcmd;
  struct execcmd *ecmd;
  struct listcmd *lcmd;
  struct pipecmd *pcmd;
  struct redircmd *rcmd;

  if(cmd == 0)
    return 0;
  
  switch(cmd-&gt;type){
  case EXEC:
    ecmd = (struct execcmd*)cmd;
    for(i=0; ecmd-&gt;argv[i]; i++)
      *ecmd-&gt;eargv[i] = 0;
    break;

  case REDIR:
    rcmd = (struct redircmd*)cmd;
    nulterminate(rcmd-&gt;cmd);
    *rcmd-&gt;efile = 0;
    break;

  case PIPE:
    pcmd = (struct pipecmd*)cmd;
    nulterminate(pcmd-&gt;left);
    nulterminate(pcmd-&gt;right);
    break;
    
  case LIST:
    lcmd = (struct listcmd*)cmd;
    nulterminate(lcmd-&gt;left);
    nulterminate(lcmd-&gt;right);
    break;

  case BACK:
    bcmd = (struct backcmd*)cmd;
    nulterminate(bcmd-&gt;cmd);
    break;
  }
  return cmd;
}
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/07/23" Time="10:11:7000">
<Insert>// Shell.
</Insert>
<Copy StartSeek="11" EndSeek="8308"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:05:51000">
<Insert> // Shell.
</Insert>
<Copy StartSeek="10" EndSeek="8307"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:05:57000">
<Copy StartSeek="0" EndSeek="2103"/>
<Insert>  printf(2, "$ ");
</Insert>
<Copy StartSeek="2122" EndSeek="8307"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:09:13000">
<Copy StartSeek="0" EndSeek="201"/>
<Insert>
</Insert>
<Copy StartSeek="221" EndSeek="8326"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:13:11000">
<Copy StartSeek="0" EndSeek="330"/>
<Copy StartSeek="356" EndSeek="8352"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:14:34000">
<Copy StartSeek="0" EndSeek="221"/>
<Copy StartSeek="247" EndSeek="356"/>
<Insert>static char pwd[MAXPWD];

</Insert>
<Copy StartSeek="356" EndSeek="8352"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:14:51000">
<Copy StartSeek="0" EndSeek="2114"/>
<Copy StartSeek="2235" EndSeek="8473"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:36:23000">
<Copy StartSeek="0" EndSeek="2150"/>
<Copy StartSeek="2166" EndSeek="2187"/>
<Copy StartSeek="2199" EndSeek="2234"/>
<Insert>			pwd = 
			 
			
		}
	}
}

</Insert>
<Copy StartSeek="2257" EndSeek="8495"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:40:15000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>static char pwd[MAXPWD];

</Insert>
<Copy StartSeek="268" EndSeek="8516"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:42:22000">
<Copy StartSeek="0" EndSeek="234"/>
<Insert>	char pwd[MAXPWD];
</Insert>
<Copy StartSeek="253" EndSeek="8516"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:43:0000">
<Copy StartSeek="0" EndSeek="234"/>
<Insert>	char dir[MAXPWD];
</Insert>
<Copy StartSeek="254" EndSeek="8517"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:43:6000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>struct pwd {
	char path[MAXPWD];
	int len;
};


</Insert>
<Copy StartSeek="247" EndSeek="8495"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:43:22000">
<Copy StartSeek="0" EndSeek="2114"/>
<Insert>int parsepwd(char *buf, int nbuf)
{
	int back = 0;

	if(buf[0] == '.') {
		back = 1;
		if(nbuf == 2 &amp;&amp; buf[1] == '.') {
			back = 2;
		}
	}
}
</Insert>
<Copy StartSeek="2294" EndSeek="8533"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:49:14000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>static char pwd[MAXPWD];
</Insert>
<Copy StartSeek="248" EndSeek="8535"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:49:31000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>//static char pwd[MAXPWD];
</Insert>
<Copy StartSeek="247" EndSeek="8534"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:52:0000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>	static char pwd[MAXPWD];
</Insert>
<Copy StartSeek="246" EndSeek="8533"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:52:1000">
<Copy StartSeek="0" EndSeek="2114"/>
<Insert>//int parsepwd(char *buf, int nbuf)
//{
//  int back = 0;
//
//  if(buf[0] == '.' &amp;&amp; ) {
//    back = 1;
//    if(nbuf == 2 &amp;&amp; buf[1] == '.') {
//      back = 2;
//    }
//  }
//}
</Insert>
<Copy StartSeek="2260" EndSeek="8499"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:52:6000">
<Copy StartSeek="0" EndSeek="2166"/>
<Insert>	if(buf[0] == '.' &amp;&amp; ) {
</Insert>
<Copy StartSeek="2200" EndSeek="2212"/>
<Insert>		if(nbuf == 2 &amp;&amp; buf[1] == '.') {
			back = 2;
		}
	}
}

</Insert>
<Copy StartSeek="2218" EndSeek="8456"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:55:15000">
<Copy StartSeek="0" EndSeek="2166"/>
<Insert>	if(buf[0] == '.' &amp;&amp; nbuf &gt;= 2) {
		back = 1;
</Insert>
<Copy StartSeek="2226" EndSeek="8470"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="09:59:40000">
<Copy StartSeek="0" EndSeek="2166"/>
<Insert>	if(buf[0] == '.' &amp;&amp; nbuf &gt;= 2 &amp;&amp; buf[1] == '.') {
		pwd--;
	}
}

</Insert>
<Copy StartSeek="2253" EndSeek="8491"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:00:27000">
<Copy StartSeek="0" EndSeek="2247"/>
<Insert>	}
}

</Insert>
<Copy StartSeek="2263" EndSeek="8501"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:00:51000">
<Copy StartSeek="0" EndSeek="2181"/>
<Insert>		if(buf[0] == '.' &amp;&amp; nbuf &gt;= 2 &amp;&amp; buf[1] == '.') {
</Insert>
<Copy StartSeek="2231" EndSeek="8499"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:01:41000">
<Copy StartSeek="0" EndSeek="2181"/>
<Insert>		if(*buf == '.' &amp;&amp; nbuf &gt;= 2 &amp;&amp; buf[1] == '.') {
</Insert>
<Copy StartSeek="2201" EndSeek="8469"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:01:48000">
<Copy StartSeek="0" EndSeek="2166"/>
<Insert>	while(nbuf) {
</Insert>
<Copy StartSeek="2181" EndSeek="8469"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:02:34000">
<Copy StartSeek="0" EndSeek="2181"/>
<Insert>		if(*buf == '.') {
			pwd--;
		}
		nbuf--;
	}
}

</Insert>
<Copy StartSeek="2196" EndSeek="8434"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:02:47000">
<Copy StartSeek="0" EndSeek="2150"/>
<Insert>	int back = 0;
</Insert>
<Copy StartSeek="2177" EndSeek="2193"/>
<Copy StartSeek="2218" EndSeek="8471"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:03:20000">
<Copy StartSeek="0" EndSeek="2213"/>
<Insert>
</Insert>
<Copy StartSeek="2228" EndSeek="8485"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:03:29000">
<Copy StartSeek="0" EndSeek="2213"/>
<Insert>			is_dot = 0;
</Insert>
<Copy StartSeek="2228" EndSeek="8485"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:03:38000">
<Copy StartSeek="0" EndSeek="2213"/>
<Copy StartSeek="2249" EndSeek="8521"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:04:16000">
<Copy StartSeek="0" EndSeek="2229"/>
<Insert>					back = 1;
</Insert>
<Copy StartSeek="2248" EndSeek="8525"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:05:23000">
<Copy StartSeek="0" EndSeek="2248"/>
<Insert>			}
</Insert>
<Copy StartSeek="2269" EndSeek="8541"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:05:28000">
<Copy StartSeek="0" EndSeek="2150"/>
<Insert>	int back = 0, is_dot = 0;
</Insert>
<Copy StartSeek="2174" EndSeek="2210"/>
<Insert>			if(is_dot) {
</Insert>
<Copy StartSeek="2223" EndSeek="2242"/>
<Insert>				is_dot = 0;
</Insert>
<Copy StartSeek="2255" EndSeek="2260"/>
<Insert>			is_dot = 1;
</Insert>
<Copy StartSeek="2272" EndSeek="8529"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:07:20000">
<Copy StartSeek="0" EndSeek="2223"/>
<Insert>					//pwd_back();
</Insert>
<Copy StartSeek="2223" EndSeek="2236"/>
<Insert>			}
</Insert>
<Copy StartSeek="2265" EndSeek="8534"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:07:29000">
<Copy StartSeek="0" EndSeek="2255"/>
<Insert>				
			}
</Insert>
<Copy StartSeek="2260" EndSeek="8529"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:07:33000">
<Copy StartSeek="0" EndSeek="2236"/>
<Insert>					//pwd_back();
			}
</Insert>
<Copy StartSeek="2264" EndSeek="8533"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:08:2000">
<Copy StartSeek="0" EndSeek="2254"/>
<Insert>				
			}
</Insert>
<Copy StartSeek="2259" EndSeek="8528"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:08:4000">
<Copy StartSeek="0" EndSeek="2190"/>
<Insert>		if(*buf == '.') {
</Insert>
<Copy StartSeek="2223" EndSeek="8541"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:09:16000">
<Copy StartSeek="0" EndSeek="2190"/>
<Insert>		if(*buf == '.' &amp;&amp; nbuf &gt;= 2) {
			if(dot) {
				dot = 0;
</Insert>
<Copy StartSeek="2235" EndSeek="2258"/>
<Insert>			dot = 1;
		}
</Insert>
<Copy StartSeek="2258" EndSeek="8511"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:09:42000">
<Copy StartSeek="0" EndSeek="2258"/>
<Insert>		buf++;
</Insert>
<Copy StartSeek="2270" EndSeek="8514"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:09:50000">
<Copy StartSeek="0" EndSeek="2253"/>
<Insert>			}
</Insert>
<Copy StartSeek="2257" EndSeek="8513"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:09:54000">
<Copy StartSeek="0" EndSeek="2253"/>
<Insert>		}
		buf += 2;
	}
}

</Insert>
<Copy StartSeek="2276" EndSeek="8514"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:10:7000">
<Copy StartSeek="0" EndSeek="2267"/>
<Insert>		
	}
}

</Insert>
<Copy StartSeek="2273" EndSeek="8511"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:10:9000">
<Copy StartSeek="0" EndSeek="2190"/>
<Insert>		if(buf[0] == '.' &amp;&amp; nbuf &gt;= 2 &amp;&amp; buf[1]) {
</Insert>
<Copy StartSeek="2242" EndSeek="8518"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:10:24000">
<Copy StartSeek="0" EndSeek="2260"/>
<Insert>			buf++;
</Insert>
<Copy StartSeek="2287" EndSeek="8535"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:11:47000">
<Copy StartSeek="0" EndSeek="2175"/>
<Insert>	while(*buf) {
</Insert>
<Copy StartSeek="2189" EndSeek="8534"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:12:9000">
<Copy StartSeek="0" EndSeek="2189"/>
<Insert>		if(buf[0] == '.' &amp;&amp; nbuf &gt;= 2 &amp;&amp; buf[1] == '.') {
</Insert>
<Copy StartSeek="2228" EndSeek="8521"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:13:58000">
<Copy StartSeek="0" EndSeek="2189"/>
<Insert>		if(buf[0] == '.' &amp;&amp; buf[1] == '.') {
				//pwd_back();
</Insert>
<Copy StartSeek="2279" EndSeek="8554"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:14:56000">
<Copy StartSeek="0" EndSeek="2268"/>
<Insert>			} else 
</Insert>
<Copy StartSeek="2273" EndSeek="8548"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:15:38000">
<Copy StartSeek="0" EndSeek="2254"/>
<Insert>				buf += 2;
			}
</Insert>
<Copy StartSeek="2259" EndSeek="8534"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:16:2000">
<Copy StartSeek="0" EndSeek="2259"/>
<Insert>			buf = strchr('/', buf);
</Insert>
<Copy StartSeek="2290" EndSeek="8538"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:17:37000">
<Copy StartSeek="0" EndSeek="2259"/>
<Insert>			buf = strchr('/', buf) + 1;
</Insert>
<Copy StartSeek="2286" EndSeek="8534"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:18:3000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>static char pwd[MAXPWD];

</Insert>
<Copy StartSeek="267" EndSeek="8554"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:18:50000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>struct pwd {
</Insert>
<Copy StartSeek="236" EndSeek="2136"/>
<Copy StartSeek="2174" EndSeek="2548"/>
<Copy StartSeek="2601" EndSeek="8647"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:21:49000">
<Copy StartSeek="0" EndSeek="2174"/>
<Insert>int parsepwd(char *buf, int nbuf)
</Insert>
<Copy StartSeek="2227" EndSeek="8666"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:22:28000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>int pwd_back()
</Insert>
<Copy StartSeek="2168" EndSeek="2170"/>
<Insert>	while(pwd.) {
	}
}

</Insert>
<Copy StartSeek="2219" EndSeek="8711"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:24:23000">
<Copy StartSeek="0" EndSeek="2199"/>
<Insert>		pwd-&gt;dir--;
</Insert>
<Copy StartSeek="2213" EndSeek="8711"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:24:41000">
<Copy StartSeek="0" EndSeek="2170"/>
<Insert>	while(pwd-&gt;dir[i] != '/') {
</Insert>
<Copy StartSeek="2209" EndSeek="8721"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:24:55000">
<Copy StartSeek="0" EndSeek="2369"/>
<Insert>					//pwd_back();
</Insert>
<Copy StartSeek="2388" EndSeek="8721"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:25:22000">
<Copy StartSeek="0" EndSeek="2309"/>
<Insert>	while(buf) {
</Insert>
<Copy StartSeek="2324" EndSeek="8722"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:25:43000">
<Copy StartSeek="0" EndSeek="2324"/>
<Insert>		if(buf[0] == '.') {
			if (buf[1] == '.') {
</Insert>
<Copy StartSeek="2372" EndSeek="8724"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:26:11000">
<Copy StartSeek="0" EndSeek="2396"/>
<Insert>			buf = strchr('/', buf);
</Insert>
<Copy StartSeek="2400" EndSeek="2404"/>
<Insert>	}
}

</Insert>
<Copy StartSeek="2436" EndSeek="8727"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:26:26000">
<Copy StartSeek="0" EndSeek="2226"/>
<Insert>}

</Insert>
<Copy StartSeek="2257" EndSeek="8755"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:26:47000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>int pwd_back(struct pwd_s *pwd)
</Insert>
<Copy StartSeek="2167" EndSeek="2399"/>
<Insert>				pwd_back(pwd);
</Insert>
<Copy StartSeek="2417" EndSeek="2426"/>
<Insert>		}
</Insert>
<Copy StartSeek="2442" EndSeek="8765"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:27:36000">
<Copy StartSeek="0" EndSeek="2256"/>
<Copy StartSeek="2377" EndSeek="8886"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:27:44000">
<Copy StartSeek="0" EndSeek="2256"/>
<Insert>int pwd_push(struct pwd_s *pwd)
</Insert>
<Copy StartSeek="2286" EndSeek="8884"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:27:54000">
<Copy StartSeek="0" EndSeek="2222"/>
<Insert>	}
	pwd-&gt;dir[pwd-&gt;len] = '\0';
}

</Insert>
<Copy StartSeek="2259" EndSeek="2291"/>
<Insert>	while(pwd-&gt;dir[pwd-&gt;len -1] != '/') {
		pwd-&gt;len--;
	}
</Insert>
<Copy StartSeek="2291" EndSeek="8831"/>
</Delta>
<Delta Version="66" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:30:55000">
<Copy StartSeek="0" EndSeek="2254"/>
<Insert>	
}

</Insert>
<Copy StartSeek="2257" EndSeek="8829"/>
</Delta>
<Delta Version="67" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:30:57000">
<Copy StartSeek="0" EndSeek="2169"/>
<Insert>	while(pwd-&gt;dir[pwd-&gt;len -1] != '/') {
</Insert>
<Copy StartSeek="2227" EndSeek="8848"/>
</Delta>
<Delta Version="68" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:31:23000">
<Copy StartSeek="0" EndSeek="2169"/>
<Insert>	char *cur = pwd-&gt;dir[pwd-&gt;len -1];
</Insert>
<Copy StartSeek="2205" EndSeek="8848"/>
</Delta>
<Delta Version="69" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:31:27000">
<Copy StartSeek="0" EndSeek="2206"/>
<Insert>	while(dir != '/') {
</Insert>
<Copy StartSeek="2227" EndSeek="8848"/>
</Delta>
<Delta Version="70" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:31:29000">
<Copy StartSeek="0" EndSeek="2205"/>
<Insert>
</Insert>
<Copy StartSeek="2225" EndSeek="2246"/>
<Insert>		pwd-&gt;len--;
		pwd-&gt;dir[pwd-&gt;len] = '\0';
</Insert>
<Copy StartSeek="2268" EndSeek="8846"/>
</Delta>
<Delta Version="71" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:32:1000">
<Copy StartSeek="0" EndSeek="2271"/>
<Insert>}

</Insert>
<Copy StartSeek="2289" EndSeek="8861"/>
</Delta>
<Delta Version="72" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:32:29000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>int pwd_pop(struct pwd_s *pwd)
</Insert>
<Copy StartSeek="2168" EndSeek="8862"/>
</Delta>
<Delta Version="73" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:32:40000">
<Copy StartSeek="0" EndSeek="2290"/>
<Insert>int pwd_push(char *dir, nbuf)
</Insert>
<Copy StartSeek="2321" EndSeek="8863"/>
</Delta>
<Delta Version="74" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:33:2000">
<Copy StartSeek="0" EndSeek="2290"/>
<Insert>void pwd_push(char *dir, nbuf)
</Insert>
<Copy StartSeek="2322" EndSeek="8864"/>
</Delta>
<Delta Version="75" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:33:13000">
<Copy StartSeek="0" EndSeek="2290"/>
<Insert>void pwd_push(char *ndir, nbuf)
</Insert>
<Copy StartSeek="2321" EndSeek="8863"/>
</Delta>
<Delta Version="76" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:33:20000">
<Copy StartSeek="0" EndSeek="2535"/>
<Insert>
</Insert>
<Copy StartSeek="2558" EndSeek="8885"/>
</Delta>
<Delta Version="77" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:33:58000">
<Copy StartSeek="0" EndSeek="2535"/>
<Insert>			pwd_push(buf,nbuf);
</Insert>
<Copy StartSeek="2559" EndSeek="8886"/>
</Delta>
<Delta Version="78" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:34:4000">
<Copy StartSeek="0" EndSeek="2535"/>
<Insert>			pwd_push(buf, nbuf);
</Insert>
<Copy StartSeek="2560" EndSeek="8887"/>
</Delta>
<Delta Version="79" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:35:0000">
<Copy StartSeek="0" EndSeek="2520"/>
<Insert>			
</Insert>
<Copy StartSeek="2520" EndSeek="8883"/>
</Delta>
<Delta Version="80" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:41:26000">
<Copy StartSeek="0" EndSeek="2449"/>
<Copy StartSeek="2475" EndSeek="2586"/>
<Insert>		buf = strchr('/', buf);
</Insert>
<Copy StartSeek="2589" EndSeek="8886"/>
</Delta>
<Delta Version="81" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:41:56000">
<Copy StartSeek="0" EndSeek="2557"/>
<Insert>//		pwd_push(buf, nbuf);
</Insert>
<Copy StartSeek="2585" EndSeek="8889"/>
</Delta>
<Delta Version="82" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:43:6000">
<Copy StartSeek="0" EndSeek="2409"/>
<Insert>	int back = 0, dot = 0;

</Insert>
<Copy StartSeek="2409" EndSeek="8864"/>
</Delta>
<Delta Version="83" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:43:31000">
<Copy StartSeek="0" EndSeek="2409"/>
<Copy StartSeek="2483" EndSeek="8938"/>
</Delta>
<Delta Version="84" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:48:10000">
<Copy StartSeek="0" EndSeek="2480"/>
<Insert>	}
</Insert>
<Copy StartSeek="2503" EndSeek="8958"/>
</Delta>
<Delta Version="85" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:48:22000">
<Copy StartSeek="0" EndSeek="2499"/>
<Insert>
	}
</Insert>
<Copy StartSeek="2502" EndSeek="8957"/>
</Delta>
<Delta Version="86" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:48:31000">
<Copy StartSeek="0" EndSeek="2499"/>
<Insert>	}
</Insert>
<Copy StartSeek="2558" EndSeek="9013"/>
</Delta>
<Delta Version="87" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:50:22000">
<Copy StartSeek="0" EndSeek="2499"/>
<Insert>		memset(pwd-&gt;dir + pwd-&gt;len, '\0', MAXPWD - pwd-&gt;len);
</Insert>
<Copy StartSeek="2552" EndSeek="9010"/>
</Delta>
<Delta Version="88" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:51:2000">
<Copy StartSeek="0" EndSeek="2499"/>
<Insert>		memset(pwd-&gt;dir + pwd-&gt;len, 0, MAXPWD - pwd-&gt;len);
</Insert>
<Copy StartSeek="2555" EndSeek="9013"/>
</Delta>
<Delta Version="89" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:51:41000">
<Copy StartSeek="0" EndSeek="2499"/>
<Insert>		memset(pwd-&gt;dir + pwd-&gt;len, 0, MAXPWD - pwd-&gt;len -1);
</Insert>
<Copy StartSeek="2559" EndSeek="9017"/>
</Delta>
<Delta Version="90" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:53:1000">
<Copy StartSeek="0" EndSeek="2559"/>
<Insert>	}
</Insert>
<Copy StartSeek="2574" EndSeek="9029"/>
</Delta>
<Delta Version="91" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:53:21000">
<Copy StartSeek="0" EndSeek="2574"/>
<Copy StartSeek="2595" EndSeek="9050"/>
</Delta>
<Delta Version="92" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:53:29000">
<Copy StartSeek="0" EndSeek="2409"/>
<Copy StartSeek="2422" EndSeek="9063"/>
</Delta>
<Delta Version="93" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:54:8000">
<Copy StartSeek="0" EndSeek="2649"/>
<Copy StartSeek="2675" EndSeek="9089"/>
</Delta>
<Delta Version="94" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:54:14000">
<Copy StartSeek="0" EndSeek="2623"/>
<Insert>		buf = strchr('/', buf);
</Insert>
<Copy StartSeek="2650" EndSeek="2676"/>
<Copy StartSeek="2677" EndSeek="9091"/>
</Delta>
<Delta Version="95" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:54:20000">
<Copy StartSeek="0" EndSeek="2676"/>
<Insert>
</Insert>
<Copy StartSeek="2723" EndSeek="9137"/>
</Delta>
<Delta Version="96" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:55:27000">
<Copy StartSeek="0" EndSeek="2694"/>
<Insert>			pwd_push(buf , nbuf);
</Insert>
<Copy StartSeek="2718" EndSeek="9136"/>
</Delta>
<Delta Version="97" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:55:28000">
<Copy StartSeek="0" EndSeek="2623"/>
<Insert>//	buf = strchr('/', buf);
		end = strchr('/', buf);
		if(*end == 0) {
			pwd_push(buf ,nbuf);
		}
</Insert>
<Copy StartSeek="2676" EndSeek="9090"/>
</Delta>
<Delta Version="98" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:55:36000">
<Copy StartSeek="0" EndSeek="2649"/>
<Insert>//	end = strchr('/', buf);
</Insert>
<Copy StartSeek="2675" EndSeek="9089"/>
</Delta>
<Delta Version="99" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:56:8000">
<Copy StartSeek="0" EndSeek="2675"/>
<Copy StartSeek="2690" EndSeek="9104"/>
</Delta>
<Delta Version="100" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:56:20000">
<Copy StartSeek="0" EndSeek="2690"/>
<Copy StartSeek="2691" EndSeek="9105"/>
</Delta>
<Delta Version="101" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:56:21000">
<Copy StartSeek="0" EndSeek="2587"/>
<Copy StartSeek="2588" EndSeek="9106"/>
</Delta>
<Delta Version="102" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:57:8000">
<Copy StartSeek="0" EndSeek="2758"/>
<Insert>			}
</Insert>
<Copy StartSeek="2781" EndSeek="9124"/>
</Delta>
<Delta Version="103" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:57:48000">
<Copy StartSeek="0" EndSeek="2624"/>
<Insert>		buf = strchr('/', buf);
		end = strchr('/', buf);
		*end = '\0';

</Insert>
<Copy StartSeek="2651" EndSeek="2751"/>
<Copy StartSeek="2794" EndSeek="9126"/>
</Delta>
<Delta Version="104" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="10:59:35000">
<Copy StartSeek="0" EndSeek="2778"/>
<Copy StartSeek="2863" EndSeek="9211"/>
</Delta>
<Delta Version="105" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:01:37000">
<Copy StartSeek="0" EndSeek="2778"/>
<Insert>			/* any number of / can follow e.g. "cd a//////b" */
</Insert>
<Copy StartSeek="2843" EndSeek="9221"/>
</Delta>
<Delta Version="106" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:02:8000">
<Copy StartSeek="0" EndSeek="2867"/>
<Insert>
</Insert>
<Copy StartSeek="2878" EndSeek="9231"/>
</Delta>
<Delta Version="107" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:02:24000">
<Copy StartSeek="0" EndSeek="2409"/>
<Insert>	char *end;
</Insert>
<Copy StartSeek="2427" EndSeek="9237"/>
</Delta>
<Delta Version="108" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:02:32000">
<Copy StartSeek="0" EndSeek="2889"/>
<Insert>			*end = '\0';
</Insert>
<Copy StartSeek="2889" EndSeek="9221"/>
</Delta>
<Delta Version="109" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:04:19000">
<Copy StartSeek="0" EndSeek="2468"/>
<Copy StartSeek="2516" EndSeek="2832"/>
<Copy StartSeek="2860" EndSeek="2965"/>
<Insert>			pwd_push(buf + 1, nbuf);
</Insert>
<Copy StartSeek="2969" EndSeek="9273"/>
</Delta>
<Delta Version="110" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:06:22000">
<Copy StartSeek="0" EndSeek="2468"/>
<Copy StartSeek="2501" EndSeek="9306"/>
</Delta>
<Delta Version="111" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:06:39000">
<Copy StartSeek="0" EndSeek="2804"/>
<Insert>			} else 
</Insert>
<Copy StartSeek="2814" EndSeek="9305"/>
</Delta>
<Delta Version="112" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:08:3000">
<Copy StartSeek="0" EndSeek="2864"/>
<Insert>			pwd_push(buf + 1, nbuf);
</Insert>
<Copy StartSeek="2893" EndSeek="9306"/>
</Delta>
<Delta Version="113" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:11:33000">
<Copy StartSeek="0" EndSeek="2998"/>
<Insert>			
		}
		
	}
}

</Insert>
<Copy StartSeek="3029" EndSeek="9320"/>
</Delta>
<Delta Version="114" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:13:16000">
<Copy StartSeek="0" EndSeek="3012"/>
<Insert>			
		}
		
	}
}

</Insert>
<Copy StartSeek="3025" EndSeek="9316"/>
</Delta>
<Delta Version="115" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:13:20000">
<Copy StartSeek="0" EndSeek="3016"/>
<Insert>		
	}
}

</Insert>
<Copy StartSeek="3022" EndSeek="9313"/>
</Delta>
<Delta Version="116" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:13:22000">
<Copy StartSeek="0" EndSeek="2354"/>
<Insert>int parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
</Insert>
<Copy StartSeek="2408" EndSeek="9314"/>
</Delta>
<Delta Version="117" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:13:47000">
<Copy StartSeek="0" EndSeek="2269"/>
<Insert>	}
</Insert>
<Copy StartSeek="2281" EndSeek="9323"/>
</Delta>
<Delta Version="118" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:14:45000">
<Copy StartSeek="0" EndSeek="2254"/>
<Insert>		*end = '\0';
		end--;
</Insert>
<Copy StartSeek="2276" EndSeek="9321"/>
</Delta>
<Delta Version="119" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:14:54000">
<Copy StartSeek="0" EndSeek="2273"/>
<Insert>		
	}
</Insert>
<Copy StartSeek="2276" EndSeek="9318"/>
</Delta>
<Delta Version="120" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:14:57000">
<Copy StartSeek="0" EndSeek="2254"/>
<Insert>		(*end)-- = '\0';
</Insert>
<Copy StartSeek="2269" EndSeek="9314"/>
</Delta>
<Delta Version="121" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:15:6000">
<Copy StartSeek="0" EndSeek="2269"/>
<Insert>	}
</Insert>
<Copy StartSeek="2281" EndSeek="9323"/>
</Delta>
<Delta Version="122" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:15:15000">
<Copy StartSeek="0" EndSeek="2254"/>
<Insert>		*end = '\0';
		end--;
	}
</Insert>
<Copy StartSeek="2275" EndSeek="9317"/>
</Delta>
<Delta Version="123" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:15:28000">
<Copy StartSeek="0" EndSeek="3218"/>
<Insert>	static struct pwd_s pwd = { .dir = '/', .len = 2 };
</Insert>
<Copy StartSeek="3274" EndSeek="9320"/>
</Delta>
<Delta Version="124" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:17:27000">
<Copy StartSeek="0" EndSeek="3218"/>
<Insert>	static struct pwd_s pwd = { .dir[0] = '/', .len = 2 };
</Insert>
<Copy StartSeek="3271" EndSeek="9317"/>
</Delta>
<Delta Version="125" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:17:43000">
<Copy StartSeek="0" EndSeek="3218"/>
<Insert>	static struct pwd_s pwd = { .dir = "/", .len = 2 };
</Insert>
<Copy StartSeek="3271" EndSeek="9317"/>
</Delta>
<Delta Version="126" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:17:47000">
<Copy StartSeek="0" EndSeek="2868"/>
<Insert>			pwd_push(buf, buf - end);
			/* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
			while(*end == '/') {
				end++;
			}
			buf = end;
		}
	}
}

</Insert>
<Copy StartSeek="3051" EndSeek="9342"/>
</Delta>
<Delta Version="127" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:18:38000">
<Copy StartSeek="0" EndSeek="3036"/>
<Insert>			}
		}
	}
}

</Insert>
<Copy StartSeek="3110" EndSeek="9401"/>
</Delta>
<Delta Version="128" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:19:47000">
<Copy StartSeek="0" EndSeek="3064"/>
<Insert>				pwd_push(buf, srlen(buf));
</Insert>
<Copy StartSeek="3096" EndSeek="9402"/>
</Delta>
<Delta Version="129" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:19:49000">
<Copy StartSeek="0" EndSeek="2808"/>
<Insert>			} else
					buf++;
</Insert>
<Copy StartSeek="2823" EndSeek="9395"/>
</Delta>
<Delta Version="130" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:21:53000">
<Copy StartSeek="0" EndSeek="2808"/>
<Insert>			}
</Insert>
<Copy StartSeek="2824" EndSeek="9406"/>
</Delta>
<Delta Version="131" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="11:22:33000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>void pwd_pop(struct pwd_s *pwd)
{
	char *end = pwd-&gt;dir[pwd-&gt;len -1];
	int i = pwd-&gt;len;

	while(end != '/') {
		i--;
		*(end--)= '\0';
	}
	pwd-&gt;len = i;
}

void pwd_push(char *dir, nbuf)
{
	pwd-&gt;dir[pwd-&gt;len] = '\0';
}

void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
{
	char *end = buf;

	/* absolute path */
	if(*buf == '/') {
		/* skip consecutive /////// */
		while(*buf == '/') {
			buf++;
			nbuf--;
		}
		memcpy(&amp;pwd-&gt;dir, buf, nbuf)
		pwd-&gt;len = nbuf;
		memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
		return 0;
	}

	/* relative path */
	while(*buf) {
//	buf = strchr('/', buf);
		if(*buf == '.') {
			if (*(buf + 1) == '.') {
				pwd_pop(pwd);
				buf++;
			}
			buf++;
		} else {
			end = strchr('/', buf);
			if(*end) {
				pwd_push(buf, buf - end);
				/* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
				while(*end == '/') {
					end++;
				}
				buf = end;
			} else if(strlen(buf)) {
					pwd_push(buf, srlen(buf));
			}
		}
	}
}
</Insert>
<Copy StartSeek="3332" EndSeek="9624"/>
</Delta>
<Delta Version="132" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:23:4000">
<Copy StartSeek="0" EndSeek="3525"/>
<Insert>	static struct pwd_s pwd = { .dir = '/', .len = 2 };
</Insert>
<Copy StartSeek="3579" EndSeek="9625"/>
</Delta>
<Delta Version="133" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:23:35000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>//void pwd_pop(struct pwd_s *pwd)
//{
//  char *end = pwd-&gt;dir[pwd-&gt;len -1];
//  int i = pwd-&gt;len;
//
//  while(end != '/') {
//    i--;
//    *(end--)= '\0';
//  }
//  pwd-&gt;len = i;
//}
//
//void pwd_push(char *dir, nbuf)
//{
//  pwd-&gt;dir[pwd-&gt;len] = '\0';
//}
//
//void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
//{
//  char *end = buf;
//
//  /* absolute path */
//  if(*buf == '/') {
//    /* skip consecutive /////// */
//    while(*buf == '/') {
//      buf++;
//      nbuf--;
//    }
//    memcpy(&amp;pwd-&gt;dir, buf, nbuf)
//    pwd-&gt;len = nbuf;
//    memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
//    return 0;
//  }
//
//  /* relative path */
//  while(*buf) {
////	buf = strchr('/', buf);
//    if(*buf == '.') {
//      if (*(buf + 1) == '.') {
//        pwd_pop(pwd);
//        buf++;
//      }
//      buf++;
//    } else {
//      end = strchr('/', buf);
//      if(*end) {
//        pwd_push(buf, buf - end);
//        /* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
//        while(*end == '/') {
//          end++;
//        }
//        buf = end;
//      } else if(strlen(buf)) {
//          pwd_push(buf, srlen(buf));
//      }
//    }
//  }
//}
</Insert>
<Copy StartSeek="3114" EndSeek="9407"/>
</Delta>
<Delta Version="134" Comment="" NL="\10" Encoding="text" Date="2012/08/06" Time="09:34:14000">
<Copy StartSeek="0" EndSeek="2170"/>
<Insert>	char *end = pwd-&gt;dir[pwd-&gt;len -1];
</Insert>
<Copy StartSeek="2207" EndSeek="9408"/>
</Delta>
<Delta Version="135" Comment="" NL="\10" Encoding="text" Date="2012/08/06" Time="09:36:39000">
<Copy StartSeek="0" EndSeek="2227"/>
<Insert>	while(end != '/') {
</Insert>
<Copy StartSeek="2276" EndSeek="9436"/>
</Delta>
<Delta Version="136" Comment="" NL="\10" Encoding="text" Date="2012/08/06" Time="09:40:53000">
<Copy StartSeek="0" EndSeek="255"/>
<Insert>	int len;
</Insert>
<Copy StartSeek="267" EndSeek="9438"/>
</Delta>
<Delta Version="137" Comment="" NL="\10" Encoding="text" Date="2012/08/06" Time="09:45:11000">
<Copy StartSeek="0" EndSeek="255"/>
<Insert>	char *end;
</Insert>
<Copy StartSeek="265" EndSeek="9436"/>
</Delta>
<Delta Version="138" Comment="" NL="\10" Encoding="text" Date="2012/08/06" Time="09:46:12000">
<Copy StartSeek="0" EndSeek="2136"/>
<Insert>void pwd_pop(struct pwd_s *pwd)
{
	char *end = &amp;pwd-&gt;dir[pwd-&gt;len -1];
	int i = pwd-&gt;len;

	while((*end != '/') &amp;&amp; (end != pwd-&gt;dir + 2)) {
		i--;
		*(end--)= '\0';
	}
	pwd-&gt;len = i;
}

void pwd_push(char *dir, nbuf)
{
	pwd-&gt;dir[pwd-&gt;len] = '\0';
}
</Insert>
<Copy StartSeek="2427" EndSeek="2428"/>
<Insert>void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
{
	char *end = buf;

	/* absolute path */
	if(*buf == '/') {
		/* skip consecutive /////// */
		while(*buf == '/') {
			buf++;
			nbuf--;
		}
		memcpy(&amp;pwd-&gt;dir, buf, nbuf)
		pwd-&gt;len = nbuf;
		memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
		return 0;
	}

	/* relative path */
	while(*buf) {
//	buf = strchr('/', buf);
		if(*buf == '.') {
			if (*(buf + 1) == '.') {
				pwd_pop(pwd);
				buf++;
			}
			buf++;
		} else {
			end = strchr('/', buf);
			if(*end) {
				pwd_push(buf, buf - end);
				/* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
				while(*end == '/') {
					end++;
				}
				buf = end;
			} else if(strlen(buf)) {
					pwd_push(buf, srlen(buf));
			}
		}
	}
}
</Insert>
<Copy StartSeek="3359" EndSeek="9652"/>
</Delta>
</DeltaFile>
