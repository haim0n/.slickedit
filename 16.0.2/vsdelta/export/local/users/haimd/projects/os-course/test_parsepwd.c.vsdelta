<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="14" Comment="" Date="2012/07/24" Time="14:44:12000" NL="\10" Encoding="text">
<Insert>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#define MAXPWD 256

struct pwd_s {
	char dir[MAXPWD];
	int len;
};

//void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
//{
//        char *end = buf;
//
//        /* absolute path */
//        if(*buf == '/') {
//                /* skip consecutive /////// */
//                while(*buf == '/') {
//                        buf++;
//                        nbuf--;
//                }
//                memcpy(&amp;pwd-&gt;dir, buf, nbuf)
//                pwd-&gt;len = nbuf;
//                memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
//                return 0;
//        }
//
//        /* relative path */
//        while(*buf) {
////	buf = strchr('/', buf);
//                if(*buf == '.') {
//                        if (*(buf + 1) == '.') {
//                                pwd_pop(pwd);
//                                buf++;
//                        }
//                        buf++;
//                } else {
//                        end = strchr('/', buf);
//                        if(*end) {
//                                pwd_push(buf, buf - end);
//                                /* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
//                                while(*end == '/') {
//                                        end++;
//                                }
//                                buf = end;
//                        } else if(strlen(buf)) {
//                                        pwd_push(buf, srlen(buf));
//                        }
//                }
//        }
//}

int main(int argc, char *argv[])
{
//      struct pwd_s pwd = {.dir = "/", .len = 2};
	printf("hello\n");
//      printf("strlen(pwd) %u\n", strlen(pwd.dir));

//      pwd.len = strlen(pwd.dir);
	return 0;asd
}
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:09:5000">
<Copy StartSeek="0" EndSeek="41"/>
<Copy StartSeek="109" EndSeek="904"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:09:25000">
<Copy StartSeek="0" EndSeek="901"/>
<Insert>
}
</Insert>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:10:4000">
<Copy StartSeek="0" EndSeek="936"/>
<Insert>	pwd.len = 2;
</Insert>
<Copy StartSeek="964" EndSeek="966"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:10:12000">
<Copy StartSeek="0" EndSeek="901"/>
<Insert>	struct pwd_s pwd;
	pwd.dir = "/";
	pwd.len = strlen(pwd.dir);
}
</Insert>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:10:46000">
<Copy StartSeek="0" EndSeek="109"/>
<Insert>void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
{
	char *end = buf;

	/* absolute path */
	if(*buf == '/') {
		/* skip consecutive /////// */
		while(*buf == '/') {
			buf++;
			nbuf--;
		}
		memcpy(&amp;pwd-&gt;dir, buf, nbuf)
		pwd-&gt;len = nbuf;
		memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
		return 0;
	}

	/* relative path */
	while(*buf) {
//	buf = strchr('/', buf);
		if(*buf == '.') {
			if (*(buf + 1) == '.') {
				pwd_pop(pwd);
				buf++;
			}
			buf++;
		} else {
			end = strchr('/', buf);
			if(*end) {
				pwd_push(buf, buf - end);
				/* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
				while(*end == '/') {
					end++;
				}
				buf = end;
			} else if(strlen(buf)) {
					pwd_push(buf, srlen(buf));
			}
		}
	}
}
</Insert>
<Copy StartSeek="1592" EndSeek="1708"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:10:50000">
<Copy StartSeek="0" EndSeek="1671"/>
<Copy StartSeek="1717" EndSeek="1754"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:41:2000">
<Copy StartSeek="0" EndSeek="1717"/>
<Copy StartSeek="1718" EndSeek="1755"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:41:29000">
<Copy StartSeek="0" EndSeek="1671"/>
<Copy StartSeek="1691" EndSeek="1775"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:41:40000">
<Copy StartSeek="0" EndSeek="1593"/>
<Insert>int main(int argc, char **argv)
</Insert>
<Copy StartSeek="1626" EndSeek="1776"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:42:20000">
<Copy StartSeek="0" EndSeek="1628"/>
<Insert>	struct pwd_s pwd = {.dir = "/", .len = 2};
</Insert>
<Copy StartSeek="1679" EndSeek="1699"/>
<Insert>	printf("strlen(pwd) %u\n", strlen(pwd.dir));
</Insert>
<Copy StartSeek="1752" EndSeek="1790"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:42:38000">
<Copy StartSeek="0" EndSeek="20"/>
<Copy StartSeek="39" EndSeek="1809"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:42:53000">
<Copy StartSeek="0" EndSeek="20"/>
<Insert>#include &lt;stdio.h&gt;
</Insert>
<Copy StartSeek="20" EndSeek="1790"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:43:47000">
<Copy StartSeek="0" EndSeek="1788"/>
<Insert>}
</Insert>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:43:59000">
<Copy StartSeek="0" EndSeek="1788"/>
<Insert>	return 0;
</Insert>
<Copy StartSeek="1802" EndSeek="1804"/>
</Delta>
</DeltaFile>
