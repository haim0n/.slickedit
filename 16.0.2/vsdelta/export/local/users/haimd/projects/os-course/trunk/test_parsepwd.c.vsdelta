<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="35" Comment="" Date="2012/08/06" Time="09:33:42000" NL="\10" Encoding="text">
<Insert>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define MAXPWD 256

struct pwd_s {
	char dir[MAXPWD];
	int len;
};

static unsigned int is_dot(char *buf)
{
	return (*buf = '.');
}

static unsigned int is_2_dots(char *buf)
{
	return *buf == *(buf + 1) == '.';
}

static unsigned int is_dot_slash(char *buf)
{
	return (*buf = '.') &amp;&amp; (*(buf +1) == '/');
}

static unsigned int is_slash(char *buf)
{
	return (*buf == '/');
}

static char *get_next_subdir(char *path, len, *end)
{
	char *cur = path;

}

void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
{
	char *end = buf;

	/* absolute path */
	if(*buf == '/') {
		/* skip consecutive /////// */
		while(*buf == '/') {
			buf++;
			nbuf--;
		}
		memcpy(&amp;pwd-&gt;dir, buf, nbuf)
		pwd-&gt;len = nbuf;
		memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
		return 0;
	}

	/* relative path */
	while(*buf) {
//	buf = strchr('/', buf);
		if(*buf == '.') {
			if (*(buf + 1) == '.') {
				pwd_pop(pwd);
				buf++;
			}
			buf++;
		} else {
			end = strchr('/', buf);
			if(*end) {
				pwd_push(buf, buf - end);
				/* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
				while(*end == '/') {
					end++;
				}
				buf = end;
			} else if(strlen(buf)) {
					pwd_push(buf, srlen(buf));
			}
		}
	}
}

int main(int argc, char **argv)
{
	struct pwd_s pwd = {0};
	pwd.dir[0] = '/';
	pwd.len = strlen(pwd.dir);

	printf("strlen(pwd) %u\n",pwd.len);
}
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:10:50000">
<Copy StartSeek="0" EndSeek="1706"/>
<Insert>}
</Insert>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:45:44000">
<Copy StartSeek="0" EndSeek="20"/>
<Copy StartSeek="39" EndSeek="1772"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:45:56000">
<Copy StartSeek="0" EndSeek="1646"/>
<Insert>	struct pwd_s pwd = {.dir = "/", .len = 2};
</Insert>
<Copy StartSeek="1692" EndSeek="1774"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:46:41000">
<Copy StartSeek="0" EndSeek="1646"/>
<Insert>	struct pwd_s pwd = {.dir = {"/"}, .len = 2};
</Insert>
<Copy StartSeek="1694" EndSeek="1776"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:46:50000">
<Copy StartSeek="0" EndSeek="1646"/>
<Insert>	struct pwd_s pwd = {.dir = {"abc"}, .len = 2};
</Insert>
<Copy StartSeek="1690" EndSeek="1772"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:47:24000">
<Copy StartSeek="0" EndSeek="1725"/>
<Insert>	printf("strlen(pwd) %u\n",strlen(pwd.dir));
}
</Insert>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:47:30000">
<Copy StartSeek="0" EndSeek="1646"/>
<Insert>	struct pwd_s pwd = {.dir = "/", .len = 2};
</Insert>
<Copy StartSeek="1704" EndSeek="1741"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:47:51000">
<Copy StartSeek="0" EndSeek="1704"/>
<Copy StartSeek="1741" EndSeek="1778"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:48:20000">
<Copy StartSeek="0" EndSeek="1646"/>
<Insert>	struct pwd_s pwd = {.dir = "/", .len = strlen(pwd.dir)};
</Insert>
<Copy StartSeek="1680" EndSeek="1754"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:49:0000">
<Copy StartSeek="0" EndSeek="1646"/>
<Insert>	struct pwd_s pwd = {.dir = "/"};
</Insert>
<Copy StartSeek="1719" EndSeek="1793"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:49:38000">
<Copy StartSeek="0" EndSeek="1719"/>
<Copy StartSeek="1746" EndSeek="1820"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:49:49000">
<Copy StartSeek="0" EndSeek="1703"/>
<Insert>	pwd.dir = '/';
</Insert>
<Copy StartSeek="1722" EndSeek="1823"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:50:5000">
<Copy StartSeek="0" EndSeek="1722"/>
<Insert>	pwd.len = srlen(pwd.dir);
</Insert>
<Copy StartSeek="1750" EndSeek="1824"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:50:14000">
<Copy StartSeek="0" EndSeek="1665"/>
<Insert>	memset(pwd.dir, 0, sizeof(pwd.dir));
</Insert>
<Copy StartSeek="1710" EndSeek="1831"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:50:37000">
<Copy StartSeek="0" EndSeek="1665"/>
<Insert>//      memset(pwd.dir, 0, sizeof(pwd.dir));
</Insert>
<Copy StartSeek="1703" EndSeek="1824"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:50:46000">
<Copy StartSeek="0" EndSeek="1646"/>
<Insert>	struct pwd_s pwd;
</Insert>
<Copy StartSeek="1671" EndSeek="1830"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:50:57000">
<Copy StartSeek="0" EndSeek="1671"/>
<Insert>	memset(pwd.dir, 0, sizeof(pwd.dir));
</Insert>
<Copy StartSeek="1716" EndSeek="1837"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:50:59000">
<Copy StartSeek="0" EndSeek="1671"/>
<Insert>//      memset(pwd.dir, 0, sizeof(pwd.dir));
</Insert>
<Copy StartSeek="1671" EndSeek="1792"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:51:8000">
<Copy StartSeek="0" EndSeek="1755"/>
<Insert>//      pwd.len = strlen(pwd.dir);
}
</Insert>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:51:17000">
<Copy StartSeek="0" EndSeek="1718"/>
<Copy StartSeek="1719" EndSeek="1758"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:51:17000">
<Copy StartSeek="0" EndSeek="128"/>
<Copy StartSeek="193" EndSeek="1823"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:52:6000">
<Copy StartSeek="0" EndSeek="193"/>
<Copy StartSeek="194" EndSeek="1824"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:52:17000">
<Copy StartSeek="0" EndSeek="128"/>
<Insert>bool is_2_dots(char *buf)
</Insert>
<Copy StartSeek="161" EndSeek="1831"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:52:45000">
<Copy StartSeek="0" EndSeek="201"/>
<Copy StartSeek="282" EndSeek="1912"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:53:25000">
<Copy StartSeek="0" EndSeek="282"/>
<Copy StartSeek="340" EndSeek="1970"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:54:22000">
<Copy StartSeek="0" EndSeek="239"/>
<Insert>	return *buf = '.' &amp;&amp; *(buf +1) == '/';
</Insert>
<Copy StartSeek="283" EndSeek="1974"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:54:47000">
<Copy StartSeek="0" EndSeek="128"/>
<Insert>static bool is_2_dots(char *buf)
{
	return *buf == *(buf + 1) == '.';
}
</Insert>
<Copy StartSeek="215" EndSeek="1989"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:55:49000">
<Copy StartSeek="0" EndSeek="216"/>
<Insert>static bool is_dot_slash(char *buf)
{
	return (*buf = '.') &amp;&amp; (*(buf +1) == '/');
}
</Insert>
<Copy StartSeek="315" EndSeek="2004"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:55:57000">
<Copy StartSeek="0" EndSeek="350"/>
<Insert>	return *buf == '/';
</Insert>
<Copy StartSeek="373" EndSeek="2006"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:56:5000">
<Copy StartSeek="0" EndSeek="316"/>
<Insert>static bool is_slash(char *buf)
</Insert>
<Copy StartSeek="356" EndSeek="2014"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:56:15000">
<Copy StartSeek="0" EndSeek="128"/>
<Insert>//static bool is_2_dots(char *buf)
//{
//        return *buf == *(buf + 1) == '.';
//}
</Insert>
<Copy StartSeek="208" EndSeek="209"/>
<Insert>//static bool is_dot_slash(char *buf)
//{
//        return (*buf = '.') &amp;&amp; (*(buf +1) == '/');
//}
</Insert>
<Copy StartSeek="301" EndSeek="2000"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:56:29000">
<Copy StartSeek="0" EndSeek="370"/>
<Copy StartSeek="427" EndSeek="2057"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="14:58:15000">
<Copy StartSeek="0" EndSeek="128"/>
<Copy StartSeek="193" EndSeek="489"/>
<Insert>
}
</Insert>
<Copy StartSeek="545" EndSeek="2175"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="15:00:21000">
<Copy StartSeek="0" EndSeek="509"/>
<Insert>	while (!is_slash(cur) &amp;&amp; !) {
	}
}
</Insert>
<Copy StartSeek="511" EndSeek="2141"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/07/24" Time="15:01:44000">
<Copy StartSeek="0" EndSeek="511"/>
<Insert>//void parsepwd(char *buf, int nbuf, struct pwd_s *pwd)
//{
//        char *end = buf;
//
//        /* absolute path */
//        if(*buf == '/') {
//                /* skip consecutive /////// */
//                while(*buf == '/') {
//                        buf++;
//                        nbuf--;
//                }
//                memcpy(&amp;pwd-&gt;dir, buf, nbuf)
//                pwd-&gt;len = nbuf;
//                memset(pwd-&gt;dir + pwd-&gt;len + 1, 0, MAXPWD - pwd-&gt;len -1);
//                return 0;
//        }
//
//        /* relative path */
//        while(*buf) {
////	buf = strchr('/', buf);
//                if(*buf == '.') {
//                        if (*(buf + 1) == '.') {
//                                pwd_pop(pwd);
//                                buf++;
//                        }
//                        buf++;
//                } else {
//                        end = strchr('/', buf);
//                        if(*end) {
//                                pwd_push(buf, buf - end);
//                                /* any number of / can follow e.g. "cd a//////b" =&gt; cd a/b */
//                                while(*end == '/') {
//                                        end++;
//                                }
//                                buf = end;
//                        } else if(strlen(buf)) {
//                                        pwd_push(buf, srlen(buf));
//                        }
//                }
//        }
//}

</Insert>
<Copy StartSeek="1270" EndSeek="1416"/>
</Delta>
</DeltaFile>
