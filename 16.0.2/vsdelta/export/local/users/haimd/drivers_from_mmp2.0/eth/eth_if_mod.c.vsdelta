<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="3" Comment="" Date="2012/01/03" Time="13:04:30000" NL="\10" Encoding="text">
<Insert>/************************************************************************
* Copyright (C) 2010, Marvell Technology Group Ltd.
* All Rights Reserved.
* 
* This is UNPUBLISHED PROPRIETARY SOURCE CODE of Marvell Technology Group;
* the contents of this file may not be disclosed to third parties, copied
* or duplicated in any form, in whole or in part, without the prior
* written permission of Marvell Technology Group.
* 
* DESCRIPTION:
*       
* 
*******************************************************************************/
#include &lt;linux/module.h&gt;
#include &lt;linux/moduleparam.h&gt;

#include "eth_if.h"

#define MV_CPU_LE
#include "gbe/mvNeta.h"
#include "gbe/mvNetaRegs.h"
#include "gbe/mvEthRegs.h"


#ifdef MODULE_LICENSE
MODULE_LICENSE("MARVELL");
#endif

#define ETH_PORT 1
#define ETH_RXQ  7
#define ETH_TXQ  7

typedef struct {
	unsigned char   h_dest[6];	 /* destination eth addr */
	unsigned char   h_source[6];	 /* source ether addr    */
	u16             h_proto;	/* packet type ID field */
	unsigned char   data[100];     
} __attribute__((packed)) ethhdr;

void tx_test(void)
{
	int i, n;
	ethhdr *eth_hdr;
	void* pkt = NULL;

	pkt = kmalloc(1500, GFP_ATOMIC);
	eth_hdr = (ethhdr *) pkt;

	memset(pkt, 0, 1500);
	eth_hdr-&gt;h_dest[0] = 0x00;
	eth_hdr-&gt;h_dest[1] = 0x16;
	eth_hdr-&gt;h_dest[2] = 0x41;
	eth_hdr-&gt;h_dest[3] = 0xAE;
	eth_hdr-&gt;h_dest[4] = 0x73;
	eth_hdr-&gt;h_dest[5] = 0xB5;

	eth_hdr-&gt;h_source[0] = 0x00;
	eth_hdr-&gt;h_source[1] = 0x50;
	eth_hdr-&gt;h_source[2] = 0x43;
	eth_hdr-&gt;h_source[3] = 0x01;
	eth_hdr-&gt;h_source[4] = 0x0F;
	eth_hdr-&gt;h_source[5] = 0x0F;

	eth_hdr-&gt;h_proto = 0x0800;

	for (i = 0; i &lt; 10; i++)
		eth_hdr-&gt;data[i] = i;

	for (i = 0; i &lt; 10; i++) {
		eth_hdr-&gt;data[10] = i;
		eth_if_tx(ETH_PORT, pkt, 1000);
		msleep(1);
		n = mvNetaTxqSentDescNumGet(ETH_PORT, 0, ETH_TXQ);
		printk("MMP ETH: sent %d\n", n);
	}

	kfree(pkt);
}

void rx_test(void)
{
	while (1) {
		eth_if_rx(ETH_PORT, 10);
		msleep(100);
	}
}

static void __exit eth_if_mod_exit(void)
{
	eth_if_shutdown();
}
module_exit(eth_if_mod_exit);

static int __init eth_if_mod_init(void)
{
	eth_if_config_t cfg = {
		.state = ETH_IF_STATE_UP,
		.port = ETH_PORT,
		.rxq = ETH_RXQ,
		.txq = ETH_TXQ
	};

	if (eth_if_init(&amp;cfg))
		return -1;

	tx_test();
	/*printk("MMP ETH: REsetting.....\n");
	
	eth_if_txq_reinit();
     
       printk("MMP ETH: re-init done\n");
       tx_test();
	//rx_test();
       */ 

	return 0;
}
module_init(eth_if_mod_init);
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/01/03" Time="12:39:36000">
<Copy StartSeek="0" EndSeek="840"/>
<Insert>  unsigned char   h_dest[6];       /* destination eth addr */
  unsigned char   h_source[6];     /* source ether addr    */
  u16             h_proto;        /* packet type ID field */
  unsigned char   data[100];     
} __attribute__((packed)) ethhdr;
</Insert>
<Copy StartSeek="1074" EndSeek="1075"/>
<Insert>void tx_test(void) {
   int i, n;
   ethhdr *eth_hdr;
   void* pkt = NULL;

   pkt = kmalloc(1500, GFP_ATOMIC);
   eth_hdr = (ethhdr *) pkt;

   memset(pkt, 0, 1500);
   eth_hdr-&gt;h_dest[0] = 0x00;
   eth_hdr-&gt;h_dest[1] = 0x16;
   eth_hdr-&gt;h_dest[2] = 0x41;
   eth_hdr-&gt;h_dest[3] = 0xAE;
   eth_hdr-&gt;h_dest[4] = 0x73;
   eth_hdr-&gt;h_dest[5] = 0xB5;

   eth_hdr-&gt;h_source[0] = 0x00;
   eth_hdr-&gt;h_source[1] = 0x50;
   eth_hdr-&gt;h_source[2] = 0x43;
   eth_hdr-&gt;h_source[3] = 0x01;
   eth_hdr-&gt;h_source[4] = 0x0F;
   eth_hdr-&gt;h_source[5] = 0x0F;

   eth_hdr-&gt;h_proto = 0x0800;

   for (i = 0; i &lt; 10; i++)
        eth_hdr-&gt;data[i] = i;

   for (i = 0; i &lt; 10; i++) {
        eth_hdr-&gt;data[10] = i;
        eth_if_tx(ETH_PORT, pkt, 1000);
        msleep(1);
        n = mvNetaTxqSentDescNumGet(ETH_PORT, 0, ETH_TXQ);
        printk("MMP ETH: sent %d\n", n);
   }

   kfree(pkt);
}

void rx_test(void) {
   while(1) {
        eth_if_rx(ETH_PORT, 10);
        msleep(100);
   }
}

</Insert>
<Copy StartSeek="1950" EndSeek="1993"/>
<Insert>  eth_if_shutdown();
</Insert>
<Copy StartSeek="2013" EndSeek="2088"/>
<Insert>   eth_if_config_t cfg = {.state = ETH_IF_STATE_UP,
                          .port = ETH_PORT,
                          .rxq = ETH_RXQ,
                          .txq = ETH_TXQ};
</Insert>
<Copy StartSeek="2195" EndSeek="2196"/>
<Insert>   if (eth_if_init(&amp;cfg) &lt; 0) {
       return -1;
   }
</Insert>
<Copy StartSeek="2242" EndSeek="2243"/>
<Insert>   tx_test();
   /*printk("MMP ETH: REsetting.....\n");
   
   eth_if_txq_reinit();

  printk("MMP ETH: re-init done\n");
  tx_test();
   //rx_test();
  */ 
</Insert>
<Copy StartSeek="2410" EndSeek="2411"/>
<Insert>   return 0;
</Insert>
<Copy StartSeek="2422" EndSeek="2454"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/01/03" Time="12:59:45000">
<Copy StartSeek="0" EndSeek="2088"/>
<Insert>	eth_if_config_t cfg = {.state = ETH_IF_STATE_UP,
</Insert>
<Copy StartSeek="2141" EndSeek="2179"/>
<Insert>		.txq = ETH_TXQ};

</Insert>
<Copy StartSeek="2201" EndSeek="2459"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/01/03" Time="13:03:5000">
<Copy StartSeek="0" EndSeek="2201"/>
<Insert>	if (eth_if_init(&amp;cfg) &lt; 0) {
</Insert>
<Copy StartSeek="2225" EndSeek="2238"/>
<Insert>	}

</Insert>
<Copy StartSeek="2239" EndSeek="2450"/>
</Delta>
</DeltaFile>
