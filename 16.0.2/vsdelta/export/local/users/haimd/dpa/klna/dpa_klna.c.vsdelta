<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="66" Comment="" Date="2012/04/15" Time="15:13:51000" NL="\10" Encoding="text">
<Insert>/*
 *	Marvell Kernel Learning Agent
 * 
 *      Authors:
 *	Haim Daniel
 *
 *	This program is free software; you can redistribute it and/or
 *	modify it under the terms of the GNU General Public License
 *	as published by the Free Software Foundation; either version
 *	2 of the License, or (at your option) any later version.
 */

#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/netdevice.h&gt;
#include &lt;linux/notifier.h&gt;
#include &lt;net/netevent.h&gt;
#include &lt;net/neighbour.h&gt;
#include &lt;vlan.h&gt;
#include &lt;br_private.h&gt;
#include &lt;linux/if_arp.h&gt;
#include &lt;net/netfilter/nf_conntrack.h&gt;
#include &lt;net/netfilter/nf_conntrack_ecache.h&gt;
#include &lt;net/netfilter/nf_conntrack_l3proto.h&gt;
#include &lt;net/netfilter/nf_conntrack_l4proto.h&gt;
//#include &lt;linux/etherdevice.h&gt;

#undef pr_fmt
#define pr_fmt(fmt)	"dpa_klna: " fmt

static char notify[256];
module_param_string(notify, notify, sizeof(notify), 0644);
MODULE_PARM_DESC(notify, "event type: arp, vlan, bridge, nf_ct");

//static struct sock *dpanl = NULL;

static enum NOTIFICATION_HOOK {
	NOTIF_ARP	= 1,
	NOTIF_VLAN 	= 2,
	NOTIF_BRIDGE	= 4,
	NOTIF_ETH	= 8,
	NOTIF_NFCT	= 16,
} notif_mask;

#ifdef CONFIG_NF_CONNTRACK_EVENTS
static void dpa_print_conntrack_tuple(struct nf_conn *ct)
{
	const struct nf_conntrack_l3proto *l3proto;
	const struct nf_conntrack_l4proto *l4proto;

	struct nf_conntrack_tuple *tuple = 
		&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple;

	l3proto = __nf_ct_l3proto_find(nf_ct_l3num(ct));
	NF_CT_ASSERT(l3proto);
	l4proto = __nf_ct_l4proto_find(nf_ct_l3num(ct), nf_ct_protonum(ct));
	NF_CT_ASSERT(l4proto);

	pr_info("[%s] %pI4:%u -&gt; %pI4:%u\n",
		l4proto-&gt;name,
		&amp;tuple-&gt;src.u3.ip, ntohs(tuple-&gt;src.u.all),
		&amp;tuple-&gt;dst.u3.ip, ntohs(tuple-&gt;dst.u.all));
}

static int dpa_klna_nf_ct_event(unsigned int events, struct nf_ct_event *item)
{
	struct nf_conn *ct = item-&gt;ct;

	/* ignore our fake conntrack entry */
	if (ct == &amp;nf_conntrack_untracked)
		return 0;

	if (events &amp; IPCT_DESTROY) {
		pr_info("destroyed ct \n");
		dpa_print_conntrack_tuple(ct);
	} else  if (events &amp; IPCT_NEW) {
		pr_info("new ct\n");
		dpa_print_conntrack_tuple(ct);
	} else if (events &amp; IPCT_RELATED) {
		pr_info("related ct\n");
		dpa_print_conntrack_tuple(ct);
	}

	return 0;
}

static struct nf_ct_event_notifier dpa_ct_notifier = {
	.fcn = dpa_klna_nf_ct_event
};
#endif

static int __dpa_klna_br_if_event(struct notifier_block *unused, unsigned long event, 
			      void *ptr)
{
	struct net_device *dev = ptr;
	struct net_bridge *br = dev-&gt;br_port-&gt;br;

	switch (event) {

	case NETDEV_REGISTER:
		pr_info("if %s up at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
		break;

	case NETDEV_UNREGISTER:
		pr_info("if %s down at br [%s]\n", dev-&gt;name, br-&gt;dev-&gt;name);
		break;
	}
	return NOTIFY_DONE;
}

static int __dpa_klna_br_dev_event(struct notifier_block *unused, unsigned long event, 
			      void *ptr)
{
	struct net_device *dev = ptr;
	struct net_bridge *br;

	br = netdev_priv(dev);

	switch (event) {

	case NETDEV_REGISTER:
		pr_info("br up [%s]\n", dev-&gt;name);
		break;

	case NETDEV_UNREGISTER:
		pr_info("br unreg [%s]\n", dev-&gt;name);
		break;
	}

	return NOTIFY_DONE;
}

static int 
__dpa_klna_eth_dev_event(struct notifier_block *unused, unsigned long event,
			     void *ptr)
{
	struct net_device *dev = ptr;

	switch (event) {
	case NETDEV_REGISTER:
		pr_info("eth dev register %s\n", dev-&gt;name);
		break;
	case NETDEV_UNREGISTER:
		pr_info("eth dev unregister %s\n", dev-&gt;name);
		break;
	case NETDEV_UP:
		pr_info("eth dev %s up\n", dev-&gt;name);
	case NETDEV_DOWN:
		pr_info("eth dev %s down\n", dev-&gt;name);

	}

	return NOTIFY_DONE;
}

static int 
__dpa_klna_vlan_dev_event(struct notifier_block *unused, unsigned long event,
			     void *ptr)
{
	struct net_device *dev = ptr;
	struct vlan_dev_info *dev_info = vlan_dev_info(dev);

	switch (event) {
	case NETDEV_REGISTER:
		pr_info("vlan register %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
		break;
	case NETDEV_UNREGISTER:
		pr_info("vlan unreg %s vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
		break;
	case NETDEV_UP:
		pr_info("vlan %s up vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);
	case NETDEV_DOWN:
		pr_info("vlan %s down vid %u\n", dev-&gt;name, dev_info-&gt;vlan_id);

	}

	return NOTIFY_DONE;
}

/* main dispatcher for netdev events */
static int dpa_klna_netdev_event(struct notifier_block *unused, unsigned long event,
			   void *ptr)
{
	struct net_device *dev = ptr;
	
//      pr_info("dpa_netdev_dev %s event %lu, dev_type: %#x\n",dev-&gt;name, event,
//      	dev-&gt;type);

	if ((notif_mask &amp; NOTIF_VLAN) &amp;&amp; is_vlan_dev(dev)) {
		return __dpa_klna_vlan_dev_event(unused, event, ptr);
	} 
	if (notif_mask &amp; NOTIF_BRIDGE) {
		if (dev-&gt;priv_flags &amp; IFF_EBRIDGE) {
			return __dpa_klna_br_dev_event(unused,event,ptr);
		} else if (dev-&gt;br_port) {
			return __dpa_klna_br_if_event(unused,event,ptr);
		}
	}
	if (dev-&gt;type == ARPHRD_ETHER) {
		return __dpa_klna_eth_dev_event(unused,event,ptr);
	}

	return NOTIFY_DONE;
}

static struct notifier_block dpa_netdev_notifier __read_mostly = {
	.notifier_call = dpa_klna_netdev_event,
};

static void dpa_klna_neigh_update(struct neighbour *neigh)
{
	
	struct net_device *nd = neigh-&gt;dev;
	u32 addr = *(u32 *) neigh-&gt;primary_key;
	u8 *ha = neigh-&gt;ha;
	
	if (!ha) {
		pr_err("null ha!\n");
		return;
	}

	pr_info("[arp] %s:  %x:%x:%x:%x:%x:%x	  " NIPQUAD_FMT "\n", 
		(nd ? nd-&gt;name : "NULL dev"),
		ha[0],ha[1],ha[2],ha[3],ha[4],ha[5],
		NIPQUAD(addr));
	/* HAIM FIXME : implement __dpa_arp_find query,
	   since there's not separate notification for arp del/add.
	   consider search overhead ??? */
//      if (!__dpa_arp_find(arp_entry_t arp)
//      	dpa_arp_add(dpa_arp_entry_t *arp);
//      else
//      	dpa_arp_del(dpa_arp_entry_t *arp);
	return;
}

static int dpa_klna_neigh_callback(struct notifier_block *self, unsigned long event,
		       void *ctx)
{
	printk(KERN_ERR "(%s:%d) event %lu\n", __func__, __LINE__, event);

	switch (event) {
	case (NETEVENT_NEIGH_UPDATE): {
		dpa_klna_neigh_update((struct neighbour *)ctx);
		break;
	}
	default:
		break;
	}
	return 0;
}

static struct notifier_block nb = {
	.notifier_call = dpa_klna_neigh_callback
};


/* HAIM FIXME: need to unreg the notifiers according to the notif_mask bitfield */
 static int __init dpa_klna_init(void)
{
	int err = 0;

	pr_info("init\n");
	if (strstr(notify,"arp")) {
		pr_info("reg arp\n");
		err = register_netevent_notifier(&amp;nb);
		if (err) {
			unregister_netevent_notifier(&amp;nb);
		} else 
			notif_mask |= NOTIF_ARP;
	}
	if (strstr(notify,"vlan")) {
		pr_info("reg vlan\n");
		notif_mask |= NOTIF_VLAN;
	}
	if (strstr(notify,"bridge")) {
      		pr_info("reg bridge\n");
		notif_mask |= NOTIF_BRIDGE;
	}
	if (strstr(notify,"eth")) {
		pr_info("reg eth\n");
		notif_mask |= NOTIF_ETH;
	}
	if (notif_mask &amp; (NOTIF_VLAN | NOTIF_BRIDGE| NOTIF_ETH)) {
		err = register_netdevice_notifier(&amp;dpa_netdev_notifier);
		if (err) {
			unregister_netdevice_notifier(&amp;dpa_netdev_notifier);
		}
	}
#ifdef CONFIG_NF_CONNTRACK_EVENTS
	if (strstr(notify,"nf_ct")) {
		pr_info("reg nf_conntrack\n");
		err = nf_conntrack_register_notifier(&amp;dpa_ct_notifier);
		if (err) {
			nf_conntrack_unregister_notifier(&amp;dpa_ct_notifier);
		} else
			notif_mask |= NOTIF_NFCT;
	}
#else
	#warning "CONFIG_NF_CONNTRACK_EVENTS undefined!"
#endif

//      dpanl = netlink_kernel_create(&amp;init_net, NETLINK_NETFILTER, NFNLGRP_MAX,
//      		      nfnetlink_rcv, NULL, THIS_MODULE);
//      if (!dpanl) {
//      	printk(KERN_ERR "cannot initialize dpanetlink!\n");
//      	return -ENOMEM;
//      }

	return err;
}

static void __exit dpa_klna_exit(void)
{
	pr_info("exit\n");
	if (notif_mask &amp; NOTIF_ARP) {
		pr_info("unreg arp\n");
		unregister_netevent_notifier(&amp;nb);
	}
	if (notif_mask &amp; (NOTIF_VLAN | NOTIF_BRIDGE)) {
		pr_info("unreg dpa_netdev\n");
		unregister_netdevice_notifier(&amp;dpa_netdev_notifier);
	}
#ifdef CONFIG_NF_CONNTRACK_EVENTS
	if (notif_mask &amp; NOTIF_NFCT) {
		pr_info("unreg nf_ct\n");
		nf_conntrack_unregister_notifier(&amp;dpa_ct_notifier);
	}
#endif
}

module_init(dpa_klna_init)
module_exit(dpa_klna_exit)
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Haim Daniel &lt;haimd@marvell.com&gt;");
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="14:29:16000">
<Copy StartSeek="0" EndSeek="955"/>
<Copy StartSeek="990" EndSeek="4964"/>
<Copy StartSeek="4987" EndSeek="6626"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="16:51:37000">
<Copy StartSeek="0" EndSeek="4964"/>
<Insert>netlink_kernel_create

</Insert>
<Copy StartSeek="4964" EndSeek="6003"/>
<Copy StartSeek="6211" EndSeek="6811"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="16:52:19000">
<Copy StartSeek="0" EndSeek="6136"/>
<Insert>		printk(KERN_ERR "cannot initialize nfnetlink!\n");
</Insert>
<Copy StartSeek="6190" EndSeek="6812"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="16:52:23000">
<Copy StartSeek="0" EndSeek="4556"/>
<Insert>
</Insert>
<Copy StartSeek="4600" EndSeek="6855"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="17:14:18000">
<Copy StartSeek="0" EndSeek="4558"/>
<Copy StartSeek="4583" EndSeek="6071"/>
<Insert>	dpanl = netlink_kernel_create(&amp;init_net, NETLINK_NETFILTER, NFNLGRP_MAX,
			      nfnetlink_rcv, NULL, THIS_MODULE);
	if (!dpanl) {
		printk(KERN_ERR "cannot initialize dpanetlink!\n");
		return -ENOMEM;
	}
</Insert>
<Copy StartSeek="6321" EndSeek="6922"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="17:17:16000">
<Copy StartSeek="0" EndSeek="4558"/>
<Insert>	/* fill dpa_arp_entry*/
	/* dpa_arp_add(dpa_arp_entry_t *arp); */
</Insert>
<Copy StartSeek="4702" EndSeek="6999"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="17:25:21000">
<Copy StartSeek="0" EndSeek="4558"/>
<Insert>//      if (!dpa_arp_find(arp_entry_t arp)
</Insert>
<Copy StartSeek="4603" EndSeek="7001"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="17:29:5000">
<Copy StartSeek="0" EndSeek="4556"/>
<Insert>	
</Insert>
<Copy StartSeek="4668" EndSeek="7111"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="17:30:32000">
<Copy StartSeek="0" EndSeek="4605"/>
<Insert>	   since there's not separate notification for arp del/add */
</Insert>
<Copy StartSeek="4702" EndSeek="7145"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/03/28" Time="17:31:35000">
<Copy StartSeek="0" EndSeek="5338"/>
<Insert>static int __init mv_klna_init(void)
</Insert>
<Copy StartSeek="5376" EndSeek="7146"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/03/29" Time="10:21:59000">
<Copy StartSeek="0" EndSeek="767"/>
<Insert>#define pr_fmt(fmt)	"mv_klna: " fmt
</Insert>
<Copy StartSeek="804" EndSeek="1142"/>
<Insert>static void mv_print_conntrack_tuple(struct nf_conn *ct)
</Insert>
<Copy StartSeek="1200" EndSeek="1695"/>
<Insert>static int mv_nf_ct_event(unsigned int events, struct nf_ct_event *item)
</Insert>
<Copy StartSeek="1769" EndSeek="1952"/>
<Insert>		mv_print_conntrack_tuple(ct);
</Insert>
<Copy StartSeek="1985" EndSeek="2042"/>
<Insert>		mv_print_conntrack_tuple(ct);
</Insert>
<Copy StartSeek="2075" EndSeek="2139"/>
<Insert>		mv_print_conntrack_tuple(ct);
</Insert>
<Copy StartSeek="2172" EndSeek="2190"/>
<Insert>static struct nf_ct_event_notifier mv_ct_notifier = {
	.fcn = mv_nf_ct_event
</Insert>
<Copy StartSeek="2269" EndSeek="2280"/>
<Insert>static int __mv_br_if_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="2362" EndSeek="2698"/>
<Insert>static int __mv_br_device_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="2784" EndSeek="3092"/>
<Insert>__mv_vlan_device_event(struct notifier_block *unused, unsigned long event,
</Insert>
<Copy StartSeek="3168" EndSeek="3564"/>
<Insert>static int mv_netdev_event(struct notifier_block *unused, unsigned long event,
</Insert>
<Copy StartSeek="3644" EndSeek="3695"/>
<Insert>	pr_info("mv_netdev_dev %s event %lu\n",dev-&gt;name, event);
</Insert>
<Copy StartSeek="3755" EndSeek="3810"/>
<Insert>		return __mv_vlan_device_event(unused, event, ptr);
</Insert>
<Copy StartSeek="3864" EndSeek="3944"/>
<Insert>			return __mv_br_device_event(unused,event,ptr);
</Insert>
<Copy StartSeek="3995" EndSeek="4024"/>
<Insert>			return __mv_br_if_event(unused,event,ptr);
</Insert>
<Copy StartSeek="4071" EndSeek="4103"/>
<Insert>static struct notifier_block mv_netdev_notifier __read_mostly = {
	.notifier_call = mv_netdev_event,
</Insert>
<Copy StartSeek="4206" EndSeek="4210"/>
<Insert>static void mv_klna_neigh_update(struct neighbour *neigh)
</Insert>
<Copy StartSeek="4269" EndSeek="4879"/>
<Insert>static int mv_neigh_callback(struct notifier_block *self, unsigned long event,
</Insert>
<Copy StartSeek="4959" EndSeek="5101"/>
<Insert>		mv_klna_neigh_update((struct neighbour *)ctx);
</Insert>
<Copy StartSeek="5151" EndSeek="5235"/>
<Insert>	.notifier_call = mv_neigh_callback
</Insert>
<Copy StartSeek="5272" EndSeek="5360"/>
<Insert> static int __init mv_klna_init(void)
</Insert>
<Copy StartSeek="5399" EndSeek="5858"/>
<Insert>		err = register_netdevice_notifier(&amp;mv_netdev_notifier);
</Insert>
<Copy StartSeek="5917" EndSeek="5930"/>
<Insert>			unregister_netdevice_notifier(&amp;mv_netdev_notifier);
</Insert>
<Copy StartSeek="5986" EndSeek="6091"/>
<Insert>		err = nf_conntrack_register_notifier(&amp;mv_ct_notifier);
</Insert>
<Copy StartSeek="6149" EndSeek="6162"/>
<Insert>			nf_conntrack_unregister_notifier(&amp;mv_ct_notifier);
</Insert>
<Copy StartSeek="6217" EndSeek="6589"/>
<Insert>static void __exit mv_klna_exit(void)
</Insert>
<Copy StartSeek="6628" EndSeek="6796"/>
<Insert>		pr_info("unreg mv_netdev\n");
		unregister_netdevice_notifier(&amp;mv_netdev_notifier);
</Insert>
<Copy StartSeek="6884" EndSeek="6981"/>
<Insert>		nf_conntrack_unregister_notifier(&amp;mv_ct_notifier);
</Insert>
<Copy StartSeek="7035" EndSeek="7048"/>
<Insert>module_init(mv_klna_init)
module_exit(mv_klna_exit)
</Insert>
<Copy StartSeek="7102" EndSeek="7179"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:25:40000">
<Copy StartSeek="0" EndSeek="7125"/>
<Insert>MODULE_AUTHOR("Haim Daniel &lt;haim.daniel@gmail.com&gt;");
</Insert>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:25:53000">
<Copy StartSeek="0" EndSeek="956"/>
<Insert>static struct sock *dpanl = NULL;
</Insert>
<Copy StartSeek="992" EndSeek="7177"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:27:27000">
<Copy StartSeek="0" EndSeek="3566"/>
<Insert>static int dpa_netdev_event(struct notifier_block *unused, unsigned long event,
</Insert>
<Copy StartSeek="3651" EndSeek="4177"/>
<Insert>	.notifier_call = dpa_netdev_event,
</Insert>
<Copy StartSeek="4218" EndSeek="7187"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:38:24000">
<Copy StartSeek="0" EndSeek="4891"/>
<Insert>static int dpa_neigh_callback(struct notifier_block *self, unsigned long event,
</Insert>
<Copy StartSeek="4976" EndSeek="5252"/>
<Insert>	.notifier_call = dpa_neigh_callback
</Insert>
<Copy StartSeek="5294" EndSeek="7197"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:38:39000">
<Copy StartSeek="0" EndSeek="1697"/>
<Insert>static int dpa_nf_ct_event(unsigned int events, struct nf_ct_event *item)
</Insert>
<Copy StartSeek="1776" EndSeek="2252"/>
<Insert>	.fcn = dpa_nf_ct_event
</Insert>
<Copy StartSeek="2281" EndSeek="7207"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:38:52000">
<Copy StartSeek="0" EndSeek="2292"/>
<Insert>static int __dpa_br_if_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="2379" EndSeek="4046"/>
<Insert>			return __dpa_br_if_event(unused,event,ptr);
</Insert>
<Copy StartSeek="4098" EndSeek="7217"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:39:11000">
<Copy StartSeek="0" EndSeek="2715"/>
<Insert>static int __dpa_br_device_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="2806" EndSeek="3971"/>
<Insert>			return __dpa_br_device_event(unused,event,ptr);
</Insert>
<Copy StartSeek="4027" EndSeek="7227"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:39:22000">
<Copy StartSeek="0" EndSeek="3114"/>
<Insert>__dpa_vlan_device_event(struct notifier_block *unused, unsigned long event,
</Insert>
<Copy StartSeek="3195" EndSeek="3842"/>
<Insert>		return __dpa_vlan_device_event(unused, event, ptr);
</Insert>
<Copy StartSeek="3901" EndSeek="7237"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:39:29000">
<Copy StartSeek="0" EndSeek="3114"/>
<Insert>__dpa_klna_vlan_device_event(struct notifier_block *unused, unsigned long event,
</Insert>
<Copy StartSeek="3192" EndSeek="3839"/>
<Insert>		return __dpa_klna_vlan_device_event(unused, event, ptr);
</Insert>
<Copy StartSeek="3895" EndSeek="7231"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:39:57000">
<Copy StartSeek="0" EndSeek="2715"/>
<Insert>static int __dpa_klna_br_device_event(struct notifier_block *unused, unsigned long event, 
</Insert>
<Copy StartSeek="2803" EndSeek="3972"/>
<Insert>			return __dpa_klna_br_device_event(unused,event,ptr);
</Insert>
<Copy StartSeek="4025" EndSeek="7225"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="15:40:7000">
<Copy StartSeek="0" EndSeek="3892"/>
<Insert>	} else if (notif_mask &amp; NOTIF_BRIDGE) {
</Insert>
<Copy StartSeek="3930" EndSeek="7222"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="16:45:17000">
<Copy StartSeek="0" EndSeek="3721"/>
<Insert>	pr_info("dpa_netdev_dev %s event %lu\n",dev-&gt;name, event);

</Insert>
<Copy StartSeek="3824" EndSeek="4153"/>
<Copy StartSeek="4154" EndSeek="7265"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="16:52:27000">
<Copy StartSeek="0" EndSeek="3781"/>
<Insert>		(struct device_type *)dev-&gt;type-&gt;name);
</Insert>
<Copy StartSeek="3842" EndSeek="7284"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="16:52:59000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>
</Insert>
<Copy StartSeek="3764" EndSeek="3824"/>
<Insert>		((struct device_type *)dev-&gt;type-&gt;name ? : "NULL name\n");
</Insert>
<Copy StartSeek="3872" EndSeek="7314"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="16:53:36000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *)dev_type = dev-&gt;type;
</Insert>
<Copy StartSeek="3764" EndSeek="7314"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="16:53:57000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = dev-&gt;type;
</Insert>
<Copy StartSeek="3785" EndSeek="7336"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="16:54:7000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = (struct device_type *)dev-&gt;type;
</Insert>
<Copy StartSeek="3763" EndSeek="7314"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:13:38000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = dev-&gt;type;
</Insert>
<Copy StartSeek="3787" EndSeek="7338"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:13:48000">
<Copy StartSeek="0" EndSeek="3788"/>
<Insert>	pr_info("dpa_netdev_dev %s event %lu\n",dev-&gt;name, event, 
</Insert>
<Copy StartSeek="3861" EndSeek="7351"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:14:9000">
<Copy StartSeek="0" EndSeek="3788"/>
<Insert>	pr_info("dpa_netdev_dev %s event %lu, dev_type %s\n",dev-&gt;name, event, 
</Insert>
<Copy StartSeek="3862" EndSeek="7352"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:14:11000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = (struct device_type *)(dev-&gt;type);
</Insert>
<Copy StartSeek="3765" EndSeek="7330"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:14:44000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = (dev-&gt;type);
</Insert>
<Copy StartSeek="3763" EndSeek="7328"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:14:46000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = dev-&gt;type;
</Insert>
<Copy StartSeek="3764" EndSeek="7329"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:15:7000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = &amp;dev-&gt;type;
</Insert>
<Copy StartSeek="3768" EndSeek="7333"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:18:28000">
<Copy StartSeek="0" EndSeek="3720"/>
<Insert>	struct device_type *dev_type = &amp;dev-&gt;dev.type;

</Insert>
<Copy StartSeek="3722" EndSeek="3796"/>
<Insert>		(dev_type ? dev_type-&gt;name : "NULL name\n"));
</Insert>
<Copy StartSeek="3814" EndSeek="7256"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:20:2000">
<Copy StartSeek="0" EndSeek="3722"/>
<Insert>	pr_info("dpa_netdev_dev %s event %lu, dev_type: %s\n",dev-&gt;name, event, 
		dev-&gt;type\n"));
</Insert>
<Copy StartSeek="3811" EndSeek="7253"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:20:14000">
<Copy StartSeek="0" EndSeek="4140"/>
<Insert>
</Insert>
<Copy StartSeek="4175" EndSeek="7287"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:22:37000">
<Copy StartSeek="0" EndSeek="4140"/>
<Insert>	/* HAIM FIXME : add eth events */
</Insert>
<Copy StartSeek="4177" EndSeek="7289"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="17:22:51000">
<Copy StartSeek="0" EndSeek="4140"/>
<Copy StartSeek="4165" EndSeek="7314"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="11:41:31000">
<Copy StartSeek="0" EndSeek="4140"/>
<Insert>	if (dev-&gt;dev.type) {
	}
</Insert>
<Copy StartSeek="4218" EndSeek="7367"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="11:42:23000">
<Copy StartSeek="0" EndSeek="4140"/>
<Insert>	if (dev-&gt;dev.type-&gt;name) {
		printk("dev name %s\n",dev-&gt;dev.type-&gt;name);
</Insert>
<Copy StartSeek="4205" EndSeek="7357"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="11:47:15000">
<Copy StartSeek="0" EndSeek="4158"/>
<Insert>		printk("dev type %s\n",dev-&gt;dev.type-&gt;name);
</Insert>
<Copy StartSeek="4195" EndSeek="7347"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="11:47:23000">
<Copy StartSeek="0" EndSeek="4158"/>
<Insert>		printk("dev type %s\n",dev-&gt;type);
</Insert>
<Copy StartSeek="4195" EndSeek="7347"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="11:47:32000">
<Copy StartSeek="0" EndSeek="4140"/>
<Insert>	if (dev-&gt;type) {
</Insert>
<Copy StartSeek="4174" EndSeek="7363"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="14:36:10000">
<Copy StartSeek="0" EndSeek="4174"/>
<Insert>		printk("dev type %u\n",dev-&gt;type);
</Insert>
<Copy StartSeek="4215" EndSeek="7367"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="14:36:18000">
<Copy StartSeek="0" EndSeek="4174"/>
<Insert>		printk("eth dev type %u\n",dev-&gt;type);
</Insert>
<Copy StartSeek="4216" EndSeek="7368"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="14:36:22000">
<Copy StartSeek="0" EndSeek="4174"/>
<Insert>		printk("eth dev event %u\n",dev-&gt;type);
</Insert>
<Copy StartSeek="4203" EndSeek="7355"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="14:36:30000">
<Copy StartSeek="0" EndSeek="536"/>
<Copy StartSeek="560" EndSeek="7379"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="14:37:53000">
<Copy StartSeek="0" EndSeek="536"/>
<Insert>#include &lt;net/if_arp.h&gt;
</Insert>
<Copy StartSeek="562" EndSeek="7381"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="14:37:58000">
<Copy StartSeek="0" EndSeek="3543"/>
<Insert>	}

</Insert>
<Copy StartSeek="3628" EndSeek="7462"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:07:39000">
<Copy StartSeek="0" EndSeek="3624"/>
<Insert>	}

</Insert>
<Copy StartSeek="3714" EndSeek="7548"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:07:51000">
<Copy StartSeek="0" EndSeek="3137"/>
<Copy StartSeek="3251" EndSeek="7662"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:08:15000">
<Copy StartSeek="0" EndSeek="4481"/>
<Insert>		printk("eth dev event\n");
</Insert>
<Copy StartSeek="4534" EndSeek="7686"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:08:41000">
<Copy StartSeek="0" EndSeek="3235"/>
<Insert>
}

</Insert>
<Copy StartSeek="3564" EndSeek="8011"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:09:28000">
<Copy StartSeek="0" EndSeek="4354"/>
<Insert>	pr_info("dpa_netdev_dev %s event %lu, dev_type: %#x\n",dev-&gt;name, event, 
		dev-&gt;type);
</Insert>
<Copy StartSeek="4456" EndSeek="8024"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:09:33000">
<Copy StartSeek="0" EndSeek="3235"/>
<Copy StartSeek="3266" EndSeek="8055"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:09:58000">
<Copy StartSeek="0" EndSeek="3266"/>
<Copy StartSeek="3267" EndSeek="8056"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:09:59000">
<Copy StartSeek="0" EndSeek="1104"/>
<Insert>	NOTIF_NFCT	= 8,
</Insert>
<Copy StartSeek="1138" EndSeek="8073"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:11:35000">
<Copy StartSeek="0" EndSeek="6706"/>
<Insert>
</Insert>
<Copy StartSeek="6792" EndSeek="8158"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:12:13000">
<Copy StartSeek="0" EndSeek="6735"/>
<Insert>	 pr_info("reg eth\n");
		 notif_mask |= NOTIF_ETH;
</Insert>
<Copy StartSeek="6787" EndSeek="6790"/>
<Insert>

</Insert>
<Copy StartSeek="6790" EndSeek="8156"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:12:22000">
<Copy StartSeek="0" EndSeek="6759"/>
<Insert>			notif_mask |= NOTIF_ETH;
</Insert>
<Copy StartSeek="6786" EndSeek="8155"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:12:27000">
<Copy StartSeek="0" EndSeek="6672"/>
<Insert>			notif_mask |= NOTIF_BRIDGE;
</Insert>
<Copy StartSeek="6702" EndSeek="8154"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:12:29000">
<Copy StartSeek="0" EndSeek="6575"/>
<Insert>			notif_mask |= NOTIF_VLAN;
</Insert>
<Copy StartSeek="6603" EndSeek="8153"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:12:31000">
<Copy StartSeek="0" EndSeek="6787"/>
<Insert>	if (notif_mask &amp; (NOTIF_VLAN | NOTIF_BRIDGE)) {
</Insert>
<Copy StartSeek="6847" EndSeek="8164"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="15:12:48000">
<Copy StartSeek="0" EndSeek="4924"/>
<Insert>	/* HAIM FIXME : add eth events ! */

</Insert>
<Copy StartSeek="4925" EndSeek="8127"/>
</Delta>
</DeltaFile>
