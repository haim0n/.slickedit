<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="350" Comment="" Date="2012/04/18" Time="16:50:58000" NL="\10" Encoding="text">
<Insert>#include &lt;linux/version.h&gt;
#include &lt;asm/types.h&gt;
#include &lt;linux/socket.h&gt;
#include &lt;linux/err.h&gt;
#include &lt;linux/string.h&gt;
#include &lt;linux/in.h&gt;
#include &lt;linux/netlink.h&gt;
#include &lt;linux/if_link.h&gt;
#include &lt;linux/rtnetlink.h&gt;
#include &lt;linux/moduleparam.h&gt;

#include &lt;net/sock.h&gt;

#include "klna_nl.h"

#ifdef pr_fmt
	#undef pr_fmt
#endif
#define pr_fmt(fmt)	"klna_nl: " fmt

#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,24)
#define SHUT_RDWR 2
#ifndef CONFIG_ARPD
	#error "CONFIG_ARPD not configured"
#endif /* CONFIG_ARPD */
#endif /* KERNEL_VERSION(2.6.24) */

#define RTMGRP_NEIGH	4
#define RTMGRP_IPV4_ROUTE	0x40
//#endif /* CONFIG_ARPD */

#define KLNA_GRP (RTMGRP_IPV4_ROUTE | RTMGRP_NEIGH | RTNLGRP_LINK | RTNLGRP_NEIGH)
#define IFLA_RTA(r)  ((struct rtattr*)(((char*)(r)) + NLMSG_ALIGN(sizeof(struct ifinfomsg))))
#define IFLA_PAYLOAD(n) NLMSG_PAYLOAD(n,sizeof(struct ifinfomsg))

static int no_arp = 0;
module_param(no_arp, int, 0644);
MODULE_PARM_DESC(no_arp, "avoid reporting arp events");


struct msgnames_t {
	int id;
	char *msg;
} typenames[] = {
#define MSG(x) { x, #x }
	MSG(RTM_NEWROUTE),
	MSG(RTM_DELROUTE),
	MSG(RTM_GETROUTE),
	MSG(RTM_NEWNEIGH),
	MSG(RTM_DELNEIGH),
	MSG(RTM_NEWLINK),
	MSG(RTM_DELLINK),
#undef MSG
	{0,0}
};

static struct socket *klna_socket;

static char *klna_nl_lookup_name(struct msgnames_t *db,int id)
{
	static char name[512];
	struct msgnames_t *msgnamesiter;
	for (msgnamesiter=db;msgnamesiter-&gt;msg;++msgnamesiter) {
		if (msgnamesiter-&gt;id == id)
			break;
	}
	if (msgnamesiter-&gt;msg) {
		return msgnamesiter-&gt;msg;
	}
	snprintf(name,sizeof(name),"#%i",id);
	return name;
}

#ifndef NIPQUAD
	#define NIPQUAD(addr) \
	((unsigned char *)&amp;addr)[0], \
	((unsigned char *)&amp;addr)[1], \
	((unsigned char *)&amp;addr)[2], \
	((unsigned char *)&amp;addr)[3]
	#define NIPQUAD_FMT "%u.%u.%u.%u"
#endif

#if 0
static void
netlink_parse_rtattr(struct rtattr **tb, int max, struct rtattr *rta, int len)
{
	while (RTA_OK(rta, len)) {
		if (rta-&gt;rta_type &lt;= max)
			tb[rta-&gt;rta_type] = rta;
		rta = RTA_NEXT(rta,len);
	}
}
#endif

static int klna_nl_ev_route(struct nlmsghdr *nlh, void *buffer)
{
	struct rtmsg *rtm;
	struct rtattr *rta;
	int rtl;
	rtm = (struct rtmsg *)buffer;
	rta = (struct rtattr*)RTM_RTA(rtm);
	rtl = RTM_PAYLOAD(nlh);
	printk("%s: family: %u\n", __func__, rtm-&gt;rtm_family);
	/* parse each attr */
	for (; RTA_OK(rta, rtl); rta = RTA_NEXT(rta, rtl)) {
		if (rta-&gt;rta_type == RTA_DST) {
			uint32_t dst_addr = *((uint32_t *)RTA_DATA(rta));
			printk("dst " NIPQUAD_FMT "/%u\n", NIPQUAD(dst_addr),
			       rtm-&gt;rtm_dst_len);
		}
		if (rta-&gt;rta_type == RTA_GATEWAY) {
			uint32_t dst_gw = *((uint32_t *)RTA_DATA(rta));
			printk("gw " NIPQUAD_FMT "\n", NIPQUAD(dst_gw));
		}
		if (rta-&gt;rta_type == RTA_OIF) {
			uint32_t oif = *((uint32_t *)RTA_DATA(rta));
			printk("oif_index %u\n", oif);
		}
	}
	if (nlh-&gt;nlmsg_type == RTM_NEWROUTE) {
		printk("new route\n");
		/* dpa_rt_rule_add */
	} else {
		/* dpa_rt_rule_del */
		printk("del route\n");
	}

	return 0;
}

/* we handle only bridge if bind/unbind here,
   the rest is done in notification chains */
static int klna_nl_ev_link(struct nlmsghdr *nlh, void *buffer)
{
	struct ifinfomsg *ifi;
	struct rtattr *rta;
//      struct interface *ifp;
	int rtl;
	int new_if = (nlh-&gt;nlmsg_type == RTM_NEWLINK);

	ifi = (struct ifinfomsg *)buffer;
	rta = (struct rtattr*)IFLA_RTA(ifi);
	rtl = IFLA_PAYLOAD(nlh);

	pr_debug("%s: ifi_family: %u\n", __func__, ifi-&gt;ifi_family);
	if (ifi-&gt;ifi_family != AF_BRIDGE)
		return 0;

	if (new_if) {
		printk("bridge if bind\n");
	} else 
		printk("bridge if unbind\n");
	
	/* parse each attr */
	for (; RTA_OK(rta, rtl); rta = RTA_NEXT(rta, rtl)) {
		if (rta-&gt;rta_type == IFLA_IFNAME) {
			printk("name: %s, flags %#x, type %#x\n",(char *)RTA_DATA(rta), 
			       ifi-&gt;ifi_flags,
			       ifi-&gt;ifi_type);
		}
	}
	printk("\n");
	if (new_if) {
		/* add */
	} else {
		/* del */
	}
	return 0;
}

static int klna_nl_ev_arp(struct nlmsghdr *nlh, void *buffer)
{
	struct ndmsg *ndm;
	struct rtattr *rta;
	int rtl;
	int new_neigh = 0;

	ndm = (struct ndmsg *)buffer;
	rta = (struct rtattr*)RTM_RTA(ndm);
	rtl = RTM_PAYLOAD(nlh);
	printk("%s: family: %u\n", __func__, ndm-&gt;ndm_family);
	/* parse each attr */
	for (; RTA_OK(rta, rtl); rta = RTA_NEXT(rta, rtl)) {
		if (rta-&gt;rta_type == NDA_DST) {
			uint32_t dst_addr = *((uint32_t *)RTA_DATA(rta));
			printk("ip " NIPQUAD_FMT "\n", NIPQUAD(dst_addr));
			continue;
		}
		if (rta-&gt;rta_type == NDA_LLADDR) {
			#define MAX_BUF_LEN 6
			uint8_t ha[MAX_BUF_LEN];
			uint8_t *data = (uint8_t *)RTA_DATA(rta);
			uint32_t data_len =
				rta-&gt;rta_len &lt; MAX_BUF_LEN ? rta-&gt;rta_len : MAX_BUF_LEN;
			uint32_t i;

			new_neigh = 1; /* NDA_LLADDR appears only in new entry */
			memcpy(ha, data, data_len);
			for (i = 0; i &lt; data_len; i++) {
				printk("%x:", ha[i]);
			}
			printk("\n");
			continue;
		}
	}
	if (new_neigh) {
		printk("new arp entry\n");
		/* dpa_arp_rule_add */
	} else {
		/* dpa_arp_rule_del */
		printk("del arp entry\n");
	}
	return 0;
}

static void klna_nl_dump_skb(struct sk_buff *skb) 
{
#ifdef DEBUG
	char tmp[80];
	char *p = skb-&gt;data;
	char *t = tmp;
	int i;
	for (i = 0; i &lt; skb-&gt;len; i++) {
		t += sprintf(t, "%02x ", *p++ &amp; 0xff);
		if ((i &amp; 0x0f) == 8) {
			printk(KERN_DEBUG "dump: %s\n", tmp);
			t = tmp;
		}
	}
	if (i &amp; 0x07)
		printk(KERN_DEBUG "dump: %s\n", tmp);
#endif
}

/* Receive message from netlink and pass information to relevant function. */
static void klna_nl_data_ready(struct sock *sk, int bytes)
{
	int status = 0;
	int ret = 0;
	int len;
	void *buf;
	struct sk_buff *skb;
	struct nlmsghdr *nlh;
	
	pr_debug("%s: got a message %u bytes\n", __func__, bytes);
	while ((skb = skb_recv_datagram(sk, 0, 1, &amp;ret)) == NULL) {
		if (ret == -EAGAIN) {
			printk(KERN_ERR "no data available\n");
			return;
		}
		pr_debug("recvfrom() error %d\n", -ret);
	}

	len = skb-&gt;len;
	klna_nl_dump_skb(skb);
	for (nlh = (struct nlmsghdr *)skb-&gt;data; NLMSG_OK(nlh, len);
	    nlh = NLMSG_NEXT(nlh, status)) {
		pr_debug("%s: nlmsg_len %u, nlmsg_type %u\n", __func__,
		       nlh-&gt;nlmsg_len, nlh-&gt;nlmsg_type);
		/* Finish of reading. */
		if (nlh-&gt;nlmsg_type == NLMSG_DONE)
			return;

		/* Error handling. */
		if (nlh-&gt;nlmsg_type == NLMSG_ERROR) {
			printk(KERN_ERR "nl message error\n");
			return;
		}
		if (no_arp &amp;&amp;
		    nlh-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
		    nlh-&gt;nlmsg_type != RTM_DELNEIGH) {
			pr_debug("nlmsg_type: %i (%s)\n",(nlh-&gt;nlmsg_type), 
			       klna_nl_lookup_name(typenames,nlh-&gt;nlmsg_type));
		}
		/* OK we got netlink message. */
		buf = NLMSG_DATA(skb-&gt;data);
		switch (nlh-&gt;nlmsg_type) {
		case RTM_NEWROUTE:
		case RTM_DELROUTE:
			ret = klna_nl_ev_route(nlh, buf);
			break;
		case RTM_NEWNEIGH:
		case RTM_DELNEIGH:
			if (!no_arp)
				ret = klna_nl_ev_arp(nlh, buf);
			break;
		case RTM_NEWLINK:
		case RTM_DELLINK:
			ret = klna_nl_ev_link(nlh, buf);
			break;
		}
	}
	skb_orphan(skb);
	kfree_skb(skb);

	return;
}
#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,6,24)
extern struct neigh_table arp_tbl;
void klna_init_arp_neigh_tbl(struct neigh_table *tbl)
{
	struct neighbour *n;
	u32 hash_val;
	
	read_lock_bh(&amp;tbl-&gt;lock);
	hash_val = atomic_read(&amp;tbl-&gt;entries);
	while (hash_val--) {
		for (n = tbl-&gt;hash_buckets[hash_val &amp; tbl-&gt;hash_mask]; n; n = n-&gt;next) {
			neigh_hold(n);
			n-&gt;parms-&gt;app_probes = 1;
			neigh_release(n);
		}
	}
	read_unlock_bh(&amp;tbl-&gt;lock);
}
#endif /* KERNEL_VERSION(2,6,24) */

int klna_nl_open(void)
{
	struct sock *sock;
	struct sockaddr_nl addr;
	int rc = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE, &amp;klna_socket);

#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,6,24)
	klna_init_arp_neigh_tbl(&amp;arp_tbl);
#endif
	if (rc &lt; 0) {
		printk(KERN_ERR "socket_create err %d\n", rc);
		return rc;
	}

	memset((void *)&amp;addr, 0, sizeof(addr));
	addr.nl_family = AF_NETLINK;
	addr.nl_pid = 0;
	addr.nl_groups = KLNA_GRP;
	rc = kernel_bind(klna_socket, (struct sockaddr *)&amp;addr, sizeof(addr));
	if (rc &lt;0) {
		printk(KERN_ERR "bind err\n");
		return rc;
	}

	/* set the socket up */
	sock = klna_socket-&gt;sk;
	sock-&gt;sk_data_ready = klna_nl_data_ready;
	sock-&gt;sk_allocation = GFP_ATOMIC;
	return 0;
}

void klna_nl_close(void)
{
	klna_socket-&gt;ops-&gt;shutdown(klna_socket, SHUT_RDWR);
	sock_release(klna_socket);
}
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/04/03" Time="14:50:4000">
<Copy StartSeek="0" EndSeek="537"/>
<Insert>char *klna_lookup_name(struct msgnames_t *db,int id)
</Insert>
<Copy StartSeek="593" EndSeek="1286"/>
<Insert>static int klna_ev_route(struct nlmsghdr *nlh, void *buffer)
</Insert>
<Copy StartSeek="1350" EndSeek="3713"/>
<Insert>static int klna_ev_link(struct nlmsghdr *nlh, void *buffer)
</Insert>
<Copy StartSeek="3776" EndSeek="4864"/>
<Insert>static int klna_ev_arp(struct nlmsghdr *nlh, void *buffer)
</Insert>
<Copy StartSeek="4926" EndSeek="6100"/>
<Insert>static int klna_netlink_parse_info(int sock)
</Insert>
<Copy StartSeek="6148" EndSeek="7355"/>
<Insert>				      klna_lookup_name(typenames,err-&gt;msg.nlmsg_type),
</Insert>
<Copy StartSeek="7417" EndSeek="7680"/>
<Insert>			       klna_lookup_name(typenames,h-&gt;nlmsg_type));
</Insert>
<Copy StartSeek="7737" EndSeek="7849"/>
<Insert>				ret = klna_ev_route(h, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="7897" EndSeek="7974"/>
<Insert>				ret = klna_ev_arp(h, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="8020" EndSeek="8472"/>
<Insert>int klna_open_netlink()
</Insert>
<Copy StartSeek="8499" EndSeek="8859"/>
<Insert>	int nls = klna_open_netlink();
</Insert>
<Copy StartSeek="8894" EndSeek="8933"/>
<Insert>	klna_netlink_parse_info(nls);
</Insert>
<Copy StartSeek="8967" EndSeek="8980"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:21:37000">
<Copy StartSeek="0" EndSeek="6100"/>
<Insert>static int klna_nl_netlink_parse_info(int sock)
</Insert>
<Copy StartSeek="6140" EndSeek="8925"/>
<Insert>	klna_nl_netlink_parse_info(nls);
</Insert>
<Copy StartSeek="8951" EndSeek="8964"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:22:5000">
<Copy StartSeek="0" EndSeek="8464"/>
<Insert>int klna_nl_open_netlink()
</Insert>
<Copy StartSeek="8483" EndSeek="8843"/>
<Insert>	int nls = klna_nl_open_netlink();
</Insert>
<Copy StartSeek="8870" EndSeek="8948"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:22:21000">
<Copy StartSeek="0" EndSeek="8464"/>
<Insert>int klna_nl_open()
</Insert>
<Copy StartSeek="8487" EndSeek="8952"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:22:43000">
<Copy StartSeek="0" EndSeek="8812"/>
<Insert>int main(int argc, char *argv[])
</Insert>
<Copy StartSeek="8853" EndSeek="8960"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:23:31000">
<Copy StartSeek="0" EndSeek="8812"/>
<Insert>int klna_nl_init(int argc, char *argv[])
</Insert>
<Copy StartSeek="8835" EndSeek="8942"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:23:35000">
<Copy StartSeek="0" EndSeek="68"/>
<Insert>#include &lt;err.h&gt;
</Insert>
<Copy StartSeek="87" EndSeek="8944"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:23:59000">
<Copy StartSeek="0" EndSeek="8814"/>
<Insert>int klna_nl_init(void)
</Insert>
<Copy StartSeek="8844" EndSeek="8951"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:26:46000">
<Copy StartSeek="0" EndSeek="8978"/>
<Insert>module_exit(dpa_klna_exit)
</Insert>
<Copy StartSeek="8978" EndSeek="9051"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:27:7000">
<Copy StartSeek="0" EndSeek="24"/>
<Insert>#include &lt;sys/socket.h&gt;
</Insert>
<Copy StartSeek="50" EndSeek="9053"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:27:31000">
<Copy StartSeek="0" EndSeek="50"/>
<Insert>#include &lt;unistd.h&gt;
</Insert>
<Copy StartSeek="72" EndSeek="91"/>
<Insert>#include &lt;errno.h&gt;
</Insert>
<Copy StartSeek="116" EndSeek="9061"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:54:55000">
<Copy StartSeek="0" EndSeek="72"/>
<Insert>//#include &lt;err.h&gt;
</Insert>
<Copy StartSeek="95" EndSeek="9065"/>
</Delta>
<Delta Version="12" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:55:5000">
<Copy StartSeek="0" EndSeek="50"/>
<Insert>//#include &lt;unistd.h&gt;
</Insert>
<Copy StartSeek="76" EndSeek="9069"/>
</Delta>
<Delta Version="13" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:55:16000">
<Copy StartSeek="0" EndSeek="24"/>
<Insert>//#include &lt;sys/socket.h&gt;
</Insert>
<Copy StartSeek="50" EndSeek="9069"/>
</Delta>
<Delta Version="14" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:55:27000">
<Copy StartSeek="0" EndSeek="124"/>
<Insert>#include &lt;stdio.h&gt;
</Insert>
<Copy StartSeek="145" EndSeek="9071"/>
</Delta>
<Delta Version="15" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:55:44000">
<Copy StartSeek="0" EndSeek="145"/>
<Insert>#include &lt;string.h&gt;
</Insert>
<Copy StartSeek="171" EndSeek="9077"/>
</Delta>
<Delta Version="16" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:55:59000">
<Copy StartSeek="0" EndSeek="171"/>
<Insert>#include &lt;netinet/in.h&gt;
</Insert>
<Copy StartSeek="193" EndSeek="9075"/>
</Delta>
<Delta Version="17" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:56:23000">
<Copy StartSeek="0" EndSeek="1522"/>
<Insert>	printf("%s: family: %u\n", __func__, rtm-&gt;rtm_family);
</Insert>
<Copy StartSeek="1578" EndSeek="1742"/>
<Insert>			printf("dst " NIPQUAD_FMT "/%u\n", NIPQUAD(dst_addr),
</Insert>
<Copy StartSeek="1799" EndSeek="1921"/>
<Insert>			printf("gw " NIPQUAD_FMT "\n", NIPQUAD(dst_gw));
</Insert>
<Copy StartSeek="1973" EndSeek="2059"/>
<Insert>			printf("oif_index %u\n", oif);
</Insert>
<Copy StartSeek="2093" EndSeek="2672"/>
<Insert>	printf("name %s\n",name);
	printf("change %#x\n",ifi-&gt;ifi_change);
	printf("family %u\n",ifi-&gt;ifi_family);
</Insert>
<Copy StartSeek="2780" EndSeek="2878"/>
<Insert>	printf("flags %#x\n",ifi-&gt;ifi_flags &amp; 0x0000fffff);
	printf("mtu %u\n",*(int *)RTA_DATA (tb[IFLA_MTU]));
</Insert>
<Copy StartSeek="2984" EndSeek="3018"/>
<Insert>	printf("hw_type %#x\n",ifi-&gt;ifi_type);
</Insert>
<Copy StartSeek="3058" EndSeek="3084"/>
<Insert>		printf("operstate %u\n", *(unsigned char *)RTA_DATA(tb[IFLA_OPERSTATE]));
</Insert>
<Copy StartSeek="3160" EndSeek="3184"/>
<Insert>		printf("linkmode %u\n", *(unsigned char *)RTA_DATA(tb[IFLA_LINKMODE]));
</Insert>
<Copy StartSeek="3258" EndSeek="3463"/>
<Insert>			printf("Hardware address is too large: %d", hw_addr_len);
</Insert>
<Copy StartSeek="3524" EndSeek="4032"/>
<Insert>	printf("%s: ifi_family: %u\n", __func__, ifi-&gt;ifi_family);
</Insert>
<Copy StartSeek="4092" EndSeek="4145"/>
<Insert>			printf("bridge if bind\n");
</Insert>
<Copy StartSeek="4176" EndSeek="4186"/>
<Insert>			printf("bridge if unbind\n");
</Insert>
<Copy StartSeek="4219" EndSeek="4337"/>
<Insert>			printf("name: %s, flags %#x, type %#x,\n",RTA_DATA(rta), 
</Insert>
<Copy StartSeek="4398" EndSeek="4553"/>
<Insert>//      		printf("IFLA_LINKINFO\n");
</Insert>
<Copy StartSeek="4590" EndSeek="4708"/>
<Insert>//      				printf("IFLA_INFO_KIND: %s\n",RTA_DATA(_rta));
</Insert>
<Copy StartSeek="4767" EndSeek="4809"/>
<Insert>	printf("\n");
</Insert>
<Copy StartSeek="4824" EndSeek="5115"/>
<Insert>	printf("%s: family: %u\n", __func__, ndm-&gt;ndm_family);
</Insert>
<Copy StartSeek="5171" EndSeek="5335"/>
<Insert>			printf("ip " NIPQUAD_FMT "\n", NIPQUAD(dst_addr));
</Insert>
<Copy StartSeek="5389" EndSeek="5769"/>
<Insert>				printf("%x:", ha[i]);
</Insert>
<Copy StartSeek="5795" EndSeek="5800"/>
<Insert>			printf("\n");
</Insert>
<Copy StartSeek="5817" EndSeek="5881"/>
<Insert>//      		printf(" NDA_CACHEINFO\n");
</Insert>
<Copy StartSeek="5919" EndSeek="6628"/>
<Insert>			printf("recvmsg overrun");
</Insert>
<Copy StartSeek="6658" EndSeek="6696"/>
<Insert>			printf("EOF");
</Insert>
<Copy StartSeek="6714" EndSeek="6771"/>
<Insert>			printf("sender address length error",
</Insert>
<Copy StartSeek="6812" EndSeek="7224"/>
<Insert>					printf("error: message truncated");
</Insert>
<Copy StartSeek="7265" EndSeek="7287"/>
<Insert>				printf("error: %s, type=%s(%u), seq=%u, pid=%d",
</Insert>
<Copy StartSeek="7340" EndSeek="7646"/>
<Insert>			printf("nlmsg_type: %i (%s)\n",(h-&gt;nlmsg_type), 
</Insert>
<Copy StartSeek="7698" EndSeek="8265"/>
<Insert>			printf("error: message truncated");
</Insert>
<Copy StartSeek="8304" EndSeek="8337"/>
<Insert>			printf("error: data remnant size %d", status);
</Insert>
<Copy StartSeek="8387" EndSeek="8418"/>
<Insert>			printf("error: message parsing\n");
</Insert>
<Copy StartSeek="8457" EndSeek="9075"/>
</Delta>
<Delta Version="18" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:57:11000">
<Copy StartSeek="0" EndSeek="2528"/>
<Insert>	netlink_parse_rtattr(tb, IFLA_MAX, IFLA_RTA (ifi), len);
</Insert>
<Copy StartSeek="2585" EndSeek="9074"/>
</Delta>
<Delta Version="19" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:57:37000">
<Copy StartSeek="0" EndSeek="221"/>
<Copy StartSeek="247" EndSeek="9100"/>
</Delta>
<Delta Version="20" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:57:48000">
<Copy StartSeek="0" EndSeek="221"/>
<Insert>#include &lt;linux/iflink.h&gt;
</Insert>
<Copy StartSeek="248" EndSeek="9101"/>
</Delta>
<Delta Version="21" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:58:5000">
<Copy StartSeek="0" EndSeek="2401"/>
<Insert>	len = h-&gt;nlmsg_len - NLMSG_LENGTH (sizeof (struct ifinfomsg));
</Insert>
<Copy StartSeek="2464" EndSeek="9100"/>
</Delta>
<Delta Version="22" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:59:24000">
<Copy StartSeek="0" EndSeek="2401"/>
<Insert>	len = h-&gt;nlmsg_len - NLMSG_LENGTH(sizeof (struct ifinfomsg));
</Insert>
<Copy StartSeek="2463" EndSeek="9099"/>
</Delta>
<Delta Version="23" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="16:59:26000">
<Copy StartSeek="0" EndSeek="345"/>
<Insert>
</Insert>
<Copy StartSeek="506" EndSeek="9259"/>
</Delta>
<Delta Version="24" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:03:59000">
<Copy StartSeek="0" EndSeek="4521"/>
<Insert>			printk("name: %s, flags %#x, type %#x,\n",RTA_DATA(rta), 
</Insert>
<Copy StartSeek="4590" EndSeek="9267"/>
</Delta>
<Delta Version="25" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:04:58000">
<Copy StartSeek="0" EndSeek="4033"/>
<Insert>	struct interface *ifp;
</Insert>
<Copy StartSeek="4064" EndSeek="9274"/>
</Delta>
<Delta Version="26" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:05:20000">
<Copy StartSeek="0" EndSeek="6695"/>
<Insert>		status = recvmsg(sock, &amp;msg, 0);
</Insert>
<Copy StartSeek="6779" EndSeek="9323"/>
</Delta>
<Delta Version="27" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:08:20000">
<Copy StartSeek="0" EndSeek="9184"/>
<Insert>	klna_nl_parse_info(nls);
</Insert>
<Copy StartSeek="9217" EndSeek="9330"/>
</Delta>
<Delta Version="28" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:10:35000">
<Copy StartSeek="0" EndSeek="9184"/>
<Insert>//      klna_nl_parse_info(nls);
</Insert>
<Copy StartSeek="9210" EndSeek="9323"/>
</Delta>
<Delta Version="29" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:10:39000">
<Copy StartSeek="0" EndSeek="9184"/>
<Insert>	klna_nl_parse_info(nls);
</Insert>
<Copy StartSeek="9217" EndSeek="9330"/>
</Delta>
<Delta Version="30" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:10:45000">
<Copy StartSeek="0" EndSeek="8763"/>
<Insert>	int sock = socket(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE);
</Insert>
<Copy StartSeek="8977" EndSeek="9488"/>
</Delta>
<Delta Version="31" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:18:20000">
<Copy StartSeek="0" EndSeek="8937"/>
<Insert>				      IPPROTO_TCP, &amp;klna_nl_socket)
</Insert>
<Copy StartSeek="8974" EndSeek="9485"/>
</Delta>
<Delta Version="32" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:18:25000">
<Copy StartSeek="0" EndSeek="750"/>
<Copy StartSeek="779" EndSeek="9514"/>
</Delta>
<Delta Version="33" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:18:39000">
<Copy StartSeek="0" EndSeek="8921"/>
<Insert>	rc = sock_create_kern(PF_INET, SOCK_STREAM,
</Insert>
<Copy StartSeek="8970" EndSeek="9518"/>
</Delta>
<Delta Version="34" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:18:48000">
<Copy StartSeek="0" EndSeek="8855"/>
<Insert>	int sock = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE);
</Insert>
<Copy StartSeek="8935" EndSeek="8984"/>
<Insert>				      IPPROTO_TCP, &amp;klna_socket)
</Insert>
<Copy StartSeek="9010" EndSeek="9521"/>
</Delta>
<Delta Version="35" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:19:11000">
<Copy StartSeek="0" EndSeek="8855"/>
<Insert>	int sock = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE, &amp;klna_socket);
</Insert>
<Copy StartSeek="8933" EndSeek="9519"/>
</Delta>
<Delta Version="36" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:19:17000">
<Copy StartSeek="0" EndSeek="8933"/>
<Insert>	int rc = sock_create_kern(PF_INET, SOCK_STREAM,
				      IPPROTO_TCP, &amp;)
</Insert>
<Copy StartSeek="8933" EndSeek="9444"/>
</Delta>
<Delta Version="37" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:19:23000">
<Copy StartSeek="0" EndSeek="8855"/>
<Insert>	int rc = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE, &amp;klna_socket);
</Insert>
<Copy StartSeek="8855" EndSeek="8881"/>
<Insert>
</Insert>
<Copy StartSeek="8960" EndSeek="9444"/>
</Delta>
<Delta Version="38" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:19:32000">
<Copy StartSeek="0" EndSeek="8960"/>
<Copy StartSeek="9024" EndSeek="9508"/>
</Delta>
<Delta Version="39" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:20:38000">
<Copy StartSeek="0" EndSeek="278"/>
<Copy StartSeek="312" EndSeek="9542"/>
</Delta>
<Delta Version="40" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:21:18000">
<Copy StartSeek="0" EndSeek="278"/>
<Insert>#define pr_fmt(fmt)	"klna: " fmt
</Insert>
<Copy StartSeek="314" EndSeek="9545"/>
</Delta>
<Delta Version="41" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:21:22000">
<Copy StartSeek="0" EndSeek="9103"/>
<Insert>	if (sock&lt;0)
		return sock;
</Insert>
<Copy StartSeek="9103" EndSeek="9517"/>
</Delta>
<Delta Version="42" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:21:38000">
<Copy StartSeek="0" EndSeek="9186"/>
<Insert>	if (bind(sock,(struct sockaddr *)&amp;addr,sizeof(addr))&lt;0)
</Insert>
<Copy StartSeek="9257" EndSeek="9531"/>
</Delta>
<Delta Version="43" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:22:43000">
<Copy StartSeek="0" EndSeek="9186"/>
<Insert>	if (kernel_bind(klna_socket,(struct sockaddr *)&amp;addr,sizeof(addr))&lt;0)
</Insert>
<Copy StartSeek="9266" EndSeek="9540"/>
</Delta>
<Delta Version="44" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:23:36000">
<Copy StartSeek="0" EndSeek="9256"/>
<Insert>	if ()&lt;0)
</Insert>
<Copy StartSeek="9269" EndSeek="9543"/>
</Delta>
<Delta Version="45" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:23:39000">
<Copy StartSeek="0" EndSeek="9186"/>
<Insert>	ret = kernel_bind(klna_socket,(struct sockaddr *)&amp;addr,sizeof(addr);
</Insert>
<Copy StartSeek="9257" EndSeek="9544"/>
</Delta>
<Delta Version="46" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:23:43000">
<Copy StartSeek="0" EndSeek="9186"/>
<Insert>	ret = kernel_bind(klna_socket,(struct sockaddr *)&amp;addr,sizeof(addr));
</Insert>
<Copy StartSeek="9259" EndSeek="9546"/>
</Delta>
<Delta Version="47" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:23:51000">
<Copy StartSeek="0" EndSeek="9186"/>
<Insert>	ret = kernel_bind(klna_socket, (struct sockaddr *)&amp;addr, sizeof(addr));
</Insert>
<Copy StartSeek="9264" EndSeek="9551"/>
</Delta>
<Delta Version="48" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:24:1000">
<Copy StartSeek="0" EndSeek="9186"/>
<Insert>	ret = kernel_bind(klna_socket, (struct sockaddr *)&amp;addr,
			  sizeof(addr));
</Insert>
<Copy StartSeek="9259" EndSeek="9546"/>
</Delta>
<Delta Version="49" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:24:4000">
<Copy StartSeek="0" EndSeek="9259"/>
<Insert>	if (ret &lt;0)
		return -1;
</Insert>
<Copy StartSeek="9308" EndSeek="9569"/>
</Delta>
<Delta Version="50" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:24:17000">
<Copy StartSeek="0" EndSeek="9274"/>
<Insert>		pr_err("bind err %d\n", rc);
</Insert>
<Copy StartSeek="9298" EndSeek="9562"/>
</Delta>
<Delta Version="51" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:24:25000">
<Copy StartSeek="0" EndSeek="9298"/>
<Insert>	}
</Insert>
<Copy StartSeek="9314" EndSeek="9575"/>
</Delta>
<Delta Version="52" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:24:29000">
<Copy StartSeek="0" EndSeek="9012"/>
<Insert>		pr_err("socket err %d\n", rc);
</Insert>
<Copy StartSeek="9052" EndSeek="9582"/>
</Delta>
<Delta Version="53" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:24:39000">
<Copy StartSeek="0" EndSeek="6803"/>
<Insert>		status = kernel_recvmsg(sock, &amp;msg, 0);
</Insert>
<Copy StartSeek="6852" EndSeek="9589"/>
</Delta>
<Delta Version="54" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:25:52000">
<Copy StartSeek="0" EndSeek="6391"/>
<Insert>static int klna_nl_parse_info(int sock)
</Insert>
<Copy StartSeek="6427" EndSeek="9585"/>
</Delta>
<Delta Version="55" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:26:0000">
<Copy StartSeek="0" EndSeek="9324"/>
<Insert>	return sock;
</Insert>
<Copy StartSeek="9335" EndSeek="9582"/>
</Delta>
<Delta Version="56" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:26:17000">
<Copy StartSeek="0" EndSeek="9324"/>
<Copy StartSeek="9325" EndSeek="9583"/>
</Delta>
<Delta Version="57" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:26:18000">
<Copy StartSeek="0" EndSeek="9371"/>
<Insert>	int nls = klna_nl_open();
	if (nls&lt;0) {
		err(1,"netlink");
</Insert>
<Copy StartSeek="9426" EndSeek="9577"/>
</Delta>
<Delta Version="58" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:26:43000">
<Copy StartSeek="0" EndSeek="9371"/>
<Insert>	;
</Insert>
<Copy StartSeek="9371" EndSeek="9423"/>
<Insert>	}
	
</Insert>
<Copy StartSeek="9429" EndSeek="9575"/>
</Delta>
<Delta Version="59" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:26:57000">
<Copy StartSeek="0" EndSeek="9423"/>
<Insert>
</Insert>
<Copy StartSeek="9443" EndSeek="9594"/>
</Delta>
<Delta Version="60" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:27:8000">
<Copy StartSeek="0" EndSeek="9423"/>
<Insert>		return -EINVALID;
</Insert>
<Copy StartSeek="9441" EndSeek="9592"/>
</Delta>
<Delta Version="61" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:27:16000">
<Copy StartSeek="0" EndSeek="9446"/>
<Insert>//      klna_nl_parse_info(nls);
</Insert>
<Copy StartSeek="9469" EndSeek="9582"/>
</Delta>
<Delta Version="62" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:27:21000">
<Copy StartSeek="0" EndSeek="8895"/>
<Copy StartSeek="8915" EndSeek="9602"/>
</Delta>
<Delta Version="63" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:34:13000">
<Copy StartSeek="0" EndSeek="9091"/>
<Copy StartSeek="9093" EndSeek="9134"/>
<Insert>
</Insert>
<Copy StartSeek="9134" EndSeek="9290"/>
<Copy StartSeek="9291" EndSeek="9604"/>
</Delta>
<Delta Version="64" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:34:24000">
<Copy StartSeek="0" EndSeek="9092"/>
<Insert>
</Insert>
<Copy StartSeek="9092" EndSeek="9603"/>
</Delta>
<Delta Version="65" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:34:26000">
<Copy StartSeek="0" EndSeek="9346"/>
<Copy StartSeek="9516" EndSeek="9773"/>
</Delta>
<Delta Version="66" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:35:30000">
<Copy StartSeek="0" EndSeek="9396"/>
<Insert>	sock-&gt;sk_user_data	= local;
</Insert>
<Copy StartSeek="9396" EndSeek="9744"/>
</Delta>
<Delta Version="67" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:36:18000">
<Copy StartSeek="0" EndSeek="8807"/>
<Copy StartSeek="11301" EndSeek="12238"/>
</Delta>
<Delta Version="68" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:43:24000">
<Copy StartSeek="0" EndSeek="11890"/>
<Insert>	sock-&gt;sk_data_ready	= rxrpc_data_ready;
</Insert>
<Copy StartSeek="11933" EndSeek="12240"/>
</Delta>
<Delta Version="69" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:43:43000">
<Copy StartSeek="0" EndSeek="11933"/>
<Insert>	sock-&gt;sk_error_report	= rxrpc_UDP_error_report;

</Insert>
<Copy StartSeek="11935" EndSeek="12192"/>
</Delta>
<Delta Version="70" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:44:6000">
<Copy StartSeek="0" EndSeek="11890"/>
<Insert>	sock-&gt;sk_data_ready	= klna_nl_data_ready;
</Insert>
<Copy StartSeek="11933" EndSeek="12192"/>
</Delta>
<Delta Version="71" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:44:11000">
<Copy StartSeek="0" EndSeek="8885"/>
<Insert>static int klna_nl_data_ready(void)
</Insert>
<Copy StartSeek="8944" EndSeek="12215"/>
</Delta>
<Delta Version="72" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:44:29000">
<Copy StartSeek="0" EndSeek="9316"/>
<Insert>		status = kernel_recvmsg(klna_socket, &amp;msg, 0);
</Insert>
<Copy StartSeek="9366" EndSeek="12216"/>
</Delta>
<Delta Version="73" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="17:48:42000">
<Copy StartSeek="0" EndSeek="6468"/>
<Insert>
</Insert>
<Copy StartSeek="6491" EndSeek="6821"/>
<Insert>		status = kernel_recvmsg(klna_socket, &amp;msg, 0);
</Insert>
<Copy StartSeek="6864" EndSeek="12232"/>
</Delta>
<Delta Version="74" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:03:16000">
<Copy StartSeek="0" EndSeek="6864"/>
<Insert>		if (status &lt; 0) {
</Insert>
<Copy StartSeek="6881" EndSeek="12229"/>
</Delta>
<Delta Version="75" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:04:11000">
<Copy StartSeek="0" EndSeek="6864"/>
<Insert>		if (skb &lt; 0) {
</Insert>
<Copy StartSeek="6881" EndSeek="12229"/>
</Delta>
<Delta Version="76" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:04:45000">
<Copy StartSeek="0" EndSeek="6864"/>
<Insert>		if (err &lt; 0) {
</Insert>
<Copy StartSeek="6877" EndSeek="12225"/>
</Delta>
<Delta Version="77" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:04:48000">
<Copy StartSeek="0" EndSeek="6491"/>
<Insert>	while (1) {
		char buf[4096];
		struct iovec iov = { 
			.iov_base = buf, 
			.iov_len = sizeof(buf),
		};
		struct sockaddr_nl snl;
		struct msghdr msg = {
			.msg_name = (void*)&amp;snl, 
			.msg_namelen = sizeof(snl), 
			.msg_iov = &amp;iov, 
			.msg_iovlen = 1,
		};
</Insert>
<Copy StartSeek="6842" EndSeek="12311"/>
</Delta>
<Delta Version="78" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:05:7000">
<Copy StartSeek="0" EndSeek="6391"/>
<Insert>static int klna_nl_parse_info(void)
</Insert>
<Copy StartSeek="6450" EndSeek="6986"/>
<Insert>			if (errno == EINTR)
				continue;
			if (errno == EWOULDBLOCK)
				break;
			printk("recvmsg overrun");
			continue;
		}
		if (status == 0) {
			printk("EOF");
			return -1;
		}
		if (msg.msg_namelen != sizeof snl) {
			printk("sender address length error",
			       msg.msg_namelen);
			return -1;
		}
		for (h = (struct nlmsghdr *)buf; NLMSG_OK(h, status); 
		    h = NLMSG_NEXT(h, status)) {
			/* Finish of reading. */
			if (h-&gt;nlmsg_type == NLMSG_DONE)
				return ret;

			/* Error handling. */
			if (h-&gt;nlmsg_type == NLMSG_ERROR) {
				struct nlmsgerr *err = (struct nlmsgerr *) NLMSG_DATA (h);
				if (h-&gt;nlmsg_len &lt; NLMSG_LENGTH (sizeof (struct nlmsgerr))) {
					printk("error: message truncated");
					return -1;
				}
				printk("error: %s, type=%s(%u), seq=%u, pid=%d",
				      strerror(-err-&gt;error),
				      klna_nl_lookup_name(typenames,err-&gt;msg.nlmsg_type),
				      err-&gt;msg.nlmsg_type, err-&gt;msg.nlmsg_seq,
				      err-&gt;msg.nlmsg_pid);
				return -1;
			}
			#ifdef KLNA_NOARP
			if (h-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
			    h-&gt;nlmsg_type != RTM_DELNEIGH)
			#endif
			printk("nlmsg_type: %i (%s)\n",(h-&gt;nlmsg_type), 
			       klna_nl_lookup_name(typenames,h-&gt;nlmsg_type));
			
			/* OK we got netlink message. */
			switch (h-&gt;nlmsg_type) {
			case RTM_NEWROUTE:
			case RTM_DELROUTE:
				ret = klna_nl_ev_route(h, NLMSG_DATA(buf));
				break;
			#ifndef KLNA_NOARP
			case RTM_NEWNEIGH:
			case RTM_DELNEIGH:
				ret = klna_nl_ev_arp(h, NLMSG_DATA(buf));
				break;
			#endif
			case RTM_NEWLINK:
			case RTM_DELLINK:
//      			ret = klna_ev_link(h, NLMSG_DATA(buf));
				ret = netlink_interface(h);
				break;
			}
		}
		/* After error care. */
		if (msg.msg_flags &amp; MSG_TRUNC) {
			printk("error: message truncated");
			continue;
		}
		if (status) {
			printk("error: data remnant size %d", status);
			return -1;
		}
		if (ret) {
			printk("error: message parsing\n");
			break;
		}
	}
	return ret;
}

/* Receive message from netlink and pass information to relevant function. */
static void klna_nl_data_ready(struct sock *sk, int bytes)
{
	int status;
	int ret = 0;
	int error;

	while (1) {
		char buf[4096];
		struct iovec iov = { 
			.iov_base = buf, 
			.iov_len = sizeof(buf),
		};
		struct sockaddr_nl snl;
		struct msghdr msg = {
			.msg_name = (void*)&amp;snl, 
			.msg_namelen = sizeof(snl), 
			.msg_iov = &amp;iov, 
			.msg_iovlen = 1,
		};
		struct nlmsghdr *h;

//      	status = recvmsg(sock, &amp;msg, 0);
		status = kernel_recvmsg(klna_socket, &amp;msg, 0,);
		if (status &lt; 0) {
			if (errno == EINTR)
				continue;
			if (errno == EWOULDBLOCK)
				break;
			printk("recvmsg overrun");
</Insert>
<Copy StartSeek="7128" EndSeek="8941"/>
<Insert>	}
</Insert>
<Copy StartSeek="8951" EndSeek="9858"/>
</Delta>
<Delta Version="79" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:07:2000">
<Copy StartSeek="0" EndSeek="7091"/>
<Insert>//      		printk("recvmsg overrun");
			continue;
</Insert>
<Copy StartSeek="7131" EndSeek="9848"/>
</Delta>
<Delta Version="80" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:07:30000">
<Copy StartSeek="0" EndSeek="7135"/>
<Insert>		if (status == 0) {
			printk("EOF");
			return -1;
		}
</Insert>
<Copy StartSeek="7135" EndSeek="9791"/>
</Delta>
<Delta Version="81" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:07:36000">
<Copy StartSeek="0" EndSeek="7135"/>
<Insert>		if (msg.msg_namelen != sizeof snl) {
			printk("sender address length error",
			       msg.msg_namelen);
			return -1;
		}
</Insert>
<Copy StartSeek="7135" EndSeek="9665"/>
</Delta>
<Delta Version="82" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:07:42000">
<Copy StartSeek="0" EndSeek="6513"/>
<Insert>
</Insert>
<Copy StartSeek="6535" EndSeek="6886"/>
<Insert>		struct nlmsghdr *h;
</Insert>
<Copy StartSeek="6889" EndSeek="9667"/>
</Delta>
<Delta Version="83" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:07:56000">
<Copy StartSeek="0" EndSeek="7137"/>
<Insert>		for (h = (struct nlmsghdr *)buf; NLMSG_OK(h, status); 
</Insert>
<Copy StartSeek="7200" EndSeek="9673"/>
</Delta>
<Delta Version="84" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:08:31000">
<Copy StartSeek="0" EndSeek="7137"/>
<Insert>		for (h = (struct nlmsghdr *)skb-&gt;data; NLMSG_OK(h, status); 
</Insert>
<Copy StartSeek="7194" EndSeek="9667"/>
</Delta>
<Delta Version="85" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:09:13000">
<Copy StartSeek="0" EndSeek="6534"/>
<Insert>
</Insert>
<Copy StartSeek="6546" EndSeek="7148"/>
<Copy StartSeek="7167" EndSeek="9697"/>
</Delta>
<Delta Version="86" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:09:51000">
<Copy StartSeek="0" EndSeek="8513"/>
<Copy StartSeek="8514" EndSeek="8614"/>
<Insert>			continue;
</Insert>
<Copy StartSeek="8617" EndSeek="8687"/>
<Insert>			return -1;
</Insert>
<Copy StartSeek="8690" EndSeek="8746"/>
<Insert>			break;
</Insert>
<Copy StartSeek="8750" EndSeek="8754"/>
<Copy StartSeek="8791" EndSeek="9708"/>
</Delta>
<Delta Version="87" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:14:50000">
<Copy StartSeek="0" EndSeek="8754"/>
<Copy StartSeek="8755" EndSeek="9709"/>
</Delta>
<Delta Version="88" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:14:52000">
<Copy StartSeek="0" EndSeek="8802"/>
<Insert>	return ret;
</Insert>
<Copy StartSeek="8819" EndSeek="9713"/>
</Delta>
<Delta Version="89" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:15:1000">
<Copy StartSeek="0" EndSeek="8540"/>
<Insert>		if (msg.msg_flags &amp; MSG_TRUNC) {
			printk("error: message truncated");
		
		}
		if (status) {
			printk("error: data remnant size %d", status);
		
		}
		if (ret) {
			printk("error: message parsing\n");
			
		}
</Insert>
<Copy StartSeek="8816" EndSeek="9775"/>
</Delta>
<Delta Version="90" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:15:16000">
<Copy StartSeek="0" EndSeek="6986"/>
<Insert>		if (err) {
</Insert>
<Copy StartSeek="6999" EndSeek="9775"/>
</Delta>
<Delta Version="91" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:15:58000">
<Copy StartSeek="0" EndSeek="7323"/>
<Insert>				return ret;
</Insert>
<Copy StartSeek="7335" EndSeek="9771"/>
</Delta>
<Delta Version="92" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:16:12000">
<Copy StartSeek="0" EndSeek="7570"/>
<Insert>					return -1;
</Insert>
<Copy StartSeek="7583" EndSeek="9768"/>
</Delta>
<Delta Version="93" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:16:15000">
<Copy StartSeek="0" EndSeek="7819"/>
<Insert>				return -1;
</Insert>
<Copy StartSeek="7831" EndSeek="9765"/>
</Delta>
<Delta Version="94" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:16:20000">
<Copy StartSeek="0" EndSeek="7589"/>
<Insert>				printk("error: %s, type=%s(%u), seq=%u, pid=%d",
				      strerror(-err-&gt;error),
				      klna_nl_lookup_name(typenames,err-&gt;msg.nlmsg_type),
				      err-&gt;msg.nlmsg_type, err-&gt;msg.nlmsg_seq,
				      err-&gt;msg.nlmsg_pid);
</Insert>
<Copy StartSeek="7589" EndSeek="9535"/>
</Delta>
<Delta Version="95" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:16:46000">
<Copy StartSeek="0" EndSeek="7400"/>
<Insert>				struct nlmsgerr *err = (struct nlmsgerr *) NLMSG_DATA (h);
</Insert>
<Copy StartSeek="7470" EndSeek="9542"/>
</Delta>
<Delta Version="96" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:17:10000">
<Copy StartSeek="0" EndSeek="6479"/>
<Insert>	int error;
</Insert>
<Copy StartSeek="6498" EndSeek="9549"/>
</Delta>
<Delta Version="97" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:17:18000">
<Copy StartSeek="0" EndSeek="9014"/>
<Insert>	addr.nl_pid = getpid();
</Insert>
<Copy StartSeek="9032" EndSeek="9542"/>
</Delta>
<Delta Version="98" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:17:37000">
<Copy StartSeek="0" EndSeek="315"/>
<Copy StartSeek="346" EndSeek="9573"/>
</Delta>
<Delta Version="99" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:18:28000">
<Copy StartSeek="0" EndSeek="346"/>
<Copy StartSeek="371" EndSeek="9598"/>
</Delta>
<Delta Version="100" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:18:51000">
<Copy StartSeek="0" EndSeek="9116"/>
<Insert>	ret = kernel_bind(klna_socket, (struct sockaddr *)&amp;addr, sizeof(addr));
</Insert>
<Copy StartSeek="9188" EndSeek="9597"/>
</Delta>
<Delta Version="101" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:19:31000">
<Copy StartSeek="0" EndSeek="9189"/>
<Insert>	if (ret &lt;0) {
</Insert>
<Copy StartSeek="9203" EndSeek="9596"/>
</Delta>
<Delta Version="102" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:19:45000">
<Copy StartSeek="0" EndSeek="278"/>
<Copy StartSeek="300" EndSeek="9618"/>
</Delta>
<Delta Version="103" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:20:15000">
<Copy StartSeek="0" EndSeek="277"/>
<Insert>
</Insert>
<Copy StartSeek="277" EndSeek="299"/>
<Copy StartSeek="300" EndSeek="9618"/>
</Delta>
<Delta Version="104" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:20:27000">
<Copy StartSeek="0" EndSeek="193"/>
<Insert>
</Insert>
<Copy StartSeek="193" EndSeek="9617"/>
</Delta>
<Delta Version="105" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:20:29000">
<Copy StartSeek="0" EndSeek="9481"/>
<Insert>	klna_nl_parse_info();
</Insert>
<Copy StartSeek="9511" EndSeek="9624"/>
</Delta>
<Delta Version="106" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:20:41000">
<Copy StartSeek="0" EndSeek="6529"/>
<Insert>	int status;
</Insert>
<Copy StartSeek="6546" EndSeek="9628"/>
</Delta>
<Delta Version="107" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:22:32000">
<Copy StartSeek="0" EndSeek="9529"/>
<Copy StartSeek="9565" EndSeek="9591"/>
<Copy StartSeek="9617" EndSeek="9690"/>
</Delta>
<Delta Version="108" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:23:7000">
<Copy StartSeek="0" EndSeek="9565"/>
<Insert>module_init(klna_nl_init)
module_exit(klna_nl_exit)
</Insert>
<Copy StartSeek="9619" EndSeek="9692"/>
</Delta>
<Delta Version="109" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:23:13000">
<Copy StartSeek="0" EndSeek="9562"/>
<Insert>
}
</Insert>
<Copy StartSeek="9640" EndSeek="9767"/>
</Delta>
<Delta Version="110" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:24:21000">
<Copy StartSeek="0" EndSeek="9637"/>
<Insert>
}
</Insert>
<Copy StartSeek="9639" EndSeek="9766"/>
</Delta>
<Delta Version="111" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:24:26000">
<Copy StartSeek="0" EndSeek="299"/>
<Copy StartSeek="334" EndSeek="9801"/>
</Delta>
<Delta Version="112" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:25:0000">
<Copy StartSeek="0" EndSeek="6669"/>
<Copy StartSeek="6750" EndSeek="9882"/>
</Delta>
<Delta Version="113" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:27:3000">
<Copy StartSeek="0" EndSeek="7352"/>
<Insert>		buf = skb-&gt;data;
</Insert>
<Copy StartSeek="7393" EndSeek="9904"/>
</Delta>
<Delta Version="114" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:29:45000">
<Copy StartSeek="0" EndSeek="7352"/>
<Insert>		buf = skb-&gt;data + sizeof(sockaddr_nl);
</Insert>
<Copy StartSeek="7400" EndSeek="9911"/>
</Delta>
<Delta Version="115" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:30:17000">
<Copy StartSeek="0" EndSeek="7352"/>
<Insert>		buf = skb-&gt;data + sizeof(struct sockaddr_nl);
</Insert>
<Copy StartSeek="7371" EndSeek="9882"/>
</Delta>
<Delta Version="116" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:31:53000">
<Copy StartSeek="0" EndSeek="7371"/>
<Copy StartSeek="7388" EndSeek="9899"/>
</Delta>
<Delta Version="117" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:32:0000">
<Copy StartSeek="0" EndSeek="7371"/>
<Insert>		dump_skb(skb);
</Insert>
<Copy StartSeek="7386" EndSeek="9897"/>
</Delta>
<Delta Version="118" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:32:17000">
<Copy StartSeek="0" EndSeek="7371"/>
<Insert>		skb_du(skb);
</Insert>
<Copy StartSeek="7388" EndSeek="9899"/>
</Delta>
<Delta Version="119" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:32:20000">
<Copy StartSeek="0" EndSeek="6425"/>
<Copy StartSeek="6426" EndSeek="9900"/>
</Delta>
<Delta Version="120" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:34:39000">
<Copy StartSeek="0" EndSeek="6425"/>
<Insert>
</Insert>
<Copy StartSeek="6748" EndSeek="10222"/>
</Delta>
<Delta Version="121" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:52:5000">
<Copy StartSeek="0" EndSeek="7694"/>
<Insert>		skb_dump(skb);
</Insert>
<Copy StartSeek="7711" EndSeek="10222"/>
</Delta>
<Delta Version="122" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:52:10000">
<Copy StartSeek="0" EndSeek="7694"/>
<Copy StartSeek="7705" EndSeek="10233"/>
</Delta>
<Delta Version="123" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:58:20000">
<Copy StartSeek="0" EndSeek="7694"/>
<Insert>		h = buf;
</Insert>
<Copy StartSeek="7724" EndSeek="10252"/>
</Delta>
<Delta Version="124" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="18:58:30000">
<Copy StartSeek="0" EndSeek="7694"/>
<Insert>		h = (struct nlmsghdr *)buf;
</Insert>
<Copy StartSeek="7694" EndSeek="10222"/>
</Delta>
<Delta Version="125" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="19:00:59000">
<Copy StartSeek="0" EndSeek="7711"/>
<Insert>		for (h = (struct nlmsghdr *)buf; NLMSG_OK(h, status); 
</Insert>
<Copy StartSeek="7767" EndSeek="10221"/>
</Delta>
<Delta Version="126" Comment="" NL="\10" Encoding="text" Date="2012/04/15" Time="19:01:16000">
<Copy StartSeek="0" EndSeek="9194"/>
<Copy StartSeek="9415" EndSeek="9628"/>
<Copy StartSeek="9751" EndSeek="10565"/>
</Delta>
<Delta Version="127" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:52:10000">
<Copy StartSeek="0" EndSeek="9255"/>
<Insert>	sk = netlink_kernel_create(&amp;init_net, NETLINK_ROUTE, RTNLGRP_MAX,
				   rtnetlink_rcv, &amp;rtnl_mutex, THIS_MODULE);
</Insert>
<Copy StartSeek="9366" EndSeek="10560"/>
</Delta>
<Delta Version="128" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:52:26000">
<Copy StartSeek="0" EndSeek="6826"/>
<Insert>static void klna_nl_data_ready(struct sock *sk, int bytes)
</Insert>
<Copy StartSeek="6882" EndSeek="9316"/>
<Insert>				   klna_nl_data_ready, NULL, THIS_MODULE);
</Insert>
<Copy StartSeek="9360" EndSeek="9689"/>
<Insert>				    klna_nl_data_ready, NULL, THIS_MODULE);
</Insert>
<Copy StartSeek="9734" EndSeek="10104"/>
<Insert>	sock-&gt;sk_data_ready = klna_nl_data_ready;
</Insert>
<Copy StartSeek="10144" EndSeek="10548"/>
</Delta>
<Delta Version="129" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:52:41000">
<Copy StartSeek="0" EndSeek="9617"/>
<Insert>	audit_sock = netlink_kernel_create(&amp;init_net, NETLINK_ROUTE, KLNA_GRP,
				    klna_nl_receive, NULL, THIS_MODULE);



</Insert>
<Copy StartSeek="9618" EndSeek="10429"/>
</Delta>
<Delta Version="130" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:53:0000">
<Copy StartSeek="0" EndSeek="9390"/>
<Copy StartSeek="9409" EndSeek="10448"/>
</Delta>
<Delta Version="131" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:53:29000">
<Copy StartSeek="0" EndSeek="899"/>
<Insert>struct socket *klna_socket;
</Insert>
<Copy StartSeek="925" EndSeek="10446"/>
</Delta>
<Delta Version="132" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:53:35000">
<Copy StartSeek="0" EndSeek="9529"/>
<Insert>	struct sockaddr_nl addr;
	int rc = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE, &amp;klna_socket);
</Insert>
<Copy StartSeek="9647" EndSeek="9721"/>
<Insert>	memset((void *)&amp;addr, 0, sizeof(addr));
	addr.nl_family = AF_NETLINK;
	addr.nl_pid = 0;
	addr.nl_groups = KLNA_GRP;
	rc = kernel_bind(klna_socket, (struct sockaddr *)&amp;addr, sizeof(addr));

</Insert>
<Copy StartSeek="9948" EndSeek="10028"/>
<Insert>	sock = klna_socket-&gt;sk;
	sock-&gt;sk_data_ready = klna_nl_receive;
</Insert>
<Copy StartSeek="10107" EndSeek="10511"/>
</Delta>
<Delta Version="133" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:54:21000">
<Copy StartSeek="0" EndSeek="9648"/>
<Insert>
</Insert>
<Copy StartSeek="9685" EndSeek="10547"/>
</Delta>
<Delta Version="134" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:54:48000">
<Copy StartSeek="0" EndSeek="9984"/>
<Insert>	if (rc &lt;0) {
		pr_err("bind err\n");
		return rc;
	}
</Insert>
<Copy StartSeek="10066" EndSeek="10575"/>
</Delta>
<Delta Version="135" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:54:53000">
<Copy StartSeek="0" EndSeek="9446"/>
<Insert>//      int sock = socket(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE);
</Insert>
<Copy StartSeek="9446" EndSeek="9466"/>
<Insert>//      struct sockaddr_nl addr;
//      int rc = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE, &amp;klna_socket);
</Insert>
<Copy StartSeek="9570" EndSeek="9571"/>
<Insert>	int rc = klna_rtnetlink_net_init();
</Insert>
<Copy StartSeek="9572" EndSeek="9644"/>
<Insert>//      memset((void *)&amp;addr, 0, sizeof(addr));
//      addr.nl_family = AF_NETLINK;
//      addr.nl_pid = 0;
//      addr.nl_groups = KLNA_GRP;
//      rc = kernel_bind(klna_socket, (struct sockaddr *)&amp;addr, sizeof(addr));
//
//      if (rc &lt;0) {
//      	pr_err("bind err\n");
//      	return rc;
//      }
</Insert>
<Copy StartSeek="9888" EndSeek="9914"/>
<Insert>//      sock = klna_socket-&gt;sk;
//      sock-&gt;sk_data_ready = klna_nl_receive;
</Insert>
<Copy StartSeek="9979" EndSeek="10383"/>
</Delta>
<Delta Version="136" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:55:38000">
<Copy StartSeek="0" EndSeek="9421"/>
<Copy StartSeek="9427" EndSeek="10000"/>
<Insert>
</Insert>
<Copy StartSeek="10008" EndSeek="10040"/>
<Insert>	if (klna_nl_open()) {
</Insert>
<Copy StartSeek="10175" EndSeek="10225"/>
<Insert>	
</Insert>
<Copy StartSeek="10228" EndSeek="10509"/>
</Delta>
<Delta Version="137" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="09:56:16000">
<Copy StartSeek="0" EndSeek="10040"/>
<Copy StartSeek="10054" EndSeek="10155"/>
<Insert>	if (klna_rtnetlink_net_init()) {
</Insert>
<Copy StartSeek="10201" EndSeek="10230"/>
<Insert>		return -EINVAL;
</Insert>
<Copy StartSeek="10244" EndSeek="10280"/>
<Insert>	return 0;
</Insert>
<Copy StartSeek="10293" EndSeek="10533"/>
</Delta>
<Delta Version="138" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:00:51000">
<Copy StartSeek="0" EndSeek="899"/>
<Insert>struct sock *klna_socket;
</Insert>
<Copy StartSeek="923" EndSeek="9386"/>
<Insert>	klna_socket = sk;
</Insert>
<Copy StartSeek="9403" EndSeek="9494"/>
<Insert>	int rc = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE, &amp;klna_socket);
</Insert>
<Copy StartSeek="9570" EndSeek="9761"/>
<Insert>	rc = kernel_bind(klna_socket, (struct sockaddr *)&amp;addr, sizeof(addr));
</Insert>
<Copy StartSeek="9831" EndSeek="9912"/>
<Insert>	sock = klna_socket-&gt;sk;
</Insert>
<Copy StartSeek="9935" EndSeek="10319"/>
<Insert>	kernel_sock_shutdown(klna_socket, SHUT_RDWR);
	sock_release(klna_socket);
}
</Insert>
<Copy StartSeek="10463" EndSeek="10590"/>
</Delta>
<Delta Version="139" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:02:21000">
<Copy StartSeek="0" EndSeek="10442"/>
<Insert>	net-&gt;rtnl = NULL;
</Insert>
<Copy StartSeek="10461" EndSeek="10590"/>
</Delta>
<Delta Version="140" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:02:27000">
<Copy StartSeek="0" EndSeek="6822"/>
<Insert>static void klna_nl_receive(struct sock *sk, int bytes)
</Insert>
<Copy StartSeek="6871" EndSeek="10583"/>
</Delta>
<Delta Version="141" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:05:6000">
<Copy StartSeek="0" EndSeek="6923"/>
<Insert>	struct sk_buff *skb;
</Insert>
<Copy StartSeek="6952" EndSeek="10590"/>
</Delta>
<Delta Version="142" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:05:8000">
<Copy StartSeek="0" EndSeek="6744"/>
<Copy StartSeek="6875" EndSeek="10721"/>
</Delta>
<Delta Version="143" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:05:40000">
<Copy StartSeek="0" EndSeek="6744"/>
<Insert>static void klna_rtnetlink_rcv(struct sk_buff *skb)
</Insert>
<Copy StartSeek="6789" EndSeek="10714"/>
</Delta>
<Delta Version="144" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:06:27000">
<Copy StartSeek="0" EndSeek="9436"/>
<Insert>				   klna_nl_receive, NULL, THIS_MODULE);
</Insert>
<Copy StartSeek="9476" EndSeek="10710"/>
</Delta>
<Delta Version="145" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:06:49000">
<Copy StartSeek="0" EndSeek="6744"/>
<Insert>static void klna_nl_rcv(struct sk_buff *skb)
{
	rtnl_lock();
	netlink_rcv_skb(skb, &amp;rtnetlink_rcv_msg);
	rtnl_unlock();
}


</Insert>
<Copy StartSeek="6745" EndSeek="9188"/>
<Copy StartSeek="9311" EndSeek="10710"/>
</Delta>
<Delta Version="146" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:07:39000">
<Copy StartSeek="0" EndSeek="9249"/>
<Insert>	netlink_rcv_skb(skb, &amp;rtnetlink_rcv_msg);
</Insert>
<Copy StartSeek="9290" EndSeek="10708"/>
</Delta>
<Delta Version="147" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:08:25000">
<Copy StartSeek="0" EndSeek="6823"/>
<Insert>static void klna_nl_receive(struct sk_buff *skb)
</Insert>
<Copy StartSeek="6872" EndSeek="10708"/>
</Delta>
<Delta Version="148" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:08:28000">
<Copy StartSeek="0" EndSeek="6823"/>
<Insert>static void klna_nl_rcv_msg(struct sk_buff *skb)
</Insert>
<Copy StartSeek="6871" EndSeek="10707"/>
</Delta>
<Delta Version="149" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:08:47000">
<Copy StartSeek="0" EndSeek="6823"/>
<Insert>static int klna_nl_rcv_msg(struct sk_buff *skb)
</Insert>
<Copy StartSeek="6891" EndSeek="6972"/>
<Insert>	struct nlmsghdr *h;
</Insert>
<Copy StartSeek="7000" EndSeek="10734"/>
</Delta>
<Delta Version="150" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:09:21000">
<Copy StartSeek="0" EndSeek="7000"/>
<Insert>	char *buf;
</Insert>
<Copy StartSeek="7019" EndSeek="10741"/>
</Delta>
<Delta Version="151" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:09:28000">
<Copy StartSeek="0" EndSeek="7019"/>
<Insert>	printk(KERN_ERR "(%s:%d) got a message %u bytes\n", __func__, __LINE__, bytes);
</Insert>
<Copy StartSeek="7107" EndSeek="10748"/>
</Delta>
<Delta Version="152" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:09:47000">
<Copy StartSeek="0" EndSeek="7504"/>
<Insert>		skb = skb_recv_datagram(sk, 0, 1, &amp;ret);
</Insert>
<Copy StartSeek="7554" EndSeek="10755"/>
</Delta>
<Delta Version="153" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:09:55000">
<Copy StartSeek="0" EndSeek="7554"/>
<Insert>		if (ret) {
</Insert>
<Copy StartSeek="7574" EndSeek="7679"/>
<Insert>			printk("err skb_recv\n");
			return;
		}
</Insert>
<Copy StartSeek="7744" EndSeek="10783"/>
</Delta>
<Delta Version="154" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:10:2000">
<Copy StartSeek="0" EndSeek="7935"/>
<Insert>				return;
</Insert>
<Copy StartSeek="7949" EndSeek="10785"/>
</Delta>
<Delta Version="155" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:10:33000">
<Copy StartSeek="0" EndSeek="8191"/>
<Insert>					return;
</Insert>
<Copy StartSeek="8212" EndSeek="10793"/>
</Delta>
<Delta Version="156" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:11:22000">
<Copy StartSeek="0" EndSeek="8218"/>
<Insert>				return;
</Insert>
<Copy StartSeek="8232" EndSeek="10795"/>
</Delta>
<Delta Version="157" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:11:34000">
<Copy StartSeek="0" EndSeek="8218"/>
<Insert>				return 0;
</Insert>
<Copy StartSeek="8245" EndSeek="10808"/>
</Delta>
<Delta Version="158" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:11:46000">
<Copy StartSeek="0" EndSeek="8218"/>
<Insert>				return return -EINVAL;
</Insert>
<Copy StartSeek="8238" EndSeek="10801"/>
</Delta>
<Delta Version="159" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:11:47000">
<Copy StartSeek="0" EndSeek="9261"/>
<Insert>//      return ;
</Insert>
<Copy StartSeek="9275" EndSeek="10798"/>
</Delta>
<Delta Version="160" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:12:0000">
<Copy StartSeek="0" EndSeek="7000"/>
<Insert>//      char *buf;
</Insert>
<Copy StartSeek="7012" EndSeek="10791"/>
</Delta>
<Delta Version="161" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:12:31000">
<Copy StartSeek="0" EndSeek="9453"/>
<Insert>	sk = netlink_kernel_create(&amp;init_net, NETLINK_ROUTE, KLNA_GRP,
</Insert>
<Copy StartSeek="9536" EndSeek="10810"/>
</Delta>
<Delta Version="162" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:14:22000">
<Copy StartSeek="0" EndSeek="9453"/>
<Insert>	sk = netlink_kernel_create(&amp;init_net, NETLINK_GENERIC/*NETLINK_ROUTE*/, KLNA_GRP,
</Insert>
<Copy StartSeek="9536" EndSeek="10810"/>
</Delta>
<Delta Version="163" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:14:47000">
<Copy StartSeek="0" EndSeek="9453"/>
<Insert>	sk = netlink_kernel_create(&amp;init_net, NETLINK_UNUSED /*NETLINK_ROUTE*/, KLNA_GRP,
</Insert>
<Copy StartSeek="9517" EndSeek="10791"/>
</Delta>
<Delta Version="164" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:18:6000">
<Copy StartSeek="0" EndSeek="9318"/>
<Copy StartSeek="9378" EndSeek="10851"/>
</Delta>
<Delta Version="165" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:19:8000">
<Copy StartSeek="0" EndSeek="9271"/>
<Insert>static void klna_nl_rcv(struct sk_buff *skb)
{
	printk(KERN_ERR "(%s:%d) got MSG!\n", __func__, __LINE__);
	rtnl_lock();
	netlink_rcv_skb(skb, &amp;klna_nl_rcv_msg);
	rtnl_unlock();
}

static int klna_rtnetlink_net_init(void)
{
	struct sock *sk;
	sk = netlink_kernel_create(&amp;init_net, NETLINK_ROUTE, KLNA_GRP,
				   klna_nl_rcv, NULL, THIS_MODULE);
	if (!sk)
		return -ENOMEM;
	
	klna_sock = sk;
	return 0;
}

#if 0
</Insert>
<Copy StartSeek="9272" EndSeek="9839"/>
<Insert>#endif 
</Insert>
<Copy StartSeek="9840" EndSeek="10432"/>
</Delta>
<Delta Version="166" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:21:51000">
<Copy StartSeek="0" EndSeek="899"/>
<Insert>struct sock *klna_sock;
</Insert>
<Copy StartSeek="925" EndSeek="10434"/>
</Delta>
<Delta Version="167" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:21:58000">
<Copy StartSeek="0" EndSeek="10163"/>
<Insert>//      kernel_sock_shutdown(klna_sock-&gt;, SHUT_RDWR);
//      sock_release(klna_sock);
	netlink_kernel_release(klna_sock);
	klna_sock = NULL;
}
</Insert>
<Copy StartSeek="10238" EndSeek="10365"/>
</Delta>
<Delta Version="168" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:22:5000">
<Copy StartSeek="0" EndSeek="10163"/>
<Insert>	kernel_sock_shutdown(klna_sock-&gt;, SHUT_RDWR);
</Insert>
<Copy StartSeek="10212" EndSeek="10367"/>
</Delta>
<Delta Version="169" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:22:14000">
<Copy StartSeek="0" EndSeek="899"/>
<Insert>struct socket *klna_sock;
</Insert>
<Copy StartSeek="927" EndSeek="9347"/>
<Insert>	int rc = sock_create_kern(AF_NETLINK,SOCK_RAW, NETLINK_ROUTE, &amp;klna_sock);
</Insert>
<Copy StartSeek="9425" EndSeek="9616"/>
<Insert>	rc = kernel_bind(klna_sock, (struct sockaddr *)&amp;addr, sizeof(addr));
</Insert>
<Copy StartSeek="9688" EndSeek="9769"/>
<Insert>	sock = klna_sock-&gt;sk;
</Insert>
<Copy StartSeek="9794" EndSeek="10171"/>
<Insert>	kernel_sock_shutdown(klna_sock-&gt;sk, SHUT_RDWR);
	sock_release(klna_sock);
</Insert>
<Copy StartSeek="10250" EndSeek="10379"/>
</Delta>
<Delta Version="170" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:22:20000">
<Copy StartSeek="0" EndSeek="9896"/>
<Insert>//      if (klna_nl_open()) {
//      	pr_err("netlink error\n");
//      	return -EINVAL;
//      }
	ret = klna_rtnetlink_net_init();
	if (ret) {
</Insert>
<Copy StartSeek="9919" EndSeek="9948"/>
<Insert>		return ret;
</Insert>
<Copy StartSeek="9966" EndSeek="10259"/>
</Delta>
<Delta Version="171" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:22:40000">
<Copy StartSeek="0" EndSeek="9882"/>
<Insert>	int ret = 0;
</Insert>
<Copy StartSeek="9882" EndSeek="9988"/>
<Insert>	return ret;
</Insert>
<Copy StartSeek="9999" EndSeek="10243"/>
</Delta>
<Delta Version="172" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:22:53000">
<Copy StartSeek="0" EndSeek="9426"/>
<Insert>
</Insert>
<Copy StartSeek="9426" EndSeek="10242"/>
</Delta>
<Delta Version="173" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:23:0000">
<Copy StartSeek="0" EndSeek="9793"/>
<Insert>	sock-&gt;sk_data_ready = klna_nl_receive;
</Insert>
<Copy StartSeek="9833" EndSeek="10242"/>
</Delta>
<Delta Version="174" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:23:14000">
<Copy StartSeek="0" EndSeek="6827"/>
<Insert>static int klna_nl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *h)
</Insert>
<Copy StartSeek="6898" EndSeek="10245"/>
</Delta>
<Delta Version="175" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:23:39000">
<Copy StartSeek="0" EndSeek="9796"/>
<Insert>	sock-&gt;sk_data_ready = klna_nl_rcv_msg;
</Insert>
<Copy StartSeek="9839" EndSeek="10248"/>
</Delta>
<Delta Version="176" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:23:44000">
<Copy StartSeek="0" EndSeek="6827"/>
<Insert>static int klna_nl_data_ready(struct sk_buff *skb, struct nlmsghdr *h)
</Insert>
<Copy StartSeek="6886" EndSeek="10236"/>
</Delta>
<Delta Version="177" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:24:5000">
<Copy StartSeek="0" EndSeek="6827"/>
<Insert>static int klna_nl_data_ready((struct sock *sk, int bytes)
</Insert>
<Copy StartSeek="6885" EndSeek="10235"/>
</Delta>
<Delta Version="178" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:24:6000">
<Copy StartSeek="0" EndSeek="6827"/>
<Insert>static int klna_nl_data_ready(struct sock *sk, int bytes)
</Insert>
<Copy StartSeek="6886" EndSeek="10236"/>
</Delta>
<Delta Version="179" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:24:19000">
<Copy StartSeek="0" EndSeek="6938"/>
<Insert>//      struct sk_buff *skb;
//      struct nlmsghdr *h;
</Insert>
<Copy StartSeek="6982" EndSeek="10223"/>
</Delta>
<Delta Version="180" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:24:25000">
<Copy StartSeek="0" EndSeek="6748"/>
<Insert>
</Insert>
<Copy StartSeek="7238" EndSeek="10712"/>
</Delta>
<Delta Version="181" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:25:57000">
<Copy StartSeek="0" EndSeek="7028"/>
<Insert>		err = audit_receive_msg(skb, nlh);
</Insert>
<Copy StartSeek="7072" EndSeek="10719"/>
</Delta>
<Delta Version="182" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:26:11000">
<Copy StartSeek="0" EndSeek="7975"/>
<Insert>//      	skb = skb_recv_datagram(sk, 0, 1, &amp;ret);
</Insert>
<Copy StartSeek="8018" EndSeek="10712"/>
</Delta>
<Delta Version="183" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:26:53000">
<Copy StartSeek="0" EndSeek="8399"/>
<Insert>				return 0;
</Insert>
<Copy StartSeek="8411" EndSeek="8653"/>
<Insert>					return -EINVAL;
				}
				return -EINVAL;
			}
</Insert>
<Copy StartSeek="8676" EndSeek="10681"/>
</Delta>
<Delta Version="184" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:28:3000">
<Copy StartSeek="0" EndSeek="9694"/>
<Insert>		return ret;
</Insert>
<Copy StartSeek="9704" EndSeek="10677"/>
</Delta>
<Delta Version="185" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:28:11000">
<Copy StartSeek="0" EndSeek="7929"/>
<Insert>		
</Insert>
<Copy StartSeek="7930" EndSeek="7973"/>
<Insert>		skb = skb_recv_datagram(sk, 0, 1, &amp;ret);
</Insert>
<Copy StartSeek="8015" EndSeek="8205"/>
<Insert>		buf = skb-&gt;data;
		dump_skb(skb);
		for (h = (struct nlmsghdr *)buf; NLMSG_OK(h, status);
		    h = NLMSG_NEXT(h, status)) {
			/* Finish of reading. */
			if (h-&gt;nlmsg_type == NLMSG_DONE)
				return;
</Insert>
<Copy StartSeek="8401" EndSeek="8402"/>
<Insert>			/* Error handling. */
			if (h-&gt;nlmsg_type == NLMSG_ERROR) {
</Insert>
<Copy StartSeek="8464" EndSeek="8534"/>
<Insert>				if (h-&gt;nlmsg_len &lt; NLMSG_LENGTH (sizeof (struct nlmsgerr))) {
					printk("error: message truncated");
				}
				return;
			}
			#ifdef KLNA_NOARP
			if (h-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
			    h-&gt;nlmsg_type != RTM_DELNEIGH)
			#endif
</Insert>
<Copy StartSeek="8760" EndSeek="8869"/>
<Insert>			
			/* OK we got netlink message. */
			switch (h-&gt;nlmsg_type) {
			case RTM_NEWROUTE:
			case RTM_DELROUTE:
				ret = klna_nl_ev_route(h, NLMSG_DATA(buf));
				break;
			#ifndef KLNA_NOARP
			case RTM_NEWNEIGH:
			case RTM_DELNEIGH:
				ret = klna_nl_ev_arp(h, NLMSG_DATA(buf));
				break;
			#endif
			case RTM_NEWLINK:
			case RTM_DELLINK:
</Insert>
<Copy StartSeek="9194" EndSeek="9245"/>
<Insert>				ret = netlink_interface(h);
				break;
			}
		}
</Insert>
<Copy StartSeek="9293" EndSeek="9294"/>
<Insert>		/* After error care. */
</Insert>
<Copy StartSeek="9319" EndSeek="9596"/>
<Insert>		skb_orphan(skb);
		kfree_skb(skb);
</Insert>
<Copy StartSeek="9631" EndSeek="9641"/>
<Insert>		return;
</Insert>
<Copy StartSeek="9650" EndSeek="10623"/>
</Delta>
<Delta Version="186" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:28:18000">
<Copy StartSeek="0" EndSeek="7490"/>
<Copy StartSeek="7491" EndSeek="10624"/>
</Delta>
<Delta Version="187" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:28:21000">
<Copy StartSeek="0" EndSeek="10416"/>
<Insert>	kernel_sock_shutdown(klna_socket-&gt;sk, SHUT_RDWR);
</Insert>
<Copy StartSeek="10463" EndSeek="10620"/>
</Delta>
<Delta Version="188" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:28:48000">
<Copy StartSeek="0" EndSeek="6748"/>
<Copy StartSeek="6754" EndSeek="7249"/>
<Insert>
</Insert>
<Copy StartSeek="7256" EndSeek="10632"/>
</Delta>
<Delta Version="189" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:29:7000">
<Copy StartSeek="0" EndSeek="7503"/>
<Insert>	printk(KERN_ERR "(%s:%d) got a message %u bytes\n", __func__, __LINE__,skb-&gt;data_len);
</Insert>
<Copy StartSeek="7583" EndSeek="10624"/>
</Delta>
<Delta Version="190" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:29:26000">
<Copy StartSeek="0" EndSeek="7034"/>
<Insert>//      	err = audit_receive_msg(skb, nlh);
</Insert>
<Copy StartSeek="7077" EndSeek="10623"/>
</Delta>
<Delta Version="191" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:32:55000">
<Copy StartSeek="0" EndSeek="7468"/>
<Insert>	struct nlmsghdr *h;
</Insert>
<Copy StartSeek="7491" EndSeek="8245"/>
<Insert>	for (h = (struct nlmsghdr *)buf; NLMSG_OK(h, status);
	    h = NLMSG_NEXT(h, status)) {
</Insert>
<Copy StartSeek="8342" EndSeek="8369"/>
<Insert>		if (h-&gt;nlmsg_type == NLMSG_DONE)
</Insert>
<Copy StartSeek="8406" EndSeek="8442"/>
<Insert>		if (h-&gt;nlmsg_type == NLMSG_ERROR) {
</Insert>
<Copy StartSeek="8482" EndSeek="10637"/>
</Delta>
<Delta Version="192" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:35:0000">
<Copy StartSeek="0" EndSeek="8552"/>
<Insert>			if (h-&gt;nlmsg_len &lt; NLMSG_LENGTH (sizeof (struct nlmsgerr))) {
</Insert>
<Copy StartSeek="8619" EndSeek="10639"/>
</Delta>
<Delta Version="193" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:35:3000">
<Copy StartSeek="0" EndSeek="8697"/>
<Insert>		if (h-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
		    h-&gt;nlmsg_type != RTM_DELNEIGH)
</Insert>
<Copy StartSeek="8777" EndSeek="8784"/>
<Insert>			printk("nlmsg_type: %i (%s)\n",(h-&gt;nlmsg_type), 
			       klna_nl_lookup_name(typenames,h-&gt;nlmsg_type));
</Insert>
<Copy StartSeek="8897" EndSeek="8933"/>
<Insert>		switch (h-&gt;nlmsg_type) {
</Insert>
<Copy StartSeek="8962" EndSeek="10649"/>
</Delta>
<Delta Version="194" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:35:28000">
<Copy StartSeek="0" EndSeek="9004"/>
<Insert>			ret = klna_nl_ev_route(h, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="9053" EndSeek="9124"/>
<Insert>			ret = klna_nl_ev_arp(h, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="9171" EndSeek="9279"/>
<Insert>			ret = netlink_interface(h);
</Insert>
<Copy StartSeek="9312" EndSeek="10655"/>
</Delta>
<Delta Version="195" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:35:46000">
<Copy StartSeek="0" EndSeek="8245"/>
<Insert>	for (nlh = (struct nlmsghdr *)buf; NLMSG_OK(nlh, status);
</Insert>
<Copy StartSeek="8296" EndSeek="10647"/>
</Delta>
<Delta Version="196" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:41:57000">
<Copy StartSeek="0" EndSeek="8671"/>
<Insert>#ifdef KLNA_NOARP
</Insert>
<Copy StartSeek="8691" EndSeek="8771"/>
<Insert>#endif
</Insert>
<Copy StartSeek="8780" EndSeek="10651"/>
</Delta>
<Delta Version="197" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:42:21000">
<Copy StartSeek="0" EndSeek="8691"/>
<Insert>		if (nlh-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
		    nlh-&gt;nlmsg_type != RTM_DELNEIGH)
</Insert>
<Copy StartSeek="8803" EndSeek="10683"/>
</Delta>
<Delta Version="198" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:42:53000">
<Copy StartSeek="0" EndSeek="8671"/>
<Insert>//#ifdef KLNA_NOARP
//                if (nlh-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
//                    nlh-&gt;nlmsg_type != RTM_DELNEIGH)
//#endif
</Insert>
<Copy StartSeek="8816" EndSeek="10687"/>
</Delta>
<Delta Version="199" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:43:19000">
<Copy StartSeek="0" EndSeek="8334"/>
<Copy StartSeek="8450" EndSeek="10803"/>
</Delta>
<Delta Version="200" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:45:28000">
<Copy StartSeek="0" EndSeek="7426"/>
<Copy StartSeek="7436" EndSeek="8239"/>
<Copy StartSeek="8256" EndSeek="10830"/>
</Delta>
<Delta Version="201" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:46:29000">
<Copy StartSeek="0" EndSeek="8272"/>
<Insert>	for (nlh = nlmsg_hdr(skb); NLMSG_OK(nlh, status);
</Insert>
<Copy StartSeek="8320" EndSeek="10827"/>
</Delta>
<Delta Version="202" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:46:33000">
<Copy StartSeek="0" EndSeek="7514"/>
<Insert>	printk(KERN_ERR "(%s:%d) got a message %u bytes\n", __func__, __LINE__,bytes);
</Insert>
<Copy StartSeek="7596" EndSeek="10829"/>
</Delta>
<Delta Version="203" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:47:56000">
<Copy StartSeek="0" EndSeek="7596"/>
<Insert>//      while (1) {
//      	char buf[4096];
//      	struct iovec iov = {
//      		.iov_base = buf,
//      		.iov_len = sizeof(buf),
//      	};
//      	struct sockaddr_nl snl;
//      	struct msghdr msg = {
//      		.msg_name = (void*)&amp;snl,
//      		.msg_namelen = sizeof(snl),
//      		.msg_iov = &amp;iov,
//      		.msg_iovlen = 1,
//      	};


//      	status = recvmsg(sock, &amp;msg, 0);
</Insert>
<Copy StartSeek="7596" EndSeek="7638"/>
<Insert>//      	if (ret) {
//      		if (errno == EINTR)
//      			continue;
//      		if (errno == EWOULDBLOCK)
//      			break;
//      		printk("err skb_recv\n");
//      		return;
//      	}
</Insert>
<Copy StartSeek="7638" EndSeek="10244"/>
</Delta>
<Delta Version="204" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:48:29000">
<Copy StartSeek="0" EndSeek="6425"/>
<Insert>static void dump_skb(struct sk_buff *skb) {
</Insert>
<Copy StartSeek="6470" EndSeek="10245"/>
</Delta>
<Delta Version="205" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:48:49000">
<Copy StartSeek="0" EndSeek="6470"/>
<Copy StartSeek="6483" EndSeek="6759"/>
<Insert>}

</Insert>
<Copy StartSeek="6769" EndSeek="10265"/>
</Delta>
<Delta Version="206" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:49:4000">
<Copy StartSeek="0" EndSeek="7796"/>
<Insert>		printk(KERN_ERR "(%s:%d) len %u, nlmsg_type %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="7871" EndSeek="10267"/>
</Delta>
<Delta Version="207" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:49:16000">
<Copy StartSeek="0" EndSeek="7796"/>
<Insert>		pr_debug(KERN_ERR "(%s:%d) len %u, nlmsg_type %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="7877" EndSeek="10273"/>
</Delta>
<Delta Version="208" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:49:34000">
<Copy StartSeek="0" EndSeek="7535"/>
<Insert>	pr_debug(KERN_ERR "(%s:%d) got a message %u bytes\n", __func__, __LINE__,bytes);
</Insert>
<Copy StartSeek="7608" EndSeek="10264"/>
</Delta>
<Delta Version="209" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:49:54000">
<Copy StartSeek="0" EndSeek="7535"/>
<Insert>	pr_debug(KERN_ERR "(%s:%d) got a message %u bytes\n", __func__, bytes);
</Insert>
<Copy StartSeek="7604" EndSeek="7783"/>
<Insert>		pr_debug(KERN_ERR "(%s:%d) nlmsg_len %u, nlmsg_type %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="7860" EndSeek="10256"/>
</Delta>
<Delta Version="210" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:50:10000">
<Copy StartSeek="0" EndSeek="7783"/>
<Insert>		pr_debug(KERN_ERR "%s: nlmsg_len %u, nlmsg_type %u\n", __func__, __LINE__,
</Insert>
<Copy StartSeek="7850" EndSeek="10246"/>
</Delta>
<Delta Version="211" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:50:13000">
<Copy StartSeek="0" EndSeek="8170"/>
<Insert>				printk("error: message truncated");
</Insert>
<Copy StartSeek="8210" EndSeek="10246"/>
</Delta>
<Delta Version="212" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:50:55000">
<Copy StartSeek="0" EndSeek="8375"/>
<Insert>			printk("nlmsg_type: %i (%s)\n",(nlh-&gt;nlmsg_type), 
</Insert>
<Copy StartSeek="8431" EndSeek="10248"/>
</Delta>
<Delta Version="213" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:51:16000">
<Copy StartSeek="0" EndSeek="8923"/>
<Insert>	/* After error care. */
//      	if (msg.msg_flags &amp; MSG_TRUNC) {
//      		printk("error: message truncated");
//
//      	}
//      	if (status) {
//      		printk("error: data remnant size %d", status);
//
//      	}
//      	if (ret) {
//      		printk("error: message parsing\n");
//
//      	}

</Insert>
<Copy StartSeek="8923" EndSeek="8958"/>
<Insert>//      }
</Insert>
<Copy StartSeek="8959" EndSeek="9937"/>
</Delta>
<Delta Version="214" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:51:58000">
<Copy StartSeek="0" EndSeek="7604"/>
<Copy StartSeek="7813" EndSeek="10146"/>
</Delta>
<Delta Version="215" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:54:32000">
<Copy StartSeek="0" EndSeek="7689"/>
<Insert>			printk(KERN_ERR "AUN: no data available?!");
</Insert>
<Copy StartSeek="7737" EndSeek="10146"/>
</Delta>
<Delta Version="216" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:54:46000">
<Copy StartSeek="0" EndSeek="7689"/>
<Insert>			pr_err(KERN_ERR "AUN: no data available?!");
</Insert>
<Copy StartSeek="7723" EndSeek="10132"/>
</Delta>
<Delta Version="217" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:54:51000">
<Copy StartSeek="0" EndSeek="7689"/>
<Insert>			pr_err("no data available?!");
</Insert>
<Copy StartSeek="7723" EndSeek="10132"/>
</Delta>
<Delta Version="218" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:54:56000">
<Copy StartSeek="0" EndSeek="7738"/>
<Insert>		printk(KERN_DEBUG "AUN: recvfrom() error %d\n", -err);
</Insert>
<Copy StartSeek="7797" EndSeek="10134"/>
</Delta>
<Delta Version="219" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:55:7000">
<Copy StartSeek="0" EndSeek="7738"/>
<Insert>		pr_debug(KERN_DEBUG "AUN: recvfrom() error %d\n", -err);
</Insert>
<Copy StartSeek="7781" EndSeek="10118"/>
</Delta>
<Delta Version="220" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:55:13000">
<Copy StartSeek="0" EndSeek="7785"/>
<Insert>	skb = skb_recv_datagram(sk, 0, 1, &amp;ret);
</Insert>
<Copy StartSeek="7834" EndSeek="10125"/>
</Delta>
<Delta Version="221" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:55:18000">
<Copy StartSeek="0" EndSeek="9720"/>
<Insert>	
</Insert>
<Copy StartSeek="9753" EndSeek="10156"/>
</Delta>
<Delta Version="222" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="10:58:56000">
<Copy StartSeek="0" EndSeek="9720"/>
<Insert>	sock-&gt;sk_allocation = GFP_NOFS;
</Insert>
<Copy StartSeek="9755" EndSeek="10158"/>
</Delta>
<Delta Version="223" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:01:43000">
<Copy StartSeek="0" EndSeek="9571"/>
<Insert>
</Insert>
<Copy StartSeek="9571" EndSeek="10157"/>
</Delta>
<Delta Version="224" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:02:7000">
<Copy StartSeek="0" EndSeek="6079"/>
<Copy StartSeek="6109" EndSeek="10187"/>
</Delta>
<Delta Version="225" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:03:43000">
<Copy StartSeek="0" EndSeek="6438"/>
<Insert>	}
</Insert>
<Copy StartSeek="6470" EndSeek="10216"/>
</Delta>
<Delta Version="226" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:03:53000">
<Copy StartSeek="0" EndSeek="7724"/>
<Insert>		if (err == -EAGAIN) {
</Insert>
<Copy StartSeek="7748" EndSeek="10216"/>
</Delta>
<Delta Version="227" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:04:12000">
<Copy StartSeek="0" EndSeek="7797"/>
<Insert>		pr_debug("recvfrom() error %d\n", -err);
</Insert>
<Copy StartSeek="7840" EndSeek="10216"/>
</Delta>
<Delta Version="228" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:04:22000">
<Copy StartSeek="0" EndSeek="5382"/>
<Insert>	int new_neigh;
</Insert>
<Copy StartSeek="5402" EndSeek="10220"/>
</Delta>
<Delta Version="229" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:17:28000">
<Copy StartSeek="0" EndSeek="6083"/>
<Insert>			printk("new arp entry\n");
</Insert>
<Copy StartSeek="6083" EndSeek="6352"/>
<Copy StartSeek="6381" EndSeek="10219"/>
</Delta>
<Delta Version="230" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:17:39000">
<Copy StartSeek="0" EndSeek="2505"/>
<Copy StartSeek="2530" EndSeek="2588"/>
<Insert>	}

</Insert>
<Copy StartSeek="2617" EndSeek="10269"/>
</Delta>
<Delta Version="231" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:21:50000">
<Copy StartSeek="0" EndSeek="124"/>
<Insert>//#include &lt;stdio.h&gt;
</Insert>
<Copy StartSeek="124" EndSeek="10248"/>
</Delta>
<Delta Version="232" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:26:5000">
<Copy StartSeek="0" EndSeek="99"/>
<Insert>#include &lt;linux/errno.h&gt;
</Insert>
<Copy StartSeek="126" EndSeek="10250"/>
</Delta>
<Delta Version="233" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:26:10000">
<Copy StartSeek="0" EndSeek="99"/>
<Insert>//#include &lt;linux/errno.h&gt;
</Insert>
<Copy StartSeek="99" EndSeek="10223"/>
</Delta>
<Delta Version="234" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:26:20000">
<Copy StartSeek="0" EndSeek="50"/>
<Insert>#include &lt;linux/unistd.h&gt;
</Insert>
<Copy StartSeek="78" EndSeek="10225"/>
</Delta>
<Delta Version="235" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:26:24000">
<Copy StartSeek="0" EndSeek="50"/>
<Insert>//#include &lt;linux/unistd.h&gt;
</Insert>
<Copy StartSeek="50" EndSeek="10197"/>
</Delta>
<Delta Version="236" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:26:33000">
<Copy StartSeek="0" EndSeek="2559"/>
<Copy StartSeek="2565" EndSeek="4084"/>
<Insert>
</Insert>
<Copy StartSeek="4091" EndSeek="10209"/>
</Delta>
<Delta Version="237" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:32:38000">
<Copy StartSeek="0" EndSeek="9061"/>
<Insert>//      			ret = klna_ev_link(h, NLMSG_DATA(buf));
			ret = netlink_interface(nlh);
</Insert>
<Copy StartSeek="9144" EndSeek="10208"/>
</Delta>
<Delta Version="238" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:32:53000">
<Copy StartSeek="0" EndSeek="9061"/>
<Insert>			ret = klna_ev_link(h, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="9111" EndSeek="10215"/>
</Delta>
<Delta Version="239" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:33:2000">
<Copy StartSeek="0" EndSeek="9061"/>
<Insert>//      		ret = klna_ev_link(h, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="9107" EndSeek="10211"/>
</Delta>
<Delta Version="240" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:34:9000">
<Copy StartSeek="0" EndSeek="2559"/>
<Insert>#if 0
int netlink_interface(struct nlmsghdr *h)
{
	int len;
	struct ifinfomsg *ifi;
	struct rtattr *tb[IFLA_MAX + 1];
	char *name;
	int i;

	ifi = NLMSG_DATA (h);

	len = h-&gt;nlmsg_len - NLMSG_LENGTH(sizeof(struct ifinfomsg));
	if (len &lt; 0)
		return -1;

	/* Looking up interface name. */
	memset (tb, 0, sizeof tb);
	netlink_parse_rtattr(tb, IFLA_MAX, IFLA_RTA(ifi), len);
	if (tb[IFLA_IFNAME] == NULL)
		return -1;
	name = (char *)RTA_DATA(tb[IFLA_IFNAME]);
	printk("name %s\n",name);
	printk("change %#x\n",ifi-&gt;ifi_change);
	printk("family %u\n",ifi-&gt;ifi_family);
	/* Add interface. */
//      ifp = if_get_by_name(name);

//      ifp-&gt;ifindex = ifi-&gt;ifi_index;
	printk("flags %#x\n",ifi-&gt;ifi_flags &amp; 0x0000fffff);
	printk("mtu %u\n",*(int *)RTA_DATA (tb[IFLA_MTU]));
	/* Hardware type and address. */
	printk("hw_type %#x\n",ifi-&gt;ifi_type);

	if (tb[IFLA_OPERSTATE])
		printk("operstate %u\n", *(unsigned char *)RTA_DATA(tb[IFLA_OPERSTATE]));
	if (tb[IFLA_LINKMODE])
		printk("linkmode %u\n", *(unsigned char *)RTA_DATA(tb[IFLA_LINKMODE]));
	if (tb[IFLA_ADDRESS]) {
		int hw_addr_len;
		#define INTERFACE_HWADDR_MAX 6
		char hw_addr[INTERFACE_HWADDR_MAX];
		hw_addr_len = RTA_PAYLOAD(tb[IFLA_ADDRESS]);

		if (hw_addr_len &gt; INTERFACE_HWADDR_MAX)
			printk("Hardware address is too large: %d", hw_addr_len);
		else {
			memcpy (hw_addr, RTA_DATA(tb[IFLA_ADDRESS]), hw_addr_len);

			for (i = 0; i &lt; hw_addr_len; i++)
				if (hw_addr[i] != 0)
					break;

			if (i == hw_addr_len)
				hw_addr_len = 0;
		}
	}

	return 0;
}
#endif
</Insert>
<Copy StartSeek="2559" EndSeek="8679"/>
</Delta>
<Delta Version="241" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:35:24000">
<Copy StartSeek="0" EndSeek="7575"/>
<Insert>//      		ret = netlink_interface(nlh);
</Insert>
<Copy StartSeek="7575" EndSeek="8639"/>
</Delta>
<Delta Version="242" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:35:42000">
<Copy StartSeek="0" EndSeek="6018"/>
<Insert>
</Insert>
<Copy StartSeek="6018" EndSeek="8638"/>
</Delta>
<Delta Version="243" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:37:8000">
<Copy StartSeek="0" EndSeek="5977"/>
<Insert>//      int error;
</Insert>
<Copy StartSeek="5977" EndSeek="8619"/>
</Delta>
<Delta Version="244" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:37:10000">
<Copy StartSeek="0" EndSeek="5977"/>
<Copy StartSeek="5989" EndSeek="6034"/>
<Insert>	char *buf;
</Insert>
<Copy StartSeek="6036" EndSeek="8621"/>
</Delta>
<Delta Version="245" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:37:14000">
<Copy StartSeek="0" EndSeek="5977"/>
<Insert>	char *buf;
</Insert>
<Copy StartSeek="5989" EndSeek="6336"/>
<Insert>	buf = skb-&gt;data;
</Insert>
<Copy StartSeek="6336" EndSeek="7198"/>
<Copy StartSeek="7217" EndSeek="8622"/>
</Delta>
<Delta Version="246" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:39:44000">
<Copy StartSeek="0" EndSeek="7198"/>
<Insert>		buf = skb-&gt;data;
</Insert>
<Copy StartSeek="7229" EndSeek="7300"/>
<Insert>			ret = klna_nl_ev_route(nlh, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="7337" EndSeek="7408"/>
<Insert>			ret = klna_nl_ev_arp(nlh, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="7443" EndSeek="7500"/>
<Insert>			ret = klna_nl_ev_link(h, NLMSG_DATA(buf));
</Insert>
<Copy StartSeek="7534" EndSeek="8598"/>
</Delta>
<Delta Version="247" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:40:42000">
<Copy StartSeek="0" EndSeek="7500"/>
<Insert>			ret = klna_nl_ev_link(h, buf);
</Insert>
<Copy StartSeek="7536" EndSeek="8600"/>
</Delta>
<Delta Version="248" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:41:21000">
<Copy StartSeek="0" EndSeek="2559"/>
<Copy StartSeek="2651" EndSeek="8692"/>
</Delta>
<Delta Version="249" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:47:27000">
<Copy StartSeek="0" EndSeek="3011"/>
<Copy StartSeek="3058" EndSeek="8739"/>
</Delta>
<Delta Version="250" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:47:50000">
<Copy StartSeek="0" EndSeek="3058"/>
<Insert>	if (ifi-&gt;ifi_family == AF_BRIDGE) {
		if (new_if) {
			printk("bridge if bind\n");
		} else 
			printk("bridge if unbind\n");
	}
</Insert>
<Copy StartSeek="3146" EndSeek="8697"/>
</Delta>
<Delta Version="251" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:48:0000">
<Copy StartSeek="0" EndSeek="3058"/>
<Copy StartSeek="3059" EndSeek="8698"/>
</Delta>
<Delta Version="252" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:48:2000">
<Copy StartSeek="0" EndSeek="1395"/>
<Copy StartSeek="1401" EndSeek="1610"/>
<Insert>
</Insert>
<Copy StartSeek="1617" EndSeek="8710"/>
</Delta>
<Delta Version="253" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:49:25000">
<Copy StartSeek="0" EndSeek="1617"/>
<Copy StartSeek="1618" EndSeek="8711"/>
</Delta>
<Delta Version="254" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:49:26000">
<Copy StartSeek="0" EndSeek="3275"/>
<Insert>			printk("name: %s, flags %#x, type %#x,\n",(char *)RTA_DATA(rta), 
</Insert>
<Copy StartSeek="3343" EndSeek="8710"/>
</Delta>
<Delta Version="255" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:51:15000">
<Copy StartSeek="0" EndSeek="6815"/>
<Insert>//      			struct nlmsgerr *err = (struct nlmsgerr *) NLMSG_DATA (h);
</Insert>
<Copy StartSeek="6815" EndSeek="8640"/>
</Delta>
<Delta Version="256" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:52:6000">
<Copy StartSeek="0" EndSeek="6815"/>
<Insert>			if (nlh-&gt;nlmsg_len &lt; NLMSG_LENGTH (sizeof (struct nlmsgerr))) {
				pr_err("error: message truncated");
			}
</Insert>
<Copy StartSeek="6854" EndSeek="8567"/>
</Delta>
<Delta Version="257" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:52:26000">
<Copy StartSeek="0" EndSeek="6815"/>
<Insert>			pr_err("error: message truncated");
</Insert>
<Copy StartSeek="6843" EndSeek="8556"/>
</Delta>
<Delta Version="258" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:52:33000">
<Copy StartSeek="0" EndSeek="6815"/>
<Insert>			pr_err("error message");
</Insert>
<Copy StartSeek="6845" EndSeek="8558"/>
</Delta>
<Delta Version="259" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:52:37000">
<Copy StartSeek="0" EndSeek="6815"/>
<Insert>			pr_err("error message\n");
</Insert>
<Copy StartSeek="6848" EndSeek="8561"/>
</Delta>
<Delta Version="260" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:52:39000">
<Copy StartSeek="0" EndSeek="6815"/>
<Insert>			pr_err("error nl message\n");
</Insert>
<Copy StartSeek="6848" EndSeek="8561"/>
</Delta>
<Delta Version="261" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:52:45000">
<Copy StartSeek="0" EndSeek="7563"/>
<Insert>
</Insert>
<Copy StartSeek="7563" EndSeek="8560"/>
</Delta>
<Delta Version="262" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:53:27000">
<Copy StartSeek="0" EndSeek="5399"/>
<Insert>#if 0
static void klna_receive_skb(struct sk_buff *skb)
{
	struct nlmsghdr *nlh;
	/*
	 * len MUST be signed for NLMSG_NEXT to be able to dec it below 0
	 * if the nlmsg_len was not aligned
	 */
	int len;
	int err;

	nlh = nlmsg_hdr(skb);
	len = skb-&gt;len;

	while (NLMSG_OK(nlh, len)) {
//      	err = klna_receive_msg(skb, nlh);
		/* if err or if this message says it wants a response */
		if (err || (nlh-&gt;nlmsg_flags &amp; NLM_F_ACK))
			netlink_ack(skb, nlh, err);

		nlh = NLMSG_NEXT(nlh, len);
	}
}
#endif

</Insert>
<Copy StartSeek="5399" EndSeek="8052"/>
</Delta>
<Delta Version="263" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:53:34000">
<Copy StartSeek="0" EndSeek="856"/>
<Insert>char *klna_nl_lookup_name(struct msgnames_t *db,int id)
</Insert>
<Copy StartSeek="919" EndSeek="8059"/>
</Delta>
<Delta Version="264" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:55:2000">
<Copy StartSeek="0" EndSeek="827"/>
<Insert>struct socket *klna_socket;
</Insert>
<Copy StartSeek="862" EndSeek="8066"/>
</Delta>
<Delta Version="265" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:55:4000">
<Copy StartSeek="0" EndSeek="5069"/>
<Insert>static void dump_skb(struct sk_buff *skb) 
</Insert>
<Copy StartSeek="5120" EndSeek="5977"/>
<Insert>	dump_skb(skb);
</Insert>
<Copy StartSeek="6001" EndSeek="8082"/>
</Delta>
<Delta Version="266" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:55:58000">
<Copy StartSeek="0" EndSeek="7845"/>
<Copy StartSeek="7949" EndSeek="8186"/>
</Delta>
<Delta Version="267" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:58:3000">
<Copy StartSeek="0" EndSeek="226"/>
<Insert>
</Insert>
<Copy StartSeek="248" EndSeek="8207"/>
</Delta>
<Delta Version="268" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:58:29000">
<Copy StartSeek="0" EndSeek="7866"/>
<Insert>int klna_nl_close(void)
</Insert>
<Copy StartSeek="7891" EndSeek="8208"/>
</Delta>
<Delta Version="269" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="11:58:56000">
<Copy StartSeek="0" EndSeek="7714"/>
<Insert>int __init klna_nl_init(void)
{
	if (klna_nl_open()) {
		pr_err("netlink error\n");
		return -EINVAL;
	}

	
//      klna_nl_parse_info();
	return 0;
}

</Insert>
<Copy StartSeek="7714" EndSeek="7818"/>
<Insert>
void __exit klna_nl_exit(void)
{
	kernel_sock_shutdown(klna_socket, SHUT_RDWR);
	sock_release(klna_socket);
}
module_init(klna_nl_init);
module_exit(klna_nl_exit);
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Haim Daniel &lt;haimd@marvell.com&gt;");
</Insert>
</Delta>
<Delta Version="270" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:17:15000">
<Copy StartSeek="0" EndSeek="604"/>
<Copy StartSeek="723" EndSeek="7937"/>
</Delta>
<Delta Version="271" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:49:16000">
<Copy StartSeek="0" EndSeek="604"/>
<Insert>static bool noarp;
</Insert>
<Copy StartSeek="627" EndSeek="7941"/>
</Delta>
<Delta Version="272" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:49:21000">
<Copy StartSeek="0" EndSeek="660"/>
<Insert>MODULE_PARM_DESC(notify, "event type: arp, vlan, bridge, nf_ct");
</Insert>
<Copy StartSeek="715" EndSeek="7930"/>
</Delta>
<Delta Version="273" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:49:53000">
<Copy StartSeek="0" EndSeek="7024"/>
<Insert>			ret = klna_nl_ev_arp(nlh, buf);
</Insert>
<Copy StartSeek="7075" EndSeek="7946"/>
</Delta>
<Delta Version="274" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:50:26000">
<Copy StartSeek="0" EndSeek="6963"/>
<Insert>#ifndef KLNA_NOARP
</Insert>
<Copy StartSeek="6963" EndSeek="7066"/>
<Insert>#endif
</Insert>
<Copy StartSeek="7066" EndSeek="7920"/>
</Delta>
<Delta Version="275" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:50:33000">
<Copy StartSeek="0" EndSeek="6518"/>
<Insert>#ifdef KLNA_NOARP
#warning "no support for arp messages!"
		if (nlh-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
		    nlh-&gt;nlmsg_type != RTM_DELNEIGH)
#endif
</Insert>
<Copy StartSeek="6609" EndSeek="6724"/>
<Insert>
</Insert>
<Copy StartSeek="6729" EndSeek="7870"/>
</Delta>
<Delta Version="276" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:51:16000">
<Copy StartSeek="0" EndSeek="6518"/>
<Insert>		if (noarp &amp;&amp; nlh-&gt;nlmsg_type != RTM_NEWNEIGH &amp;&amp;
</Insert>
<Copy StartSeek="6575" EndSeek="7877"/>
</Delta>
<Delta Version="277" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:51:20000">
<Copy StartSeek="0" EndSeek="604"/>
<Insert>static bool noarp = 0;
module_param(noarp, bool, 0644);
MODULE_PARM_DESC(noarp, "avoid reporting arp events");
</Insert>
<Copy StartSeek="718" EndSeek="6521"/>
<Insert>		if (noarp &amp;&amp; 
</Insert>
<Copy StartSeek="6538" EndSeek="6966"/>
<Insert>			if (!noarp)
</Insert>
<Copy StartSeek="6982" EndSeek="7882"/>
</Delta>
<Delta Version="278" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="12:55:24000">
<Copy StartSeek="0" EndSeek="3114"/>
<Insert>	printk("%s: ifi_family: %u\n", __func__, ifi-&gt;ifi_family);
</Insert>
<Copy StartSeek="3176" EndSeek="7884"/>
</Delta>
<Delta Version="279" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="14:10:57000">
<Copy StartSeek="0" EndSeek="204"/>
<Copy StartSeek="235" EndSeek="7915"/>
</Delta>
<Delta Version="280" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:14:13000">
<Copy StartSeek="0" EndSeek="659"/>
<Insert>module_param(no_arp, bool, 0644);
</Insert>
<Copy StartSeek="692" EndSeek="7914"/>
</Delta>
<Delta Version="281" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:17:7000">
<Copy StartSeek="0" EndSeek="635"/>
<Insert>static bool no_arp = 0;
</Insert>
<Copy StartSeek="658" EndSeek="7913"/>
</Delta>
<Delta Version="282" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:17:10000">
<Copy StartSeek="0" EndSeek="5828"/>
<Insert>	pr_debug(KERN_ERR "%s: got a message %u bytes\n", __func__, bytes);
</Insert>
<Copy StartSeek="5888" EndSeek="7904"/>
</Delta>
<Delta Version="283" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:20:29000">
<Copy StartSeek="0" EndSeek="6245"/>
<Insert>		pr_debug(KERN_ERR "%s: nlmsg_len %u, nlmsg_type %u\n", __func__,
</Insert>
<Copy StartSeek="6303" EndSeek="7895"/>
</Delta>
<Delta Version="284" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:20:38000">
<Copy StartSeek="0" EndSeek="5973"/>
<Insert>			pr_err("no data available\n");
</Insert>
<Copy StartSeek="6015" EndSeek="6494"/>
<Insert>			pr_err("nl message error\n");
</Insert>
<Copy StartSeek="6535" EndSeek="7364"/>
<Insert>		pr_err("socket_create err %d\n", rc);
</Insert>
<Copy StartSeek="7412" EndSeek="7632"/>
<Insert>		pr_err("bind err\n");
</Insert>
<Copy StartSeek="7664" EndSeek="7927"/>
</Delta>
<Delta Version="285" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:20:51000">
<Copy StartSeek="0" EndSeek="6167"/>
<Insert>	for (nlh = nlmsg_hdr(skb); NLMSG_OK(nlh, len);
</Insert>
<Copy StartSeek="6229" EndSeek="7941"/>
</Delta>
<Delta Version="286" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:27:56000">
<Copy StartSeek="0" EndSeek="6077"/>
<Insert>//      skb = skb_recv_datagram(sk, 0, 1, &amp;ret);
</Insert>
<Copy StartSeek="6077" EndSeek="7892"/>
</Delta>
<Delta Version="287" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:28:26000">
<Copy StartSeek="0" EndSeek="5973"/>
<Insert>			printk(KERN_ERR"no data available\n");
</Insert>
<Copy StartSeek="6016" EndSeek="7893"/>
</Delta>
<Delta Version="288" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:28:35000">
<Copy StartSeek="0" EndSeek="6460"/>
<Insert>			printk(KERN_ERR"nl message error\n");
</Insert>
<Copy StartSeek="6502" EndSeek="7331"/>
<Insert>		printk(KERN_ERR"socket_create err %d\n", rc);
</Insert>
<Copy StartSeek="7380" EndSeek="7600"/>
<Insert>		printk(KERN_ERR"bind err\n");
</Insert>
<Copy StartSeek="7633" EndSeek="7896"/>
</Delta>
<Delta Version="289" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:28:45000">
<Copy StartSeek="0" EndSeek="7819"/>
<Insert>	kernel_sock_shutdown(klna_socket, SHUT_RDWR);
</Insert>
<Copy StartSeek="7926" EndSeek="7956"/>
</Delta>
<Delta Version="290" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:30:30000">
<Copy StartSeek="0" EndSeek="7792"/>
<Copy StartSeek="7837" EndSeek="8001"/>
</Delta>
<Delta Version="291" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:32:28000">
<Copy StartSeek="0" EndSeek="406"/>
<Insert>
</Insert>
<Copy StartSeek="452" EndSeek="7837"/>
<Insert>#ifndef SHUT_RDWR
#define SHUT_RDWR 2
#endif
</Insert>
<Copy StartSeek="7837" EndSeek="8001"/>
</Delta>
<Delta Version="292" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="15:34:56000">
<Copy StartSeek="0" EndSeek="406"/>
<Insert>#ifndef SHUT_RDWR
#define SHUT_RDWR 2
#endif

</Insert>
<Copy StartSeek="407" EndSeek="7956"/>
</Delta>
<Delta Version="293" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="16:01:20000">
<Copy StartSeek="0" EndSeek="7819"/>
<Insert>//      kernel_sock_shutdown(klna_socket, SHUT_RDWR);
</Insert>
<Copy StartSeek="7819" EndSeek="7902"/>
</Delta>
<Delta Version="294" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="16:33:45000">
<Copy StartSeek="0" EndSeek="278"/>
<Insert>
</Insert>
<Copy StartSeek="305" EndSeek="7928"/>
</Delta>
<Delta Version="295" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:01:43000">
<Copy StartSeek="0" EndSeek="774"/>
<Copy StartSeek="851" EndSeek="8005"/>
</Delta>
<Delta Version="296" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:03:44000">
<Copy StartSeek="0" EndSeek="278"/>
<Insert>#include "klna_kcompat.h"

</Insert>
<Copy StartSeek="279" EndSeek="7979"/>
</Delta>
<Delta Version="297" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:03:49000">
<Copy StartSeek="27" EndSeek="50"/>
<Insert>
</Insert>
<Copy StartSeek="50" EndSeek="261"/>
<Copy StartSeek="262" EndSeek="284"/>
<Copy StartSeek="285" EndSeek="8007"/>
</Delta>
<Delta Version="298" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:04:53000">
<Copy StartSeek="0" EndSeek="435"/>
<Insert>#define KLNA_GRP (RTMGRP_IPV4_ROUTE | RTMGRP_NEIGH | RTNLGRP_LINK)
</Insert>
<Copy StartSeek="517" EndSeek="8022"/>
</Delta>
<Delta Version="299" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:21:36000">
<Copy StartSeek="0" EndSeek="435"/>
<Insert>#define KLNA_GRP (RTMGRP_IPV4_ROUTE | RTMGRP_NEIGH | RTNLGRP_LINK |RTNLGRP_NEIGH)
</Insert>
<Copy StartSeek="518" EndSeek="8023"/>
</Delta>
<Delta Version="300" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:22:11000">
<Copy StartSeek="0" EndSeek="435"/>
<Insert>#define KLNA_GRP (RTMGRP_IPV4_ROUTE | RTMGRP_NEIGH | RTNLGRP_LINK | RTNLGRP_NEIGH)
</Insert>
<Copy StartSeek="503" EndSeek="8008"/>
</Delta>
<Delta Version="301" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:23:3000">
<Copy StartSeek="0" EndSeek="5933"/>
<Insert>
</Insert>
<Copy StartSeek="5933" EndSeek="8007"/>
</Delta>
<Delta Version="302" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:27:27000">
<Copy StartSeek="0" EndSeek="6622"/>
<Insert>		if (no_arp &amp;&amp; 
</Insert>
<Copy StartSeek="6638" EndSeek="8006"/>
</Delta>
<Delta Version="303" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:27:46000">
<Copy StartSeek="0" EndSeek="7221"/>
<Insert>
</Insert>
<Copy StartSeek="7221" EndSeek="8005"/>
</Delta>
<Delta Version="304" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:27:54000">
<Copy StartSeek="0" EndSeek="6839"/>
<Insert>
</Insert>
<Copy StartSeek="6839" EndSeek="8004"/>
</Delta>
<Delta Version="305" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:28:2000">
<Copy StartSeek="0" EndSeek="435"/>
<Insert>#define KLNA_GRP (RTMGRP_IPV4_ROUTE | RTMGRP_NEIGH | RTNLGRP_LINK )
</Insert>
<Copy StartSeek="517" EndSeek="8018"/>
</Delta>
<Delta Version="306" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:31:39000">
<Copy StartSeek="0" EndSeek="435"/>
<Insert>#define KLNA_GRP (RTMGRP_IPV4_ROUTE | RTMGRP_NEIGH | RTNLGRP_LINK |RTNLGRP_NEIGH)
</Insert>
<Copy StartSeek="518" EndSeek="8019"/>
</Delta>
<Delta Version="307" Comment="" NL="\10" Encoding="text" Date="2012/04/16" Time="17:33:51000">
<Copy StartSeek="0" EndSeek="410"/>
<Copy StartSeek="429" EndSeek="453"/>
<Insert>
</Insert>
<Copy StartSeek="523" EndSeek="8107"/>
</Delta>
<Delta Version="308" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:36:16000">
<Copy StartSeek="0" EndSeek="459"/>
<Insert>#warning "CONFIG_ARPD not configured"
</Insert>
<Copy StartSeek="495" EndSeek="8105"/>
</Delta>
<Delta Version="309" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:36:30000">
<Copy StartSeek="0" EndSeek="429"/>
<Insert>#define RTMGRP_NEIGH		4
</Insert>
<Copy StartSeek="454" EndSeek="460"/>
<Insert>#error "CONFIG_ARPD not configured"
</Insert>
<Copy StartSeek="497" EndSeek="8107"/>
</Delta>
<Delta Version="310" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:36:43000">
<Copy StartSeek="0" EndSeek="321"/>
<Insert>#undef pr_fmt
</Insert>
<Copy StartSeek="336" EndSeek="8108"/>
</Delta>
<Delta Version="311" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:36:49000">
<Copy StartSeek="0" EndSeek="321"/>
<Insert>	#undef pr_fmt
</Insert>
<Copy StartSeek="335" EndSeek="8107"/>
</Delta>
<Delta Version="312" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:36:57000">
<Copy StartSeek="0" EndSeek="321"/>
<Insert>#undef pr_fmt
</Insert>
<Copy StartSeek="336" EndSeek="8108"/>
</Delta>
<Delta Version="313" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:37:1000">
<Copy StartSeek="0" EndSeek="430"/>
<Insert>	#define RTMGRP_NEIGH		4
</Insert>
<Copy StartSeek="454" EndSeek="8107"/>
</Delta>
<Delta Version="314" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:37:9000">
<Copy StartSeek="0" EndSeek="929"/>
<Insert>#define SHUT_RDWR 2
</Insert>
<Copy StartSeek="950" EndSeek="8108"/>
</Delta>
<Delta Version="315" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:37:31000">
<Copy StartSeek="0" EndSeek="5174"/>
<Insert>//      	if (rta-&gt;rta_type == NDA_CACHEINFO) {
//      		printk(" NDA_CACHEINFO\n");
//      		continue;
//      	}
	}
</Insert>
<Copy StartSeek="5177" EndSeek="7992"/>
</Delta>
<Delta Version="316" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:38:8000">
<Copy StartSeek="0" EndSeek="3790"/>
<Insert>//      	if (rta-&gt;rta_type == IFLA_LINKINFO) {
//      		struct rtattr *rta = ;
//      		int rtl;
//      		printk("IFLA_LINKINFO\n");
//      		for (; RTA_OK(_rta, _rtl); _rta = RTA_NEXT(_rta, _rtl)) {
//      			if (rta-&gt;rta_type == IFLA_INFO_KIND) {
//      				printk("IFLA_INFO_KIND: %s\n",RTA_DATA(_rta));
//      			}
//      		}
//
//      	}
	}
</Insert>
<Copy StartSeek="3793" EndSeek="7640"/>
</Delta>
<Delta Version="317" Comment="" NL="\10" Encoding="text" Date="2012/04/17" Time="14:38:22000">
<Copy StartSeek="0" EndSeek="7054"/>
<Copy StartSeek="7141" EndSeek="7727"/>
</Delta>
<Delta Version="318" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="10:46:15000">
<Copy StartSeek="0" EndSeek="6903"/>
<Insert>
</Insert>
<Copy StartSeek="6938" EndSeek="7761"/>
</Delta>
<Delta Version="319" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="10:47:9000">
<Copy StartSeek="0" EndSeek="7168"/>
<Copy StartSeek="7264" EndSeek="7857"/>
</Delta>
<Delta Version="320" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="10:54:20000">
<Copy StartSeek="0" EndSeek="7137"/>
<Insert>	arp_tbl.parms.app_probes = 1;
</Insert>
<Copy StartSeek="7169" EndSeek="7858"/>
</Delta>
<Delta Version="321" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="10:58:1000">
<Copy StartSeek="0" EndSeek="6938"/>
<Copy StartSeek="7411" EndSeek="8331"/>
</Delta>
<Delta Version="322" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:36:37000">
<Copy StartSeek="0" EndSeek="6975"/>
<Insert>	atomic_dec(&amp;tbl-&gt;entries);
</Insert>
<Copy StartSeek="6975" EndSeek="6997"/>
<Insert>	int key_len = tbl-&gt;key_len;
	u32 hash_val = tbl-&gt;hash(pkey, dev);

</Insert>
<Copy StartSeek="7017" EndSeek="7156"/>
<Insert>	 if (dev == n-&gt;dev &amp;&amp; !memcmp(n-&gt;primary_key, pkey, key_len)) {
		 neigh_hold(n);
		 NEIGH_CACHE_STAT_INC(tbl, hits);
		 break;
	 }
	}
</Insert>
<Copy StartSeek="7176" EndSeek="8139"/>
</Delta>
<Delta Version="323" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:37:58000">
<Copy StartSeek="0" EndSeek="6997"/>
<Insert>	u32 hash_val = 0;

</Insert>
<Copy StartSeek="7012" EndSeek="7077"/>
<Copy StartSeek="7117" EndSeek="8174"/>
</Delta>
<Delta Version="324" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:38:51000">
<Copy StartSeek="0" EndSeek="7117"/>
<Insert>	for (n = tbl-&gt;hash_buckets[hash_val &amp; tbl-&gt;hash_mask]; n; n = n-&gt;next) {
</Insert>
<Copy StartSeek="7174" EndSeek="8157"/>
</Delta>
<Delta Version="325" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:39:14000">
<Copy StartSeek="0" EndSeek="7191"/>
<Insert>	}
</Insert>
<Copy StartSeek="7222" EndSeek="8185"/>
</Delta>
<Delta Version="326" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:39:35000">
<Copy StartSeek="0" EndSeek="7117"/>
<Insert>	for (n = tbl-&gt;hash_buckets[hash_val]; n; n = n-&gt;next) {
		neigh_hold(n);
		n-&gt;parms-&gt;app_probes = 1;
	}
</Insert>
<Copy StartSeek="7251" EndSeek="8214"/>
</Delta>
<Delta Version="327" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:40:7000">
<Copy StartSeek="0" EndSeek="7012"/>
<Insert>	NEIGH_CACHE_STAT_INC(tbl, lookups);

</Insert>
<Copy StartSeek="7014" EndSeek="8178"/>
</Delta>
<Delta Version="328" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:40:16000">
<Copy StartSeek="0" EndSeek="6938"/>
<Insert>void klna_init_arp_neigh_tbl(void)
</Insert>
<Copy StartSeek="6992" EndSeek="8197"/>
</Delta>
<Delta Version="329" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:40:34000">
<Copy StartSeek="0" EndSeek="7476"/>
<Insert>	arp_tbl.parms.app_probes = 66;
</Insert>
<Copy StartSeek="7512" EndSeek="8201"/>
</Delta>
<Delta Version="330" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:40:54000">
<Copy StartSeek="0" EndSeek="7476"/>
<Insert>	klna_init_arp_neigh_tbl(&amp;arp_tbl)l
</Insert>
<Copy StartSeek="7512" EndSeek="8201"/>
</Delta>
<Delta Version="331" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:40:54000">
<Copy StartSeek="0" EndSeek="7122"/>
<Insert>		for (n = tbl-&gt;hash_buckets[hash_val]; n; n = n-&gt;next) {
</Insert>
<Copy StartSeek="7197" EndSeek="8218"/>
</Delta>
<Delta Version="332" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:42:32000">
<Copy StartSeek="0" EndSeek="7280"/>
<Insert>	return n;
}

</Insert>
<Copy StartSeek="7283" EndSeek="8207"/>
</Delta>
<Delta Version="333" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:43:11000">
<Copy StartSeek="0" EndSeek="6903"/>
<Copy StartSeek="6952" EndSeek="7331"/>
<Insert>
</Insert>
<Copy StartSeek="7368" EndSeek="8292"/>
</Delta>
<Delta Version="334" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:44:37000">
<Copy StartSeek="0" EndSeek="7603"/>
<Insert>	printk(KERN_ERR "(%s:%d) HAIM_DEBUG arp_tbl.id %s\n", __func__, __LINE__,
	       arp_tbl.id);
</Insert>
<Copy StartSeek="7603" EndSeek="8196"/>
</Delta>
<Delta Version="335" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:44:45000">
<Copy StartSeek="0" EndSeek="7518"/>
<Insert>#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,24)
</Insert>
<Copy StartSeek="7566" EndSeek="8195"/>
</Delta>
<Delta Version="336" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:49:12000">
<Copy StartSeek="0" EndSeek="6903"/>
<Insert>#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,24)
</Insert>
<Copy StartSeek="6951" EndSeek="8194"/>
</Delta>
<Delta Version="337" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="11:49:42000">
<Copy StartSeek="0" EndSeek="6986"/>
<Insert>void klna_init_arp_neigh_tbl(struct neigh_table *tbl)
</Insert>
<Copy StartSeek="7021" EndSeek="8175"/>
</Delta>
<Delta Version="338" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="12:49:0000">
<Copy StartSeek="0" EndSeek="6951"/>
<Insert>extern struct neigh_table arp_tbl;
</Insert>
<Copy StartSeek="6952" EndSeek="7011"/>
<Copy StartSeek="7047" EndSeek="8177"/>
</Delta>
<Delta Version="339" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="12:49:13000">
<Copy StartSeek="0" EndSeek="6951"/>
<Insert>
</Insert>
<Copy StartSeek="6986" EndSeek="7045"/>
<Insert>	extern struct neigh_table arp_tbl;
</Insert>
<Copy StartSeek="7045" EndSeek="8175"/>
</Delta>
<Delta Version="340" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="12:49:34000">
<Copy StartSeek="0" EndSeek="7273"/>
<Insert>		}
	}
</Insert>
<Copy StartSeek="7301" EndSeek="8196"/>
</Delta>
<Delta Version="341" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="12:51:21000">
<Copy StartSeek="0" EndSeek="6986"/>
<Insert>void klna_init_arp_neigh_tbl(void)
</Insert>
<Copy StartSeek="7040" EndSeek="8215"/>
</Delta>
<Delta Version="342" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="12:52:2000">
<Copy StartSeek="0" EndSeek="411"/>
<Insert>#ifdef CONFIG_ARPD
</Insert>
<Copy StartSeek="432" EndSeek="456"/>
<Insert>#else
	#error "CONFIG_ARPD not configured"
#endif /* CONFIG_ARPD */
</Insert>
<Copy StartSeek="535" EndSeek="8228"/>
</Delta>
<Delta Version="343" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="16:41:5000">
<Copy StartSeek="0" EndSeek="380"/>
<Insert>#define RTMGRP_IPV4_ROUTE	0x40
//#ifdef CONFIG_ARPD
</Insert>
<Copy StartSeek="472" EndSeek="496"/>
<Insert>//#else
//      #error "CONFIG_ARPD not configured"
</Insert>
<Copy StartSeek="586" EndSeek="971"/>
<Insert>#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(2,6,24)
	#define SHUT_RDWR 2
#endif

</Insert>
<Copy StartSeek="972" EndSeek="8229"/>
</Delta>
<Delta Version="344" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="16:47:20000">
<Copy StartSeek="0" EndSeek="429"/>
<Insert>	#define SHUT_RDWR 2
	  #ifdef CONFIG_ARPD
</Insert>
<Copy StartSeek="468" EndSeek="536"/>
<Insert>#endif
</Insert>
<Copy StartSeek="561" EndSeek="8243"/>
</Delta>
<Delta Version="345" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="16:48:7000">
<Copy StartSeek="0" EndSeek="561"/>
<Insert>#endif
</Insert>
<Copy StartSeek="597" EndSeek="8272"/>
</Delta>
<Delta Version="346" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="16:48:25000">
<Copy StartSeek="0" EndSeek="449"/>
<Copy StartSeek="472" EndSeek="491"/>
<Insert>	#define RTMGRP_NEIGH	4
</Insert>
<Copy StartSeek="493" EndSeek="8273"/>
</Delta>
<Delta Version="347" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="16:49:45000">
<Copy StartSeek="0" EndSeek="449"/>
<Insert>#define RTMGRP_NEIGH	4
</Insert>
<Copy StartSeek="450" EndSeek="577"/>
<Copy StartSeek="600" EndSeek="8274"/>
</Delta>
<Delta Version="348" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="16:50:47000">
<Copy StartSeek="0" EndSeek="450"/>
<Insert>#ifdef CONFIG_ARPD
	
#else
</Insert>
<Copy StartSeek="470" EndSeek="507"/>
<Insert>
</Insert>
<Copy StartSeek="507" EndSeek="8266"/>
</Delta>
<Delta Version="349" Comment="" NL="\10" Encoding="text" Date="2012/04/18" Time="16:50:55000">
<Copy StartSeek="0" EndSeek="449"/>
<Insert>
</Insert>
<Copy StartSeek="449" EndSeek="8265"/>
</Delta>
</DeltaFile>
