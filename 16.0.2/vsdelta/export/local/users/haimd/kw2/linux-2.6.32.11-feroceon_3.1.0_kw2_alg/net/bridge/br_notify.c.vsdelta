<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="0" Comment="" Date="2010/04/02" Time="01:59:14000" NL="\10" Encoding="text">
<Insert>/*
 *	Device event handling
 *	Linux ethernet bridge
 *
 *	Authors:
 *	Lennert Buytenhek		&lt;buytenh@gnu.org&gt;
 *
 *	This program is free software; you can redistribute it and/or
 *	modify it under the terms of the GNU General Public License
 *	as published by the Free Software Foundation; either version
 *	2 of the License, or (at your option) any later version.
 */

#include &lt;linux/kernel.h&gt;
#include &lt;linux/rtnetlink.h&gt;
#include &lt;net/net_namespace.h&gt;

#include "br_private.h"

static int br_device_event(struct notifier_block *unused, unsigned long event, void *ptr);

struct notifier_block br_device_notifier = {
	.notifier_call = br_device_event
};

/*
 * Handle changes in state of network devices enslaved to a bridge.
 *
 * Note: don't care about up/down if bridge itself is down, because
 *     port state is checked when bridge is brought up.
 */
static int br_device_event(struct notifier_block *unused, unsigned long event, void *ptr)
{
	struct net_device *dev = ptr;
	struct net_bridge_port *p = dev-&gt;br_port;
	struct net_bridge *br;

	/* not a port of a bridge */
	if (p == NULL)
		return NOTIFY_DONE;

	br = p-&gt;br;

	switch (event) {
	case NETDEV_CHANGEMTU:
		dev_set_mtu(br-&gt;dev, br_min_mtu(br));
		break;

	case NETDEV_CHANGEADDR:
		spin_lock_bh(&amp;br-&gt;lock);
		br_fdb_changeaddr(p, dev-&gt;dev_addr);
		br_stp_recalculate_bridge_id(br);
		spin_unlock_bh(&amp;br-&gt;lock);
		break;

	case NETDEV_CHANGE:
		br_port_carrier_check(p);
		break;

	case NETDEV_FEAT_CHANGE:
		spin_lock_bh(&amp;br-&gt;lock);
		if (netif_running(br-&gt;dev))
			br_features_recompute(br);
		spin_unlock_bh(&amp;br-&gt;lock);
		break;

	case NETDEV_DOWN:
		spin_lock_bh(&amp;br-&gt;lock);
		if (br-&gt;dev-&gt;flags &amp; IFF_UP)
			br_stp_disable_port(p);
		spin_unlock_bh(&amp;br-&gt;lock);
		break;

	case NETDEV_UP:
		if (netif_carrier_ok(dev) &amp;&amp; (br-&gt;dev-&gt;flags &amp; IFF_UP)) {
			spin_lock_bh(&amp;br-&gt;lock);
			br_stp_enable_port(p);
			spin_unlock_bh(&amp;br-&gt;lock);
		}
		break;

	case NETDEV_UNREGISTER:
		br_del_if(br, dev);
		break;
	}

	/* Events that may cause spanning tree to refresh */
	if (event == NETDEV_CHANGEADDR || event == NETDEV_UP ||
	    event == NETDEV_CHANGE || event == NETDEV_DOWN)
		br_ifinfo_notify(RTM_NEWLINK, p);

	return NOTIFY_DONE;
}
</Insert>
</MostRecent>
</DeltaFile>
