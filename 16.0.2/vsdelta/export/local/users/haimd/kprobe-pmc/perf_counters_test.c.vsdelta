<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="12" Comment="" Date="2012/01/18" Time="16:04:4000" NL="\10" Encoding="text">
<Insert>#include "perf_counters.h"


#define preempt_disable()		do { } while (0)
#define preempt_enable_no_resched()	do { } while (0)
#define preempt_enable()		do { } while (0)
#define preempt_check_resched()		do { } while (0)

#define preempt_disable_notrace()		do { } while (0)
#define preempt_enable_no_resched_notrace()	do { } while (0)
#define preempt_enable_notrace()		do { } while (0)

#define container_of(ptr, type, member) ({			\
	const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);	\
	(type *)( (char *)__mptr - offsetof(type,member) );})

typedef signed long s64;

static inline int atomic_add_return(int i, atomic_t *v)
{
	unsigned long tmp;
	int result;

	smp_mb();

	__asm__ __volatile__("@ atomic_add_return\n"
"1:	ldrex	%0, [%2]\n"
"	add	%0, %0, %3\n"
"	strex	%1, %0, [%2]\n"
"	teq	%1, #0\n"
"	bne	1b"
	: "=&amp;r" (result), "=&amp;r" (tmp)
	: "r" (&amp;v-&gt;counter), "Ir" (i)
	: "cc");

	smp_mb();

	return result;
}

int handler_pre(struct kprobe *p, struct pt_regs *regs)
{
	
 	perf_values_t *pval = container_of(p, perf_values_t, kp);

	preempt_disable();

        pval-&gt;temp.c0 = get_counter_val(0); 
        pval-&gt;temp.c1 = get_counter_val(1); 
        pval-&gt;temp.c2 = get_counter_val(2); 
        pval-&gt;temp.c3 = get_counter_val(3); 

	preempt_enable();
	return 0;
}

#define raw_local_irq_save(x)					\
	({							\
		unsigned long temp;				\
		(void) (&amp;temp == &amp;x);				\
	__asm__ __volatile__(					\
	"mrs	%0, cpsr		@ local_irq_save\n"	\
"	orr	%1, %0, #128\n"					\
"	msr	cpsr_c, %1"					\
	: "=r" (x), "=r" (temp)					\
	:							\
	: "memory", "cc");					\
	})

#define raw_local_irq_restore(x)				\
	__asm__ __volatile__(					\
	"msr	cpsr_c, %0		@ local_irq_restore\n"	\
	:							\
	: "r" (x)						\
	: "memory", "cc")

static inline int atomic_add_return(int i, atomic_t *v)
{
	unsigned long flags;
	int val;

	raw_local_irq_save(flags);
	val = v-&gt;counter;
	v-&gt;counter = val += i;
	raw_local_irq_restore(flags);

	return val;
}
#define atomic_add(i, v)	(void) atomic_add_return(i, v)

#define atomic_inc(v)		atomic_add(1, v)
static int handler_post(struct kretprobe_instance *ri, struct pt_regs *regs)
{
	perf_values_t * pval; 
	s64 c[4];

#ifdef HISTOGRAM_SUPPORT	
	int nrcounters = 4;
	int i, j, nfs,flag;
	s64 kval;
#endif

	preempt_disable();
	c[0] = get_counter_val(0); 
	c[1] = get_counter_val(1); 
	c[2] = get_counter_val(2); 
	c[3] = get_counter_val(3); 
	
	preempt_enable();

	pval = container_of(ri-&gt;rp, perf_values_t, kretp);

	c[0] -= pval-&gt;temp.c0;
	c[1] -= pval-&gt;temp.c1;
	c[2] -= pval-&gt;temp.c2;
	c[3] -= pval-&gt;temp.c3;

#ifdef HISTOGRAM_SUPPORT	
	for(i = 0; i &lt; nrcounters; i++) {
		flag = 0;
		kval = c[i] &gt;&gt; pval-&gt;hist[i].res_shift;
		for(j = 0; j &lt; pval-&gt;hist[i].next_free_slot; j++) {
			if(kval == pval-&gt;hist[i].value[j].key) {
				pval-&gt;hist[i].value[j].val++;
				flag = 1;
				break;
			}
		}

		if(flag)
			continue;

		if(pval-&gt;hist[i].next_free_slot == HISTARR_SIZE) {
			pval-&gt;hist[i].lost++;
		} else {
			nfs = pval-&gt;hist[i].next_free_slot++;
			pval-&gt;hist[i].value[nfs].key = c[i] &gt;&gt; pval-&gt;hist[i].res_shift;	
			pval-&gt;hist[i].value[nfs].val = 1;	
		}
	}
#endif

        pval-&gt;cumulative.c0 += c[0];
        pval-&gt;cumulative.c1 += c[1];
        pval-&gt;cumulative.c2 += c[2];
        pval-&gt;cumulative.c3 += c[3];

	atomic_inc(&amp;pval-&gt;nrexec);
	
        return 0;
}
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="15:55:17000">
<Copy StartSeek="0" EndSeek="28"/>
<Copy StartSeek="385" EndSeek="2008"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="15:56:46000">
<Copy StartSeek="0" EndSeek="27"/>
<Insert>
</Insert>
<Copy StartSeek="52" EndSeek="53"/>
<Copy StartSeek="54" EndSeek="2033"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="15:57:21000">
<Copy StartSeek="0" EndSeek="52"/>
<Insert>

</Insert>
<Copy StartSeek="212" EndSeek="2191"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="15:57:41000">
<Copy StartSeek="0" EndSeek="211"/>
<Insert>
</Insert>
<Copy StartSeek="325" EndSeek="2304"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="15:58:7000">
<Copy StartSeek="0" EndSeek="324"/>
<Insert>
</Insert>
<Copy StartSeek="671" EndSeek="2650"/>
</Delta>
<Delta Version="5" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="16:00:14000">
<Copy StartSeek="0" EndSeek="27"/>
<Insert>typedef signed long s64;
</Insert>
<Copy StartSeek="385" EndSeek="544"/>
<Copy StartSeek="570" EndSeek="1030"/>
<Insert>#define preempt_disable()		do { } while (0)
#define preempt_enable_no_resched()	do { } while (0)
#define preempt_enable()		do { } while (0)
#define preempt_check_resched()		do { } while (0)

#define preempt_disable_notrace()		do { } while (0)
#define preempt_enable_no_resched_notrace()	do { } while (0)
#define preempt_enable_notrace()		do { } while (0)

</Insert>
<Copy StartSeek="1031" EndSeek="2654"/>
</Delta>
<Delta Version="6" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="16:00:30000">
<Copy StartSeek="0" EndSeek="570"/>
<Insert>static inline void atomic_inc(atomic_t *v)
{
	asm volatile(LOCK_PREFIX "incl %0"
		     : "+m" (v-&gt;counter));
}

</Insert>
<Copy StartSeek="570" EndSeek="916"/>
<Insert>

</Insert>
<Copy StartSeek="1029" EndSeek="2652"/>
</Delta>
<Delta Version="7" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="16:00:41000">
<Copy StartSeek="0" EndSeek="916"/>
<Insert>static inline void atomic_inc(atomic_t *v)
{
	asm volatile(LOCK_PREFIX "incl %0"
		     : "+m" (v-&gt;counter));
}
</Insert>
<Copy StartSeek="1059" EndSeek="1416"/>
<Copy StartSeek="1456" EndSeek="2723"/>
</Delta>
<Delta Version="8" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="16:01:38000">
<Copy StartSeek="0" EndSeek="1416"/>
<Copy StartSeek="1683" EndSeek="2990"/>
</Delta>
<Delta Version="9" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="16:02:48000">
<Copy StartSeek="0" EndSeek="1416"/>
<Insert>
</Insert>
<Copy StartSeek="1712" EndSeek="3285"/>
</Delta>
<Delta Version="10" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="16:03:10000">
<Copy StartSeek="0" EndSeek="1712"/>
<Copy StartSeek="1871" EndSeek="3444"/>
</Delta>
<Delta Version="11" Comment="" NL="\10" Encoding="text" Date="2012/01/18" Time="16:03:38000">
<Copy StartSeek="0" EndSeek="916"/>
<Insert>//static inline void atomic_inc(atomic_t *v)
//{
//        asm volatile(LOCK_PREFIX "incl %0"
//                     : "+m" (v-&gt;counter));
//}

</Insert>
<Copy StartSeek="916" EndSeek="3300"/>
</Delta>
</DeltaFile>
