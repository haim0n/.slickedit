<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="1" Comment="" Date="2012/01/03" Time="11:13:50000" NL="\10" Encoding="utf8">
<Insert>=surround_with_finally finally {
                       %\m sur_text -indent%
                       }
=surround_with_include_once(macro "Symbol"
                            )
 #ifndef %(macro)
 #define %(macro)
 %\m sur_text%
 #endif // %(macro)
=surround_with_type_union typdef union %\c {
                          %\m sur_text -indent%
                          };
=surround_with_if if (%\c) {
                  %\m sur_text -indent%
                  }
=surround_with_switch switch (%\c) {
                      %\m sur_text%
                      }
=surround_with_type_struct typedef struct %\c {
                           %\m sur_text -indent%
                           };
=surround_with_new_cpp_file #include &lt;iostream&gt;
                            %\S
                            using namespace std;
                            %\S
                            int main (int argc, char *argv[])
                            {
                            %\m sur_text -indent%
                            %\ireturn(0);
                            }
                            %\S
=surround_with_while while (%\c) {
                     %\m sur_text -indent%
                     }
=surround_with_catch catch (%\c) {
                     %\m sur_text -indent%
                     }
=surround_with_try try {
                   %\m sur_text -indent%
                   }
pk printk("%\c\n");
=surround_with_do...while do {
                          %\m sur_text -indent%
                          } while (%\c);
=surround_with_case case %\c:
                    %\m sur_text -indent%
                    break;
=surround_with_union union {
                     %\m sur_text -indent%
                     } %\c;
=surround_with_struct struct {
                      %\m sur_text -indent%
                      } %\c;
=surround_with_new_c_file #include &lt;stdio.h&gt;
                          %\S
                          int main (int argc, char *argv[])
                          {
                          %\m sur_text -indent%
                          %\ireturn(0);
                          }
                          %\S
                          %\S
=surround_with_if...else if (%\c) {
                         %\m sur_text -indent%
                         } else {
                         %\m sur_text -indent%
                         }
dbg printk(KERN_ERR "(%%s:%%d) %\c\n", __func__, __LINE__);
=surround_with_braces {
                      %\m sur_text -indent%
                      }
=surround_with_default default:
                       %\m sur_text -indent%
fixme /* HAIM FIXME : %\c */
=surround_with_if_condition if (%\m sur_text -stripend ;%) {
                            %\i%\c
                            }

=surround_with_try...catch try {
                           %\m sur_text -indent%
                           } catch (%\c) { %\S
                           }
=surround_with_try...catch...finally try {
                                     %\m sur_text -indent%
                                     } catch (%\c) { %\S
                                     } finally {
                                     }
=surround_with_#if...else %\m begin_line%#if %\c
                          %\m sur_text%
                          %\m begin_line%#else
                          %\m sur_text%
                          %\m begin_line%#endif
=surround_with_static_cast static_cast&lt;%\c&gt;(%\m sur_text%)
=surround_with_#ifdef %\m begin_line%#ifdef %\c
                      %\m sur_text%
                      %\m begin_line%#endif
=surround_with_#ifndef %\m begin_line%#ifndef %\c
                       %\m sur_text%
                       %\m begin_line%#endif
=surround_with_const_cast const_cast&lt;%\c&gt;(%\m sur_text%)
=surround_with_try...finally try {
                             %\m sur_text -indent%
                             } finally {
                             %\i%\c
                             }
=surround_with_#if %\m begin_line%#if %\c
                   %\m sur_text%
                   %\m begin_line%#endif
=surround_with_dynamic_cast dynamic_cast&lt;%\c&gt;(%\m sur_text%)
=surround_with_for for (%\c) {
                   %\m sur_text -indent%
                   }
=surround_with_reinterpret_cast reinterpret_cast&lt;%\c&gt;(%\m sur_text%)
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="utf8" Date="2012/01/01" Time="16:34:55000">
<Copy StartSeek="0" EndSeek="103"/>
<Insert>=surround_with_const_cast const_cast&lt;%\c&gt;(%\m sur_text%)
</Insert>
<Copy StartSeek="103" EndSeek="369"/>
<Insert>=surround_with_#if %\m begin_line%#if %\c
                   %\m sur_text%
                   %\m begin_line%#endif
</Insert>
<Copy StartSeek="369" EndSeek="555"/>
<Insert>=surround_with_reinterpret_cast reinterpret_cast&lt;%\c&gt;(%\m sur_text%)
</Insert>
<Copy StartSeek="555" EndSeek="1190"/>
<Insert>=surround_with_#ifdef %\m begin_line%#ifdef %\c
                      %\m sur_text%
                      %\m begin_line%#endif
</Insert>
<Copy StartSeek="1190" EndSeek="1291"/>
<Insert>=surround_with_try...finally try {
                             %\m sur_text -indent%
                             } finally {
                             }
</Insert>
<Copy StartSeek="1291" EndSeek="1717"/>
<Insert>=surround_with_try...catch try {
                           %\m sur_text -indent%
                           } catch () {
                           }
=surround_with_try...catch...finally try {
                                     %\m sur_text -indent%
                                     } catch () {
                                     } finally {
                                     }
=surround_with_static_cast static_cast&lt;%\c&gt;(%\m sur_text%)
</Insert>
<Copy StartSeek="1717" EndSeek="2411"/>
<Insert>=surround_with_for for (%\c) {
                   %\m sur_text -indent%
                   }
</Insert>
<Copy StartSeek="2411" EndSeek="2503"/>
<Insert>=surround_with_dynamic_cast dynamic_cast&lt;%\c&gt;(%\m sur_text%)
</Insert>
<Copy StartSeek="2503" EndSeek="2609"/>
<Copy StartSeek="3141" EndSeek="3365"/>
<Insert>=surround_with_if_condition if (%\m sur_text -stripend ;%) {
                            %\i%\c
                            }
</Insert>
<Copy StartSeek="3552" EndSeek="3684"/>
</Delta>
</DeltaFile>
