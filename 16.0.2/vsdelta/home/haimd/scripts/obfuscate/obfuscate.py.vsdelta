<!DOCTYPE DeltaFile SYSTEM "http://www.slickedit.com/dtd/vse/vsdelta/9.0/vsdelta.dtd">
<DeltaFile FormatVersion="9.0.0">
<MostRecent Version="5" Comment="" Date="2013/05/27" Time="17:33:21000" NL="\10" Encoding="text">
<Insert>#!/usr/bin/python

import sys
import os
import os.path
import subprocess
import re
import filecmp
import optparse
import shutil
import string
import datetime
import tempfile
import xml.etree.ElementTree


def get_function_names(header_file):
    def hdr2swigxml(header_file):
        tmpdirname=tempfile.mkdtemp()
        oname='%s/x.xml' % tmpdirname
        iname='%s/x.i' % tmpdirname

        h_i=open(iname,'w')
        h_i.write('''
// %s swig interface
%%module xxx
%%include %s
''' % (header_file,header_file))
        h_i.close()
        os.system('swig -xml -o %s %s ' % (oname,iname))
        return (tmpdirname,oname)

    def swigxml2functions(swigxml):
        function_names=[]
        etree = xml.etree.ElementTree.parse(swigxml)
        alists = etree.findall('./include/include/cdecl/attributelist')
        for alist in alists:
            attribute_tags = alist.findall('attribute')
            for attribute_tag in attribute_tags:
                if attribute_tag.attrib['name'] == 'name':
                    name_attr=attribute_tag.attrib['value']
                if attribute_tag.attrib['name'] == 'kind' and attribute_tag.attrib['value'] == 'function':
                    function_names.append(name_attr)
        return function_names

    (tmpdirname,swigxml)=hdr2swigxml(header_file)
    function_names=swigxml2functions(swigxml)
    shutil.rmtree(tmpdirname)
    return function_names            

    

    

class BinUtil:
    def __init__(self,cmd,cross_compile=None):
        self.cmd = cmd
        if not cross_compile:
            try:
                self.cross_compile = os.environ['CROSS_COMPILE']
            except:
                self.cross_compile = ''

        self.full_cmd='%s%s' % (self.cross_compile,self.cmd)        


    def run(self,*args):
        cmdline = self.full_cmd
        for a in args:
            cmdline = cmdline + ' %s' % a

        print 'Running cmd: %s' % cmdline    
        p = subprocess.Popen([cmdline], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        s=''
        if p.stdout:
            s=s+p.stdout.read()
        return s    
        
        

class Objcopy(BinUtil):
    def __init__(self,cross_compile=None):
        BinUtil.__init__(self,'objcopy',cross_compile)



    
class NmLine:
    def __init__(self,line):
        l=line[9:].split(' ')
        self.type=l[0] 
        self.addr = line[:9]
        self.symbol = l[1]
  


class Nm(BinUtil):
    def __init__(self,cross_compile=None):
        BinUtil.__init__(self,'nm',cross_compile)

    def parse(self,nm_output):
        lines = nm_output.split('\n')
        result=[]
        for line in lines:
            if not line or len(line) == 0:
                continue
            result.append(NmLine(line))
        return result


    

        
class Obfuscator:
    def __init__(self,input_file,output_file,redefine_file,backup_file,functions_to_keep=[], 
        func_keep_prefix, sym_replacement):
        self.input_file = input_file
        self.output_file = output_file
        self.redefine_file = redefine_file
        self.backup_file = backup_file
        self.func_keep_prefix = func_keep_prefix
        self.symbol_replacement = sym_replacement
        self.functions_to_keep = functions_to_keep



    def is_symbol_to_keep(self,s):
        if self.functions_to_keep and len(self.functions_to_keep) &gt; 0:
            if s in self.functions_to_keep:
                return 1
            return 0
        if s.startswith(self.func_keep_prefix):
            return 1
        return 0

    def create_sym_replacement(self,s,count):
        return '%s%d' % (self.symbol_replacement,count)


    def write_redefines(self):
        print 'Creating symbol renaming file %s' % self.redefine_file
        count=0
        f = open(self.redefine_file,'w')
        f.write('''#
#
# File automatically generated by obfuscate.py
# %s
#
#
''' % str(datetime.datetime.now()))
                
        nm = Nm()
        s = nm.run('--defined-only',self.input_file)
        symbol_list = nm.parse(s)
        symbol_map={}
        for l in symbol_list:
            if self.is_symbol_to_keep(l.symbol):
                continue
            old_sym = l.symbol
            if symbol_map.has_key(old_sym):
                continue
            else:
                symbol_map[old_sym] = l
            new_sym = self.create_sym_replacement(old_sym,count)
            count = count+1
            line = '%s %s\n' % (old_sym,new_sym)
            f.write(line)
        f.close()            


    def save_backup(self):
        print 'Saving backup copy of %s into %s' % (self.input_file,self.backup_file)
        shutil.copyfile(self.input_file,self.backup_file)



    def redefine(self):
        objcopy=Objcopy()
        objcopy.run('--strip-debug --redefine-syms=%s' % self.redefine_file,self.input_file,self.output_file)





if __name__ == '__main__':
    input_file=None
    output_file=None
    backup_file=None
    output = None
    input = None
    redefinition_file=None
    dpa_api=None
    
    op=optparse.OptionParser()	
    op.add_option("-o","--ofile",dest="output_file",default=output_file,type='string',help="output_file")
    op.add_option("-i","--ifile",dest="input_file",default=input_file,type='string',help="input_file")
    op.add_option("-b","--bfile",dest="backup_file",default=backup_file,type='string',help="backup_file")
    op.add_option("-r","--rfile",dest="redefinition_file",default=redefinition_file,type='string',help="redefinition_file")
    op.add_option("-m","--dpaapi",dest="dpa_api",default=dpa_api,type='string',help="dpa api header file")


	
    (options,args) = op.parse_args()

    if options.output_file:
        output_file=options.output_file

    if options.input_file:
        input_file=options.input_file

    if options.backup_file:
        backup_file=options.backup_file

    if options.redefinition_file:
        redefinition_file=options.redefinition_file
    else:
        redefinition_file=os.path.join(os.path.dirname(input_file),'redefines.txt')

    if options.dpa_api:
        dpa_api=options.dpa_api

    if not input_file or not output_file or not backup_file or not redefinition_file:
        print 'Input/Output not specified'
        sys.exit(1)

    if dpa_api:
        functions_to_keep=get_function_names(dpa_api)
        
    
    o = Obfuscator(input_file,output_file,redefinition_file,backup_file,
        functions_to_keep, '__dpasdk_', )
    o.save_backup()
    o.write_redefines()
    o.redefine()
</Insert>
</MostRecent>
<Delta Version="0" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="14:37:45000">
<Copy StartSeek="0" EndSeek="2823"/>
<Insert>    def __init__(self,input_file,output_file,redefine_file,backup_file,functions_to_keep=[]):
</Insert>
<Copy StartSeek="2935" EndSeek="3093"/>
<Insert>        self.symbols_to_keep='dpa_'
</Insert>
<Copy StartSeek="3130" EndSeek="3422"/>
<Insert>        if s.startswith(self.symbols_to_keep):
</Insert>
<Copy StartSeek="3470" EndSeek="6452"/>
</Delta>
<Delta Version="1" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="17:32:17000">
<Copy StartSeek="0" EndSeek="3093"/>
<Insert>        self.func_keep_prefix='dpa_'
</Insert>
<Copy StartSeek="3140" EndSeek="6462"/>
</Delta>
<Delta Version="2" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="17:32:31000">
<Copy StartSeek="0" EndSeek="2823"/>
<Insert>    def __init__(self,input_file,output_file,redefine_file,backup_file,functions_to_keep=[], func_keep_prefix):
</Insert>
<Copy StartSeek="2961" EndSeek="3166"/>
<Insert>        self.symbol_replacement='__dpasdk_'
</Insert>
<Copy StartSeek="3225" EndSeek="6503"/>
</Delta>
<Delta Version="3" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="17:32:58000">
<Copy StartSeek="0" EndSeek="3119"/>
<Insert>        self.func_keep_prefix=func_keep_prefix
        self.symbol_replacement=sym_replacement'__dpasdk_'
        self.functions_to_keep=functions_to_keep
</Insert>
<Copy StartSeek="3280" EndSeek="6509"/>
</Delta>
<Delta Version="4" Comment="" NL="\10" Encoding="text" Date="2013/05/27" Time="17:33:3000">
<Copy StartSeek="0" EndSeek="3168"/>
<Insert>        self.symbol_replacement = sym_replacement'__dpasdk_'
</Insert>
<Copy StartSeek="3218" EndSeek="6346"/>
<Insert>    o = Obfuscator(input_file,output_file,redefinition_file,backup_file,functions_to_keep)
</Insert>
<Copy StartSeek="6461" EndSeek="6522"/>
</Delta>
</DeltaFile>
